<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.0 (Python 2.7.12 on linux2)" generated="20161207 04:51:50.858">
<suite id="s1" name="Tests" source="/tmp/root/2317/obmc-robot/tests">
<suite id="s1-s1" name="Security" source="/tmp/root/2317/obmc-robot/tests/security">
<suite id="s1-s1-s1" name="Test Ssl" source="/tmp/root/2317/obmc-robot/tests/security/test_ssl.robot">
<test id="s1-s1-s1-t1" name="Test SSL Connection">
<kw library="rest_client" name="Initialize OpenBMC">
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 04:51:51.505" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161207 04:51:51.505" endtime="20161207 04:51:51.505"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 04:51:51.506" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161207 04:51:51.505" endtime="20161207 04:51:51.506"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 04:51:51.507" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161207 04:51:51.506" endtime="20161207 04:51:51.507"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 04:51:51.507" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161207 04:51:51.507" endtime="20161207 04:51:51.507"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 04:51:51.852" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 04:51:51.852" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:51:51.507" endtime="20161207 04:51:51.852"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:51:51.854" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:51:51.853" endtime="20161207 04:51:51.854"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:51.504" endtime="20161207 04:51:51.854"></status>
</kw>
<kw type="teardown" library="openbmc_ffdc" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<status status="PASS" starttime="20161207 04:51:51.855" endtime="20161207 04:51:51.861"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20161207 04:51:51.863" level="INFO" html="yes">Created directory '&lt;a href="file:///tmp/root/2317/obmc-robot/logs"&gt;/tmp/root/2317/obmc-robot/logs&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161207 04:51:51.862" endtime="20161207 04:51:51.863"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20161207 04:51:51.865" level="FAIL">File '/tmp/root/2317/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status status="FAIL" starttime="20161207 04:51:51.864" endtime="20161207 04:51:51.865"></status>
</kw>
<msg timestamp="20161207 04:51:51.865" level="INFO">${exist} = False</msg>
<status status="PASS" starttime="20161207 04:51:51.863" endtime="20161207 04:51:51.865"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20161207 04:51:51.879" level="INFO" html="yes">Created file '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/test_history.txt"&gt;/tmp/root/2317/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161207 04:51:51.878" endtime="20161207 04:51:51.880"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:51.866" endtime="20161207 04:51:51.880"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20161207 04:51:51.882" level="INFO">${cur_time} = 2016-12-07 04:51:51:881228</msg>
<status status="PASS" starttime="20161207 04:51:51.881" endtime="20161207 04:51:51.882"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20161207 04:51:51.883" level="INFO">${cur_time} = 20161207045151881228</msg>
<status status="PASS" starttime="20161207 04:51:51.882" endtime="20161207 04:51:51.883"></status>
</kw>
<msg timestamp="20161207 04:51:51.883" level="INFO">${cur_time} = 20161207045151881228</msg>
<status status="PASS" starttime="20161207 04:51:51.880" endtime="20161207 04:51:51.884"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20161207 04:51:51.885" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/test_history.txt"&gt;/tmp/root/2317/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161207 04:51:51.884" endtime="20161207 04:51:51.886"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:51.861" endtime="20161207 04:51:51.886"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:51.854" endtime="20161207 04:51:51.886"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status status="PASS" starttime="20161207 04:51:51.504" endtime="20161207 04:51:51.887" critical="yes"></status>
</test>
<kw type="teardown" library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20161207 04:51:51.889" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20161207 04:51:51.888" endtime="20161207 04:51:51.889"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status status="PASS" starttime="20161207 04:51:50.885" endtime="20161207 04:51:51.889"></status>
</suite>
<status status="PASS" starttime="20161207 04:51:50.883" endtime="20161207 04:51:51.891"></status>
</suite>
<suite id="s1-s2" name="Test Association" source="/tmp/root/2317/obmc-robot/tests/test_association.robot">
<kw type="setup" name="Suite Initialization Setup">
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20161207 04:51:51.969" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" starttime="20161207 04:51:51.969" endtime="20161207 04:51:51.969"></status>
</kw>
<msg timestamp="20161207 04:51:51.970" level="INFO">${has_host} = False</msg>
<status status="PASS" starttime="20161207 04:51:51.968" endtime="20161207 04:51:51.970"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:51:51.975" endtime="20161207 04:51:51.976"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:51.970" endtime="20161207 04:51:51.976"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20161207 04:51:51.983" level="INFO">${port_num} = 22</msg>
<status status="PASS" starttime="20161207 04:51:51.982" endtime="20161207 04:51:51.983"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20161207 04:51:51.984" level="INFO">${SSH_PORT} = 22</msg>
<status status="PASS" starttime="20161207 04:51:51.983" endtime="20161207 04:51:51.984"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20161207 04:51:51.985" level="INFO">${https_num} = 443</msg>
<status status="PASS" starttime="20161207 04:51:51.984" endtime="20161207 04:51:51.985"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20161207 04:51:51.986" level="INFO">${AUTH_URI} = https://9.3.23.30:443</msg>
<status status="PASS" starttime="20161207 04:51:51.985" endtime="20161207 04:51:51.986"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:51.982" endtime="20161207 04:51:51.986"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:51.976" endtime="20161207 04:51:51.986"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20161207 04:51:51.987" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" starttime="20161207 04:51:51.987" endtime="20161207 04:51:51.988"></status>
</kw>
<msg timestamp="20161207 04:51:51.988" level="INFO">${has_port} = False</msg>
<status status="PASS" starttime="20161207 04:51:51.986" endtime="20161207 04:51:51.988"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:51:51.996" endtime="20161207 04:51:51.997"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:51:51.997" endtime="20161207 04:51:51.998"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:51.995" endtime="20161207 04:51:51.998"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:51.989" endtime="20161207 04:51:51.998"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20161207 04:51:51.999" level="INFO">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg timestamp="20161207 04:51:54.383" level="INFO">Read output: 7[r[999;999H[6n</msg>
<status status="PASS" starttime="20161207 04:51:51.999" endtime="20161207 04:51:54.383"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:51.967" endtime="20161207 04:51:54.383"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Clear all logs</arg>
</arguments>
<kw name="Clear all logs">
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>/org/openbmc/records/events/action/clear</arg>
<arg>data=${NIL}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 04:51:54.387" level="INFO">${base_uri} = /org/openbmc/records/events/action/clear</msg>
<status status="PASS" starttime="20161207 04:51:54.387" endtime="20161207 04:51:54.387"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 04:51:54.388" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161207 04:51:54.388" endtime="20161207 04:51:54.388"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:51:54.389" endtime="20161207 04:51:54.389"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:51:54.396" level="INFO">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161207 04:51:54.395" endtime="20161207 04:51:54.396"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:51:54.397" level="INFO">URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161207 04:51:54.397" endtime="20161207 04:51:54.397"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:54.396" endtime="20161207 04:51:54.397"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:54.394" endtime="20161207 04:51:54.397"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:54.389" endtime="20161207 04:51:54.397"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 04:51:54.398" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161207 04:51:54.398" endtime="20161207 04:51:54.399"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 04:51:54.400" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161207 04:51:54.400" endtime="20161207 04:51:54.400"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 04:51:54.401" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161207 04:51:54.400" endtime="20161207 04:51:54.401"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 04:51:54.402" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161207 04:51:54.401" endtime="20161207 04:51:54.402"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 04:51:54.796" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 04:51:54.796" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:51:54.402" endtime="20161207 04:51:54.796"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:51:54.797" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:51:54.796" endtime="20161207 04:51:54.797"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:54.398" endtime="20161207 04:51:54.797"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 04:51:55.035" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/clear, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 04:51:55.035" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:51:54.798" endtime="20161207 04:51:55.035"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:51:55.041" level="INFO">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:51:55.040" endtime="20161207 04:51:55.041"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:51:55.042" level="INFO">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:51:55.042" endtime="20161207 04:51:55.042"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:55.041" endtime="20161207 04:51:55.042"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:55.040" endtime="20161207 04:51:55.043"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:55.035" endtime="20161207 04:51:55.043"></status>
</kw>
<msg timestamp="20161207 04:51:55.043" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:51:54.386" endtime="20161207 04:51:55.043"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:51:55.044" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:51:55.043" endtime="20161207 04:51:55.044"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>/org/openbmc/records/events/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 04:51:55.045" level="INFO">${base_uri} = /org/openbmc/records/events/</msg>
<status status="PASS" starttime="20161207 04:51:55.045" endtime="20161207 04:51:55.045"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:51:55.052" level="INFO">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status status="PASS" starttime="20161207 04:51:55.051" endtime="20161207 04:51:55.052"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:51:55.053" level="INFO">URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status status="PASS" starttime="20161207 04:51:55.053" endtime="20161207 04:51:55.053"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:55.052" endtime="20161207 04:51:55.054"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:55.050" endtime="20161207 04:51:55.054"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:55.045" endtime="20161207 04:51:55.054"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 04:51:55.055" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161207 04:51:55.055" endtime="20161207 04:51:55.055"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 04:51:55.056" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161207 04:51:55.056" endtime="20161207 04:51:55.056"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 04:51:55.057" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161207 04:51:55.056" endtime="20161207 04:51:55.057"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 04:51:55.058" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161207 04:51:55.057" endtime="20161207 04:51:55.058"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 04:51:55.533" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 04:51:55.533" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:51:55.058" endtime="20161207 04:51:55.533"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:51:55.534" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:51:55.533" endtime="20161207 04:51:55.534"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:55.054" endtime="20161207 04:51:55.534"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 04:51:55.603" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/, headers=None </msg>
<msg timestamp="20161207 04:51:55.603" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:51:55.535" endtime="20161207 04:51:55.603"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:51:55.609" level="INFO">${msg} = Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:51:55.608" endtime="20161207 04:51:55.609"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:51:55.610" level="INFO">Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:51:55.610" endtime="20161207 04:51:55.610"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:55.609" endtime="20161207 04:51:55.610"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:55.608" endtime="20161207 04:51:55.611"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:55.603" endtime="20161207 04:51:55.611"></status>
</kw>
<msg timestamp="20161207 04:51:55.611" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:51:55.044" endtime="20161207 04:51:55.611"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20161207 04:51:55.612" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 04:51:55.612" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 04:51:55.612" level="INFO">${json} = {u'message': u'200 OK', u'status': u'ok', u'data': []}</msg>
<status status="PASS" starttime="20161207 04:51:55.611" endtime="20161207 04:51:55.612"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<msg timestamp="20161207 04:51:55.613" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20161207 04:51:55.612" endtime="20161207 04:51:55.613"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:54.385" endtime="20161207 04:51:55.613"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:54.384" endtime="20161207 04:51:55.613"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:51.966" endtime="20161207 04:51:55.613"></status>
</kw>
<test id="s1-s2-t1" name="Create error log on single FRU">
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Clear all logs</arg>
</arguments>
<kw name="Clear all logs">
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>/org/openbmc/records/events/action/clear</arg>
<arg>data=${NIL}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 04:51:55.619" level="INFO">${base_uri} = /org/openbmc/records/events/action/clear</msg>
<status status="PASS" starttime="20161207 04:51:55.616" endtime="20161207 04:51:55.619"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 04:51:55.619" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161207 04:51:55.619" endtime="20161207 04:51:55.620"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:51:55.620" endtime="20161207 04:51:55.620"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:51:55.627" level="INFO">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161207 04:51:55.626" endtime="20161207 04:51:55.627"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:51:55.628" level="INFO">URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161207 04:51:55.627" endtime="20161207 04:51:55.628"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:55.627" endtime="20161207 04:51:55.628"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:55.625" endtime="20161207 04:51:55.628"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:55.621" endtime="20161207 04:51:55.628"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 04:51:55.629" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161207 04:51:55.629" endtime="20161207 04:51:55.630"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 04:51:55.631" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161207 04:51:55.630" endtime="20161207 04:51:55.631"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 04:51:55.632" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161207 04:51:55.631" endtime="20161207 04:51:55.632"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 04:51:55.632" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161207 04:51:55.632" endtime="20161207 04:51:55.632"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 04:51:55.966" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 04:51:55.966" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:51:55.633" endtime="20161207 04:51:55.966"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:51:55.968" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:51:55.967" endtime="20161207 04:51:55.968"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:55.628" endtime="20161207 04:51:55.968"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 04:51:56.196" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/clear, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 04:51:56.196" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:51:55.968" endtime="20161207 04:51:56.196"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:51:56.203" level="INFO">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:51:56.202" endtime="20161207 04:51:56.203"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:51:56.204" level="INFO">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:51:56.204" endtime="20161207 04:51:56.204"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:56.203" endtime="20161207 04:51:56.204"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:56.201" endtime="20161207 04:51:56.205"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:56.197" endtime="20161207 04:51:56.205"></status>
</kw>
<msg timestamp="20161207 04:51:56.205" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:51:55.615" endtime="20161207 04:51:56.205"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:51:56.206" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:51:56.205" endtime="20161207 04:51:56.206"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>/org/openbmc/records/events/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 04:51:56.207" level="INFO">${base_uri} = /org/openbmc/records/events/</msg>
<status status="PASS" starttime="20161207 04:51:56.207" endtime="20161207 04:51:56.207"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:51:56.213" level="INFO">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status status="PASS" starttime="20161207 04:51:56.213" endtime="20161207 04:51:56.214"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:51:56.215" level="INFO">URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status status="PASS" starttime="20161207 04:51:56.214" endtime="20161207 04:51:56.215"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:56.214" endtime="20161207 04:51:56.215"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:56.212" endtime="20161207 04:51:56.215"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:56.208" endtime="20161207 04:51:56.215"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 04:51:56.216" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161207 04:51:56.216" endtime="20161207 04:51:56.217"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 04:51:56.218" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161207 04:51:56.217" endtime="20161207 04:51:56.218"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 04:51:56.218" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161207 04:51:56.218" endtime="20161207 04:51:56.218"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 04:51:56.219" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161207 04:51:56.219" endtime="20161207 04:51:56.219"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 04:51:56.559" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 04:51:56.560" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:51:56.220" endtime="20161207 04:51:56.560"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:51:56.561" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:51:56.560" endtime="20161207 04:51:56.561"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:56.215" endtime="20161207 04:51:56.561"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 04:51:56.618" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/, headers=None </msg>
<msg timestamp="20161207 04:51:56.618" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:51:56.562" endtime="20161207 04:51:56.618"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:51:56.625" level="INFO">${msg} = Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:51:56.624" endtime="20161207 04:51:56.625"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:51:56.626" level="INFO">Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:51:56.626" endtime="20161207 04:51:56.626"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:56.625" endtime="20161207 04:51:56.626"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:56.623" endtime="20161207 04:51:56.627"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:56.619" endtime="20161207 04:51:56.627"></status>
</kw>
<msg timestamp="20161207 04:51:56.627" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:51:56.206" endtime="20161207 04:51:56.627"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20161207 04:51:56.628" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 04:51:56.628" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 04:51:56.628" level="INFO">${json} = {u'message': u'200 OK', u'status': u'ok', u'data': []}</msg>
<status status="PASS" starttime="20161207 04:51:56.627" endtime="20161207 04:51:56.628"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<msg timestamp="20161207 04:51:56.629" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20161207 04:51:56.628" endtime="20161207 04:51:56.629"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:55.615" endtime="20161207 04:51:56.629"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:55.614" endtime="20161207 04:51:56.629"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${CREATE_ERROR_SINGLE_FRU}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${elog}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161207 04:51:56.630" level="INFO">Executing command 'busctl call org.openbmc.records.events /org/openbmc/records/events org.openbmc.recordlog acceptHostMessage sssay "Error" "Testing failure" "/org/openbmc/inventory/system/chassis/motherboard/dimm1" 1 1'.</msg>
<msg timestamp="20161207 04:51:57.055" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161207 04:51:57.055" level="INFO">${elog} = q 193</msg>
<msg timestamp="20161207 04:51:57.055" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20161207 04:51:56.629" endtime="20161207 04:51:57.055"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161207 04:51:57.056" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20161207 04:51:57.056" endtime="20161207 04:51:57.056"></status>
</kw>
<kw name="Get EventList">
<assign>
<var>${log_list}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>/org/openbmc/records/events/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 04:51:57.058" level="INFO">${base_uri} = /org/openbmc/records/events/</msg>
<status status="PASS" starttime="20161207 04:51:57.058" endtime="20161207 04:51:57.058"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:51:57.065" level="INFO">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status status="PASS" starttime="20161207 04:51:57.064" endtime="20161207 04:51:57.065"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:51:57.066" level="INFO">URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status status="PASS" starttime="20161207 04:51:57.066" endtime="20161207 04:51:57.066"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:57.065" endtime="20161207 04:51:57.066"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:57.063" endtime="20161207 04:51:57.067"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:57.059" endtime="20161207 04:51:57.067"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 04:51:57.068" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161207 04:51:57.067" endtime="20161207 04:51:57.068"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 04:51:57.069" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161207 04:51:57.069" endtime="20161207 04:51:57.069"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 04:51:57.070" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161207 04:51:57.069" endtime="20161207 04:51:57.070"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 04:51:57.071" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161207 04:51:57.070" endtime="20161207 04:51:57.071"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 04:51:57.435" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 04:51:57.435" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:51:57.071" endtime="20161207 04:51:57.435"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:51:57.436" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:51:57.436" endtime="20161207 04:51:57.436"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:57.067" endtime="20161207 04:51:57.437"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 04:51:57.496" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/, headers=None </msg>
<msg timestamp="20161207 04:51:57.496" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:51:57.437" endtime="20161207 04:51:57.496"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:51:57.502" level="INFO">${msg} = Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/193"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:51:57.501" endtime="20161207 04:51:57.502"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:51:57.503" level="INFO">Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/193"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:51:57.503" endtime="20161207 04:51:57.503"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:57.502" endtime="20161207 04:51:57.504"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:57.501" endtime="20161207 04:51:57.504"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:57.497" endtime="20161207 04:51:57.504"></status>
</kw>
<msg timestamp="20161207 04:51:57.504" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:51:57.057" endtime="20161207 04:51:57.504"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:51:57.505" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:51:57.504" endtime="20161207 04:51:57.505"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20161207 04:51:57.506" level="INFO">To JSON using : content={
  "data": [
    "/org/openbmc/records/events/193"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 04:51:57.506" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 04:51:57.506" level="INFO">${jsondata} = {u'message': u'200 OK', u'status': u'ok', u'data': [u'/org/openbmc/records/events/193']}</msg>
<status status="PASS" starttime="20161207 04:51:57.505" endtime="20161207 04:51:57.506"></status>
</kw>
<msg timestamp="20161207 04:51:57.506" level="INFO">${log_list} = [u'/org/openbmc/records/events/193']</msg>
<status status="PASS" starttime="20161207 04:51:57.057" endtime="20161207 04:51:57.506"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>'${log_list}'</arg>
<arg>${elog.strip('q ')}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:51:57.507" endtime="20161207 04:51:57.507"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${EVENT_RECORD}/${elog.strip('q ')}</arg>
<arg>/fru</arg>
</arguments>
<assign>
<var>${association_uri}</var>
</assign>
<msg timestamp="20161207 04:51:57.508" level="INFO">${association_uri} = /org/openbmc/records/events/193/fru</msg>
<status status="PASS" starttime="20161207 04:51:57.507" endtime="20161207 04:51:57.508"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${association_uri}</arg>
<arg>endpoints</arg>
</arguments>
<assign>
<var>${association_content}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 04:51:57.510" level="INFO">${base_uri} = /org/openbmc/records/events/193/fru/attr/endpoints</msg>
<status status="PASS" starttime="20161207 04:51:57.510" endtime="20161207 04:51:57.510"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:51:57.517" level="INFO">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/193/fru/attr/endpoints, method:Get, args:{}</msg>
<status status="PASS" starttime="20161207 04:51:57.516" endtime="20161207 04:51:57.517"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:51:57.518" level="INFO">URI:https://9.3.23.30:443/org/openbmc/records/events/193/fru/attr/endpoints, method:Get, args:{}</msg>
<status status="PASS" starttime="20161207 04:51:57.518" endtime="20161207 04:51:57.518"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:57.517" endtime="20161207 04:51:57.518"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:57.515" endtime="20161207 04:51:57.518"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:57.511" endtime="20161207 04:51:57.519"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 04:51:57.520" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161207 04:51:57.520" endtime="20161207 04:51:57.521"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 04:51:57.522" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161207 04:51:57.521" endtime="20161207 04:51:57.522"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 04:51:57.523" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161207 04:51:57.522" endtime="20161207 04:51:57.523"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 04:51:57.523" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161207 04:51:57.523" endtime="20161207 04:51:57.523"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 04:51:57.856" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 04:51:57.857" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:51:57.524" endtime="20161207 04:51:57.857"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:51:57.858" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:51:57.857" endtime="20161207 04:51:57.858"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:57.519" endtime="20161207 04:51:57.858"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 04:51:57.943" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/193/fru/attr/endpoints, headers=None </msg>
<msg timestamp="20161207 04:51:57.944" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:51:57.858" endtime="20161207 04:51:57.944"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:51:57.950" level="INFO">${msg} = Response code:200, Content:{
  "data": [
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:51:57.949" endtime="20161207 04:51:57.950"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:51:57.951" level="INFO">Response code:200, Content:{
  "data": [
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:51:57.951" endtime="20161207 04:51:57.951"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:57.950" endtime="20161207 04:51:57.951"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:57.949" endtime="20161207 04:51:57.951"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:57.944" endtime="20161207 04:51:57.952"></status>
</kw>
<msg timestamp="20161207 04:51:57.952" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:51:57.509" endtime="20161207 04:51:57.952"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 04:51:57.953" level="INFO">To JSON using : content={
  "data": [
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 04:51:57.953" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 04:51:57.953" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': [u'/org/openbmc/inventory/system/chassis/motherboard/dimm1']}</msg>
<status status="PASS" starttime="20161207 04:51:57.952" endtime="20161207 04:51:57.953"></status>
</kw>
<msg timestamp="20161207 04:51:57.953" level="INFO">${association_content} = [u'/org/openbmc/inventory/system/chassis/motherboard/dimm1']</msg>
<status status="PASS" starttime="20161207 04:51:57.508" endtime="20161207 04:51:57.953"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${association_content}</arg>
<arg>${DIMM1_URI}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:51:57.954" endtime="20161207 04:51:57.954"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${DIMM1_URI}/event</arg>
<arg>endpoints</arg>
</arguments>
<assign>
<var>${dimm1_event}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 04:51:57.956" level="INFO">${base_uri} = /org/openbmc/inventory/system/chassis/motherboard/dimm1/event/attr/endpoints</msg>
<status status="PASS" starttime="20161207 04:51:57.956" endtime="20161207 04:51:57.956"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:51:57.963" level="INFO">${msg} = URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm1/event/attr/endpoints, method:Get, args:{}</msg>
<status status="PASS" starttime="20161207 04:51:57.962" endtime="20161207 04:51:57.963"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:51:57.964" level="INFO">URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm1/event/attr/endpoints, method:Get, args:{}</msg>
<status status="PASS" starttime="20161207 04:51:57.964" endtime="20161207 04:51:57.964"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:57.963" endtime="20161207 04:51:57.964"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:57.961" endtime="20161207 04:51:57.964"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:57.957" endtime="20161207 04:51:57.965"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 04:51:57.966" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161207 04:51:57.965" endtime="20161207 04:51:57.966"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 04:51:57.967" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161207 04:51:57.967" endtime="20161207 04:51:57.967"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 04:51:57.968" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161207 04:51:57.967" endtime="20161207 04:51:57.968"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 04:51:57.969" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161207 04:51:57.968" endtime="20161207 04:51:57.969"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 04:51:58.492" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 04:51:58.492" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:51:57.969" endtime="20161207 04:51:58.492"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:51:58.494" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:51:58.493" endtime="20161207 04:51:58.494"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:57.965" endtime="20161207 04:51:58.494"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 04:51:58.638" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/inventory/system/chassis/motherboard/dimm1/event/attr/endpoints, headers=None </msg>
<msg timestamp="20161207 04:51:58.639" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:51:58.494" endtime="20161207 04:51:58.639"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:51:58.645" level="INFO">${msg} = Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/193"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:51:58.644" endtime="20161207 04:51:58.645"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:51:58.646" level="INFO">Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/193"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:51:58.646" endtime="20161207 04:51:58.646"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:58.645" endtime="20161207 04:51:58.646"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:58.643" endtime="20161207 04:51:58.646"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:58.639" endtime="20161207 04:51:58.646"></status>
</kw>
<msg timestamp="20161207 04:51:58.647" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:51:57.955" endtime="20161207 04:51:58.647"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 04:51:58.647" level="INFO">To JSON using : content={
  "data": [
    "/org/openbmc/records/events/193"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 04:51:58.647" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 04:51:58.648" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': [u'/org/openbmc/records/events/193']}</msg>
<status status="PASS" starttime="20161207 04:51:58.647" endtime="20161207 04:51:58.648"></status>
</kw>
<msg timestamp="20161207 04:51:58.648" level="INFO">${dimm1_event} = [u'/org/openbmc/records/events/193']</msg>
<status status="PASS" starttime="20161207 04:51:57.954" endtime="20161207 04:51:58.648"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${dimm1_event}</arg>
<arg>${log_list[0]}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:51:58.648" endtime="20161207 04:51:58.649"></status>
</kw>
<kw type="teardown" library="openbmc_ffdc" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<status status="PASS" starttime="20161207 04:51:58.650" endtime="20161207 04:51:58.654"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20161207 04:51:58.656" level="INFO" html="yes">Directory '&lt;a href="file:///tmp/root/2317/obmc-robot/logs"&gt;/tmp/root/2317/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" starttime="20161207 04:51:58.655" endtime="20161207 04:51:58.656"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20161207 04:51:58.657" level="INFO" html="yes">File '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/test_history.txt"&gt;/tmp/root/2317/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20161207 04:51:58.657" endtime="20161207 04:51:58.657"></status>
</kw>
<msg timestamp="20161207 04:51:58.658" level="INFO">${exist} = True</msg>
<status status="PASS" starttime="20161207 04:51:58.656" endtime="20161207 04:51:58.658"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:51:58.658" endtime="20161207 04:51:58.662"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20161207 04:51:58.663" level="INFO">${cur_time} = 2016-12-07 04:51:58:662863</msg>
<status status="PASS" starttime="20161207 04:51:58.663" endtime="20161207 04:51:58.663"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20161207 04:51:58.664" level="INFO">${cur_time} = 20161207045158662863</msg>
<status status="PASS" starttime="20161207 04:51:58.664" endtime="20161207 04:51:58.664"></status>
</kw>
<msg timestamp="20161207 04:51:58.664" level="INFO">${cur_time} = 20161207045158662863</msg>
<status status="PASS" starttime="20161207 04:51:58.662" endtime="20161207 04:51:58.664"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20161207 04:51:58.665" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/test_history.txt"&gt;/tmp/root/2317/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161207 04:51:58.665" endtime="20161207 04:51:58.665"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:58.654" endtime="20161207 04:51:58.666"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:58.649" endtime="20161207 04:51:58.666"></status>
</kw>
<doc>***GOOD PATH***
Create an error log on single FRU and verify
its association.
</doc>
<tags>
<tag>Create_error_log_on_single_FRU</tag>
</tags>
<status status="PASS" starttime="20161207 04:51:55.613" endtime="20161207 04:51:58.666" critical="yes"></status>
</test>
<test id="s1-s2-t2" name="Delete error log">
<kw name="Create a test log">
<assign>
<var>${log_uri1}</var>
</assign>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 04:51:58.668" level="INFO">${data} = {u'data': []}</msg>
<status status="PASS" starttime="20161207 04:51:58.668" endtime="20161207 04:51:58.668"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>/org/openbmc/records/events/action/acceptTestMessage</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 04:51:58.670" level="INFO">${base_uri} = /org/openbmc/records/events/action/acceptTestMessage</msg>
<status status="PASS" starttime="20161207 04:51:58.669" endtime="20161207 04:51:58.670"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 04:51:58.670" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161207 04:51:58.670" endtime="20161207 04:51:58.670"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:51:58.671" endtime="20161207 04:51:58.671"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:51:58.677" level="INFO">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161207 04:51:58.676" endtime="20161207 04:51:58.677"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:51:58.679" level="INFO">URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161207 04:51:58.678" endtime="20161207 04:51:58.679"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:58.678" endtime="20161207 04:51:58.679"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:58.676" endtime="20161207 04:51:58.679"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:58.671" endtime="20161207 04:51:58.679"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 04:51:58.680" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161207 04:51:58.680" endtime="20161207 04:51:58.681"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 04:51:58.682" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161207 04:51:58.681" endtime="20161207 04:51:58.682"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 04:51:58.682" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161207 04:51:58.682" endtime="20161207 04:51:58.682"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 04:51:58.683" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161207 04:51:58.683" endtime="20161207 04:51:58.683"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 04:51:59.059" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 04:51:59.059" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:51:58.684" endtime="20161207 04:51:59.059"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:51:59.060" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:51:59.060" endtime="20161207 04:51:59.061"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:58.679" endtime="20161207 04:51:59.061"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 04:51:59.349" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/acceptTestMessage, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 04:51:59.350" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:51:59.061" endtime="20161207 04:51:59.350"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:51:59.356" level="INFO">${msg} = Response code:200, Content:{
  "data": 194, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:51:59.355" endtime="20161207 04:51:59.356"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:51:59.357" level="INFO">Response code:200, Content:{
  "data": 194, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:51:59.357" endtime="20161207 04:51:59.358"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:59.356" endtime="20161207 04:51:59.358"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:59.355" endtime="20161207 04:51:59.358"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:59.350" endtime="20161207 04:51:59.358"></status>
</kw>
<msg timestamp="20161207 04:51:59.358" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:51:58.668" endtime="20161207 04:51:59.358"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:51:59.359" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:51:59.359" endtime="20161207 04:51:59.359"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20161207 04:51:59.360" level="INFO">To JSON using : content={
  "data": 194, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 04:51:59.360" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 04:51:59.360" level="INFO">${json} = {u'message': u'200 OK', u'status': u'ok', u'data': 194}</msg>
<status status="PASS" starttime="20161207 04:51:59.359" endtime="20161207 04:51:59.360"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<assign>
<var>${LOGID}</var>
</assign>
<msg timestamp="20161207 04:51:59.361" level="INFO">${LOGID} = 194</msg>
<status status="PASS" starttime="20161207 04:51:59.360" endtime="20161207 04:51:59.361"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>/org/openbmc/records/events/</arg>
<arg>${LOGID}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20161207 04:51:59.361" level="INFO">${uri} = /org/openbmc/records/events/194</msg>
<status status="PASS" starttime="20161207 04:51:59.361" endtime="20161207 04:51:59.362"></status>
</kw>
<msg timestamp="20161207 04:51:59.362" level="INFO">${log_uri1} = /org/openbmc/records/events/194</msg>
<status status="PASS" starttime="20161207 04:51:58.667" endtime="20161207 04:51:59.362"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${log_uri1}</arg>
<arg>/fru</arg>
</arguments>
<assign>
<var>${association_uri1}</var>
</assign>
<msg timestamp="20161207 04:51:59.363" level="INFO">${association_uri1} = /org/openbmc/records/events/194/fru</msg>
<status status="PASS" starttime="20161207 04:51:59.362" endtime="20161207 04:51:59.363"></status>
</kw>
<kw name="Create a test log">
<assign>
<var>${log_uri2}</var>
</assign>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 04:51:59.364" level="INFO">${data} = {u'data': []}</msg>
<status status="PASS" starttime="20161207 04:51:59.363" endtime="20161207 04:51:59.364"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>/org/openbmc/records/events/action/acceptTestMessage</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 04:51:59.365" level="INFO">${base_uri} = /org/openbmc/records/events/action/acceptTestMessage</msg>
<status status="PASS" starttime="20161207 04:51:59.365" endtime="20161207 04:51:59.365"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 04:51:59.366" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161207 04:51:59.366" endtime="20161207 04:51:59.366"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:51:59.366" endtime="20161207 04:51:59.367"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:51:59.373" level="INFO">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161207 04:51:59.372" endtime="20161207 04:51:59.373"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:51:59.375" level="INFO">URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161207 04:51:59.374" endtime="20161207 04:51:59.375"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:59.374" endtime="20161207 04:51:59.375"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:59.371" endtime="20161207 04:51:59.375"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:59.367" endtime="20161207 04:51:59.375"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 04:51:59.376" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161207 04:51:59.376" endtime="20161207 04:51:59.377"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 04:51:59.377" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161207 04:51:59.377" endtime="20161207 04:51:59.378"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 04:51:59.378" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161207 04:51:59.378" endtime="20161207 04:51:59.378"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 04:51:59.379" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161207 04:51:59.379" endtime="20161207 04:51:59.379"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 04:51:59.791" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 04:51:59.791" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:51:59.379" endtime="20161207 04:51:59.791"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:51:59.792" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:51:59.791" endtime="20161207 04:51:59.792"></status>
</kw>
<status status="PASS" starttime="20161207 04:51:59.375" endtime="20161207 04:51:59.792"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 04:52:00.106" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/acceptTestMessage, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 04:52:00.107" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:51:59.792" endtime="20161207 04:52:00.107"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:52:00.117" level="INFO">${msg} = Response code:200, Content:{
  "data": 195, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:52:00.117" endtime="20161207 04:52:00.117"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:52:00.118" level="INFO">Response code:200, Content:{
  "data": 195, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:52:00.118" endtime="20161207 04:52:00.118"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:00.117" endtime="20161207 04:52:00.118"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:00.114" endtime="20161207 04:52:00.118"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:00.109" endtime="20161207 04:52:00.119"></status>
</kw>
<msg timestamp="20161207 04:52:00.119" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:51:59.364" endtime="20161207 04:52:00.119"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:52:00.119" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:52:00.119" endtime="20161207 04:52:00.119"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20161207 04:52:00.120" level="INFO">To JSON using : content={
  "data": 195, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 04:52:00.120" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 04:52:00.120" level="INFO">${json} = {u'message': u'200 OK', u'status': u'ok', u'data': 195}</msg>
<status status="PASS" starttime="20161207 04:52:00.120" endtime="20161207 04:52:00.120"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<assign>
<var>${LOGID}</var>
</assign>
<msg timestamp="20161207 04:52:00.121" level="INFO">${LOGID} = 195</msg>
<status status="PASS" starttime="20161207 04:52:00.120" endtime="20161207 04:52:00.121"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>/org/openbmc/records/events/</arg>
<arg>${LOGID}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20161207 04:52:00.121" level="INFO">${uri} = /org/openbmc/records/events/195</msg>
<status status="PASS" starttime="20161207 04:52:00.121" endtime="20161207 04:52:00.121"></status>
</kw>
<msg timestamp="20161207 04:52:00.121" level="INFO">${log_uri2} = /org/openbmc/records/events/195</msg>
<status status="PASS" starttime="20161207 04:51:59.363" endtime="20161207 04:52:00.121"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${log_uri1}</arg>
<arg>/action/delete</arg>
</arguments>
<assign>
<var>${del_uri}</var>
</assign>
<msg timestamp="20161207 04:52:00.122" level="INFO">${del_uri} = /org/openbmc/records/events/194/action/delete</msg>
<status status="PASS" starttime="20161207 04:52:00.122" endtime="20161207 04:52:00.122"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${del_uri}</arg>
<arg>data=${NIL}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 04:52:00.142" level="INFO">${base_uri} = /org/openbmc/records/events/194/action/delete</msg>
<status status="PASS" starttime="20161207 04:52:00.142" endtime="20161207 04:52:00.142"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 04:52:00.143" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161207 04:52:00.143" endtime="20161207 04:52:00.143"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:52:00.143" endtime="20161207 04:52:00.144"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:52:00.148" level="INFO">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/194/action/delete, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161207 04:52:00.147" endtime="20161207 04:52:00.148"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:52:00.149" level="INFO">URI:https://9.3.23.30:443/org/openbmc/records/events/194/action/delete, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161207 04:52:00.149" endtime="20161207 04:52:00.149"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:00.148" endtime="20161207 04:52:00.149"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:00.147" endtime="20161207 04:52:00.149"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:00.144" endtime="20161207 04:52:00.149"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 04:52:00.150" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161207 04:52:00.150" endtime="20161207 04:52:00.151"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 04:52:00.151" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161207 04:52:00.151" endtime="20161207 04:52:00.151"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 04:52:00.152" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161207 04:52:00.151" endtime="20161207 04:52:00.152"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 04:52:00.152" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161207 04:52:00.152" endtime="20161207 04:52:00.152"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 04:52:00.719" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 04:52:00.719" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:52:00.152" endtime="20161207 04:52:00.720"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:52:00.720" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:52:00.720" endtime="20161207 04:52:00.720"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:00.149" endtime="20161207 04:52:00.721"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 04:52:01.094" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/194/action/delete, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 04:52:01.094" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:52:00.721" endtime="20161207 04:52:01.094"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:52:01.102" level="INFO">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:52:01.101" endtime="20161207 04:52:01.102"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:52:01.103" level="INFO">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:52:01.103" endtime="20161207 04:52:01.104"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:01.102" endtime="20161207 04:52:01.104"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:01.100" endtime="20161207 04:52:01.104"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:01.095" endtime="20161207 04:52:01.104"></status>
</kw>
<msg timestamp="20161207 04:52:01.104" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:52:00.122" endtime="20161207 04:52:01.104"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:52:01.105" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:52:01.104" endtime="20161207 04:52:01.105"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${association_uri1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 04:52:01.106" level="INFO">${base_uri} = /org/openbmc/records/events/194/fru</msg>
<status status="PASS" starttime="20161207 04:52:01.106" endtime="20161207 04:52:01.106"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:52:01.114" level="INFO">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/194/fru, method:Get, args:{}</msg>
<status status="PASS" starttime="20161207 04:52:01.113" endtime="20161207 04:52:01.114"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:52:01.115" level="INFO">URI:https://9.3.23.30:443/org/openbmc/records/events/194/fru, method:Get, args:{}</msg>
<status status="PASS" starttime="20161207 04:52:01.115" endtime="20161207 04:52:01.115"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:01.114" endtime="20161207 04:52:01.116"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:01.112" endtime="20161207 04:52:01.116"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:01.107" endtime="20161207 04:52:01.116"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 04:52:01.117" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161207 04:52:01.117" endtime="20161207 04:52:01.118"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 04:52:01.118" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161207 04:52:01.118" endtime="20161207 04:52:01.118"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 04:52:01.119" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161207 04:52:01.119" endtime="20161207 04:52:01.119"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 04:52:01.120" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161207 04:52:01.119" endtime="20161207 04:52:01.120"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 04:52:01.475" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 04:52:01.475" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:52:01.121" endtime="20161207 04:52:01.475"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:52:01.477" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:52:01.476" endtime="20161207 04:52:01.477"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:01.116" endtime="20161207 04:52:01.477"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 04:52:01.533" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/194/fru, headers=None </msg>
<msg timestamp="20161207 04:52:01.533" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" starttime="20161207 04:52:01.477" endtime="20161207 04:52:01.533"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:52:01.539" level="INFO">${msg} = Response code:404, Content:{
  "data": {
    "description": "org.freedesktop.DBus.Error.FileNotFound: path or object not found: /org/openbmc/records/events/194/fru"
  }, 
  "message": "404 Not Found",...</msg>
<status status="PASS" starttime="20161207 04:52:01.539" endtime="20161207 04:52:01.539"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:52:01.540" level="INFO">Response code:404, Content:{
  "data": {
    "description": "org.freedesktop.DBus.Error.FileNotFound: path or object not found: /org/openbmc/records/events/194/fru"
  }, 
  "message": "404 Not Found", 
  "status": "error"
}</msg>
<status status="PASS" starttime="20161207 04:52:01.540" endtime="20161207 04:52:01.541"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:01.540" endtime="20161207 04:52:01.541"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:01.538" endtime="20161207 04:52:01.541"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:01.534" endtime="20161207 04:52:01.541"></status>
</kw>
<msg timestamp="20161207 04:52:01.541" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" starttime="20161207 04:52:01.105" endtime="20161207 04:52:01.541"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20161207 04:52:01.542" level="INFO">To JSON using : content={
  "data": {
    "description": "org.freedesktop.DBus.Error.FileNotFound: path or object not found: /org/openbmc/records/events/194/fru"
  }, 
  "message": "404 Not Found", 
  "status": "error"
} </msg>
<msg timestamp="20161207 04:52:01.542" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 04:52:01.542" level="INFO">${jsondata} = {u'message': u'404 Not Found', u'status': u'error', u'data': {u'description': u'org.freedesktop.DBus.Error.FileNotFound: path or object not found: /org/openbmc/records/events/194/fru'}}</msg>
<status status="PASS" starttime="20161207 04:52:01.542" endtime="20161207 04:52:01.542"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${jsondata['message']}</arg>
<arg>404 Not Found</arg>
</arguments>
<status status="PASS" starttime="20161207 04:52:01.543" endtime="20161207 04:52:01.543"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${DIMM3_URI}/event</arg>
<arg>endpoints</arg>
</arguments>
<assign>
<var>${dimm3_event}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 04:52:01.545" level="INFO">${base_uri} = /org/openbmc/inventory/system/chassis/motherboard/dimm3/event/attr/endpoints</msg>
<status status="PASS" starttime="20161207 04:52:01.545" endtime="20161207 04:52:01.545"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:52:01.551" level="INFO">${msg} = URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm3/event/attr/endpoints, method:Get, args:{}</msg>
<status status="PASS" starttime="20161207 04:52:01.551" endtime="20161207 04:52:01.551"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:52:01.553" level="INFO">URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm3/event/attr/endpoints, method:Get, args:{}</msg>
<status status="PASS" starttime="20161207 04:52:01.552" endtime="20161207 04:52:01.553"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:01.552" endtime="20161207 04:52:01.553"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:01.550" endtime="20161207 04:52:01.553"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:01.546" endtime="20161207 04:52:01.553"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 04:52:01.554" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161207 04:52:01.554" endtime="20161207 04:52:01.555"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 04:52:01.556" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161207 04:52:01.555" endtime="20161207 04:52:01.556"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 04:52:01.556" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161207 04:52:01.556" endtime="20161207 04:52:01.556"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 04:52:01.557" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161207 04:52:01.557" endtime="20161207 04:52:01.557"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 04:52:01.893" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 04:52:01.894" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:52:01.558" endtime="20161207 04:52:01.894"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:52:01.895" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:52:01.894" endtime="20161207 04:52:01.895"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:01.553" endtime="20161207 04:52:01.895"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 04:52:01.974" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/inventory/system/chassis/motherboard/dimm3/event/attr/endpoints, headers=None </msg>
<msg timestamp="20161207 04:52:01.974" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:52:01.895" endtime="20161207 04:52:01.974"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:52:01.980" level="INFO">${msg} = Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/195"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:52:01.980" endtime="20161207 04:52:01.980"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:52:01.982" level="INFO">Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/195"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:52:01.981" endtime="20161207 04:52:01.982"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:01.981" endtime="20161207 04:52:01.982"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:01.979" endtime="20161207 04:52:01.982"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:01.974" endtime="20161207 04:52:01.982"></status>
</kw>
<msg timestamp="20161207 04:52:01.983" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:52:01.544" endtime="20161207 04:52:01.983"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 04:52:01.983" level="INFO">To JSON using : content={
  "data": [
    "/org/openbmc/records/events/195"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 04:52:01.983" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 04:52:01.984" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': [u'/org/openbmc/records/events/195']}</msg>
<status status="PASS" starttime="20161207 04:52:01.983" endtime="20161207 04:52:01.984"></status>
</kw>
<msg timestamp="20161207 04:52:01.984" level="INFO">${dimm3_event} = [u'/org/openbmc/records/events/195']</msg>
<status status="PASS" starttime="20161207 04:52:01.543" endtime="20161207 04:52:01.984"></status>
</kw>
<kw library="BuiltIn" name="Should Not Contain">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${dimm3_event}</arg>
<arg>${log_uri1}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:52:01.984" endtime="20161207 04:52:01.985"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${DIMM2_URI}/event</arg>
<arg>endpoints</arg>
</arguments>
<assign>
<var>${dimm2_event}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 04:52:01.987" level="INFO">${base_uri} = /org/openbmc/inventory/system/chassis/motherboard/dimm2/event/attr/endpoints</msg>
<status status="PASS" starttime="20161207 04:52:01.986" endtime="20161207 04:52:01.987"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:52:01.993" level="INFO">${msg} = URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm2/event/attr/endpoints, method:Get, args:{}</msg>
<status status="PASS" starttime="20161207 04:52:01.992" endtime="20161207 04:52:01.993"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:52:01.994" level="INFO">URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm2/event/attr/endpoints, method:Get, args:{}</msg>
<status status="PASS" starttime="20161207 04:52:01.994" endtime="20161207 04:52:01.995"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:01.994" endtime="20161207 04:52:01.995"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:01.992" endtime="20161207 04:52:01.995"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:01.987" endtime="20161207 04:52:01.995"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 04:52:01.996" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161207 04:52:01.996" endtime="20161207 04:52:01.997"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 04:52:01.997" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161207 04:52:01.997" endtime="20161207 04:52:01.997"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 04:52:01.998" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161207 04:52:01.998" endtime="20161207 04:52:01.999"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 04:52:01.999" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161207 04:52:01.999" endtime="20161207 04:52:01.999"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 04:52:02.331" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 04:52:02.332" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:52:02.000" endtime="20161207 04:52:02.332"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:52:02.332" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:52:02.332" endtime="20161207 04:52:02.333"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:01.995" endtime="20161207 04:52:02.333"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 04:52:02.412" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/inventory/system/chassis/motherboard/dimm2/event/attr/endpoints, headers=None </msg>
<msg timestamp="20161207 04:52:02.412" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:52:02.333" endtime="20161207 04:52:02.412"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:52:02.417" level="INFO">${msg} = Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/195"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:52:02.416" endtime="20161207 04:52:02.417"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:52:02.418" level="INFO">Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/195"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:52:02.417" endtime="20161207 04:52:02.418"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:02.417" endtime="20161207 04:52:02.418"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:02.416" endtime="20161207 04:52:02.418"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:02.413" endtime="20161207 04:52:02.418"></status>
</kw>
<msg timestamp="20161207 04:52:02.418" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:52:01.986" endtime="20161207 04:52:02.418"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 04:52:02.419" level="INFO">To JSON using : content={
  "data": [
    "/org/openbmc/records/events/195"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 04:52:02.419" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 04:52:02.419" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': [u'/org/openbmc/records/events/195']}</msg>
<status status="PASS" starttime="20161207 04:52:02.418" endtime="20161207 04:52:02.419"></status>
</kw>
<msg timestamp="20161207 04:52:02.419" level="INFO">${dimm2_event} = [u'/org/openbmc/records/events/195']</msg>
<status status="PASS" starttime="20161207 04:52:01.985" endtime="20161207 04:52:02.419"></status>
</kw>
<kw library="BuiltIn" name="Should Not Contain">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${dimm2_event}</arg>
<arg>${log_uri1}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:52:02.419" endtime="20161207 04:52:02.420"></status>
</kw>
<kw type="teardown" library="openbmc_ffdc" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<status status="PASS" starttime="20161207 04:52:02.420" endtime="20161207 04:52:02.424"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20161207 04:52:02.425" level="INFO" html="yes">Directory '&lt;a href="file:///tmp/root/2317/obmc-robot/logs"&gt;/tmp/root/2317/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" starttime="20161207 04:52:02.425" endtime="20161207 04:52:02.425"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20161207 04:52:02.426" level="INFO" html="yes">File '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/test_history.txt"&gt;/tmp/root/2317/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20161207 04:52:02.426" endtime="20161207 04:52:02.426"></status>
</kw>
<msg timestamp="20161207 04:52:02.426" level="INFO">${exist} = True</msg>
<status status="PASS" starttime="20161207 04:52:02.426" endtime="20161207 04:52:02.426"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:52:02.427" endtime="20161207 04:52:02.429"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20161207 04:52:02.430" level="INFO">${cur_time} = 2016-12-07 04:52:02:430104</msg>
<status status="PASS" starttime="20161207 04:52:02.430" endtime="20161207 04:52:02.430"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20161207 04:52:02.431" level="INFO">${cur_time} = 20161207045202430104</msg>
<status status="PASS" starttime="20161207 04:52:02.431" endtime="20161207 04:52:02.431"></status>
</kw>
<msg timestamp="20161207 04:52:02.431" level="INFO">${cur_time} = 20161207045202430104</msg>
<status status="PASS" starttime="20161207 04:52:02.430" endtime="20161207 04:52:02.431"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20161207 04:52:02.432" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/test_history.txt"&gt;/tmp/root/2317/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161207 04:52:02.431" endtime="20161207 04:52:02.432"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:02.424" endtime="20161207 04:52:02.432"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:02.420" endtime="20161207 04:52:02.432"></status>
</kw>
<doc>***BAD PATH***
Delete an error log and verify that its
association is also removed.
</doc>
<tags>
<tag>Delete_error_log</tag>
</tags>
<status status="PASS" starttime="20161207 04:51:58.666" endtime="20161207 04:52:02.432" critical="yes"></status>
</test>
<kw type="teardown" library="SSHLibrary" name="Close All Connections">
<doc>Closes all open connections.</doc>
<status status="PASS" starttime="20161207 04:52:02.434" endtime="20161207 04:52:02.442"></status>
</kw>
<doc>This suite is used for testing eventlog association.</doc>
<status status="PASS" starttime="20161207 04:51:51.892" endtime="20161207 04:52:02.442"></status>
</suite>
<suite id="s1-s3" name="Test Basic Poweron" source="/tmp/root/2317/obmc-robot/tests/test_basic_poweron.robot">
<test id="s1-s3-t1" name="power on test">
<kw type="setup" library="utils" name="Start SOL Console Logging">
<doc>Start logging to a file in /tmp so that it can</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20161207 04:52:02.479" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" starttime="20161207 04:52:02.478" endtime="20161207 04:52:02.479"></status>
</kw>
<msg timestamp="20161207 04:52:02.479" level="INFO">${has_host} = False</msg>
<status status="PASS" starttime="20161207 04:52:02.478" endtime="20161207 04:52:02.479"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:52:02.482" endtime="20161207 04:52:02.482"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:02.479" endtime="20161207 04:52:02.482"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20161207 04:52:02.486" level="INFO">${port_num} = 22</msg>
<status status="PASS" starttime="20161207 04:52:02.486" endtime="20161207 04:52:02.486"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20161207 04:52:02.487" level="INFO">${SSH_PORT} = 22</msg>
<status status="PASS" starttime="20161207 04:52:02.486" endtime="20161207 04:52:02.487"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20161207 04:52:02.487" level="INFO">${https_num} = 443</msg>
<status status="PASS" starttime="20161207 04:52:02.487" endtime="20161207 04:52:02.487"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20161207 04:52:02.488" level="INFO">${AUTH_URI} = https://9.3.23.30:443</msg>
<status status="PASS" starttime="20161207 04:52:02.488" endtime="20161207 04:52:02.488"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:02.485" endtime="20161207 04:52:02.488"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:02.483" endtime="20161207 04:52:02.488"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20161207 04:52:02.489" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" starttime="20161207 04:52:02.489" endtime="20161207 04:52:02.489"></status>
</kw>
<msg timestamp="20161207 04:52:02.489" level="INFO">${has_port} = False</msg>
<status status="PASS" starttime="20161207 04:52:02.489" endtime="20161207 04:52:02.489"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:52:02.493" endtime="20161207 04:52:02.493"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:52:02.494" endtime="20161207 04:52:02.494"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:02.493" endtime="20161207 04:52:02.494"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:02.490" endtime="20161207 04:52:02.494"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20161207 04:52:02.494" level="INFO">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg timestamp="20161207 04:52:05.260" level="INFO">Read output: 7[r[999;999H[6n</msg>
<status status="PASS" starttime="20161207 04:52:02.494" endtime="20161207 04:52:05.261"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:02.477" endtime="20161207 04:52:05.261"></status>
</kw>
<kw library="utils" name="Get Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y%m%d%H%M%S%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20161207 04:52:05.264" level="INFO">${cur_time} = 20161207045205263841</msg>
<status status="PASS" starttime="20161207 04:52:05.263" endtime="20161207 04:52:05.264"></status>
</kw>
<msg timestamp="20161207 04:52:05.265" level="INFO">${cur_time} = 20161207045205263841</msg>
<status status="PASS" starttime="20161207 04:52:05.261" endtime="20161207 04:52:05.265"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${LOG_TIME}</arg>
<arg>${cur_time}</arg>
</arguments>
<msg timestamp="20161207 04:52:05.272" level="INFO">${LOG_TIME} = 20161207045205263841</msg>
<status status="PASS" starttime="20161207 04:52:05.266" endtime="20161207 04:52:05.272"></status>
</kw>
<kw library="SSHLibrary" name="Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>obmc-console-client &gt; ${file_path}-${LOG_TIME}_$$</arg>
</arguments>
<msg timestamp="20161207 04:52:05.274" level="INFO">Starting command 'obmc-console-client &gt; /tmp/obmc-console.log-20161207045205263841_$$'.</msg>
<status status="PASS" starttime="20161207 04:52:05.273" endtime="20161207 04:52:05.282"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:02.477" endtime="20161207 04:52:05.283"></status>
</kw>
<kw library="poweroffs" name="BMC Power Off">
<doc>Powers off the system and makes sure that all states are</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20161207 04:52:05.288" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" starttime="20161207 04:52:05.286" endtime="20161207 04:52:05.288"></status>
</kw>
<msg timestamp="20161207 04:52:05.288" level="INFO">${has_host} = False</msg>
<status status="PASS" starttime="20161207 04:52:05.286" endtime="20161207 04:52:05.288"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:52:05.298" endtime="20161207 04:52:05.298"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:05.289" endtime="20161207 04:52:05.299"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20161207 04:52:05.306" level="INFO">${port_num} = 22</msg>
<status status="PASS" starttime="20161207 04:52:05.306" endtime="20161207 04:52:05.306"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20161207 04:52:05.307" level="INFO">${SSH_PORT} = 22</msg>
<status status="PASS" starttime="20161207 04:52:05.307" endtime="20161207 04:52:05.307"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20161207 04:52:05.308" level="INFO">${https_num} = 443</msg>
<status status="PASS" starttime="20161207 04:52:05.308" endtime="20161207 04:52:05.308"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20161207 04:52:05.309" level="INFO">${AUTH_URI} = https://9.3.23.30:443</msg>
<status status="PASS" starttime="20161207 04:52:05.309" endtime="20161207 04:52:05.309"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:05.304" endtime="20161207 04:52:05.310"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:05.299" endtime="20161207 04:52:05.310"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20161207 04:52:05.312" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" starttime="20161207 04:52:05.311" endtime="20161207 04:52:05.312"></status>
</kw>
<msg timestamp="20161207 04:52:05.312" level="INFO">${has_port} = False</msg>
<status status="PASS" starttime="20161207 04:52:05.310" endtime="20161207 04:52:05.312"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:52:05.321" endtime="20161207 04:52:05.322"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:52:05.323" endtime="20161207 04:52:05.323"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:05.320" endtime="20161207 04:52:05.323"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:05.312" endtime="20161207 04:52:05.323"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20161207 04:52:05.324" level="INFO">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg timestamp="20161207 04:52:07.570" level="INFO">Read output: 7[r[999;999H[6n</msg>
<status status="PASS" starttime="20161207 04:52:05.323" endtime="20161207 04:52:07.570"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:05.284" endtime="20161207 04:52:07.570"></status>
</kw>
<kw library="utils" name="Initiate Power Off">
<doc>Initiates the power off and waits until the Is Power Off</doc>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 04:52:07.572" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161207 04:52:07.571" endtime="20161207 04:52:07.572"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 04:52:07.573" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161207 04:52:07.572" endtime="20161207 04:52:07.573"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>powerOff</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 04:52:07.574" level="INFO">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status status="PASS" starttime="20161207 04:52:07.573" endtime="20161207 04:52:07.574"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 04:52:07.575" level="INFO">${base_uri} = /org/openbmc/control/chassis0//action/powerOff</msg>
<status status="PASS" starttime="20161207 04:52:07.575" endtime="20161207 04:52:07.575"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 04:52:07.576" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161207 04:52:07.575" endtime="20161207 04:52:07.576"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:52:07.576" endtime="20161207 04:52:07.577"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:52:07.581" level="INFO">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/powerOff, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161207 04:52:07.580" endtime="20161207 04:52:07.581"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:52:07.582" level="INFO">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/powerOff, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161207 04:52:07.582" endtime="20161207 04:52:07.582"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:07.581" endtime="20161207 04:52:07.582"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:07.580" endtime="20161207 04:52:07.582"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:07.577" endtime="20161207 04:52:07.582"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 04:52:07.583" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161207 04:52:07.583" endtime="20161207 04:52:07.584"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 04:52:07.584" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161207 04:52:07.584" endtime="20161207 04:52:07.584"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 04:52:07.585" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161207 04:52:07.584" endtime="20161207 04:52:07.585"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 04:52:07.585" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161207 04:52:07.585" endtime="20161207 04:52:07.585"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 04:52:07.927" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 04:52:07.927" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:52:07.585" endtime="20161207 04:52:07.927"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:52:07.928" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:52:07.928" endtime="20161207 04:52:07.929"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:07.582" endtime="20161207 04:52:07.929"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 04:52:08.399" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/powerOff, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 04:52:08.399" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:52:07.929" endtime="20161207 04:52:08.399"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:52:08.407" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:52:08.406" endtime="20161207 04:52:08.407"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:52:08.408" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:52:08.407" endtime="20161207 04:52:08.408"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:08.407" endtime="20161207 04:52:08.408"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:08.404" endtime="20161207 04:52:08.408"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:08.399" endtime="20161207 04:52:08.408"></status>
</kw>
<msg timestamp="20161207 04:52:08.408" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:52:07.574" endtime="20161207 04:52:08.408"></status>
</kw>
<msg timestamp="20161207 04:52:08.409" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:52:07.573" endtime="20161207 04:52:08.409"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:52:08.409" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:52:08.409" endtime="20161207 04:52:08.409"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>1 min</arg>
<arg>10 sec</arg>
<arg>Is Power Off</arg>
</arguments>
<kw library="utils" name="Is Power Off">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 04:52:08.411" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161207 04:52:08.411" endtime="20161207 04:52:08.411"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 04:52:08.412" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161207 04:52:08.411" endtime="20161207 04:52:08.412"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 04:52:08.413" level="INFO">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status status="PASS" starttime="20161207 04:52:08.412" endtime="20161207 04:52:08.413"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 04:52:08.414" level="INFO">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status status="PASS" starttime="20161207 04:52:08.414" endtime="20161207 04:52:08.414"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 04:52:08.415" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161207 04:52:08.414" endtime="20161207 04:52:08.415"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:52:08.415" endtime="20161207 04:52:08.415"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:52:08.419" level="INFO">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161207 04:52:08.419" endtime="20161207 04:52:08.419"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:52:08.420" level="INFO">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161207 04:52:08.420" endtime="20161207 04:52:08.420"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:08.419" endtime="20161207 04:52:08.420"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:08.418" endtime="20161207 04:52:08.420"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:08.415" endtime="20161207 04:52:08.420"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 04:52:08.421" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161207 04:52:08.421" endtime="20161207 04:52:08.422"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 04:52:08.422" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161207 04:52:08.422" endtime="20161207 04:52:08.422"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 04:52:08.423" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161207 04:52:08.423" endtime="20161207 04:52:08.423"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 04:52:08.424" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161207 04:52:08.423" endtime="20161207 04:52:08.424"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 04:52:09.137" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 04:52:09.137" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:52:08.424" endtime="20161207 04:52:09.137"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:52:09.138" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:52:09.138" endtime="20161207 04:52:09.139"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:08.421" endtime="20161207 04:52:09.139"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 04:52:10.763" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 04:52:10.763" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:52:09.139" endtime="20161207 04:52:10.763"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:52:10.770" level="INFO">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:52:10.769" endtime="20161207 04:52:10.770"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:52:10.771" level="INFO">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:52:10.771" endtime="20161207 04:52:10.771"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:10.770" endtime="20161207 04:52:10.771"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:10.768" endtime="20161207 04:52:10.771"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:10.764" endtime="20161207 04:52:10.771"></status>
</kw>
<msg timestamp="20161207 04:52:10.772" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:52:08.413" endtime="20161207 04:52:10.772"></status>
</kw>
<msg timestamp="20161207 04:52:10.772" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:52:08.412" endtime="20161207 04:52:10.772"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:52:10.773" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:52:10.772" endtime="20161207 04:52:10.773"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 04:52:10.774" level="INFO">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 04:52:10.774" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 04:52:10.774" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': 0}</msg>
<status status="PASS" starttime="20161207 04:52:10.773" endtime="20161207 04:52:10.774"></status>
</kw>
<msg timestamp="20161207 04:52:10.774" level="INFO">${state} = 0</msg>
<status status="PASS" starttime="20161207 04:52:08.410" endtime="20161207 04:52:10.774"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:52:10.775" endtime="20161207 04:52:10.775"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:08.410" endtime="20161207 04:52:10.775"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:08.410" endtime="20161207 04:52:10.775"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:07.571" endtime="20161207 04:52:10.776"></status>
</kw>
<kw library="poweroffs" name="Check Power Off States">
<doc>Checks that the BMC state, power state, and boot progress</doc>
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 04:52:10.777" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161207 04:52:10.777" endtime="20161207 04:52:10.777"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 04:52:10.778" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161207 04:52:10.778" endtime="20161207 04:52:10.778"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 04:52:10.780" level="INFO">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status status="PASS" starttime="20161207 04:52:10.779" endtime="20161207 04:52:10.780"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 04:52:10.782" level="INFO">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status status="PASS" starttime="20161207 04:52:10.781" endtime="20161207 04:52:10.782"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 04:52:10.783" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161207 04:52:10.782" endtime="20161207 04:52:10.783"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:52:10.783" endtime="20161207 04:52:10.784"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:52:10.790" level="INFO">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161207 04:52:10.789" endtime="20161207 04:52:10.790"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:52:10.791" level="INFO">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161207 04:52:10.791" endtime="20161207 04:52:10.791"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:10.790" endtime="20161207 04:52:10.791"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:10.788" endtime="20161207 04:52:10.792"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:10.784" endtime="20161207 04:52:10.792"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 04:52:10.793" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161207 04:52:10.792" endtime="20161207 04:52:10.793"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 04:52:10.794" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161207 04:52:10.794" endtime="20161207 04:52:10.794"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 04:52:10.795" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161207 04:52:10.795" endtime="20161207 04:52:10.795"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 04:52:10.796" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161207 04:52:10.796" endtime="20161207 04:52:10.796"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 04:52:11.687" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 04:52:11.688" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:52:10.797" endtime="20161207 04:52:11.688"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:52:11.689" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:52:11.688" endtime="20161207 04:52:11.689"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:10.792" endtime="20161207 04:52:11.689"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 04:52:12.160" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 04:52:12.161" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:52:11.689" endtime="20161207 04:52:12.161"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:52:12.167" level="INFO">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:52:12.166" endtime="20161207 04:52:12.167"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:52:12.168" level="INFO">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:52:12.168" endtime="20161207 04:52:12.169"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:12.167" endtime="20161207 04:52:12.169"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:12.166" endtime="20161207 04:52:12.169"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:12.161" endtime="20161207 04:52:12.169"></status>
</kw>
<msg timestamp="20161207 04:52:12.169" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:52:10.780" endtime="20161207 04:52:12.169"></status>
</kw>
<msg timestamp="20161207 04:52:12.170" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:52:10.778" endtime="20161207 04:52:12.170"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:52:12.170" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:52:12.170" endtime="20161207 04:52:12.171"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 04:52:12.171" level="INFO">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 04:52:12.171" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 04:52:12.171" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': 0}</msg>
<status status="PASS" starttime="20161207 04:52:12.171" endtime="20161207 04:52:12.172"></status>
</kw>
<msg timestamp="20161207 04:52:12.172" level="INFO">${power_state} = 0</msg>
<status status="PASS" starttime="20161207 04:52:10.776" endtime="20161207 04:52:12.172"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${power_state}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:52:12.172" endtime="20161207 04:52:12.173"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Power State: ${power_state}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:52:12.173" endtime="20161207 04:52:12.173"></status>
</kw>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 04:52:12.176" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20161207 04:52:12.176" endtime="20161207 04:52:12.176"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:52:12.182" level="INFO">${msg} = URI:https://9.3.23.30:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20161207 04:52:12.182" endtime="20161207 04:52:12.183"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:52:12.184" level="INFO">URI:https://9.3.23.30:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20161207 04:52:12.183" endtime="20161207 04:52:12.184"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:12.183" endtime="20161207 04:52:12.184"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:12.181" endtime="20161207 04:52:12.184"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:12.177" endtime="20161207 04:52:12.184"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 04:52:12.185" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161207 04:52:12.185" endtime="20161207 04:52:12.186"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 04:52:12.187" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161207 04:52:12.186" endtime="20161207 04:52:12.187"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 04:52:12.187" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161207 04:52:12.187" endtime="20161207 04:52:12.188"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 04:52:12.188" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161207 04:52:12.188" endtime="20161207 04:52:12.188"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 04:52:12.695" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 04:52:12.695" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:52:12.189" endtime="20161207 04:52:12.695"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:52:12.696" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:52:12.695" endtime="20161207 04:52:12.696"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:12.184" endtime="20161207 04:52:12.697"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 04:52:12.773" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None </msg>
<msg timestamp="20161207 04:52:12.774" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:52:12.697" endtime="20161207 04:52:12.774"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:52:12.779" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:52:12.779" endtime="20161207 04:52:12.779"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:52:12.781" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:52:12.780" endtime="20161207 04:52:12.781"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:12.780" endtime="20161207 04:52:12.781"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:12.778" endtime="20161207 04:52:12.781"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:12.774" endtime="20161207 04:52:12.781"></status>
</kw>
<msg timestamp="20161207 04:52:12.781" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:52:12.175" endtime="20161207 04:52:12.781"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 04:52:12.782" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 04:52:12.782" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 04:52:12.782" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status status="PASS" starttime="20161207 04:52:12.782" endtime="20161207 04:52:12.782"></status>
</kw>
<msg timestamp="20161207 04:52:12.783" level="INFO">${state} = Off</msg>
<status status="PASS" starttime="20161207 04:52:12.174" endtime="20161207 04:52:12.783"></status>
</kw>
<msg timestamp="20161207 04:52:12.783" level="INFO">${boot_progress} = Off</msg>
<status status="PASS" starttime="20161207 04:52:12.174" endtime="20161207 04:52:12.783"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>Off</arg>
</arguments>
<status status="PASS" starttime="20161207 04:52:12.783" endtime="20161207 04:52:12.784"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Boot Progress: ${boot_progress}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:52:12.784" endtime="20161207 04:52:12.784"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>BMC_READY</arg>
<arg>HOST_POWERED_OFF</arg>
</arguments>
<assign>
<var>@{states}</var>
</assign>
<msg timestamp="20161207 04:52:12.785" level="INFO">@{states} = [ BMC_READY | HOST_POWERED_OFF ]</msg>
<status status="PASS" starttime="20161207 04:52:12.785" endtime="20161207 04:52:12.785"></status>
</kw>
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 04:52:12.786" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161207 04:52:12.786" endtime="20161207 04:52:12.786"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 04:52:12.787" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161207 04:52:12.786" endtime="20161207 04:52:12.787"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 04:52:12.789" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" starttime="20161207 04:52:12.788" endtime="20161207 04:52:12.789"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 04:52:12.790" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" starttime="20161207 04:52:12.790" endtime="20161207 04:52:12.791"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 04:52:12.791" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161207 04:52:12.791" endtime="20161207 04:52:12.791"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:52:12.792" endtime="20161207 04:52:12.792"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:52:12.800" level="INFO">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161207 04:52:12.797" endtime="20161207 04:52:12.801"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:52:12.802" level="INFO">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161207 04:52:12.802" endtime="20161207 04:52:12.802"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:12.801" endtime="20161207 04:52:12.802"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:12.796" endtime="20161207 04:52:12.802"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:12.792" endtime="20161207 04:52:12.803"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 04:52:12.804" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161207 04:52:12.803" endtime="20161207 04:52:12.804"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 04:52:12.805" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161207 04:52:12.805" endtime="20161207 04:52:12.805"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 04:52:12.806" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161207 04:52:12.805" endtime="20161207 04:52:12.806"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 04:52:12.807" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161207 04:52:12.806" endtime="20161207 04:52:12.807"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 04:52:13.241" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 04:52:13.241" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:52:12.807" endtime="20161207 04:52:13.241"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:52:13.242" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:52:13.242" endtime="20161207 04:52:13.243"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:12.803" endtime="20161207 04:52:13.243"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 04:52:13.662" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 04:52:13.663" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:52:13.243" endtime="20161207 04:52:13.663"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:52:13.669" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_READY", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:52:13.668" endtime="20161207 04:52:13.669"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:52:13.670" level="INFO">Response code:200, Content:{
  "data": "BMC_READY", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:52:13.670" endtime="20161207 04:52:13.670"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:13.669" endtime="20161207 04:52:13.671"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:13.668" endtime="20161207 04:52:13.671"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:13.663" endtime="20161207 04:52:13.671"></status>
</kw>
<msg timestamp="20161207 04:52:13.671" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:52:12.789" endtime="20161207 04:52:13.671"></status>
</kw>
<msg timestamp="20161207 04:52:13.671" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:52:12.787" endtime="20161207 04:52:13.671"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:52:13.672" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:52:13.672" endtime="20161207 04:52:13.672"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 04:52:13.673" level="INFO">To JSON using : content={
  "data": "BMC_READY", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 04:52:13.673" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 04:52:13.673" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'BMC_READY'}</msg>
<status status="PASS" starttime="20161207 04:52:13.673" endtime="20161207 04:52:13.673"></status>
</kw>
<msg timestamp="20161207 04:52:13.674" level="INFO">${bmc_state} = BMC_READY</msg>
<status status="PASS" starttime="20161207 04:52:12.785" endtime="20161207 04:52:13.674"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${states}</arg>
<arg>${bmc_state}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:52:13.674" endtime="20161207 04:52:13.674"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>BMC State: ${bmc_state}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:52:13.675" endtime="20161207 04:52:13.675"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:10.776" endtime="20161207 04:52:13.675"></status>
</kw>
<kw library="SSHLibrary" name="Close Connection">
<doc>Closes the current connection.</doc>
<status status="PASS" starttime="20161207 04:52:13.676" endtime="20161207 04:52:13.707"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:05.283" endtime="20161207 04:52:13.707"></status>
</kw>
<kw library="powerons" name="BMC Power On">
<doc>Powers on the system, checks that the OS is functional, and</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>alias=bmc_connection</arg>
</arguments>
<assign>
<var>&amp;{bmc_connection_args}</var>
</assign>
<msg timestamp="20161207 04:52:13.709" level="INFO">&amp;{bmc_connection_args} = { alias=bmc_connection }</msg>
<status status="PASS" starttime="20161207 04:52:13.709" endtime="20161207 04:52:13.709"></status>
</kw>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<arguments>
<arg>&amp;{bmc_connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20161207 04:52:13.712" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" starttime="20161207 04:52:13.711" endtime="20161207 04:52:13.712"></status>
</kw>
<msg timestamp="20161207 04:52:13.712" level="INFO">${has_host} = False</msg>
<status status="PASS" starttime="20161207 04:52:13.710" endtime="20161207 04:52:13.712"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:52:13.717" endtime="20161207 04:52:13.717"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:13.713" endtime="20161207 04:52:13.717"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20161207 04:52:13.723" level="INFO">${port_num} = 22</msg>
<status status="PASS" starttime="20161207 04:52:13.722" endtime="20161207 04:52:13.723"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20161207 04:52:13.723" level="INFO">${SSH_PORT} = 22</msg>
<status status="PASS" starttime="20161207 04:52:13.723" endtime="20161207 04:52:13.723"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20161207 04:52:13.724" level="INFO">${https_num} = 443</msg>
<status status="PASS" starttime="20161207 04:52:13.724" endtime="20161207 04:52:13.724"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20161207 04:52:13.725" level="INFO">${AUTH_URI} = https://9.3.23.30:443</msg>
<status status="PASS" starttime="20161207 04:52:13.724" endtime="20161207 04:52:13.725"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:13.722" endtime="20161207 04:52:13.725"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:13.717" endtime="20161207 04:52:13.725"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20161207 04:52:13.727" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" starttime="20161207 04:52:13.726" endtime="20161207 04:52:13.727"></status>
</kw>
<msg timestamp="20161207 04:52:13.727" level="INFO">${has_port} = False</msg>
<status status="PASS" starttime="20161207 04:52:13.726" endtime="20161207 04:52:13.727"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:52:13.732" endtime="20161207 04:52:13.733"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:52:13.733" endtime="20161207 04:52:13.734"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:13.732" endtime="20161207 04:52:13.734"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:13.727" endtime="20161207 04:52:13.734"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20161207 04:52:13.734" level="INFO">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg timestamp="20161207 04:52:16.387" level="INFO">Read output: 7[r[999;999H[6n</msg>
<status status="PASS" starttime="20161207 04:52:13.734" endtime="20161207 04:52:16.388"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:13.709" endtime="20161207 04:52:16.389"></status>
</kw>
<kw library="utils" name="Initiate Power On">
<doc>Initiates the power on and waits until the Is Power On</doc>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 04:52:16.393" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161207 04:52:16.392" endtime="20161207 04:52:16.393"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 04:52:16.395" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161207 04:52:16.394" endtime="20161207 04:52:16.395"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>powerOn</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 04:52:16.397" level="INFO">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status status="PASS" starttime="20161207 04:52:16.397" endtime="20161207 04:52:16.397"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 04:52:16.400" level="INFO">${base_uri} = /org/openbmc/control/chassis0//action/powerOn</msg>
<status status="PASS" starttime="20161207 04:52:16.399" endtime="20161207 04:52:16.400"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 04:52:16.401" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161207 04:52:16.400" endtime="20161207 04:52:16.401"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:52:16.401" endtime="20161207 04:52:16.401"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:52:16.409" level="INFO">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/powerOn, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161207 04:52:16.408" endtime="20161207 04:52:16.409"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:52:16.410" level="INFO">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/powerOn, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161207 04:52:16.410" endtime="20161207 04:52:16.410"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:16.409" endtime="20161207 04:52:16.411"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:16.407" endtime="20161207 04:52:16.411"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:16.402" endtime="20161207 04:52:16.411"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 04:52:16.412" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161207 04:52:16.412" endtime="20161207 04:52:16.413"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 04:52:16.413" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161207 04:52:16.413" endtime="20161207 04:52:16.414"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 04:52:16.414" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161207 04:52:16.414" endtime="20161207 04:52:16.414"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 04:52:16.415" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161207 04:52:16.415" endtime="20161207 04:52:16.415"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 04:52:16.775" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 04:52:16.775" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:52:16.416" endtime="20161207 04:52:16.775"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:52:16.777" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:52:16.776" endtime="20161207 04:52:16.777"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:16.411" endtime="20161207 04:52:16.777"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 04:52:17.066" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/powerOn, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 04:52:17.067" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:52:16.777" endtime="20161207 04:52:17.067"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:52:17.092" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:52:17.090" endtime="20161207 04:52:17.092"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:52:17.095" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:52:17.094" endtime="20161207 04:52:17.096"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:17.093" endtime="20161207 04:52:17.096"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:17.088" endtime="20161207 04:52:17.096"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:17.069" endtime="20161207 04:52:17.096"></status>
</kw>
<msg timestamp="20161207 04:52:17.097" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:52:16.398" endtime="20161207 04:52:17.097"></status>
</kw>
<msg timestamp="20161207 04:52:17.097" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:52:16.395" endtime="20161207 04:52:17.097"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:52:17.099" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:52:17.098" endtime="20161207 04:52:17.099"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" starttime="20161207 04:52:17.100" endtime="20161207 04:52:17.108"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3 min</arg>
<arg>10 sec</arg>
<arg>Is Power On</arg>
</arguments>
<kw library="utils" name="Is Power On">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 04:52:17.112" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161207 04:52:17.111" endtime="20161207 04:52:17.112"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 04:52:17.113" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161207 04:52:17.112" endtime="20161207 04:52:17.113"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 04:52:17.115" level="INFO">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status status="PASS" starttime="20161207 04:52:17.114" endtime="20161207 04:52:17.115"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 04:52:17.117" level="INFO">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status status="PASS" starttime="20161207 04:52:17.117" endtime="20161207 04:52:17.117"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 04:52:17.118" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161207 04:52:17.118" endtime="20161207 04:52:17.118"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:52:17.119" endtime="20161207 04:52:17.119"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:52:17.127" level="INFO">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161207 04:52:17.126" endtime="20161207 04:52:17.127"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:52:17.131" level="INFO">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161207 04:52:17.130" endtime="20161207 04:52:17.132"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:17.128" endtime="20161207 04:52:17.132"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:17.125" endtime="20161207 04:52:17.132"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:17.120" endtime="20161207 04:52:17.132"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 04:52:17.135" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161207 04:52:17.134" endtime="20161207 04:52:17.136"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 04:52:17.137" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161207 04:52:17.136" endtime="20161207 04:52:17.137"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 04:52:17.138" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161207 04:52:17.137" endtime="20161207 04:52:17.138"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 04:52:17.138" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161207 04:52:17.138" endtime="20161207 04:52:17.138"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 04:52:21.210" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 04:52:21.211" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:52:17.139" endtime="20161207 04:52:21.211"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:52:21.213" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:52:21.212" endtime="20161207 04:52:21.214"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:17.133" endtime="20161207 04:52:21.214"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 04:52:21.828" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 04:52:21.828" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:52:21.214" endtime="20161207 04:52:21.828"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:52:21.834" level="INFO">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:52:21.834" endtime="20161207 04:52:21.834"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:52:21.836" level="INFO">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:52:21.835" endtime="20161207 04:52:21.836"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:21.835" endtime="20161207 04:52:21.836"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:21.833" endtime="20161207 04:52:21.836"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:21.829" endtime="20161207 04:52:21.836"></status>
</kw>
<msg timestamp="20161207 04:52:21.836" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:52:17.115" endtime="20161207 04:52:21.836"></status>
</kw>
<msg timestamp="20161207 04:52:21.837" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:52:17.113" endtime="20161207 04:52:21.837"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:52:21.838" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:52:21.837" endtime="20161207 04:52:21.838"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 04:52:21.839" level="INFO">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 04:52:21.839" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 04:52:21.839" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': 0}</msg>
<status status="PASS" starttime="20161207 04:52:21.838" endtime="20161207 04:52:21.839"></status>
</kw>
<msg timestamp="20161207 04:52:21.839" level="INFO">${state} = 0</msg>
<status status="PASS" starttime="20161207 04:52:17.111" endtime="20161207 04:52:21.839"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg timestamp="20161207 04:52:21.840" level="FAIL">0 != 1</msg>
<status status="FAIL" starttime="20161207 04:52:21.839" endtime="20161207 04:52:21.840"></status>
</kw>
<status status="FAIL" starttime="20161207 04:52:17.110" endtime="20161207 04:52:21.840"></status>
</kw>
<kw library="utils" name="Is Power On">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 04:52:31.844" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161207 04:52:31.843" endtime="20161207 04:52:31.844"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 04:52:31.845" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161207 04:52:31.844" endtime="20161207 04:52:31.845"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 04:52:31.847" level="INFO">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status status="PASS" starttime="20161207 04:52:31.846" endtime="20161207 04:52:31.847"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 04:52:31.849" level="INFO">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status status="PASS" starttime="20161207 04:52:31.848" endtime="20161207 04:52:31.849"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 04:52:31.850" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161207 04:52:31.849" endtime="20161207 04:52:31.850"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:52:31.850" endtime="20161207 04:52:31.850"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:52:31.857" level="INFO">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161207 04:52:31.856" endtime="20161207 04:52:31.857"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:52:31.858" level="INFO">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161207 04:52:31.858" endtime="20161207 04:52:31.858"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:31.857" endtime="20161207 04:52:31.858"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:31.855" endtime="20161207 04:52:31.859"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:31.851" endtime="20161207 04:52:31.859"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 04:52:31.860" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161207 04:52:31.859" endtime="20161207 04:52:31.860"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 04:52:31.861" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161207 04:52:31.861" endtime="20161207 04:52:31.861"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 04:52:31.862" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161207 04:52:31.862" endtime="20161207 04:52:31.862"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 04:52:31.863" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161207 04:52:31.862" endtime="20161207 04:52:31.863"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 04:52:32.226" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 04:52:32.227" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:52:31.863" endtime="20161207 04:52:32.227"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:52:32.229" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:52:32.227" endtime="20161207 04:52:32.229"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:31.859" endtime="20161207 04:52:32.229"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 04:52:32.496" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 04:52:32.496" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:52:32.230" endtime="20161207 04:52:32.496"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:52:32.502" level="INFO">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:52:32.502" endtime="20161207 04:52:32.502"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:52:32.504" level="INFO">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:52:32.503" endtime="20161207 04:52:32.504"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:32.503" endtime="20161207 04:52:32.504"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:32.501" endtime="20161207 04:52:32.504"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:32.497" endtime="20161207 04:52:32.504"></status>
</kw>
<msg timestamp="20161207 04:52:32.504" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:52:31.847" endtime="20161207 04:52:32.504"></status>
</kw>
<msg timestamp="20161207 04:52:32.505" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:52:31.845" endtime="20161207 04:52:32.505"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:52:32.506" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:52:32.505" endtime="20161207 04:52:32.506"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 04:52:32.506" level="INFO">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 04:52:32.506" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 04:52:32.507" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': 0}</msg>
<status status="PASS" starttime="20161207 04:52:32.506" endtime="20161207 04:52:32.507"></status>
</kw>
<msg timestamp="20161207 04:52:32.507" level="INFO">${state} = 0</msg>
<status status="PASS" starttime="20161207 04:52:31.842" endtime="20161207 04:52:32.507"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg timestamp="20161207 04:52:32.508" level="FAIL">0 != 1</msg>
<status status="FAIL" starttime="20161207 04:52:32.507" endtime="20161207 04:52:32.508"></status>
</kw>
<status status="FAIL" starttime="20161207 04:52:31.841" endtime="20161207 04:52:32.508"></status>
</kw>
<kw library="utils" name="Is Power On">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 04:52:42.512" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161207 04:52:42.512" endtime="20161207 04:52:42.512"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 04:52:42.514" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161207 04:52:42.513" endtime="20161207 04:52:42.514"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 04:52:42.516" level="INFO">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status status="PASS" starttime="20161207 04:52:42.516" endtime="20161207 04:52:42.516"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 04:52:42.518" level="INFO">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status status="PASS" starttime="20161207 04:52:42.518" endtime="20161207 04:52:42.519"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 04:52:42.519" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161207 04:52:42.519" endtime="20161207 04:52:42.519"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:52:42.520" endtime="20161207 04:52:42.520"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:52:42.526" level="INFO">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161207 04:52:42.526" endtime="20161207 04:52:42.526"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:52:42.527" level="INFO">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161207 04:52:42.527" endtime="20161207 04:52:42.527"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:42.527" endtime="20161207 04:52:42.527"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:42.525" endtime="20161207 04:52:42.528"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:42.521" endtime="20161207 04:52:42.528"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 04:52:42.529" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161207 04:52:42.528" endtime="20161207 04:52:42.529"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 04:52:42.530" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161207 04:52:42.530" endtime="20161207 04:52:42.530"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 04:52:42.530" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161207 04:52:42.530" endtime="20161207 04:52:42.530"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 04:52:42.531" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161207 04:52:42.531" endtime="20161207 04:52:42.531"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 04:52:42.863" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 04:52:42.863" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:52:42.531" endtime="20161207 04:52:42.863"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:52:42.864" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:52:42.864" endtime="20161207 04:52:42.864"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:42.528" endtime="20161207 04:52:42.864"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 04:52:43.139" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 04:52:43.139" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:52:42.864" endtime="20161207 04:52:43.139"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:52:43.143" level="INFO">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:52:43.142" endtime="20161207 04:52:43.143"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:52:43.144" level="INFO">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:52:43.143" endtime="20161207 04:52:43.144"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:43.143" endtime="20161207 04:52:43.144"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:43.142" endtime="20161207 04:52:43.144"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:43.139" endtime="20161207 04:52:43.144"></status>
</kw>
<msg timestamp="20161207 04:52:43.144" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:52:42.517" endtime="20161207 04:52:43.144"></status>
</kw>
<msg timestamp="20161207 04:52:43.145" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:52:42.514" endtime="20161207 04:52:43.145"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:52:43.145" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:52:43.145" endtime="20161207 04:52:43.145"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 04:52:43.146" level="INFO">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 04:52:43.146" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 04:52:43.146" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': 0}</msg>
<status status="PASS" starttime="20161207 04:52:43.145" endtime="20161207 04:52:43.146"></status>
</kw>
<msg timestamp="20161207 04:52:43.146" level="INFO">${state} = 0</msg>
<status status="PASS" starttime="20161207 04:52:42.511" endtime="20161207 04:52:43.146"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg timestamp="20161207 04:52:43.147" level="FAIL">0 != 1</msg>
<status status="FAIL" starttime="20161207 04:52:43.146" endtime="20161207 04:52:43.147"></status>
</kw>
<status status="FAIL" starttime="20161207 04:52:42.509" endtime="20161207 04:52:43.147"></status>
</kw>
<kw library="utils" name="Is Power On">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 04:52:53.150" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161207 04:52:53.150" endtime="20161207 04:52:53.150"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 04:52:53.151" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161207 04:52:53.150" endtime="20161207 04:52:53.151"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 04:52:53.153" level="INFO">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status status="PASS" starttime="20161207 04:52:53.152" endtime="20161207 04:52:53.153"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 04:52:53.155" level="INFO">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status status="PASS" starttime="20161207 04:52:53.155" endtime="20161207 04:52:53.155"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 04:52:53.156" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161207 04:52:53.156" endtime="20161207 04:52:53.156"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:52:53.156" endtime="20161207 04:52:53.157"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:52:53.163" level="INFO">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161207 04:52:53.162" endtime="20161207 04:52:53.163"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:52:53.165" level="INFO">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161207 04:52:53.164" endtime="20161207 04:52:53.165"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:53.163" endtime="20161207 04:52:53.165"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:53.161" endtime="20161207 04:52:53.165"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:53.157" endtime="20161207 04:52:53.165"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 04:52:53.167" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161207 04:52:53.166" endtime="20161207 04:52:53.167"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 04:52:53.168" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161207 04:52:53.167" endtime="20161207 04:52:53.168"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 04:52:53.169" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161207 04:52:53.168" endtime="20161207 04:52:53.169"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 04:52:53.170" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161207 04:52:53.169" endtime="20161207 04:52:53.170"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 04:52:53.717" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 04:52:53.717" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:52:53.170" endtime="20161207 04:52:53.717"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:52:53.718" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:52:53.717" endtime="20161207 04:52:53.718"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:53.165" endtime="20161207 04:52:53.718"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 04:52:54.016" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 04:52:54.016" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:52:53.718" endtime="20161207 04:52:54.016"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:52:54.022" level="INFO">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:52:54.021" endtime="20161207 04:52:54.022"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:52:54.023" level="INFO">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:52:54.023" endtime="20161207 04:52:54.023"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:54.022" endtime="20161207 04:52:54.023"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:54.021" endtime="20161207 04:52:54.024"></status>
</kw>
<status status="PASS" starttime="20161207 04:52:54.016" endtime="20161207 04:52:54.024"></status>
</kw>
<msg timestamp="20161207 04:52:54.024" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:52:53.153" endtime="20161207 04:52:54.024"></status>
</kw>
<msg timestamp="20161207 04:52:54.024" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:52:53.151" endtime="20161207 04:52:54.024"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:52:54.025" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:52:54.025" endtime="20161207 04:52:54.025"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 04:52:54.026" level="INFO">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 04:52:54.026" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 04:52:54.026" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': 0}</msg>
<status status="PASS" starttime="20161207 04:52:54.026" endtime="20161207 04:52:54.026"></status>
</kw>
<msg timestamp="20161207 04:52:54.027" level="INFO">${state} = 0</msg>
<status status="PASS" starttime="20161207 04:52:53.149" endtime="20161207 04:52:54.027"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg timestamp="20161207 04:52:54.027" level="FAIL">0 != 1</msg>
<status status="FAIL" starttime="20161207 04:52:54.027" endtime="20161207 04:52:54.027"></status>
</kw>
<status status="FAIL" starttime="20161207 04:52:53.148" endtime="20161207 04:52:54.028"></status>
</kw>
<kw library="utils" name="Is Power On">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 04:53:04.046" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161207 04:53:04.045" endtime="20161207 04:53:04.046"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 04:53:04.046" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161207 04:53:04.046" endtime="20161207 04:53:04.046"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 04:53:04.047" level="INFO">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status status="PASS" starttime="20161207 04:53:04.047" endtime="20161207 04:53:04.047"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 04:53:04.049" level="INFO">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status status="PASS" starttime="20161207 04:53:04.048" endtime="20161207 04:53:04.049"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 04:53:04.049" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161207 04:53:04.049" endtime="20161207 04:53:04.049"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:53:04.049" endtime="20161207 04:53:04.050"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:53:04.054" level="INFO">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161207 04:53:04.053" endtime="20161207 04:53:04.054"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:53:04.055" level="INFO">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161207 04:53:04.055" endtime="20161207 04:53:04.055"></status>
</kw>
<status status="PASS" starttime="20161207 04:53:04.054" endtime="20161207 04:53:04.055"></status>
</kw>
<status status="PASS" starttime="20161207 04:53:04.053" endtime="20161207 04:53:04.055"></status>
</kw>
<status status="PASS" starttime="20161207 04:53:04.050" endtime="20161207 04:53:04.055"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 04:53:04.056" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161207 04:53:04.056" endtime="20161207 04:53:04.057"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 04:53:04.057" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161207 04:53:04.057" endtime="20161207 04:53:04.057"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 04:53:04.058" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161207 04:53:04.057" endtime="20161207 04:53:04.058"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 04:53:04.058" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161207 04:53:04.058" endtime="20161207 04:53:04.058"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 04:53:04.536" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 04:53:04.537" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:53:04.058" endtime="20161207 04:53:04.537"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:53:04.538" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:53:04.537" endtime="20161207 04:53:04.538"></status>
</kw>
<status status="PASS" starttime="20161207 04:53:04.055" endtime="20161207 04:53:04.538"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 04:53:05.045" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 04:53:05.046" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:53:04.539" endtime="20161207 04:53:05.046"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:53:05.053" level="INFO">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:53:05.052" endtime="20161207 04:53:05.053"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:53:05.054" level="INFO">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:53:05.054" endtime="20161207 04:53:05.055"></status>
</kw>
<status status="PASS" starttime="20161207 04:53:05.053" endtime="20161207 04:53:05.055"></status>
</kw>
<status status="PASS" starttime="20161207 04:53:05.051" endtime="20161207 04:53:05.055"></status>
</kw>
<status status="PASS" starttime="20161207 04:53:05.046" endtime="20161207 04:53:05.055"></status>
</kw>
<msg timestamp="20161207 04:53:05.055" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:53:04.048" endtime="20161207 04:53:05.055"></status>
</kw>
<msg timestamp="20161207 04:53:05.056" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:53:04.047" endtime="20161207 04:53:05.056"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:53:05.057" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:53:05.056" endtime="20161207 04:53:05.057"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 04:53:05.058" level="INFO">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 04:53:05.058" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 04:53:05.058" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': 0}</msg>
<status status="PASS" starttime="20161207 04:53:05.057" endtime="20161207 04:53:05.058"></status>
</kw>
<msg timestamp="20161207 04:53:05.058" level="INFO">${state} = 0</msg>
<status status="PASS" starttime="20161207 04:53:04.045" endtime="20161207 04:53:05.059"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg timestamp="20161207 04:53:05.060" level="FAIL">0 != 1</msg>
<status status="FAIL" starttime="20161207 04:53:05.059" endtime="20161207 04:53:05.060"></status>
</kw>
<status status="FAIL" starttime="20161207 04:53:04.034" endtime="20161207 04:53:05.060"></status>
</kw>
<kw library="utils" name="Is Power On">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 04:53:15.062" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161207 04:53:15.062" endtime="20161207 04:53:15.062"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 04:53:15.063" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161207 04:53:15.062" endtime="20161207 04:53:15.063"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 04:53:15.064" level="INFO">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status status="PASS" starttime="20161207 04:53:15.064" endtime="20161207 04:53:15.064"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 04:53:15.066" level="INFO">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status status="PASS" starttime="20161207 04:53:15.065" endtime="20161207 04:53:15.066"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 04:53:15.066" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161207 04:53:15.066" endtime="20161207 04:53:15.066"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:53:15.067" endtime="20161207 04:53:15.067"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:53:15.071" level="INFO">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161207 04:53:15.071" endtime="20161207 04:53:15.071"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:53:15.072" level="INFO">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161207 04:53:15.072" endtime="20161207 04:53:15.072"></status>
</kw>
<status status="PASS" starttime="20161207 04:53:15.072" endtime="20161207 04:53:15.073"></status>
</kw>
<status status="PASS" starttime="20161207 04:53:15.070" endtime="20161207 04:53:15.073"></status>
</kw>
<status status="PASS" starttime="20161207 04:53:15.067" endtime="20161207 04:53:15.073"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 04:53:15.074" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161207 04:53:15.073" endtime="20161207 04:53:15.074"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 04:53:15.074" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161207 04:53:15.074" endtime="20161207 04:53:15.074"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 04:53:15.075" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161207 04:53:15.075" endtime="20161207 04:53:15.075"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 04:53:15.076" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161207 04:53:15.075" endtime="20161207 04:53:15.076"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 04:53:15.410" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 04:53:15.410" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:53:15.076" endtime="20161207 04:53:15.410"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:53:15.411" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:53:15.411" endtime="20161207 04:53:15.411"></status>
</kw>
<status status="PASS" starttime="20161207 04:53:15.073" endtime="20161207 04:53:15.411"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 04:53:15.678" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 04:53:15.679" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:53:15.411" endtime="20161207 04:53:15.679"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:53:15.689" level="INFO">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:53:15.688" endtime="20161207 04:53:15.689"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:53:15.690" level="INFO">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:53:15.690" endtime="20161207 04:53:15.690"></status>
</kw>
<status status="PASS" starttime="20161207 04:53:15.689" endtime="20161207 04:53:15.691"></status>
</kw>
<status status="PASS" starttime="20161207 04:53:15.687" endtime="20161207 04:53:15.691"></status>
</kw>
<status status="PASS" starttime="20161207 04:53:15.679" endtime="20161207 04:53:15.691"></status>
</kw>
<msg timestamp="20161207 04:53:15.691" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:53:15.064" endtime="20161207 04:53:15.691"></status>
</kw>
<msg timestamp="20161207 04:53:15.692" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:53:15.063" endtime="20161207 04:53:15.692"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:53:15.693" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:53:15.692" endtime="20161207 04:53:15.693"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 04:53:15.694" level="INFO">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 04:53:15.694" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 04:53:15.694" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': 0}</msg>
<status status="PASS" starttime="20161207 04:53:15.693" endtime="20161207 04:53:15.694"></status>
</kw>
<msg timestamp="20161207 04:53:15.694" level="INFO">${state} = 0</msg>
<status status="PASS" starttime="20161207 04:53:15.061" endtime="20161207 04:53:15.695"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg timestamp="20161207 04:53:15.695" level="FAIL">0 != 1</msg>
<status status="FAIL" starttime="20161207 04:53:15.695" endtime="20161207 04:53:15.695"></status>
</kw>
<status status="FAIL" starttime="20161207 04:53:15.061" endtime="20161207 04:53:15.696"></status>
</kw>
<kw library="utils" name="Is Power On">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 04:53:25.699" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161207 04:53:25.699" endtime="20161207 04:53:25.699"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 04:53:25.700" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161207 04:53:25.699" endtime="20161207 04:53:25.700"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 04:53:25.702" level="INFO">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status status="PASS" starttime="20161207 04:53:25.702" endtime="20161207 04:53:25.702"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 04:53:25.704" level="INFO">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status status="PASS" starttime="20161207 04:53:25.704" endtime="20161207 04:53:25.704"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 04:53:25.705" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161207 04:53:25.705" endtime="20161207 04:53:25.705"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:53:25.706" endtime="20161207 04:53:25.706"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:53:25.713" level="INFO">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161207 04:53:25.712" endtime="20161207 04:53:25.713"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:53:25.715" level="INFO">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161207 04:53:25.714" endtime="20161207 04:53:25.715"></status>
</kw>
<status status="PASS" starttime="20161207 04:53:25.714" endtime="20161207 04:53:25.715"></status>
</kw>
<status status="PASS" starttime="20161207 04:53:25.711" endtime="20161207 04:53:25.715"></status>
</kw>
<status status="PASS" starttime="20161207 04:53:25.707" endtime="20161207 04:53:25.715"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 04:53:25.716" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161207 04:53:25.716" endtime="20161207 04:53:25.717"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 04:53:25.717" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161207 04:53:25.717" endtime="20161207 04:53:25.718"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 04:53:25.718" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161207 04:53:25.718" endtime="20161207 04:53:25.718"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 04:53:25.719" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161207 04:53:25.718" endtime="20161207 04:53:25.719"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 04:53:26.053" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 04:53:26.053" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:53:25.719" endtime="20161207 04:53:26.053"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:53:26.054" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:53:26.053" endtime="20161207 04:53:26.054"></status>
</kw>
<status status="PASS" starttime="20161207 04:53:25.716" endtime="20161207 04:53:26.054"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 04:53:26.322" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 04:53:26.322" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:53:26.054" endtime="20161207 04:53:26.322"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:53:26.326" level="INFO">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:53:26.326" endtime="20161207 04:53:26.326"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:53:26.327" level="INFO">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:53:26.327" endtime="20161207 04:53:26.327"></status>
</kw>
<status status="PASS" starttime="20161207 04:53:26.327" endtime="20161207 04:53:26.327"></status>
</kw>
<status status="PASS" starttime="20161207 04:53:26.326" endtime="20161207 04:53:26.328"></status>
</kw>
<status status="PASS" starttime="20161207 04:53:26.322" endtime="20161207 04:53:26.328"></status>
</kw>
<msg timestamp="20161207 04:53:26.328" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:53:25.702" endtime="20161207 04:53:26.328"></status>
</kw>
<msg timestamp="20161207 04:53:26.328" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:53:25.700" endtime="20161207 04:53:26.328"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:53:26.329" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:53:26.328" endtime="20161207 04:53:26.329"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 04:53:26.329" level="INFO">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 04:53:26.329" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 04:53:26.329" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': 0}</msg>
<status status="PASS" starttime="20161207 04:53:26.329" endtime="20161207 04:53:26.329"></status>
</kw>
<msg timestamp="20161207 04:53:26.329" level="INFO">${state} = 0</msg>
<status status="PASS" starttime="20161207 04:53:25.697" endtime="20161207 04:53:26.330"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg timestamp="20161207 04:53:26.330" level="FAIL">0 != 1</msg>
<status status="FAIL" starttime="20161207 04:53:26.330" endtime="20161207 04:53:26.330"></status>
</kw>
<status status="FAIL" starttime="20161207 04:53:25.696" endtime="20161207 04:53:26.331"></status>
</kw>
<kw library="utils" name="Is Power On">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 04:53:36.333" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161207 04:53:36.333" endtime="20161207 04:53:36.333"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 04:53:36.334" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161207 04:53:36.334" endtime="20161207 04:53:36.334"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 04:53:36.336" level="INFO">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status status="PASS" starttime="20161207 04:53:36.336" endtime="20161207 04:53:36.336"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 04:53:36.339" level="INFO">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status status="PASS" starttime="20161207 04:53:36.338" endtime="20161207 04:53:36.339"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 04:53:36.340" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161207 04:53:36.340" endtime="20161207 04:53:36.340"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:53:36.341" endtime="20161207 04:53:36.341"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:53:36.348" level="INFO">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161207 04:53:36.347" endtime="20161207 04:53:36.348"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:53:36.349" level="INFO">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161207 04:53:36.348" endtime="20161207 04:53:36.349"></status>
</kw>
<status status="PASS" starttime="20161207 04:53:36.348" endtime="20161207 04:53:36.349"></status>
</kw>
<status status="PASS" starttime="20161207 04:53:36.346" endtime="20161207 04:53:36.349"></status>
</kw>
<status status="PASS" starttime="20161207 04:53:36.341" endtime="20161207 04:53:36.349"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 04:53:36.350" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161207 04:53:36.350" endtime="20161207 04:53:36.350"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 04:53:36.351" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161207 04:53:36.351" endtime="20161207 04:53:36.351"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 04:53:36.351" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161207 04:53:36.351" endtime="20161207 04:53:36.351"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 04:53:36.352" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161207 04:53:36.352" endtime="20161207 04:53:36.352"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 04:53:36.682" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 04:53:36.683" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:53:36.352" endtime="20161207 04:53:36.683"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:53:36.684" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:53:36.683" endtime="20161207 04:53:36.684"></status>
</kw>
<status status="PASS" starttime="20161207 04:53:36.349" endtime="20161207 04:53:36.684"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 04:53:36.959" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 04:53:36.959" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:53:36.684" endtime="20161207 04:53:36.960"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:53:36.970" level="INFO">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:53:36.968" endtime="20161207 04:53:36.970"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:53:36.972" level="INFO">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:53:36.971" endtime="20161207 04:53:36.972"></status>
</kw>
<status status="PASS" starttime="20161207 04:53:36.970" endtime="20161207 04:53:36.972"></status>
</kw>
<status status="PASS" starttime="20161207 04:53:36.967" endtime="20161207 04:53:36.972"></status>
</kw>
<status status="PASS" starttime="20161207 04:53:36.960" endtime="20161207 04:53:36.973"></status>
</kw>
<msg timestamp="20161207 04:53:36.973" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:53:36.337" endtime="20161207 04:53:36.973"></status>
</kw>
<msg timestamp="20161207 04:53:36.973" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:53:36.334" endtime="20161207 04:53:36.973"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:53:36.974" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:53:36.974" endtime="20161207 04:53:36.974"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 04:53:36.975" level="INFO">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 04:53:36.975" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 04:53:36.976" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': 0}</msg>
<status status="PASS" starttime="20161207 04:53:36.975" endtime="20161207 04:53:36.976"></status>
</kw>
<msg timestamp="20161207 04:53:36.976" level="INFO">${state} = 0</msg>
<status status="PASS" starttime="20161207 04:53:36.332" endtime="20161207 04:53:36.976"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg timestamp="20161207 04:53:36.977" level="FAIL">0 != 1</msg>
<status status="FAIL" starttime="20161207 04:53:36.976" endtime="20161207 04:53:36.977"></status>
</kw>
<status status="FAIL" starttime="20161207 04:53:36.331" endtime="20161207 04:53:36.977"></status>
</kw>
<kw library="utils" name="Is Power On">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 04:53:46.979" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161207 04:53:46.978" endtime="20161207 04:53:46.979"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 04:53:46.979" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161207 04:53:46.979" endtime="20161207 04:53:46.979"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 04:53:46.981" level="INFO">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status status="PASS" starttime="20161207 04:53:46.980" endtime="20161207 04:53:46.981"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 04:53:46.982" level="INFO">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status status="PASS" starttime="20161207 04:53:46.982" endtime="20161207 04:53:46.982"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 04:53:46.983" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161207 04:53:46.982" endtime="20161207 04:53:46.983"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:53:46.983" endtime="20161207 04:53:46.983"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:53:46.988" level="INFO">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161207 04:53:46.987" endtime="20161207 04:53:46.988"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:53:46.988" level="INFO">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161207 04:53:46.988" endtime="20161207 04:53:46.988"></status>
</kw>
<status status="PASS" starttime="20161207 04:53:46.988" endtime="20161207 04:53:46.989"></status>
</kw>
<status status="PASS" starttime="20161207 04:53:46.986" endtime="20161207 04:53:46.989"></status>
</kw>
<status status="PASS" starttime="20161207 04:53:46.983" endtime="20161207 04:53:46.989"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 04:53:46.990" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161207 04:53:46.989" endtime="20161207 04:53:46.990"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 04:53:46.991" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161207 04:53:46.990" endtime="20161207 04:53:46.991"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 04:53:46.991" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161207 04:53:46.991" endtime="20161207 04:53:46.992"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 04:53:46.992" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161207 04:53:46.992" endtime="20161207 04:53:46.992"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 04:53:47.355" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 04:53:47.355" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:53:46.992" endtime="20161207 04:53:47.355"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:53:47.356" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:53:47.356" endtime="20161207 04:53:47.356"></status>
</kw>
<status status="PASS" starttime="20161207 04:53:46.989" endtime="20161207 04:53:47.356"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 04:53:47.620" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 04:53:47.621" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:53:47.357" endtime="20161207 04:53:47.621"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:53:47.628" level="INFO">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:53:47.627" endtime="20161207 04:53:47.628"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:53:47.629" level="INFO">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:53:47.629" endtime="20161207 04:53:47.629"></status>
</kw>
<status status="PASS" starttime="20161207 04:53:47.628" endtime="20161207 04:53:47.630"></status>
</kw>
<status status="PASS" starttime="20161207 04:53:47.626" endtime="20161207 04:53:47.630"></status>
</kw>
<status status="PASS" starttime="20161207 04:53:47.621" endtime="20161207 04:53:47.630"></status>
</kw>
<msg timestamp="20161207 04:53:47.630" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:53:46.981" endtime="20161207 04:53:47.630"></status>
</kw>
<msg timestamp="20161207 04:53:47.631" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:53:46.980" endtime="20161207 04:53:47.631"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:53:47.632" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:53:47.631" endtime="20161207 04:53:47.632"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 04:53:47.633" level="INFO">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 04:53:47.633" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 04:53:47.633" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': 0}</msg>
<status status="PASS" starttime="20161207 04:53:47.632" endtime="20161207 04:53:47.633"></status>
</kw>
<msg timestamp="20161207 04:53:47.633" level="INFO">${state} = 0</msg>
<status status="PASS" starttime="20161207 04:53:46.978" endtime="20161207 04:53:47.633"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg timestamp="20161207 04:53:47.634" level="FAIL">0 != 1</msg>
<status status="FAIL" starttime="20161207 04:53:47.634" endtime="20161207 04:53:47.635"></status>
</kw>
<status status="FAIL" starttime="20161207 04:53:46.977" endtime="20161207 04:53:47.635"></status>
</kw>
<kw library="utils" name="Is Power On">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 04:53:57.639" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161207 04:53:57.638" endtime="20161207 04:53:57.639"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 04:53:57.640" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161207 04:53:57.639" endtime="20161207 04:53:57.640"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 04:53:57.643" level="INFO">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status status="PASS" starttime="20161207 04:53:57.642" endtime="20161207 04:53:57.643"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 04:53:57.645" level="INFO">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status status="PASS" starttime="20161207 04:53:57.644" endtime="20161207 04:53:57.645"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 04:53:57.646" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161207 04:53:57.645" endtime="20161207 04:53:57.646"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:53:57.646" endtime="20161207 04:53:57.647"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:53:57.651" level="INFO">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161207 04:53:57.650" endtime="20161207 04:53:57.652"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:53:57.652" level="INFO">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161207 04:53:57.652" endtime="20161207 04:53:57.652"></status>
</kw>
<status status="PASS" starttime="20161207 04:53:57.652" endtime="20161207 04:53:57.653"></status>
</kw>
<status status="PASS" starttime="20161207 04:53:57.650" endtime="20161207 04:53:57.653"></status>
</kw>
<status status="PASS" starttime="20161207 04:53:57.647" endtime="20161207 04:53:57.653"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 04:53:57.654" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161207 04:53:57.653" endtime="20161207 04:53:57.654"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 04:53:57.654" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161207 04:53:57.654" endtime="20161207 04:53:57.654"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 04:53:57.655" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161207 04:53:57.655" endtime="20161207 04:53:57.655"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 04:53:57.656" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161207 04:53:57.655" endtime="20161207 04:53:57.656"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 04:53:57.989" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 04:53:57.989" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:53:57.656" endtime="20161207 04:53:57.989"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:53:57.990" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:53:57.989" endtime="20161207 04:53:57.990"></status>
</kw>
<status status="PASS" starttime="20161207 04:53:57.653" endtime="20161207 04:53:57.990"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 04:53:58.258" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 04:53:58.258" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:53:57.990" endtime="20161207 04:53:58.258"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:53:58.262" level="INFO">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:53:58.262" endtime="20161207 04:53:58.262"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:53:58.263" level="INFO">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:53:58.263" endtime="20161207 04:53:58.263"></status>
</kw>
<status status="PASS" starttime="20161207 04:53:58.263" endtime="20161207 04:53:58.263"></status>
</kw>
<status status="PASS" starttime="20161207 04:53:58.261" endtime="20161207 04:53:58.264"></status>
</kw>
<status status="PASS" starttime="20161207 04:53:58.258" endtime="20161207 04:53:58.264"></status>
</kw>
<msg timestamp="20161207 04:53:58.264" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:53:57.643" endtime="20161207 04:53:58.264"></status>
</kw>
<msg timestamp="20161207 04:53:58.264" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:53:57.641" endtime="20161207 04:53:58.264"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:53:58.265" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:53:58.264" endtime="20161207 04:53:58.265"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 04:53:58.265" level="INFO">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 04:53:58.265" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 04:53:58.265" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': 0}</msg>
<status status="PASS" starttime="20161207 04:53:58.265" endtime="20161207 04:53:58.265"></status>
</kw>
<msg timestamp="20161207 04:53:58.266" level="INFO">${state} = 0</msg>
<status status="PASS" starttime="20161207 04:53:57.637" endtime="20161207 04:53:58.266"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg timestamp="20161207 04:53:58.266" level="FAIL">0 != 1</msg>
<status status="FAIL" starttime="20161207 04:53:58.266" endtime="20161207 04:53:58.266"></status>
</kw>
<status status="FAIL" starttime="20161207 04:53:57.636" endtime="20161207 04:53:58.266"></status>
</kw>
<kw library="utils" name="Is Power On">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 04:54:08.270" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161207 04:54:08.269" endtime="20161207 04:54:08.270"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 04:54:08.271" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161207 04:54:08.270" endtime="20161207 04:54:08.271"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 04:54:08.273" level="INFO">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status status="PASS" starttime="20161207 04:54:08.272" endtime="20161207 04:54:08.273"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 04:54:08.275" level="INFO">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status status="PASS" starttime="20161207 04:54:08.274" endtime="20161207 04:54:08.275"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 04:54:08.276" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161207 04:54:08.275" endtime="20161207 04:54:08.276"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:54:08.276" endtime="20161207 04:54:08.277"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:54:08.284" level="INFO">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161207 04:54:08.283" endtime="20161207 04:54:08.284"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:54:08.286" level="INFO">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161207 04:54:08.285" endtime="20161207 04:54:08.286"></status>
</kw>
<status status="PASS" starttime="20161207 04:54:08.284" endtime="20161207 04:54:08.286"></status>
</kw>
<status status="PASS" starttime="20161207 04:54:08.282" endtime="20161207 04:54:08.287"></status>
</kw>
<status status="PASS" starttime="20161207 04:54:08.277" endtime="20161207 04:54:08.287"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 04:54:08.288" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161207 04:54:08.287" endtime="20161207 04:54:08.288"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 04:54:08.288" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161207 04:54:08.288" endtime="20161207 04:54:08.288"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 04:54:08.289" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161207 04:54:08.289" endtime="20161207 04:54:08.289"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 04:54:08.290" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161207 04:54:08.289" endtime="20161207 04:54:08.290"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 04:54:08.804" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 04:54:08.804" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:54:08.290" endtime="20161207 04:54:08.804"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:54:08.804" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:54:08.804" endtime="20161207 04:54:08.805"></status>
</kw>
<status status="PASS" starttime="20161207 04:54:08.287" endtime="20161207 04:54:08.805"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 04:54:09.069" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 04:54:09.069" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:54:08.805" endtime="20161207 04:54:09.069"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:54:09.076" level="INFO">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:54:09.075" endtime="20161207 04:54:09.076"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:54:09.077" level="INFO">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:54:09.077" endtime="20161207 04:54:09.077"></status>
</kw>
<status status="PASS" starttime="20161207 04:54:09.076" endtime="20161207 04:54:09.077"></status>
</kw>
<status status="PASS" starttime="20161207 04:54:09.074" endtime="20161207 04:54:09.077"></status>
</kw>
<status status="PASS" starttime="20161207 04:54:09.069" endtime="20161207 04:54:09.077"></status>
</kw>
<msg timestamp="20161207 04:54:09.077" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:54:08.273" endtime="20161207 04:54:09.077"></status>
</kw>
<msg timestamp="20161207 04:54:09.078" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:54:08.271" endtime="20161207 04:54:09.078"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:54:09.078" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:54:09.078" endtime="20161207 04:54:09.078"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 04:54:09.079" level="INFO">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 04:54:09.079" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 04:54:09.079" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': 0}</msg>
<status status="PASS" starttime="20161207 04:54:09.079" endtime="20161207 04:54:09.079"></status>
</kw>
<msg timestamp="20161207 04:54:09.079" level="INFO">${state} = 0</msg>
<status status="PASS" starttime="20161207 04:54:08.268" endtime="20161207 04:54:09.079"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg timestamp="20161207 04:54:09.080" level="FAIL">0 != 1</msg>
<status status="FAIL" starttime="20161207 04:54:09.080" endtime="20161207 04:54:09.080"></status>
</kw>
<status status="FAIL" starttime="20161207 04:54:08.267" endtime="20161207 04:54:09.080"></status>
</kw>
<kw library="utils" name="Is Power On">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 04:54:19.084" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161207 04:54:19.084" endtime="20161207 04:54:19.084"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 04:54:19.085" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161207 04:54:19.085" endtime="20161207 04:54:19.085"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 04:54:19.088" level="INFO">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status status="PASS" starttime="20161207 04:54:19.087" endtime="20161207 04:54:19.088"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 04:54:19.090" level="INFO">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status status="PASS" starttime="20161207 04:54:19.089" endtime="20161207 04:54:19.090"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 04:54:19.091" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161207 04:54:19.090" endtime="20161207 04:54:19.091"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:54:19.092" endtime="20161207 04:54:19.092"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:54:19.098" level="INFO">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161207 04:54:19.098" endtime="20161207 04:54:19.098"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:54:19.099" level="INFO">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161207 04:54:19.099" endtime="20161207 04:54:19.099"></status>
</kw>
<status status="PASS" starttime="20161207 04:54:19.099" endtime="20161207 04:54:19.099"></status>
</kw>
<status status="PASS" starttime="20161207 04:54:19.097" endtime="20161207 04:54:19.100"></status>
</kw>
<status status="PASS" starttime="20161207 04:54:19.093" endtime="20161207 04:54:19.100"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 04:54:19.100" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161207 04:54:19.100" endtime="20161207 04:54:19.101"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 04:54:19.101" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161207 04:54:19.101" endtime="20161207 04:54:19.101"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 04:54:19.102" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161207 04:54:19.102" endtime="20161207 04:54:19.102"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 04:54:19.103" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161207 04:54:19.102" endtime="20161207 04:54:19.103"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 04:54:19.442" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 04:54:19.442" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:54:19.103" endtime="20161207 04:54:19.442"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:54:19.443" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:54:19.442" endtime="20161207 04:54:19.443"></status>
</kw>
<status status="PASS" starttime="20161207 04:54:19.100" endtime="20161207 04:54:19.443"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 04:54:19.854" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 04:54:19.854" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:54:19.443" endtime="20161207 04:54:19.854"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:54:19.860" level="INFO">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:54:19.859" endtime="20161207 04:54:19.860"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:54:19.862" level="INFO">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:54:19.861" endtime="20161207 04:54:19.862"></status>
</kw>
<status status="PASS" starttime="20161207 04:54:19.861" endtime="20161207 04:54:19.862"></status>
</kw>
<status status="PASS" starttime="20161207 04:54:19.858" endtime="20161207 04:54:19.862"></status>
</kw>
<status status="PASS" starttime="20161207 04:54:19.854" endtime="20161207 04:54:19.863"></status>
</kw>
<msg timestamp="20161207 04:54:19.863" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:54:19.088" endtime="20161207 04:54:19.863"></status>
</kw>
<msg timestamp="20161207 04:54:19.863" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:54:19.086" endtime="20161207 04:54:19.863"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:54:19.864" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:54:19.864" endtime="20161207 04:54:19.864"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 04:54:19.866" level="INFO">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 04:54:19.866" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 04:54:19.866" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': 0}</msg>
<status status="PASS" starttime="20161207 04:54:19.865" endtime="20161207 04:54:19.866"></status>
</kw>
<msg timestamp="20161207 04:54:19.866" level="INFO">${state} = 0</msg>
<status status="PASS" starttime="20161207 04:54:19.082" endtime="20161207 04:54:19.867"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg timestamp="20161207 04:54:19.867" level="FAIL">0 != 1</msg>
<status status="FAIL" starttime="20161207 04:54:19.867" endtime="20161207 04:54:19.867"></status>
</kw>
<status status="FAIL" starttime="20161207 04:54:19.081" endtime="20161207 04:54:19.868"></status>
</kw>
<kw library="utils" name="Is Power On">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 04:54:29.870" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161207 04:54:29.870" endtime="20161207 04:54:29.870"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 04:54:29.871" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161207 04:54:29.870" endtime="20161207 04:54:29.871"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 04:54:29.873" level="INFO">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status status="PASS" starttime="20161207 04:54:29.872" endtime="20161207 04:54:29.873"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 04:54:29.875" level="INFO">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status status="PASS" starttime="20161207 04:54:29.875" endtime="20161207 04:54:29.875"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 04:54:29.876" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161207 04:54:29.876" endtime="20161207 04:54:29.876"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:54:29.877" endtime="20161207 04:54:29.877"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:54:29.885" level="INFO">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161207 04:54:29.884" endtime="20161207 04:54:29.885"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:54:29.886" level="INFO">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161207 04:54:29.886" endtime="20161207 04:54:29.886"></status>
</kw>
<status status="PASS" starttime="20161207 04:54:29.885" endtime="20161207 04:54:29.887"></status>
</kw>
<status status="PASS" starttime="20161207 04:54:29.882" endtime="20161207 04:54:29.887"></status>
</kw>
<status status="PASS" starttime="20161207 04:54:29.877" endtime="20161207 04:54:29.887"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 04:54:29.888" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161207 04:54:29.887" endtime="20161207 04:54:29.888"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 04:54:29.889" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161207 04:54:29.888" endtime="20161207 04:54:29.889"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 04:54:29.889" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161207 04:54:29.889" endtime="20161207 04:54:29.889"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 04:54:29.890" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161207 04:54:29.890" endtime="20161207 04:54:29.890"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 04:54:30.222" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 04:54:30.223" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:54:29.890" endtime="20161207 04:54:30.223"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:54:30.224" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:54:30.223" endtime="20161207 04:54:30.224"></status>
</kw>
<status status="PASS" starttime="20161207 04:54:29.887" endtime="20161207 04:54:30.224"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 04:54:30.526" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 04:54:30.527" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:54:30.224" endtime="20161207 04:54:30.527"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:54:30.534" level="INFO">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:54:30.533" endtime="20161207 04:54:30.534"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:54:30.535" level="INFO">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:54:30.535" endtime="20161207 04:54:30.535"></status>
</kw>
<status status="PASS" starttime="20161207 04:54:30.534" endtime="20161207 04:54:30.535"></status>
</kw>
<status status="PASS" starttime="20161207 04:54:30.532" endtime="20161207 04:54:30.536"></status>
</kw>
<status status="PASS" starttime="20161207 04:54:30.527" endtime="20161207 04:54:30.536"></status>
</kw>
<msg timestamp="20161207 04:54:30.536" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:54:29.873" endtime="20161207 04:54:30.536"></status>
</kw>
<msg timestamp="20161207 04:54:30.537" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:54:29.871" endtime="20161207 04:54:30.537"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:54:30.537" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:54:30.537" endtime="20161207 04:54:30.537"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 04:54:30.538" level="INFO">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 04:54:30.538" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 04:54:30.538" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': 0}</msg>
<status status="PASS" starttime="20161207 04:54:30.538" endtime="20161207 04:54:30.538"></status>
</kw>
<msg timestamp="20161207 04:54:30.538" level="INFO">${state} = 0</msg>
<status status="PASS" starttime="20161207 04:54:29.869" endtime="20161207 04:54:30.538"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg timestamp="20161207 04:54:30.539" level="FAIL">0 != 1</msg>
<status status="FAIL" starttime="20161207 04:54:30.538" endtime="20161207 04:54:30.539"></status>
</kw>
<status status="FAIL" starttime="20161207 04:54:29.868" endtime="20161207 04:54:30.539"></status>
</kw>
<kw library="utils" name="Is Power On">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 04:54:40.542" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161207 04:54:40.541" endtime="20161207 04:54:40.542"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 04:54:40.543" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161207 04:54:40.542" endtime="20161207 04:54:40.543"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 04:54:40.545" level="INFO">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status status="PASS" starttime="20161207 04:54:40.544" endtime="20161207 04:54:40.545"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 04:54:40.547" level="INFO">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status status="PASS" starttime="20161207 04:54:40.546" endtime="20161207 04:54:40.548"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 04:54:40.549" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161207 04:54:40.548" endtime="20161207 04:54:40.549"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:54:40.549" endtime="20161207 04:54:40.549"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:54:40.557" level="INFO">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161207 04:54:40.556" endtime="20161207 04:54:40.557"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:54:40.558" level="INFO">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161207 04:54:40.558" endtime="20161207 04:54:40.558"></status>
</kw>
<status status="PASS" starttime="20161207 04:54:40.557" endtime="20161207 04:54:40.558"></status>
</kw>
<status status="PASS" starttime="20161207 04:54:40.555" endtime="20161207 04:54:40.558"></status>
</kw>
<status status="PASS" starttime="20161207 04:54:40.550" endtime="20161207 04:54:40.558"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 04:54:40.559" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161207 04:54:40.559" endtime="20161207 04:54:40.559"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 04:54:40.560" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161207 04:54:40.560" endtime="20161207 04:54:40.560"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 04:54:40.560" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161207 04:54:40.560" endtime="20161207 04:54:40.561"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 04:54:40.561" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161207 04:54:40.561" endtime="20161207 04:54:40.561"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 04:54:40.906" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 04:54:40.906" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:54:40.561" endtime="20161207 04:54:40.906"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:54:40.907" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:54:40.907" endtime="20161207 04:54:40.907"></status>
</kw>
<status status="PASS" starttime="20161207 04:54:40.558" endtime="20161207 04:54:40.907"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 04:54:41.287" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 04:54:41.287" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:54:40.908" endtime="20161207 04:54:41.287"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:54:41.297" level="INFO">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:54:41.296" endtime="20161207 04:54:41.297"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:54:41.297" level="INFO">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:54:41.297" endtime="20161207 04:54:41.297"></status>
</kw>
<status status="PASS" starttime="20161207 04:54:41.297" endtime="20161207 04:54:41.298"></status>
</kw>
<status status="PASS" starttime="20161207 04:54:41.293" endtime="20161207 04:54:41.298"></status>
</kw>
<status status="PASS" starttime="20161207 04:54:41.288" endtime="20161207 04:54:41.298"></status>
</kw>
<msg timestamp="20161207 04:54:41.298" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:54:40.545" endtime="20161207 04:54:41.298"></status>
</kw>
<msg timestamp="20161207 04:54:41.298" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:54:40.543" endtime="20161207 04:54:41.298"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:54:41.299" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:54:41.298" endtime="20161207 04:54:41.299"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 04:54:41.299" level="INFO">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 04:54:41.299" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 04:54:41.299" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': 0}</msg>
<status status="PASS" starttime="20161207 04:54:41.299" endtime="20161207 04:54:41.299"></status>
</kw>
<msg timestamp="20161207 04:54:41.300" level="INFO">${state} = 0</msg>
<status status="PASS" starttime="20161207 04:54:40.541" endtime="20161207 04:54:41.300"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg timestamp="20161207 04:54:41.302" level="FAIL">0 != 1</msg>
<status status="FAIL" starttime="20161207 04:54:41.300" endtime="20161207 04:54:41.302"></status>
</kw>
<status status="FAIL" starttime="20161207 04:54:40.540" endtime="20161207 04:54:41.302"></status>
</kw>
<kw library="utils" name="Is Power On">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 04:54:51.305" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161207 04:54:51.305" endtime="20161207 04:54:51.305"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 04:54:51.306" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161207 04:54:51.305" endtime="20161207 04:54:51.306"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 04:54:51.308" level="INFO">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status status="PASS" starttime="20161207 04:54:51.308" endtime="20161207 04:54:51.308"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 04:54:51.310" level="INFO">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status status="PASS" starttime="20161207 04:54:51.310" endtime="20161207 04:54:51.311"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 04:54:51.311" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161207 04:54:51.311" endtime="20161207 04:54:51.311"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:54:51.312" endtime="20161207 04:54:51.312"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:54:51.319" level="INFO">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161207 04:54:51.318" endtime="20161207 04:54:51.319"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:54:51.320" level="INFO">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161207 04:54:51.320" endtime="20161207 04:54:51.320"></status>
</kw>
<status status="PASS" starttime="20161207 04:54:51.319" endtime="20161207 04:54:51.320"></status>
</kw>
<status status="PASS" starttime="20161207 04:54:51.317" endtime="20161207 04:54:51.320"></status>
</kw>
<status status="PASS" starttime="20161207 04:54:51.313" endtime="20161207 04:54:51.320"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 04:54:51.322" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161207 04:54:51.321" endtime="20161207 04:54:51.322"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 04:54:51.355" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161207 04:54:51.323" endtime="20161207 04:54:51.355"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 04:54:51.356" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161207 04:54:51.356" endtime="20161207 04:54:51.357"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 04:54:51.357" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161207 04:54:51.357" endtime="20161207 04:54:51.357"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 04:54:51.753" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 04:54:51.753" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:54:51.358" endtime="20161207 04:54:51.753"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:54:51.754" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:54:51.753" endtime="20161207 04:54:51.754"></status>
</kw>
<status status="PASS" starttime="20161207 04:54:51.321" endtime="20161207 04:54:51.754"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 04:54:52.022" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 04:54:52.022" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:54:51.754" endtime="20161207 04:54:52.022"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:54:52.029" level="INFO">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:54:52.028" endtime="20161207 04:54:52.029"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:54:52.030" level="INFO">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:54:52.030" endtime="20161207 04:54:52.031"></status>
</kw>
<status status="PASS" starttime="20161207 04:54:52.029" endtime="20161207 04:54:52.031"></status>
</kw>
<status status="PASS" starttime="20161207 04:54:52.027" endtime="20161207 04:54:52.031"></status>
</kw>
<status status="PASS" starttime="20161207 04:54:52.023" endtime="20161207 04:54:52.031"></status>
</kw>
<msg timestamp="20161207 04:54:52.031" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:54:51.308" endtime="20161207 04:54:52.031"></status>
</kw>
<msg timestamp="20161207 04:54:52.032" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:54:51.306" endtime="20161207 04:54:52.032"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:54:52.033" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:54:52.032" endtime="20161207 04:54:52.033"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 04:54:52.033" level="INFO">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 04:54:52.034" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 04:54:52.034" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': 0}</msg>
<status status="PASS" starttime="20161207 04:54:52.033" endtime="20161207 04:54:52.034"></status>
</kw>
<msg timestamp="20161207 04:54:52.034" level="INFO">${state} = 0</msg>
<status status="PASS" starttime="20161207 04:54:51.304" endtime="20161207 04:54:52.034"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg timestamp="20161207 04:54:52.035" level="FAIL">0 != 1</msg>
<status status="FAIL" starttime="20161207 04:54:52.035" endtime="20161207 04:54:52.035"></status>
</kw>
<status status="FAIL" starttime="20161207 04:54:51.303" endtime="20161207 04:54:52.035"></status>
</kw>
<kw library="utils" name="Is Power On">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 04:55:02.038" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161207 04:55:02.038" endtime="20161207 04:55:02.038"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 04:55:02.039" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161207 04:55:02.039" endtime="20161207 04:55:02.039"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 04:55:02.041" level="INFO">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status status="PASS" starttime="20161207 04:55:02.041" endtime="20161207 04:55:02.041"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 04:55:02.043" level="INFO">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status status="PASS" starttime="20161207 04:55:02.043" endtime="20161207 04:55:02.043"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 04:55:02.044" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161207 04:55:02.044" endtime="20161207 04:55:02.044"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:55:02.045" endtime="20161207 04:55:02.045"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:55:02.050" level="INFO">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161207 04:55:02.050" endtime="20161207 04:55:02.050"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:55:02.051" level="INFO">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161207 04:55:02.051" endtime="20161207 04:55:02.051"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:02.050" endtime="20161207 04:55:02.051"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:02.049" endtime="20161207 04:55:02.051"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:02.046" endtime="20161207 04:55:02.051"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 04:55:02.052" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161207 04:55:02.052" endtime="20161207 04:55:02.053"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 04:55:02.054" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161207 04:55:02.053" endtime="20161207 04:55:02.054"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 04:55:02.054" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161207 04:55:02.054" endtime="20161207 04:55:02.054"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 04:55:02.055" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161207 04:55:02.054" endtime="20161207 04:55:02.055"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 04:55:02.392" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 04:55:02.392" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:55:02.055" endtime="20161207 04:55:02.392"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:55:02.393" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:55:02.392" endtime="20161207 04:55:02.393"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:02.052" endtime="20161207 04:55:02.393"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 04:55:02.666" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 04:55:02.667" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:55:02.393" endtime="20161207 04:55:02.667"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:55:02.674" level="INFO">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:55:02.673" endtime="20161207 04:55:02.674"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:55:02.675" level="INFO">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:55:02.675" endtime="20161207 04:55:02.676"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:02.674" endtime="20161207 04:55:02.676"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:02.672" endtime="20161207 04:55:02.676"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:02.667" endtime="20161207 04:55:02.676"></status>
</kw>
<msg timestamp="20161207 04:55:02.676" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:55:02.042" endtime="20161207 04:55:02.676"></status>
</kw>
<msg timestamp="20161207 04:55:02.677" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:55:02.040" endtime="20161207 04:55:02.677"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:55:02.677" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:55:02.677" endtime="20161207 04:55:02.677"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 04:55:02.678" level="INFO">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 04:55:02.678" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 04:55:02.678" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': 0}</msg>
<status status="PASS" starttime="20161207 04:55:02.678" endtime="20161207 04:55:02.678"></status>
</kw>
<msg timestamp="20161207 04:55:02.678" level="INFO">${state} = 0</msg>
<status status="PASS" starttime="20161207 04:55:02.037" endtime="20161207 04:55:02.678"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg timestamp="20161207 04:55:02.679" level="FAIL">0 != 1</msg>
<status status="FAIL" starttime="20161207 04:55:02.679" endtime="20161207 04:55:02.679"></status>
</kw>
<status status="FAIL" starttime="20161207 04:55:02.036" endtime="20161207 04:55:02.679"></status>
</kw>
<kw library="utils" name="Is Power On">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 04:55:12.682" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161207 04:55:12.681" endtime="20161207 04:55:12.682"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 04:55:12.683" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161207 04:55:12.682" endtime="20161207 04:55:12.683"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 04:55:12.685" level="INFO">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status status="PASS" starttime="20161207 04:55:12.684" endtime="20161207 04:55:12.685"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 04:55:12.688" level="INFO">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status status="PASS" starttime="20161207 04:55:12.687" endtime="20161207 04:55:12.688"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 04:55:12.688" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161207 04:55:12.688" endtime="20161207 04:55:12.688"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:55:12.688" endtime="20161207 04:55:12.689"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:55:12.695" level="INFO">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161207 04:55:12.694" endtime="20161207 04:55:12.695"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:55:12.696" level="INFO">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161207 04:55:12.696" endtime="20161207 04:55:12.697"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:12.695" endtime="20161207 04:55:12.697"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:12.693" endtime="20161207 04:55:12.697"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:12.689" endtime="20161207 04:55:12.697"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 04:55:12.698" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161207 04:55:12.697" endtime="20161207 04:55:12.698"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 04:55:12.699" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161207 04:55:12.699" endtime="20161207 04:55:12.699"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 04:55:12.699" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161207 04:55:12.699" endtime="20161207 04:55:12.700"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 04:55:12.700" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161207 04:55:12.700" endtime="20161207 04:55:12.700"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 04:55:13.037" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 04:55:13.037" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:55:12.700" endtime="20161207 04:55:13.037"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:55:13.038" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:55:13.038" endtime="20161207 04:55:13.038"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:12.697" endtime="20161207 04:55:13.038"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 04:55:13.304" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 04:55:13.304" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:55:13.038" endtime="20161207 04:55:13.304"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:55:13.309" level="INFO">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:55:13.308" endtime="20161207 04:55:13.309"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:55:13.310" level="INFO">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:55:13.309" endtime="20161207 04:55:13.310"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:13.309" endtime="20161207 04:55:13.310"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:13.308" endtime="20161207 04:55:13.310"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:13.305" endtime="20161207 04:55:13.310"></status>
</kw>
<msg timestamp="20161207 04:55:13.310" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:55:12.685" endtime="20161207 04:55:13.310"></status>
</kw>
<msg timestamp="20161207 04:55:13.310" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:55:12.683" endtime="20161207 04:55:13.310"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:55:13.311" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:55:13.311" endtime="20161207 04:55:13.311"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 04:55:13.311" level="INFO">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 04:55:13.312" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 04:55:13.312" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': 0}</msg>
<status status="PASS" starttime="20161207 04:55:13.311" endtime="20161207 04:55:13.312"></status>
</kw>
<msg timestamp="20161207 04:55:13.312" level="INFO">${state} = 0</msg>
<status status="PASS" starttime="20161207 04:55:12.681" endtime="20161207 04:55:13.312"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg timestamp="20161207 04:55:13.313" level="FAIL">0 != 1</msg>
<status status="FAIL" starttime="20161207 04:55:13.312" endtime="20161207 04:55:13.313"></status>
</kw>
<status status="FAIL" starttime="20161207 04:55:12.680" endtime="20161207 04:55:13.313"></status>
</kw>
<kw library="utils" name="Is Power On">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161207 04:55:23.315" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161207 04:55:23.315" endtime="20161207 04:55:23.315"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161207 04:55:23.316" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161207 04:55:23.316" endtime="20161207 04:55:23.316"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 04:55:23.318" level="INFO">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status status="PASS" starttime="20161207 04:55:23.318" endtime="20161207 04:55:23.318"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 04:55:23.320" level="INFO">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status status="PASS" starttime="20161207 04:55:23.320" endtime="20161207 04:55:23.320"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 04:55:23.321" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161207 04:55:23.321" endtime="20161207 04:55:23.321"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:55:23.322" endtime="20161207 04:55:23.322"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:55:23.329" level="INFO">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161207 04:55:23.328" endtime="20161207 04:55:23.329"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:55:23.330" level="INFO">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161207 04:55:23.329" endtime="20161207 04:55:23.330"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:23.329" endtime="20161207 04:55:23.330"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:23.328" endtime="20161207 04:55:23.330"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:23.323" endtime="20161207 04:55:23.330"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 04:55:23.331" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161207 04:55:23.331" endtime="20161207 04:55:23.332"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 04:55:23.332" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161207 04:55:23.332" endtime="20161207 04:55:23.332"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 04:55:23.333" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161207 04:55:23.332" endtime="20161207 04:55:23.333"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 04:55:23.333" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161207 04:55:23.333" endtime="20161207 04:55:23.333"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 04:55:23.662" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 04:55:23.662" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:55:23.333" endtime="20161207 04:55:23.662"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:55:23.662" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:55:23.662" endtime="20161207 04:55:23.662"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:23.330" endtime="20161207 04:55:23.663"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 04:55:24.150" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 04:55:24.150" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:55:23.663" endtime="20161207 04:55:24.150"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:55:24.157" level="INFO">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:55:24.156" endtime="20161207 04:55:24.157"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:55:24.158" level="INFO">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:55:24.158" endtime="20161207 04:55:24.158"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:24.157" endtime="20161207 04:55:24.158"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:24.155" endtime="20161207 04:55:24.158"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:24.150" endtime="20161207 04:55:24.158"></status>
</kw>
<msg timestamp="20161207 04:55:24.159" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:55:23.319" endtime="20161207 04:55:24.159"></status>
</kw>
<msg timestamp="20161207 04:55:24.159" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:55:23.316" endtime="20161207 04:55:24.159"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:55:24.159" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:55:24.159" endtime="20161207 04:55:24.160"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 04:55:24.160" level="INFO">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 04:55:24.160" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 04:55:24.160" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': 0}</msg>
<status status="PASS" starttime="20161207 04:55:24.160" endtime="20161207 04:55:24.160"></status>
</kw>
<msg timestamp="20161207 04:55:24.161" level="INFO">${state} = 0</msg>
<status status="PASS" starttime="20161207 04:55:23.314" endtime="20161207 04:55:24.161"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg timestamp="20161207 04:55:24.161" level="FAIL">0 != 1</msg>
<status status="FAIL" starttime="20161207 04:55:24.161" endtime="20161207 04:55:24.161"></status>
</kw>
<status status="FAIL" starttime="20161207 04:55:23.313" endtime="20161207 04:55:24.161"></status>
</kw>
<msg timestamp="20161207 04:55:24.162" level="FAIL">Keyword 'Is Power On' failed after retrying for 3 minutes. The last error was: 0 != 1</msg>
<status status="FAIL" starttime="20161207 04:52:17.109" endtime="20161207 04:55:24.162"></status>
</kw>
<status status="FAIL" starttime="20161207 04:52:16.390" endtime="20161207 04:55:24.162"></status>
</kw>
<status status="FAIL" starttime="20161207 04:52:13.708" endtime="20161207 04:55:24.162"></status>
</kw>
<kw type="teardown" name="Test Exit Logs">
<doc>Log FFDC if failed and collect SOL</doc>
<kw library="openbmc_ffdc" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<kw library="openbmc_ffdc" name="FFDC">
<doc>Main entry point to gather logs on Test case failure</doc>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20161207 04:55:24.167" level="INFO">${cur_time} = 2016-12-07 04:55:24:166837</msg>
<status status="PASS" starttime="20161207 04:55:24.167" endtime="20161207 04:55:24.167"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20161207 04:55:24.168" level="INFO">${cur_time} = 20161207045524166837</msg>
<status status="PASS" starttime="20161207 04:55:24.168" endtime="20161207 04:55:24.168"></status>
</kw>
<msg timestamp="20161207 04:55:24.168" level="INFO">${cur_time} = 20161207045524166837</msg>
<status status="PASS" starttime="20161207 04:55:24.166" endtime="20161207 04:55:24.168"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FFDC_TIME}</arg>
<arg>${cur_time}</arg>
</arguments>
<msg timestamp="20161207 04:55:24.173" level="INFO">${FFDC_TIME} = 20161207045524166837</msg>
<status status="PASS" starttime="20161207 04:55:24.169" endtime="20161207 04:55:24.173"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${\n}FFDC Collection Started \t: ${cur_time}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:55:24.173" endtime="20161207 04:55:24.174"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Test Dir and Name">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<assign>
<var>${suitename}</var>
<var>${testname}</var>
</assign>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20161207 04:55:24.175" level="INFO">${suite_name} = TestsTestBasicPoweron</msg>
<status status="PASS" starttime="20161207 04:55:24.174" endtime="20161207 04:55:24.175"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20161207 04:55:24.175" level="INFO">${suite_name} = 20161207045524166837_TestsTestBasicPoweron</msg>
<status status="PASS" starttime="20161207 04:55:24.175" endtime="20161207 04:55:24.175"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20161207 04:55:24.176" level="INFO">${test_name} = powerontest</msg>
<status status="PASS" starttime="20161207 04:55:24.175" endtime="20161207 04:55:24.176"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20161207 04:55:24.176" level="INFO">${test_name} = 20161207045524166837_powerontest</msg>
<status status="PASS" starttime="20161207 04:55:24.176" endtime="20161207 04:55:24.176"></status>
</kw>
<msg timestamp="20161207 04:55:24.176" level="INFO">${suitename} = 20161207045524166837_TestsTestBasicPoweron</msg>
<msg timestamp="20161207 04:55:24.176" level="INFO">${testname} = 20161207045524166837_powerontest</msg>
<status status="PASS" starttime="20161207 04:55:24.174" endtime="20161207 04:55:24.176"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${FFDC_LOG_PATH}${suitename}${/}${testname}</arg>
</arguments>
<msg timestamp="20161207 04:55:24.180" level="INFO">${FFDC_DIR_PATH} = /tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest</msg>
<status status="PASS" starttime="20161207 04:55:24.177" endtime="20161207 04:55:24.180"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_DIR_PATH}${/}</arg>
<arg>${FFDC_TIME}_</arg>
</arguments>
<assign>
<var>${prefix}</var>
</assign>
<msg timestamp="20161207 04:55:24.180" level="INFO">${prefix} = /tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_</msg>
<status status="PASS" starttime="20161207 04:55:24.180" endtime="20161207 04:55:24.180"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${LOG_PREFIX}</arg>
<arg>${prefix}</arg>
</arguments>
<msg timestamp="20161207 04:55:24.183" level="INFO">${LOG_PREFIX} = /tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_</msg>
<status status="PASS" starttime="20161207 04:55:24.180" endtime="20161207 04:55:24.183"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Create FFDC Directory">
<doc>Creates directory and report file</doc>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
</arguments>
<msg timestamp="20161207 04:55:24.185" level="INFO" html="yes">Created directory '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest"&gt;/tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161207 04:55:24.184" endtime="20161207 04:55:24.185"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Create FFDC Report File">
<doc>Create a generic file name for ffdc</doc>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${FFDC_FILE_PATH}</arg>
<arg>${FFDC_DIR_PATH}${/}${FFDC_TIME}_BMC_general.txt</arg>
</arguments>
<msg timestamp="20161207 04:55:24.189" level="INFO">${FFDC_FILE_PATH} = /tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt</msg>
<status status="PASS" starttime="20161207 04:55:24.186" endtime="20161207 04:55:24.189"></status>
</kw>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${FFDC_FILE_PATH}</arg>
</arguments>
<msg timestamp="20161207 04:55:24.190" level="INFO" html="yes">Created file '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt"&gt;/tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161207 04:55:24.189" endtime="20161207 04:55:24.190"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:24.186" endtime="20161207 04:55:24.190"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:24.183" endtime="20161207 04:55:24.190"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Header Message">
<doc>Write header message to the report document manifest.</doc>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20161207 04:55:24.191" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt"&gt;/tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161207 04:55:24.191" endtime="20161207 04:55:24.191"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:24.190" endtime="20161207 04:55:24.192"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20161207 04:55:24.193" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt"&gt;/tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161207 04:55:24.192" endtime="20161207 04:55:24.193"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:24.192" endtime="20161207 04:55:24.193"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20161207 04:55:24.194" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt"&gt;/tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161207 04:55:24.193" endtime="20161207 04:55:24.194"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:24.193" endtime="20161207 04:55:24.194"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20161207 04:55:24.195" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt"&gt;/tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161207 04:55:24.195" endtime="20161207 04:55:24.195"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:24.194" endtime="20161207 04:55:24.195"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20161207 04:55:24.197" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt"&gt;/tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161207 04:55:24.196" endtime="20161207 04:55:24.197"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:24.195" endtime="20161207 04:55:24.197"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20161207 04:55:24.198" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt"&gt;/tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161207 04:55:24.198" endtime="20161207 04:55:24.198"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:24.197" endtime="20161207 04:55:24.198"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20161207 04:55:24.199" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt"&gt;/tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161207 04:55:24.199" endtime="20161207 04:55:24.199"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:24.198" endtime="20161207 04:55:24.199"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20161207 04:55:24.201" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt"&gt;/tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161207 04:55:24.200" endtime="20161207 04:55:24.201"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:24.200" endtime="20161207 04:55:24.201"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20161207 04:55:24.202" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt"&gt;/tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161207 04:55:24.201" endtime="20161207 04:55:24.202"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:24.201" endtime="20161207 04:55:24.202"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Test Setup Info">
<doc>BMC IP, Model and other information</doc>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20161207 04:55:24.203" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt"&gt;/tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161207 04:55:24.203" endtime="20161207 04:55:24.203"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:24.202" endtime="20161207 04:55:24.203"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20161207 04:55:24.204" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt"&gt;/tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161207 04:55:24.204" endtime="20161207 04:55:24.205"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:24.203" endtime="20161207 04:55:24.205"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20161207 04:55:24.206" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt"&gt;/tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161207 04:55:24.205" endtime="20161207 04:55:24.206"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:24.205" endtime="20161207 04:55:24.206"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20161207 04:55:24.207" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt"&gt;/tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161207 04:55:24.207" endtime="20161207 04:55:24.207"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:24.206" endtime="20161207 04:55:24.207"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${OPENBMC_MODEL.replace('./data/','').replace('.py','')}${\n}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20161207 04:55:24.208" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt"&gt;/tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161207 04:55:24.208" endtime="20161207 04:55:24.209"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:24.207" endtime="20161207 04:55:24.209"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:24.202" endtime="20161207 04:55:24.209"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20161207 04:55:24.210" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt"&gt;/tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161207 04:55:24.209" endtime="20161207 04:55:24.210"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:24.209" endtime="20161207 04:55:24.210"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20161207 04:55:24.210" level="INFO">@{entries} = [ BMC DATA | APPLICATION DATA | DRIVER INFO ]</msg>
<status status="PASS" starttime="20161207 04:55:24.210" endtime="20161207 04:55:24.210"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC DATA">
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20161207 04:55:24.212" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt"&gt;/tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161207 04:55:24.212" endtime="20161207 04:55:24.212"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:24.211" endtime="20161207 04:55:24.212"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20161207 04:55:24.213" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt"&gt;/tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161207 04:55:24.213" endtime="20161207 04:55:24.213"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:24.212" endtime="20161207 04:55:24.214"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:24.211" endtime="20161207 04:55:24.214"></status>
</kw>
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20161207 04:55:24.215" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt"&gt;/tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161207 04:55:24.214" endtime="20161207 04:55:24.215"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:24.214" endtime="20161207 04:55:24.215"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20161207 04:55:24.216" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt"&gt;/tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161207 04:55:24.215" endtime="20161207 04:55:24.216"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:24.215" endtime="20161207 04:55:24.216"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:24.214" endtime="20161207 04:55:24.216"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20161207 04:55:24.217" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt"&gt;/tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161207 04:55:24.217" endtime="20161207 04:55:24.217"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:24.216" endtime="20161207 04:55:24.217"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20161207 04:55:24.218" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt"&gt;/tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161207 04:55:24.218" endtime="20161207 04:55:24.218"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:24.218" endtime="20161207 04:55:24.219"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:24.216" endtime="20161207 04:55:24.219"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:24.211" endtime="20161207 04:55:24.219"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20161207 04:55:24.220" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt"&gt;/tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161207 04:55:24.219" endtime="20161207 04:55:24.220"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:24.219" endtime="20161207 04:55:24.220"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:24.190" endtime="20161207 04:55:24.220"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Call FFDC Methods">
<doc>Calls into FFDC Keyword index list</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20161207 04:55:24.221" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" starttime="20161207 04:55:24.220" endtime="20161207 04:55:24.221"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw library="openbmc_ffdc_methods" name="Method Call Keyword List">
<doc>Iterate the list through keyword index</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Call">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20161207 04:55:24.222" level="INFO">@{method_list} = [ ('BMC Specific Files', 'BMC FFDC Files') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('FFDC Generic Report', 'BMC FFDC Manifest') | ('OS FFDC', 'OS FFDC Files') ]</msg>
<status status="PASS" starttime="20161207 04:55:24.221" endtime="20161207 04:55:24.222"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20161207 04:55:24.225" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" starttime="20161207 04:55:24.225" endtime="20161207 04:55:24.225"></status>
</kw>
<msg timestamp="20161207 04:55:24.225" level="INFO">${has_host} = False</msg>
<status status="PASS" starttime="20161207 04:55:24.224" endtime="20161207 04:55:24.225"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:55:24.228" endtime="20161207 04:55:24.229"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:24.225" endtime="20161207 04:55:24.229"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20161207 04:55:24.233" level="INFO">${port_num} = 22</msg>
<status status="PASS" starttime="20161207 04:55:24.232" endtime="20161207 04:55:24.233"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20161207 04:55:24.233" level="INFO">${SSH_PORT} = 22</msg>
<status status="PASS" starttime="20161207 04:55:24.233" endtime="20161207 04:55:24.233"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20161207 04:55:24.234" level="INFO">${https_num} = 443</msg>
<status status="PASS" starttime="20161207 04:55:24.234" endtime="20161207 04:55:24.234"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20161207 04:55:24.235" level="INFO">${AUTH_URI} = https://9.3.23.30:443</msg>
<status status="PASS" starttime="20161207 04:55:24.234" endtime="20161207 04:55:24.235"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:24.232" endtime="20161207 04:55:24.235"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:24.229" endtime="20161207 04:55:24.235"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20161207 04:55:24.236" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" starttime="20161207 04:55:24.235" endtime="20161207 04:55:24.236"></status>
</kw>
<msg timestamp="20161207 04:55:24.236" level="INFO">${has_port} = False</msg>
<status status="PASS" starttime="20161207 04:55:24.235" endtime="20161207 04:55:24.236"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:55:24.240" endtime="20161207 04:55:24.240"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:55:24.240" endtime="20161207 04:55:24.240"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:24.239" endtime="20161207 04:55:24.241"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:24.236" endtime="20161207 04:55:24.241"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20161207 04:55:24.241" level="INFO">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg timestamp="20161207 04:55:26.886" level="INFO">Read output: 7[r[999;999H[6n</msg>
<status status="PASS" starttime="20161207 04:55:24.241" endtime="20161207 04:55:26.887"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:24.223" endtime="20161207 04:55:26.887"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc File Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20161207 04:55:26.888" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" starttime="20161207 04:55:26.888" endtime="20161207 04:55:26.888"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw library="openbmc_ffdc_methods" name="Create File and Write Data">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc File">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20161207 04:55:26.891" level="INFO">@{cmd_list} = [ ('BMC_dmesg', 'dmesg') | ('BMC_proc_list', 'top -n 1 -b') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_journalctl', 'journalctl --no-pager') ]</msg>
<status status="PASS" starttime="20161207 04:55:26.890" endtime="20161207 04:55:26.891"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20161207 04:55:26.892" level="INFO">${logpath} = /tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_dmesg.txt</msg>
<status status="PASS" starttime="20161207 04:55:26.891" endtime="20161207 04:55:26.892"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:55:26.894" endtime="20161207 04:55:26.898"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161207 04:55:26.898" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20161207 04:55:26.977" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161207 04:55:26.977" level="INFO">${stdout} = Booting Linux on physical CPU 0x0
Linux version 4.7.10-9ad8a296b1a02f3b0e5e5050cede5b25c01549e4 (jenkins@hudson) (gcc version 5.3.0 (GCC) ) #1 Wed Dec 7 04:30:31 UTC 2016
CPU: ARM926EJ-S [41069265] re...</msg>
<msg timestamp="20161207 04:55:26.977" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20161207 04:55:26.898" endtime="20161207 04:55:26.977"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20161207 04:55:26.983" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_dmesg.txt"&gt;/tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161207 04:55:26.983" endtime="20161207 04:55:26.983"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:26.982" endtime="20161207 04:55:26.983"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:26.978" endtime="20161207 04:55:26.984"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:26.892" endtime="20161207 04:55:26.984"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:26.891" endtime="20161207 04:55:26.984"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20161207 04:55:26.985" level="INFO">${logpath} = /tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_proc_list.txt</msg>
<status status="PASS" starttime="20161207 04:55:26.984" endtime="20161207 04:55:26.985"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:55:26.986" endtime="20161207 04:55:26.990"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161207 04:55:26.991" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20161207 04:55:27.339" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161207 04:55:27.339" level="INFO">${stdout} = Mem: 131964K used, 367052K free, 9148K shrd, 10400K buff, 43304K cached
CPU:   0% usr   0% sys   0% nic 100% idle   0% io   0% irq   0% sirq
Load average: 0.51 1.51 1.12 1/113 988
  PID  PPID USER    ...</msg>
<msg timestamp="20161207 04:55:27.339" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20161207 04:55:26.990" endtime="20161207 04:55:27.339"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20161207 04:55:27.345" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_proc_list.txt"&gt;/tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161207 04:55:27.345" endtime="20161207 04:55:27.346"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:27.344" endtime="20161207 04:55:27.346"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:27.340" endtime="20161207 04:55:27.346"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:26.985" endtime="20161207 04:55:27.346"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:26.984" endtime="20161207 04:55:27.346"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20161207 04:55:27.347" level="INFO">${logpath} = /tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_meminfo.txt</msg>
<status status="PASS" starttime="20161207 04:55:27.346" endtime="20161207 04:55:27.347"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:55:27.348" endtime="20161207 04:55:27.350"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161207 04:55:27.351" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20161207 04:55:27.447" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161207 04:55:27.447" level="INFO">${stdout} = MemTotal:         499016 kB
MemFree:          366928 kB
MemAvailable:     406212 kB
Buffers:           10400 kB
Cached:            43304 kB
SwapCached:            0 kB
Active:            93620 kB
Inac...</msg>
<msg timestamp="20161207 04:55:27.447" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20161207 04:55:27.350" endtime="20161207 04:55:27.447"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20161207 04:55:27.452" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_meminfo.txt"&gt;/tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161207 04:55:27.451" endtime="20161207 04:55:27.452"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:27.450" endtime="20161207 04:55:27.452"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:27.447" endtime="20161207 04:55:27.452"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:27.347" endtime="20161207 04:55:27.452"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:27.346" endtime="20161207 04:55:27.452"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20161207 04:55:27.453" level="INFO">${logpath} = /tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_procinfo.txt</msg>
<status status="PASS" starttime="20161207 04:55:27.452" endtime="20161207 04:55:27.453"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:55:27.454" endtime="20161207 04:55:27.456"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161207 04:55:27.457" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20161207 04:55:27.573" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161207 04:55:27.574" level="INFO">${stdout} = processor	: 0
model name	: ARM926EJ-S rev 5 (v5l)
BogoMIPS	: 190.87
Features	: swp half thumb fastmult edsp java 
CPU implementer	: 0x41
CPU architecture: 5TEJ
CPU variant	: 0x0
CPU part	: 0x926
CPU r...</msg>
<msg timestamp="20161207 04:55:27.574" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20161207 04:55:27.457" endtime="20161207 04:55:27.574"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20161207 04:55:27.581" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_procinfo.txt"&gt;/tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161207 04:55:27.580" endtime="20161207 04:55:27.581"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:27.580" endtime="20161207 04:55:27.582"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:27.574" endtime="20161207 04:55:27.582"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:27.453" endtime="20161207 04:55:27.582"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:27.452" endtime="20161207 04:55:27.582"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20161207 04:55:27.583" level="INFO">${logpath} = /tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_journalctl.txt</msg>
<status status="PASS" starttime="20161207 04:55:27.582" endtime="20161207 04:55:27.583"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:55:27.585" endtime="20161207 04:55:27.589"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161207 04:55:27.589" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20161207 04:55:29.586" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161207 04:55:29.588" level="INFO">${stdout} = -- Logs begin at Mon 2016-11-21 06:08:11 UTC, end at Mon 2016-11-21 06:16:28 UTC. --
Nov 21 06:08:11 barreleye systemd-journald[411]: Runtime journal (/run/log/journal/) is 3.0M, max 24.3M, 21.3M free...</msg>
<msg timestamp="20161207 04:55:29.588" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20161207 04:55:27.589" endtime="20161207 04:55:29.588"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20161207 04:55:29.597" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_journalctl.txt"&gt;/tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161207 04:55:29.595" endtime="20161207 04:55:29.597"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:29.592" endtime="20161207 04:55:29.597"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:29.588" endtime="20161207 04:55:29.597"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:27.584" endtime="20161207 04:55:29.597"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:27.582" endtime="20161207 04:55:29.597"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:26.891" endtime="20161207 04:55:29.597"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:26.889" endtime="20161207 04:55:29.598"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:26.889" endtime="20161207 04:55:29.598"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:26.888" endtime="20161207 04:55:29.598"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:24.223" endtime="20161207 04:55:29.598"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:24.223" endtime="20161207 04:55:29.598"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:24.222" endtime="20161207 04:55:29.598"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:24.222" endtime="20161207 04:55:29.598"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Get Requests">
<doc>Get the command list and iterate</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20161207 04:55:29.601" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" starttime="20161207 04:55:29.600" endtime="20161207 04:55:29.601"></status>
</kw>
<msg timestamp="20161207 04:55:29.601" level="INFO">${has_host} = False</msg>
<status status="PASS" starttime="20161207 04:55:29.600" endtime="20161207 04:55:29.601"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:55:29.604" endtime="20161207 04:55:29.604"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:29.601" endtime="20161207 04:55:29.605"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20161207 04:55:29.608" level="INFO">${port_num} = 22</msg>
<status status="PASS" starttime="20161207 04:55:29.608" endtime="20161207 04:55:29.608"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20161207 04:55:29.609" level="INFO">${SSH_PORT} = 22</msg>
<status status="PASS" starttime="20161207 04:55:29.609" endtime="20161207 04:55:29.609"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20161207 04:55:29.611" level="INFO">${https_num} = 443</msg>
<status status="PASS" starttime="20161207 04:55:29.609" endtime="20161207 04:55:29.611"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20161207 04:55:29.612" level="INFO">${AUTH_URI} = https://9.3.23.30:443</msg>
<status status="PASS" starttime="20161207 04:55:29.611" endtime="20161207 04:55:29.612"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:29.608" endtime="20161207 04:55:29.612"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:29.605" endtime="20161207 04:55:29.612"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20161207 04:55:29.613" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" starttime="20161207 04:55:29.612" endtime="20161207 04:55:29.613"></status>
</kw>
<msg timestamp="20161207 04:55:29.613" level="INFO">${has_port} = False</msg>
<status status="PASS" starttime="20161207 04:55:29.612" endtime="20161207 04:55:29.613"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:55:29.617" endtime="20161207 04:55:29.617"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:55:29.617" endtime="20161207 04:55:29.618"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:29.616" endtime="20161207 04:55:29.618"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:29.613" endtime="20161207 04:55:29.618"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20161207 04:55:29.618" level="INFO">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg timestamp="20161207 04:55:31.939" level="INFO">Read output: 7[r[999;999H[6n</msg>
<status status="PASS" starttime="20161207 04:55:29.618" endtime="20161207 04:55:31.939"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:29.600" endtime="20161207 04:55:31.940"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20161207 04:55:31.940" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" starttime="20161207 04:55:31.940" endtime="20161207 04:55:31.940"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw library="openbmc_ffdc_methods" name="Log FFDC Get Requests">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20161207 04:55:31.942" level="INFO">@{cmd_list} = [ ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_inventory', '/org/openbmc/inventory/system/enumerate') | ('BMC_led', '/org/openbmc/records/events/enumerate') | ('BMC_record_log', '/org...</msg>
<status status="PASS" starttime="20161207 04:55:31.942" endtime="20161207 04:55:31.943"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20161207 04:55:31.944" level="INFO">${logpath} = /tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_sensor_list.txt</msg>
<status status="PASS" starttime="20161207 04:55:31.943" endtime="20161207 04:55:31.944"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 04:55:31.946" level="INFO">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status status="PASS" starttime="20161207 04:55:31.945" endtime="20161207 04:55:31.946"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:55:31.946" endtime="20161207 04:55:31.951"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 04:55:31.953" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161207 04:55:31.952" endtime="20161207 04:55:31.954"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 04:55:31.955" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161207 04:55:31.954" endtime="20161207 04:55:31.955"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 04:55:31.956" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161207 04:55:31.955" endtime="20161207 04:55:31.956"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 04:55:31.957" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161207 04:55:31.956" endtime="20161207 04:55:31.957"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 04:55:32.289" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 04:55:32.289" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:55:31.957" endtime="20161207 04:55:32.289"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:55:32.290" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:55:32.289" endtime="20161207 04:55:32.290"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:31.952" endtime="20161207 04:55:32.290"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 04:55:34.410" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None </msg>
<msg timestamp="20161207 04:55:34.410" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:55:32.290" endtime="20161207 04:55:34.410"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:55:34.411" endtime="20161207 04:55:34.416"></status>
</kw>
<msg timestamp="20161207 04:55:34.416" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:55:31.944" endtime="20161207 04:55:34.416"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:55:34.418" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:55:34.418" endtime="20161207 04:55:34.418"></status>
</kw>
<msg timestamp="20161207 04:55:34.418" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20161207 04:55:34.417" endtime="20161207 04:55:34.418"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" starttime="20161207 04:55:34.418" endtime="20161207 04:55:34.421"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20161207 04:55:34.425" level="INFO">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/HSCA/Iout": {
      "adjust": 0.25, 
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon4/curr1_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "A", 
      "value": 272, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/HSCA/Vout": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon4/in2_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "V", 
      "value": 10, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/HSCB/Iout": {
      "adjust": 0.25, 
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon5/curr1_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "A", 
      "value": 724, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/HSCB/Vout": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon5/in2_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "V", 
      "value": 10, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 2
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/cpu0/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/cpu1/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/powercap": {
      "error": 0, 
      "units": "", 
      "value": 0
    }, 
    "/org/openbmc/sensors/speed/fan0": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/pwm1", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 127, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/pwm2", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 127, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/pwm3", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 127, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/pwm1", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 127, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/pwm2", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 127, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan5": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/pwm3", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 127, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan0H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan6_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan0L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan5_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan1H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan4_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan1L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan3_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan2H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan2_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan2L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan1_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan3H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan6_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan3L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan5_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan4H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan4_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan4L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan3_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan5H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan2_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan5L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan1_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/temperature/ambient": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon1/temp1_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "C", 
      "value": 26000, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/temperature/rtc": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon0/temp1_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "C", 
      "value": 27250, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V97_CPU0": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in10_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V97_CPU1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in10_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in2_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in3_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in4_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in5_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in2_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in3_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in4_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in5_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in6_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in7_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in8_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in9_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in6_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in7_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in8_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in9_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V1_MEM0": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in11_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V1_MEM1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in11_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in12_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in13_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in14_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in1_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in12_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in13_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in14_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in1_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 04:55:34.426" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20161207 04:55:34.426" level="INFO">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/HSCA/Iout": {
            "adjust": 0.25,
            "critical_lower": 0,
            "critical_upper": 0,
            "emergency_enabled": 0,
          ...</msg>
<status status="PASS" starttime="20161207 04:55:34.421" endtime="20161207 04:55:34.426"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20161207 04:55:34.428" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_sensor_list.txt"&gt;/tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161207 04:55:34.428" endtime="20161207 04:55:34.428"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:34.426" endtime="20161207 04:55:34.428"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:31.943" endtime="20161207 04:55:34.428"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/org/openbmc/inventory/system/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20161207 04:55:34.429" level="INFO">${logpath} = /tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_inventory.txt</msg>
<status status="PASS" starttime="20161207 04:55:34.429" endtime="20161207 04:55:34.429"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 04:55:34.430" level="INFO">${base_uri} = /org/openbmc/inventory/system/enumerate</msg>
<status status="PASS" starttime="20161207 04:55:34.430" endtime="20161207 04:55:34.430"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:55:34.430" endtime="20161207 04:55:34.433"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 04:55:34.434" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161207 04:55:34.434" endtime="20161207 04:55:34.435"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 04:55:34.435" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161207 04:55:34.435" endtime="20161207 04:55:34.435"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 04:55:34.436" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161207 04:55:34.435" endtime="20161207 04:55:34.436"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 04:55:34.436" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161207 04:55:34.436" endtime="20161207 04:55:34.436"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 04:55:34.859" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 04:55:34.860" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:55:34.436" endtime="20161207 04:55:34.860"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:55:34.861" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:55:34.860" endtime="20161207 04:55:34.861"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:34.433" endtime="20161207 04:55:34.861"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 04:55:38.191" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/inventory/system/enumerate, headers=None </msg>
<msg timestamp="20161207 04:55:38.191" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:55:34.862" endtime="20161207 04:55:38.191"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:55:38.192" endtime="20161207 04:55:38.199"></status>
</kw>
<msg timestamp="20161207 04:55:38.199" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:55:34.429" endtime="20161207 04:55:38.199"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:55:38.201" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:55:38.201" endtime="20161207 04:55:38.201"></status>
</kw>
<msg timestamp="20161207 04:55:38.202" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20161207 04:55:38.200" endtime="20161207 04:55:38.202"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" starttime="20161207 04:55:38.202" endtime="20161207 04:55:38.207"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20161207 04:55:38.214" level="INFO">To JSON using : content={
  "data": {
    "/org/openbmc/inventory/system/bios": {
      "Asset Tag": "", 
      "Custom Field 1": "\tbuildroot-fda20bd", 
      "Custom Field 2": "\tskiboot-5.2.0-opdirty", 
      "Custom Field 3": "\thostboot-c223637-1d3dbf3", 
      "Custom Field 4": "\tlinux-4.4.6-openpower1-opdirty-99d283b", 
      "Custom Field 5": "\tpetitboot-72928ed-opdirty-47f54ff", 
      "Custom Field 6": "\tbarreleye-xml-1250f06-opdirty", 
      "Custom Field 7": "\tocc-1093bf9-opdir", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "", 
      "Model Number": "", 
      "Name": "OpenPOWER Firmware", 
      "Serial Number": "", 
      "Version": "open-power-barreleye-v1.8", 
      "fault": "False", 
      "fru_type": "SYSTEM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis": {
      "fault": "False", 
      "fru_type": "SYSTEM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan0": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan1": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan2": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan3": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan4": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan5": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/hdd_backplane": {
      "Custom Field 1": "Rackspace US, Inc.", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "FRU Ver 0.01", 
      "Manufacturer": "FOXCONN", 
      "Name": "BARRELEYE BPx15", 
      "Part Number": "10034HV00-600-G", 
      "Serial Number": "1A4218000-600-G64J000AX02", 
      "fault": "False", 
      "fru_type": "DAUGHTER_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board": {
      "Custom Field 1": "Rackspace US, Inc.", 
      "Custom Field 2": "1C666D854AD0", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "FRU Ver 0.01", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE IO Board", 
      "Part Number": "10010VU00-600-G", 
      "Serial Number": "10010VU00X1571001", 
      "fault": "False", 
      "fru_type": "DAUGHTER_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_mezz0": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_mezz1": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot0": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot0_riser": {
      "fault": "False", 
      "fru_type": "PCIE_RISER", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot1": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot1_riser": {
      "fault": "False", 
      "fru_type": "PCIE_RISER", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot2": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot2_riser": {
      "fault": "False", 
      "fru_type": "PCIE_RISER", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "Part Number": "1A21GBR00-600-G", 
      "Serial Number": "65D0008X02", 
      "Type": 23, 
      "fault": "True", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/apss": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/bmc": {
      "fault": "False", 
      "fru_type": "BMC", 
      "is_fru": 0, 
      "manufacturer": "ASPEED", 
      "present": "False", 
      "version": "v1.99.0-310-g41f5ec1-dirty"
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0": {
      "Custom Field 1": "", 
      "Custom Field 2": "ECID:019A007780242718070D0000008D35D1", 
      "Custom Field 3": "EC:20", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "0x2020", 
      "Manufacturer": "IBM", 
      "Name": "PROCESSOR MODULE", 
      "Part Number": "00UL864", 
      "Serial Number": "YA1933063160", 
      "fault": "False", 
      "fru_type": "CPU", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core0": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core1": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core10": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core11": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core2": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core3": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core4": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core5": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core6": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core7": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core8": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core9": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1": {
      "Custom Field 1": "", 
      "Custom Field 2": "ECID:019A0077C120471803070000005A3822", 
      "Custom Field 3": "EC:20", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "0x2020", 
      "Manufacturer": "IBM", 
      "Name": "PROCESSOR MODULE", 
      "Part Number": "00UL864", 
      "Serial Number": "YA1933063136", 
      "fault": "False", 
      "fru_type": "CPU", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core0": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core1": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core10": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core11": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core2": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core3": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core4": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core5": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core6": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core7": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core8": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core9": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm0": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f30", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f54", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1/event": {
      "endpoints": [
        "/org/openbmc/records/events/193"
      ]
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm10": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm11": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm12": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f25", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm13": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f52", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm14": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm15": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm16": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f2f", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm17": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f37", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm18": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm19": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm2": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm2/event": {
      "endpoints": [
        "/org/openbmc/records/events/195"
      ]
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm20": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f29", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm21": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f33", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm22": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm23": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm24": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317da404", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm25": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f93", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm26": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm27": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm28": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f27", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm29": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f2c", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm3": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm3/event": {
      "endpoints": [
        "/org/openbmc/records/events/195"
      ]
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm30": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm31": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm4": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f2b", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm5": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f53", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm6": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm7": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm8": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f94", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm9": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f56", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf0": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf1": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf2": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "True", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf3": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "True", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf4": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf5": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf6": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf7": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/pcieclock": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/refclock": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/todclock": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/sas_expander": {
      "Custom Field 1": "Rackspace US, Inc.", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "FRU Ver 0.01", 
      "Manufacturer": "FOXCONN", 
      "Name": "BARRELEYE PEB", 
      "Part Number": "10034HV00-600-G", 
      "Serial Number": "1A421AR00-600-G64J0002X02", 
      "fault": "False", 
      "fru_type": "DAUGHTER_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/misc": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "True", 
      "fru_type": "SYSTEM", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/systemevent": {
      "fault": "False", 
      "fru_type": "SYSTEM_EVENT", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 04:55:38.215" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20161207 04:55:38.216" level="INFO">${jsondata} = {
    "data": {
        "/org/openbmc/inventory/system/bios": {
            "Asset Tag": "",
            "Custom Field 1": "\tbuildroot-fda20bd",
            "Custom Field 2": "\tskiboot-5.2.0-opdirty...</msg>
<status status="PASS" starttime="20161207 04:55:38.208" endtime="20161207 04:55:38.216"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20161207 04:55:38.217" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_inventory.txt"&gt;/tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161207 04:55:38.217" endtime="20161207 04:55:38.218"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:38.216" endtime="20161207 04:55:38.218"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:34.428" endtime="20161207 04:55:38.218"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20161207 04:55:38.218" level="INFO">${logpath} = /tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_led.txt</msg>
<status status="PASS" starttime="20161207 04:55:38.218" endtime="20161207 04:55:38.218"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 04:55:38.219" level="INFO">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status status="PASS" starttime="20161207 04:55:38.219" endtime="20161207 04:55:38.219"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:55:38.220" endtime="20161207 04:55:38.222"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 04:55:38.223" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161207 04:55:38.223" endtime="20161207 04:55:38.224"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 04:55:38.224" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161207 04:55:38.224" endtime="20161207 04:55:38.224"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 04:55:38.225" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161207 04:55:38.225" endtime="20161207 04:55:38.225"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 04:55:38.225" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161207 04:55:38.225" endtime="20161207 04:55:38.226"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 04:55:38.561" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 04:55:38.562" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:55:38.226" endtime="20161207 04:55:38.562"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:55:38.562" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:55:38.562" endtime="20161207 04:55:38.562"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:38.223" endtime="20161207 04:55:38.562"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 04:55:38.786" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None </msg>
<msg timestamp="20161207 04:55:38.786" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:55:38.563" endtime="20161207 04:55:38.786"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:55:38.786" endtime="20161207 04:55:38.792"></status>
</kw>
<msg timestamp="20161207 04:55:38.792" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:55:38.218" endtime="20161207 04:55:38.792"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:55:38.794" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:55:38.793" endtime="20161207 04:55:38.794"></status>
</kw>
<msg timestamp="20161207 04:55:38.794" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20161207 04:55:38.792" endtime="20161207 04:55:38.794"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" starttime="20161207 04:55:38.794" endtime="20161207 04:55:38.799"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20161207 04:55:38.799" level="INFO">To JSON using : content={
  "data": {
    "/org/openbmc/records/events/193": {
      "associations": [
        [
          "fru", 
          "event", 
          "/org/openbmc/inventory/system/chassis/motherboard/dimm1"
        ]
      ], 
      "debug_data": [
        1
      ], 
      "message": "Error", 
      "reported_by": "Host", 
      "severity": "Testing failure", 
      "time": "2016:11:21 06:12:59"
    }, 
    "/org/openbmc/records/events/193/fru": {
      "endpoints": [
        "/org/openbmc/inventory/system/chassis/motherboard/dimm1"
      ]
    }, 
    "/org/openbmc/records/events/195": {
      "associations": [
        [
          "fru", 
          "event", 
          "/org/openbmc/inventory/system/chassis/motherboard/dimm3"
        ], 
        [
          "fru", 
          "event", 
          "/org/openbmc/inventory/system/chassis/motherboard/dimm2"
        ]
      ], 
      "debug_data": [
        48, 
        0, 
        19, 
        127, 
        136, 
        255
      ], 
      "message": "A Test event log just happened", 
      "reported_by": "Test", 
      "severity": "Info", 
      "time": "2016:11:21 06:13:02"
    }, 
    "/org/openbmc/records/events/195/fru": {
      "endpoints": [
        "/org/openbmc/inventory/system/chassis/motherboard/dimm3", 
        "/org/openbmc/inventory/system/chassis/motherboard/dimm2"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 04:55:38.800" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20161207 04:55:38.800" level="INFO">${jsondata} = {
    "data": {
        "/org/openbmc/records/events/193": {
            "associations": [
                [
                    "fru",
                    "event",
                    "/org/openbmc/i...</msg>
<status status="PASS" starttime="20161207 04:55:38.799" endtime="20161207 04:55:38.800"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20161207 04:55:38.801" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_led.txt"&gt;/tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_led.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161207 04:55:38.800" endtime="20161207 04:55:38.801"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:38.800" endtime="20161207 04:55:38.801"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:38.218" endtime="20161207 04:55:38.801"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20161207 04:55:38.802" level="INFO">${logpath} = /tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_record_log.txt</msg>
<status status="PASS" starttime="20161207 04:55:38.801" endtime="20161207 04:55:38.802"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 04:55:38.803" level="INFO">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status status="PASS" starttime="20161207 04:55:38.803" endtime="20161207 04:55:38.803"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:55:38.804" endtime="20161207 04:55:38.808"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 04:55:38.809" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161207 04:55:38.808" endtime="20161207 04:55:38.809"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 04:55:38.810" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161207 04:55:38.810" endtime="20161207 04:55:38.810"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 04:55:38.811" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161207 04:55:38.810" endtime="20161207 04:55:38.811"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 04:55:38.812" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161207 04:55:38.811" endtime="20161207 04:55:38.812"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 04:55:39.320" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 04:55:39.320" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:55:38.812" endtime="20161207 04:55:39.320"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:55:39.320" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:55:39.320" endtime="20161207 04:55:39.321"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:38.808" endtime="20161207 04:55:39.321"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 04:55:39.516" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None </msg>
<msg timestamp="20161207 04:55:39.516" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:55:39.321" endtime="20161207 04:55:39.516"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:55:39.516" endtime="20161207 04:55:39.520"></status>
</kw>
<msg timestamp="20161207 04:55:39.520" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:55:38.802" endtime="20161207 04:55:39.520"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:55:39.522" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:55:39.521" endtime="20161207 04:55:39.522"></status>
</kw>
<msg timestamp="20161207 04:55:39.522" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20161207 04:55:39.521" endtime="20161207 04:55:39.522"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" starttime="20161207 04:55:39.522" endtime="20161207 04:55:39.526"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20161207 04:55:39.527" level="INFO">To JSON using : content={
  "data": {
    "/org/openbmc/control/led/beep": {}, 
    "/org/openbmc/control/led/heartbeat": {}, 
    "/org/openbmc/control/led/identify": {}
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 04:55:39.527" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20161207 04:55:39.527" level="INFO">${jsondata} = {
    "data": {
        "/org/openbmc/control/led/beep": {},
        "/org/openbmc/control/led/heartbeat": {},
        "/org/openbmc/control/led/identify": {}
    },
    "message": "200 OK",
    "stat...</msg>
<status status="PASS" starttime="20161207 04:55:39.526" endtime="20161207 04:55:39.527"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20161207 04:55:39.529" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_record_log.txt"&gt;/tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_record_log.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161207 04:55:39.528" endtime="20161207 04:55:39.529"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:39.527" endtime="20161207 04:55:39.530"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:38.801" endtime="20161207 04:55:39.530"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:31.943" endtime="20161207 04:55:39.530"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:31.941" endtime="20161207 04:55:39.530"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:31.941" endtime="20161207 04:55:39.530"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:31.941" endtime="20161207 04:55:39.530"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:29.599" endtime="20161207 04:55:39.530"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:29.599" endtime="20161207 04:55:39.530"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:29.598" endtime="20161207 04:55:39.531"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:29.598" endtime="20161207 04:55:39.531"></status>
</kw>
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Manifest">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20161207 04:55:39.535" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" starttime="20161207 04:55:39.534" endtime="20161207 04:55:39.535"></status>
</kw>
<msg timestamp="20161207 04:55:39.536" level="INFO">${has_host} = False</msg>
<status status="PASS" starttime="20161207 04:55:39.534" endtime="20161207 04:55:39.536"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:55:39.541" endtime="20161207 04:55:39.541"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:39.536" endtime="20161207 04:55:39.542"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20161207 04:55:39.546" level="INFO">${port_num} = 22</msg>
<status status="PASS" starttime="20161207 04:55:39.545" endtime="20161207 04:55:39.546"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20161207 04:55:39.546" level="INFO">${SSH_PORT} = 22</msg>
<status status="PASS" starttime="20161207 04:55:39.546" endtime="20161207 04:55:39.546"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20161207 04:55:39.547" level="INFO">${https_num} = 443</msg>
<status status="PASS" starttime="20161207 04:55:39.546" endtime="20161207 04:55:39.547"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20161207 04:55:39.548" level="INFO">${AUTH_URI} = https://9.3.23.30:443</msg>
<status status="PASS" starttime="20161207 04:55:39.547" endtime="20161207 04:55:39.548"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:39.545" endtime="20161207 04:55:39.548"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:39.542" endtime="20161207 04:55:39.548"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20161207 04:55:39.549" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" starttime="20161207 04:55:39.549" endtime="20161207 04:55:39.550"></status>
</kw>
<msg timestamp="20161207 04:55:39.550" level="INFO">${has_port} = False</msg>
<status status="PASS" starttime="20161207 04:55:39.549" endtime="20161207 04:55:39.550"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:55:39.555" endtime="20161207 04:55:39.555"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:55:39.556" endtime="20161207 04:55:39.556"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:39.554" endtime="20161207 04:55:39.556"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:39.550" endtime="20161207 04:55:39.556"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20161207 04:55:39.557" level="INFO">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg timestamp="20161207 04:55:41.914" level="INFO">Read output: 7[r[999;999H[6n</msg>
<status status="PASS" starttime="20161207 04:55:39.557" endtime="20161207 04:55:41.914"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:39.533" endtime="20161207 04:55:41.914"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20161207 04:55:41.915" level="INFO">@{entries} = [ BMC DATA | APPLICATION DATA | DRIVER INFO ]</msg>
<status status="PASS" starttime="20161207 04:55:41.915" endtime="20161207 04:55:41.915"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC DATA">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20161207 04:55:41.918" level="INFO">@{cmd_list} = [ ('BMC File System Disk Space Usage', 'df -hT') | ('BMC Uptime', 'uptime') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" starttime="20161207 04:55:41.917" endtime="20161207 04:55:41.918"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20161207 04:55:41.925" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" starttime="20161207 04:55:41.918" endtime="20161207 04:55:41.926"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20161207 04:55:41.934" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt"&gt;/tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161207 04:55:41.933" endtime="20161207 04:55:41.934"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:41.933" endtime="20161207 04:55:41.934"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20161207 04:55:41.935" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt"&gt;/tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161207 04:55:41.935" endtime="20161207 04:55:41.935"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:41.934" endtime="20161207 04:55:41.936"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20161207 04:55:41.936" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt"&gt;/tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161207 04:55:41.936" endtime="20161207 04:55:41.937"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:41.936" endtime="20161207 04:55:41.937"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20161207 04:55:41.938" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt"&gt;/tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161207 04:55:41.937" endtime="20161207 04:55:41.938"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:41.937" endtime="20161207 04:55:41.938"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:41.932" endtime="20161207 04:55:41.938"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:41.928" endtime="20161207 04:55:41.938"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161207 04:55:41.939" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20161207 04:55:42.017" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161207 04:55:42.017" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      242.4M         0    242.4M   0% /dev
tmpfs                tmpfs         243.7M      8.9...</msg>
<msg timestamp="20161207 04:55:42.017" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20161207 04:55:41.938" endtime="20161207 04:55:42.017"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20161207 04:55:42.021" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt"&gt;/tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161207 04:55:42.021" endtime="20161207 04:55:42.021"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:42.020" endtime="20161207 04:55:42.021"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:42.017" endtime="20161207 04:55:42.021"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:41.926" endtime="20161207 04:55:42.022"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:41.926" endtime="20161207 04:55:42.022"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20161207 04:55:42.027" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt"&gt;/tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161207 04:55:42.026" endtime="20161207 04:55:42.027"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:42.026" endtime="20161207 04:55:42.027"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20161207 04:55:42.028" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt"&gt;/tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161207 04:55:42.028" endtime="20161207 04:55:42.028"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:42.027" endtime="20161207 04:55:42.028"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20161207 04:55:42.029" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt"&gt;/tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161207 04:55:42.029" endtime="20161207 04:55:42.029"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:42.028" endtime="20161207 04:55:42.030"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20161207 04:55:42.031" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt"&gt;/tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161207 04:55:42.030" endtime="20161207 04:55:42.031"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:42.030" endtime="20161207 04:55:42.031"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:42.025" endtime="20161207 04:55:42.031"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:42.023" endtime="20161207 04:55:42.031"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161207 04:55:42.031" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20161207 04:55:42.127" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161207 04:55:42.127" level="INFO">${stdout} =  06:16:44 up 8 min,  load average: 0.39, 1.43, 1.09</msg>
<msg timestamp="20161207 04:55:42.128" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20161207 04:55:42.031" endtime="20161207 04:55:42.128"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20161207 04:55:42.132" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt"&gt;/tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161207 04:55:42.131" endtime="20161207 04:55:42.132"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:42.131" endtime="20161207 04:55:42.132"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:42.128" endtime="20161207 04:55:42.132"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:42.022" endtime="20161207 04:55:42.132"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:42.022" endtime="20161207 04:55:42.132"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20161207 04:55:42.138" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt"&gt;/tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161207 04:55:42.138" endtime="20161207 04:55:42.138"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:42.137" endtime="20161207 04:55:42.138"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20161207 04:55:42.140" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt"&gt;/tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161207 04:55:42.139" endtime="20161207 04:55:42.140"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:42.139" endtime="20161207 04:55:42.140"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20161207 04:55:42.141" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt"&gt;/tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161207 04:55:42.140" endtime="20161207 04:55:42.141"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:42.140" endtime="20161207 04:55:42.141"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20161207 04:55:42.142" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt"&gt;/tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161207 04:55:42.142" endtime="20161207 04:55:42.142"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:42.141" endtime="20161207 04:55:42.142"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:42.137" endtime="20161207 04:55:42.142"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:42.133" endtime="20161207 04:55:42.142"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161207 04:55:42.143" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20161207 04:55:42.239" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161207 04:55:42.239" level="INFO">${stdout} = Linux barreleye 4.7.10-9ad8a296b1a02f3b0e5e5050cede5b25c01549e4 #1 Wed Dec 7 04:30:31 UTC 2016 armv5tejl GNU/Linux</msg>
<msg timestamp="20161207 04:55:42.239" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20161207 04:55:42.142" endtime="20161207 04:55:42.239"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20161207 04:55:42.243" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt"&gt;/tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161207 04:55:42.243" endtime="20161207 04:55:42.243"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:42.242" endtime="20161207 04:55:42.243"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:42.239" endtime="20161207 04:55:42.243"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:42.132" endtime="20161207 04:55:42.243"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:42.132" endtime="20161207 04:55:42.243"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:41.926" endtime="20161207 04:55:42.243"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:41.916" endtime="20161207 04:55:42.243"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:41.916" endtime="20161207 04:55:42.243"></status>
</kw>
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20161207 04:55:42.244" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil  state') ]</msg>
<status status="PASS" starttime="20161207 04:55:42.244" endtime="20161207 04:55:42.244"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20161207 04:55:42.245" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" starttime="20161207 04:55:42.245" endtime="20161207 04:55:42.245"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil  state')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20161207 04:55:42.253" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt"&gt;/tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161207 04:55:42.252" endtime="20161207 04:55:42.253"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:42.252" endtime="20161207 04:55:42.253"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20161207 04:55:42.254" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt"&gt;/tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161207 04:55:42.254" endtime="20161207 04:55:42.254"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:42.253" endtime="20161207 04:55:42.254"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20161207 04:55:42.255" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt"&gt;/tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161207 04:55:42.255" endtime="20161207 04:55:42.255"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:42.254" endtime="20161207 04:55:42.255"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20161207 04:55:42.256" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt"&gt;/tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161207 04:55:42.256" endtime="20161207 04:55:42.256"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:42.256" endtime="20161207 04:55:42.257"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:42.251" endtime="20161207 04:55:42.257"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:42.247" endtime="20161207 04:55:42.257"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161207 04:55:42.257" level="INFO">Executing command '/usr/sbin/obmcutil  state'.</msg>
<msg timestamp="20161207 04:55:43.870" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161207 04:55:43.870" level="INFO">${stdout} =  = HOST_POWERING_ON</msg>
<msg timestamp="20161207 04:55:43.870" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20161207 04:55:42.257" endtime="20161207 04:55:43.870"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20161207 04:55:43.878" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt"&gt;/tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161207 04:55:43.877" endtime="20161207 04:55:43.878"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:43.876" endtime="20161207 04:55:43.878"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:43.871" endtime="20161207 04:55:43.878"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:42.246" endtime="20161207 04:55:43.878"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:42.245" endtime="20161207 04:55:43.878"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:42.245" endtime="20161207 04:55:43.878"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:42.244" endtime="20161207 04:55:43.879"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:42.244" endtime="20161207 04:55:43.879"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20161207 04:55:43.880" level="INFO">@{cmd_list} = [ ('FW Level', 'cat /etc/os-release') | ('Build Info', 'cat /etc/version') ]</msg>
<status status="PASS" starttime="20161207 04:55:43.880" endtime="20161207 04:55:43.880"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20161207 04:55:43.881" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" starttime="20161207 04:55:43.881" endtime="20161207 04:55:43.882"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20161207 04:55:43.889" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt"&gt;/tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161207 04:55:43.889" endtime="20161207 04:55:43.890"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:43.889" endtime="20161207 04:55:43.890"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20161207 04:55:43.891" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt"&gt;/tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161207 04:55:43.890" endtime="20161207 04:55:43.891"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:43.890" endtime="20161207 04:55:43.891"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20161207 04:55:43.892" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt"&gt;/tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161207 04:55:43.892" endtime="20161207 04:55:43.892"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:43.892" endtime="20161207 04:55:43.893"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20161207 04:55:43.894" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt"&gt;/tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161207 04:55:43.893" endtime="20161207 04:55:43.894"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:43.893" endtime="20161207 04:55:43.894"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:43.888" endtime="20161207 04:55:43.894"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:43.883" endtime="20161207 04:55:43.894"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161207 04:55:43.894" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20161207 04:55:44.150" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161207 04:55:44.150" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.0-310"
VERSION_ID="v1.99.0-310-g41f5ec1-dirty"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC ...</msg>
<msg timestamp="20161207 04:55:44.150" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20161207 04:55:43.894" endtime="20161207 04:55:44.150"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20161207 04:55:44.154" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt"&gt;/tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161207 04:55:44.154" endtime="20161207 04:55:44.154"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:44.153" endtime="20161207 04:55:44.154"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:44.150" endtime="20161207 04:55:44.154"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:43.882" endtime="20161207 04:55:44.154"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:43.882" endtime="20161207 04:55:44.154"></status>
</kw>
<kw type="foritem" name="${cmd} = ('Build Info', 'cat /etc/version')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20161207 04:55:44.161" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt"&gt;/tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161207 04:55:44.161" endtime="20161207 04:55:44.161"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:44.160" endtime="20161207 04:55:44.161"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20161207 04:55:44.162" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt"&gt;/tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161207 04:55:44.162" endtime="20161207 04:55:44.163"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:44.162" endtime="20161207 04:55:44.163"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20161207 04:55:44.164" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt"&gt;/tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161207 04:55:44.164" endtime="20161207 04:55:44.164"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:44.163" endtime="20161207 04:55:44.164"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20161207 04:55:44.165" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt"&gt;/tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161207 04:55:44.165" endtime="20161207 04:55:44.165"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:44.164" endtime="20161207 04:55:44.165"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:44.159" endtime="20161207 04:55:44.165"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:44.155" endtime="20161207 04:55:44.166"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161207 04:55:44.166" level="INFO">Executing command 'cat /etc/version'.</msg>
<msg timestamp="20161207 04:55:44.294" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161207 04:55:44.294" level="INFO">${stdout} = 20161207042040</msg>
<msg timestamp="20161207 04:55:44.294" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20161207 04:55:44.166" endtime="20161207 04:55:44.294"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20161207 04:55:44.298" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt"&gt;/tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest/20161207045524166837_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161207 04:55:44.298" endtime="20161207 04:55:44.299"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:44.298" endtime="20161207 04:55:44.299"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:44.294" endtime="20161207 04:55:44.299"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:44.155" endtime="20161207 04:55:44.299"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:44.154" endtime="20161207 04:55:44.299"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:43.882" endtime="20161207 04:55:44.299"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:43.879" endtime="20161207 04:55:44.299"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:43.879" endtime="20161207 04:55:44.299"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:41.916" endtime="20161207 04:55:44.299"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:39.532" endtime="20161207 04:55:44.299"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:39.532" endtime="20161207 04:55:44.299"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:39.531" endtime="20161207 04:55:44.299"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:39.531" endtime="20161207 04:55:44.299"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="OS FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20161207 04:55:44.304" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20161207 04:55:44.301" endtime="20161207 04:55:44.304"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:44.300" endtime="20161207 04:55:44.304"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:44.300" endtime="20161207 04:55:44.304"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:44.300" endtime="20161207 04:55:44.304"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:44.299" endtime="20161207 04:55:44.304"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:24.222" endtime="20161207 04:55:44.304"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:24.221" endtime="20161207 04:55:44.304"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:24.221" endtime="20161207 04:55:44.304"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:24.221" endtime="20161207 04:55:44.304"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:24.220" endtime="20161207 04:55:44.304"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20161207 04:55:44.305" level="INFO">${cur_time} = 2016-12-07 04:55:44:305082</msg>
<status status="PASS" starttime="20161207 04:55:44.305" endtime="20161207 04:55:44.305"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20161207 04:55:44.306" level="INFO">${cur_time} = 20161207045544305082</msg>
<status status="PASS" starttime="20161207 04:55:44.305" endtime="20161207 04:55:44.306"></status>
</kw>
<msg timestamp="20161207 04:55:44.306" level="INFO">${cur_time} = 20161207045544305082</msg>
<status status="PASS" starttime="20161207 04:55:44.305" endtime="20161207 04:55:44.306"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>FFDC Collection Completed \t: ${cur_time}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:55:44.306" endtime="20161207 04:55:44.306"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${\n}${FFDC_DIR_PATH}</arg>
</arguments>
<msg timestamp="20161207 04:55:44.307" level="INFO">
/tmp/root/2317/obmc-robot/logs/20161207045524166837_TestsTestBasicPoweron/20161207045524166837_powerontest</msg>
<status status="PASS" starttime="20161207 04:55:44.307" endtime="20161207 04:55:44.307"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:24.166" endtime="20161207 04:55:44.307"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:24.163" endtime="20161207 04:55:44.307"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20161207 04:55:44.308" level="INFO" html="yes">Directory '&lt;a href="file:///tmp/root/2317/obmc-robot/logs"&gt;/tmp/root/2317/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" starttime="20161207 04:55:44.308" endtime="20161207 04:55:44.308"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20161207 04:55:44.309" level="INFO" html="yes">File '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/test_history.txt"&gt;/tmp/root/2317/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20161207 04:55:44.309" endtime="20161207 04:55:44.309"></status>
</kw>
<msg timestamp="20161207 04:55:44.309" level="INFO">${exist} = True</msg>
<status status="PASS" starttime="20161207 04:55:44.308" endtime="20161207 04:55:44.309"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:55:44.310" endtime="20161207 04:55:44.312"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20161207 04:55:44.313" level="INFO">${cur_time} = 2016-12-07 04:55:44:313038</msg>
<status status="PASS" starttime="20161207 04:55:44.313" endtime="20161207 04:55:44.313"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20161207 04:55:44.314" level="INFO">${cur_time} = 20161207045544313038</msg>
<status status="PASS" starttime="20161207 04:55:44.313" endtime="20161207 04:55:44.314"></status>
</kw>
<msg timestamp="20161207 04:55:44.314" level="INFO">${cur_time} = 20161207045544313038</msg>
<status status="PASS" starttime="20161207 04:55:44.312" endtime="20161207 04:55:44.314"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20161207 04:55:44.315" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/test_history.txt"&gt;/tmp/root/2317/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161207 04:55:44.314" endtime="20161207 04:55:44.315"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:44.307" endtime="20161207 04:55:44.315"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:24.163" endtime="20161207 04:55:44.315"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Login to BMC and Stop the obmc-console-client process.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20161207 04:55:44.317" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" starttime="20161207 04:55:44.316" endtime="20161207 04:55:44.317"></status>
</kw>
<msg timestamp="20161207 04:55:44.317" level="INFO">${has_host} = False</msg>
<status status="PASS" starttime="20161207 04:55:44.316" endtime="20161207 04:55:44.317"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:55:44.320" endtime="20161207 04:55:44.320"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:44.317" endtime="20161207 04:55:44.320"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20161207 04:55:44.324" level="INFO">${port_num} = 22</msg>
<status status="PASS" starttime="20161207 04:55:44.324" endtime="20161207 04:55:44.324"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20161207 04:55:44.325" level="INFO">${SSH_PORT} = 22</msg>
<status status="PASS" starttime="20161207 04:55:44.324" endtime="20161207 04:55:44.325"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20161207 04:55:44.325" level="INFO">${https_num} = 443</msg>
<status status="PASS" starttime="20161207 04:55:44.325" endtime="20161207 04:55:44.325"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20161207 04:55:44.326" level="INFO">${AUTH_URI} = https://9.3.23.30:443</msg>
<status status="PASS" starttime="20161207 04:55:44.326" endtime="20161207 04:55:44.326"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:44.324" endtime="20161207 04:55:44.326"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:44.321" endtime="20161207 04:55:44.326"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20161207 04:55:44.327" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" starttime="20161207 04:55:44.327" endtime="20161207 04:55:44.327"></status>
</kw>
<msg timestamp="20161207 04:55:44.327" level="INFO">${has_port} = False</msg>
<status status="PASS" starttime="20161207 04:55:44.326" endtime="20161207 04:55:44.327"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:55:44.331" endtime="20161207 04:55:44.331"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:55:44.331" endtime="20161207 04:55:44.332"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:44.331" endtime="20161207 04:55:44.332"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:44.327" endtime="20161207 04:55:44.332"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20161207 04:55:44.332" level="INFO">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg timestamp="20161207 04:55:46.915" level="INFO">Read output: 7[r[999;999H[6n</msg>
<status status="PASS" starttime="20161207 04:55:44.332" endtime="20161207 04:55:46.915"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:44.315" endtime="20161207 04:55:46.915"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${file_path}-${LOG_TIME}_* | cut -d'_' -f 2</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${pid}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161207 04:55:46.916" level="INFO">Executing command 'ls /tmp/obmc-console.log-20161207045205263841_* | cut -d'_' -f 2'.</msg>
<msg timestamp="20161207 04:55:47.025" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161207 04:55:47.025" level="INFO">${pid} = 938</msg>
<msg timestamp="20161207 04:55:47.025" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20161207 04:55:46.916" endtime="20161207 04:55:47.026"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161207 04:55:47.026" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20161207 04:55:47.026" endtime="20161207 04:55:47.026"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps ax | grep ${pid} | grep -v grep</arg>
<arg>return_stdout=False</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${rc}</var>
</assign>
<msg timestamp="20161207 04:55:47.027" level="INFO">Executing command 'ps ax | grep 938 | grep -v grep'.</msg>
<msg timestamp="20161207 04:55:47.307" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161207 04:55:47.307" level="INFO">${rc} = 0</msg>
<status status="PASS" starttime="20161207 04:55:47.027" endtime="20161207 04:55:47.307"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${rc}' == '${1}'</arg>
<arg>No obmc-console-client process running</arg>
</arguments>
<status status="PASS" starttime="20161207 04:55:47.308" endtime="20161207 04:55:47.313"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -s KILL ${pid}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${console}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161207 04:55:47.313" level="INFO">Executing command 'kill -s KILL 938'.</msg>
<msg timestamp="20161207 04:55:47.433" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161207 04:55:47.433" level="INFO">${console} = </msg>
<msg timestamp="20161207 04:55:47.433" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20161207 04:55:47.313" endtime="20161207 04:55:47.433"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161207 04:55:47.434" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20161207 04:55:47.433" endtime="20161207 04:55:47.434"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Current Client PID:${pid}</arg>
</arguments>
<msg timestamp="20161207 04:55:47.435" level="INFO">Current Client PID:938</msg>
<status status="PASS" starttime="20161207 04:55:47.434" endtime="20161207 04:55:47.435"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${file_path}-${LOG_TIME}_${pid}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${console}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161207 04:55:47.436" level="INFO">Executing command 'cat /tmp/obmc-console.log-20161207045205263841_938'.</msg>
<msg timestamp="20161207 04:55:47.564" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161207 04:55:47.564" level="INFO">${console} = </msg>
<msg timestamp="20161207 04:55:47.564" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20161207 04:55:47.435" endtime="20161207 04:55:47.564"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161207 04:55:47.565" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20161207 04:55:47.565" endtime="20161207 04:55:47.565"></status>
</kw>
<msg timestamp="20161207 04:55:47.565" level="INFO">${sol_log} = </msg>
<status status="PASS" starttime="20161207 04:55:44.315" endtime="20161207 04:55:47.565"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg timestamp="20161207 04:55:47.566" level="INFO"></msg>
<status status="PASS" starttime="20161207 04:55:47.566" endtime="20161207 04:55:47.566"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:24.162" endtime="20161207 04:55:47.566"></status>
</kw>
<doc>Power OFF and power ON</doc>
<tags>
<tag>chassisboot</tag>
<tag>power_on_test</tag>
</tags>
<status status="FAIL" starttime="20161207 04:52:02.476" endtime="20161207 04:55:47.566" critical="yes">Keyword 'Is Power On' failed after retrying for 3 minutes. The last error was: 0 != 1</status>
</test>
<doc>This module will test basic power on use cases for CI</doc>
<status status="FAIL" starttime="20161207 04:52:02.447" endtime="20161207 04:55:47.567"></status>
</suite>
<suite id="s1-s4" name="Test Eventlog" source="/tmp/root/2317/obmc-robot/tests/test_eventlog.robot">
<kw type="setup" library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20161207 04:55:47.604" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" starttime="20161207 04:55:47.604" endtime="20161207 04:55:47.604"></status>
</kw>
<msg timestamp="20161207 04:55:47.604" level="INFO">${has_host} = False</msg>
<status status="PASS" starttime="20161207 04:55:47.604" endtime="20161207 04:55:47.604"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:55:47.608" endtime="20161207 04:55:47.608"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:47.605" endtime="20161207 04:55:47.608"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20161207 04:55:47.612" level="INFO">${port_num} = 22</msg>
<status status="PASS" starttime="20161207 04:55:47.611" endtime="20161207 04:55:47.612"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20161207 04:55:47.612" level="INFO">${SSH_PORT} = 22</msg>
<status status="PASS" starttime="20161207 04:55:47.612" endtime="20161207 04:55:47.612"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20161207 04:55:47.613" level="INFO">${https_num} = 443</msg>
<status status="PASS" starttime="20161207 04:55:47.613" endtime="20161207 04:55:47.613"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20161207 04:55:47.614" level="INFO">${AUTH_URI} = https://9.3.23.30:443</msg>
<status status="PASS" starttime="20161207 04:55:47.614" endtime="20161207 04:55:47.614"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:47.611" endtime="20161207 04:55:47.614"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:47.608" endtime="20161207 04:55:47.614"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20161207 04:55:47.615" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" starttime="20161207 04:55:47.615" endtime="20161207 04:55:47.615"></status>
</kw>
<msg timestamp="20161207 04:55:47.615" level="INFO">${has_port} = False</msg>
<status status="PASS" starttime="20161207 04:55:47.614" endtime="20161207 04:55:47.615"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:55:47.619" endtime="20161207 04:55:47.619"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:55:47.619" endtime="20161207 04:55:47.620"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:47.619" endtime="20161207 04:55:47.620"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:47.615" endtime="20161207 04:55:47.620"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20161207 04:55:47.621" level="INFO">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg timestamp="20161207 04:55:49.843" level="INFO">Read output: 7[r[999;999H[6n</msg>
<status status="PASS" starttime="20161207 04:55:47.621" endtime="20161207 04:55:49.843"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:47.603" endtime="20161207 04:55:49.843"></status>
</kw>
<test id="s1-s4-t1" name="clear any logs">
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>/org/openbmc/records/events/action/clear</arg>
<arg>data=${NIL}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 04:55:49.846" level="INFO">${base_uri} = /org/openbmc/records/events/action/clear</msg>
<status status="PASS" starttime="20161207 04:55:49.845" endtime="20161207 04:55:49.846"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 04:55:49.847" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161207 04:55:49.846" endtime="20161207 04:55:49.847"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:55:49.847" endtime="20161207 04:55:49.848"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:55:49.858" level="INFO">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161207 04:55:49.856" endtime="20161207 04:55:49.858"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:55:49.859" level="INFO">URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161207 04:55:49.859" endtime="20161207 04:55:49.859"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:49.858" endtime="20161207 04:55:49.859"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:49.855" endtime="20161207 04:55:49.859"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:49.848" endtime="20161207 04:55:49.860"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 04:55:49.861" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161207 04:55:49.860" endtime="20161207 04:55:49.862"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 04:55:49.862" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161207 04:55:49.862" endtime="20161207 04:55:49.862"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 04:55:49.863" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161207 04:55:49.863" endtime="20161207 04:55:49.863"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 04:55:49.864" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161207 04:55:49.863" endtime="20161207 04:55:49.864"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 04:55:50.269" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 04:55:50.269" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:55:49.864" endtime="20161207 04:55:50.269"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:55:50.270" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:55:50.269" endtime="20161207 04:55:50.270"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:49.860" endtime="20161207 04:55:50.270"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 04:55:50.553" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/clear, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 04:55:50.554" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:55:50.270" endtime="20161207 04:55:50.554"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:55:50.558" level="INFO">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:55:50.557" endtime="20161207 04:55:50.558"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:55:50.559" level="INFO">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:55:50.559" endtime="20161207 04:55:50.559"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:50.558" endtime="20161207 04:55:50.559"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:50.557" endtime="20161207 04:55:50.560"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:50.554" endtime="20161207 04:55:50.560"></status>
</kw>
<msg timestamp="20161207 04:55:50.560" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:55:49.844" endtime="20161207 04:55:50.560"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:55:50.561" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:55:50.561" endtime="20161207 04:55:50.562"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>/org/openbmc/records/events/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 04:55:50.564" level="INFO">${base_uri} = /org/openbmc/records/events/</msg>
<status status="PASS" starttime="20161207 04:55:50.563" endtime="20161207 04:55:50.564"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:55:50.571" level="INFO">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status status="PASS" starttime="20161207 04:55:50.571" endtime="20161207 04:55:50.571"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:55:50.573" level="INFO">URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status status="PASS" starttime="20161207 04:55:50.572" endtime="20161207 04:55:50.573"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:50.572" endtime="20161207 04:55:50.573"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:50.570" endtime="20161207 04:55:50.573"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:50.564" endtime="20161207 04:55:50.573"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 04:55:50.574" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161207 04:55:50.574" endtime="20161207 04:55:50.574"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 04:55:50.575" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161207 04:55:50.575" endtime="20161207 04:55:50.575"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 04:55:50.575" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161207 04:55:50.575" endtime="20161207 04:55:50.575"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 04:55:50.576" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161207 04:55:50.576" endtime="20161207 04:55:50.576"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 04:55:51.097" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 04:55:51.097" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:55:50.576" endtime="20161207 04:55:51.097"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:55:51.098" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:55:51.097" endtime="20161207 04:55:51.098"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:50.573" endtime="20161207 04:55:51.098"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 04:55:51.154" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/, headers=None </msg>
<msg timestamp="20161207 04:55:51.154" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:55:51.098" endtime="20161207 04:55:51.154"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:55:51.158" level="INFO">${msg} = Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:55:51.158" endtime="20161207 04:55:51.158"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:55:51.159" level="INFO">Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:55:51.159" endtime="20161207 04:55:51.159"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:51.158" endtime="20161207 04:55:51.159"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:51.157" endtime="20161207 04:55:51.159"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:51.155" endtime="20161207 04:55:51.159"></status>
</kw>
<msg timestamp="20161207 04:55:51.160" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:55:50.562" endtime="20161207 04:55:51.160"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20161207 04:55:51.160" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 04:55:51.160" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 04:55:51.160" level="INFO">${json} = {u'message': u'200 OK', u'status': u'ok', u'data': []}</msg>
<status status="PASS" starttime="20161207 04:55:51.160" endtime="20161207 04:55:51.160"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<msg timestamp="20161207 04:55:51.161" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20161207 04:55:51.161" endtime="20161207 04:55:51.161"></status>
</kw>
<kw type="teardown" library="openbmc_ffdc" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<status status="PASS" starttime="20161207 04:55:51.162" endtime="20161207 04:55:51.164"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20161207 04:55:51.165" level="INFO" html="yes">Directory '&lt;a href="file:///tmp/root/2317/obmc-robot/logs"&gt;/tmp/root/2317/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" starttime="20161207 04:55:51.165" endtime="20161207 04:55:51.165"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20161207 04:55:51.166" level="INFO" html="yes">File '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/test_history.txt"&gt;/tmp/root/2317/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20161207 04:55:51.166" endtime="20161207 04:55:51.166"></status>
</kw>
<msg timestamp="20161207 04:55:51.166" level="INFO">${exist} = True</msg>
<status status="PASS" starttime="20161207 04:55:51.165" endtime="20161207 04:55:51.166"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:55:51.167" endtime="20161207 04:55:51.169"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20161207 04:55:51.170" level="INFO">${cur_time} = 2016-12-07 04:55:51:169918</msg>
<status status="PASS" starttime="20161207 04:55:51.170" endtime="20161207 04:55:51.170"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20161207 04:55:51.171" level="INFO">${cur_time} = 20161207045551169918</msg>
<status status="PASS" starttime="20161207 04:55:51.170" endtime="20161207 04:55:51.171"></status>
</kw>
<msg timestamp="20161207 04:55:51.171" level="INFO">${cur_time} = 20161207045551169918</msg>
<status status="PASS" starttime="20161207 04:55:51.169" endtime="20161207 04:55:51.171"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20161207 04:55:51.172" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/test_history.txt"&gt;/tmp/root/2317/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161207 04:55:51.171" endtime="20161207 04:55:51.172"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:51.164" endtime="20161207 04:55:51.172"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:51.161" endtime="20161207 04:55:51.172"></status>
</kw>
<doc>Test delete all events</doc>
<tags>
<tag>CI</tag>
<tag>clear_any_logs</tag>
</tags>
<status status="PASS" starttime="20161207 04:55:49.843" endtime="20161207 04:55:51.172" critical="yes"></status>
</test>
<test id="s1-s4-t2" name="write a log">
<kw name="create a test log">
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 04:55:51.173" level="INFO">${data} = {u'data': []}</msg>
<status status="PASS" starttime="20161207 04:55:51.173" endtime="20161207 04:55:51.173"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>/org/openbmc/records/events/action/acceptTestMessage</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 04:55:51.175" level="INFO">${base_uri} = /org/openbmc/records/events/action/acceptTestMessage</msg>
<status status="PASS" starttime="20161207 04:55:51.174" endtime="20161207 04:55:51.175"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 04:55:51.175" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161207 04:55:51.175" endtime="20161207 04:55:51.175"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:55:51.176" endtime="20161207 04:55:51.176"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:55:51.182" level="INFO">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161207 04:55:51.181" endtime="20161207 04:55:51.182"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:55:51.183" level="INFO">URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161207 04:55:51.183" endtime="20161207 04:55:51.183"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:51.182" endtime="20161207 04:55:51.183"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:51.180" endtime="20161207 04:55:51.183"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:51.176" endtime="20161207 04:55:51.184"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 04:55:51.184" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161207 04:55:51.184" endtime="20161207 04:55:51.185"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 04:55:51.185" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161207 04:55:51.185" endtime="20161207 04:55:51.185"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 04:55:51.186" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161207 04:55:51.186" endtime="20161207 04:55:51.186"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 04:55:51.186" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161207 04:55:51.186" endtime="20161207 04:55:51.186"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 04:55:51.779" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 04:55:51.779" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:55:51.187" endtime="20161207 04:55:51.779"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:55:51.780" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:55:51.779" endtime="20161207 04:55:51.780"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:51.184" endtime="20161207 04:55:51.780"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 04:55:52.144" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/acceptTestMessage, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 04:55:52.144" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:55:51.781" endtime="20161207 04:55:52.144"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:55:52.151" level="INFO">${msg} = Response code:200, Content:{
  "data": 196, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:55:52.150" endtime="20161207 04:55:52.151"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:55:52.153" level="INFO">Response code:200, Content:{
  "data": 196, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:55:52.152" endtime="20161207 04:55:52.153"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:52.151" endtime="20161207 04:55:52.153"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:52.150" endtime="20161207 04:55:52.153"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:52.144" endtime="20161207 04:55:52.153"></status>
</kw>
<msg timestamp="20161207 04:55:52.153" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:55:51.173" endtime="20161207 04:55:52.154"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:55:52.154" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:55:52.154" endtime="20161207 04:55:52.155"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20161207 04:55:52.155" level="INFO">To JSON using : content={
  "data": 196, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 04:55:52.155" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 04:55:52.156" level="INFO">${json} = {u'message': u'200 OK', u'status': u'ok', u'data': 196}</msg>
<status status="PASS" starttime="20161207 04:55:52.155" endtime="20161207 04:55:52.156"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<assign>
<var>${LOGID}</var>
</assign>
<msg timestamp="20161207 04:55:52.157" level="INFO">${LOGID} = 196</msg>
<status status="PASS" starttime="20161207 04:55:52.156" endtime="20161207 04:55:52.157"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>/org/openbmc/records/events/</arg>
<arg>${LOGID}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20161207 04:55:52.157" level="INFO">${uri} = /org/openbmc/records/events/196</msg>
<status status="PASS" starttime="20161207 04:55:52.157" endtime="20161207 04:55:52.157"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:51.173" endtime="20161207 04:55:52.158"></status>
</kw>
<kw type="teardown" library="openbmc_ffdc" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<status status="PASS" starttime="20161207 04:55:52.159" endtime="20161207 04:55:52.161"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20161207 04:55:52.162" level="INFO" html="yes">Directory '&lt;a href="file:///tmp/root/2317/obmc-robot/logs"&gt;/tmp/root/2317/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" starttime="20161207 04:55:52.162" endtime="20161207 04:55:52.162"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20161207 04:55:52.163" level="INFO" html="yes">File '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/test_history.txt"&gt;/tmp/root/2317/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20161207 04:55:52.163" endtime="20161207 04:55:52.163"></status>
</kw>
<msg timestamp="20161207 04:55:52.163" level="INFO">${exist} = True</msg>
<status status="PASS" starttime="20161207 04:55:52.162" endtime="20161207 04:55:52.163"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:55:52.163" endtime="20161207 04:55:52.166"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20161207 04:55:52.167" level="INFO">${cur_time} = 2016-12-07 04:55:52:166885</msg>
<status status="PASS" starttime="20161207 04:55:52.167" endtime="20161207 04:55:52.167"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20161207 04:55:52.168" level="INFO">${cur_time} = 20161207045552166885</msg>
<status status="PASS" starttime="20161207 04:55:52.167" endtime="20161207 04:55:52.168"></status>
</kw>
<msg timestamp="20161207 04:55:52.168" level="INFO">${cur_time} = 20161207045552166885</msg>
<status status="PASS" starttime="20161207 04:55:52.166" endtime="20161207 04:55:52.168"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20161207 04:55:52.169" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/test_history.txt"&gt;/tmp/root/2317/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161207 04:55:52.168" endtime="20161207 04:55:52.169"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:52.161" endtime="20161207 04:55:52.169"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:52.158" endtime="20161207 04:55:52.169"></status>
</kw>
<doc>Test create event</doc>
<tags>
<tag>CI</tag>
<tag>write_a_log</tag>
</tags>
<status status="PASS" starttime="20161207 04:55:51.172" endtime="20161207 04:55:52.169" critical="yes"></status>
</test>
<kw type="teardown" library="SSHLibrary" name="Close All Connections">
<doc>Closes all open connections.</doc>
<status status="PASS" starttime="20161207 04:55:52.171" endtime="20161207 04:55:52.443"></status>
</kw>
<doc>This suite is used for testing the error logging
capability from the host</doc>
<status status="PASS" starttime="20161207 04:55:47.571" endtime="20161207 04:55:52.443"></status>
</suite>
<suite id="s1-s5" name="Test Obmcrest" source="/tmp/root/2317/obmc-robot/tests/test_obmcrest.robot">
<test id="s1-s5-t1" name="Get a Property">
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>/org/openbmc/inventory/system/chassis/motherboard/cpu0</arg>
<arg>is_fru</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161207 04:55:52.473" level="INFO">${base_uri} = /org/openbmc/inventory/system/chassis/motherboard/cpu0/attr/is_fru</msg>
<status status="PASS" starttime="20161207 04:55:52.472" endtime="20161207 04:55:52.473"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:55:52.477" level="INFO">${msg} = URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/cpu0/attr/is_fru, method:Get, args:{}</msg>
<status status="PASS" starttime="20161207 04:55:52.476" endtime="20161207 04:55:52.477"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:55:52.478" level="INFO">URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/cpu0/attr/is_fru, method:Get, args:{}</msg>
<status status="PASS" starttime="20161207 04:55:52.478" endtime="20161207 04:55:52.478"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:52.477" endtime="20161207 04:55:52.478"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:52.476" endtime="20161207 04:55:52.478"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:52.473" endtime="20161207 04:55:52.478"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161207 04:55:52.479" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161207 04:55:52.479" endtime="20161207 04:55:52.480"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161207 04:55:52.480" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161207 04:55:52.480" endtime="20161207 04:55:52.480"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161207 04:55:52.481" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161207 04:55:52.480" endtime="20161207 04:55:52.481"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161207 04:55:52.481" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161207 04:55:52.481" endtime="20161207 04:55:52.481"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161207 04:55:53.468" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161207 04:55:53.469" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:55:52.482" endtime="20161207 04:55:53.469"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161207 04:55:53.470" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161207 04:55:53.469" endtime="20161207 04:55:53.470"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:52.478" endtime="20161207 04:55:53.470"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161207 04:55:53.715" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/inventory/system/chassis/motherboard/cpu0/attr/is_fru, headers=None </msg>
<msg timestamp="20161207 04:55:53.715" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:55:53.470" endtime="20161207 04:55:53.715"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161207 04:55:53.721" level="INFO">${msg} = Response code:200, Content:{
  "data": 1, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:55:53.720" endtime="20161207 04:55:53.721"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161207 04:55:53.722" level="INFO">Response code:200, Content:{
  "data": 1, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161207 04:55:53.722" endtime="20161207 04:55:53.722"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:53.721" endtime="20161207 04:55:53.722"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:53.720" endtime="20161207 04:55:53.723"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:53.715" endtime="20161207 04:55:53.723"></status>
</kw>
<msg timestamp="20161207 04:55:53.723" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161207 04:55:52.472" endtime="20161207 04:55:53.723"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161207 04:55:53.724" level="INFO">To JSON using : content={
  "data": 1, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161207 04:55:53.724" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161207 04:55:53.724" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': 1}</msg>
<status status="PASS" starttime="20161207 04:55:53.723" endtime="20161207 04:55:53.724"></status>
</kw>
<msg timestamp="20161207 04:55:53.724" level="INFO">${resp} = 1</msg>
<status status="PASS" starttime="20161207 04:55:52.471" endtime="20161207 04:55:53.724"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${1}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:55:53.725" endtime="20161207 04:55:53.725"></status>
</kw>
<kw type="teardown" library="openbmc_ffdc" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<status status="PASS" starttime="20161207 04:55:53.726" endtime="20161207 04:55:53.729"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20161207 04:55:53.730" level="INFO" html="yes">Directory '&lt;a href="file:///tmp/root/2317/obmc-robot/logs"&gt;/tmp/root/2317/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" starttime="20161207 04:55:53.730" endtime="20161207 04:55:53.730"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20161207 04:55:53.731" level="INFO" html="yes">File '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/test_history.txt"&gt;/tmp/root/2317/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20161207 04:55:53.731" endtime="20161207 04:55:53.731"></status>
</kw>
<msg timestamp="20161207 04:55:53.731" level="INFO">${exist} = True</msg>
<status status="PASS" starttime="20161207 04:55:53.730" endtime="20161207 04:55:53.731"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" starttime="20161207 04:55:53.731" endtime="20161207 04:55:53.734"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20161207 04:55:53.735" level="INFO">${cur_time} = 2016-12-07 04:55:53:734468</msg>
<status status="PASS" starttime="20161207 04:55:53.734" endtime="20161207 04:55:53.735"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20161207 04:55:53.735" level="INFO">${cur_time} = 20161207045553734468</msg>
<status status="PASS" starttime="20161207 04:55:53.735" endtime="20161207 04:55:53.735"></status>
</kw>
<msg timestamp="20161207 04:55:53.735" level="INFO">${cur_time} = 20161207045553734468</msg>
<status status="PASS" starttime="20161207 04:55:53.734" endtime="20161207 04:55:53.735"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20161207 04:55:53.736" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/root/2317/obmc-robot/logs/test_history.txt"&gt;/tmp/root/2317/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161207 04:55:53.736" endtime="20161207 04:55:53.737"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:53.729" endtime="20161207 04:55:53.737"></status>
</kw>
<status status="PASS" starttime="20161207 04:55:53.725" endtime="20161207 04:55:53.737"></status>
</kw>
<tags>
<tag>Get_a_Property</tag>
</tags>
<status status="PASS" starttime="20161207 04:55:52.471" endtime="20161207 04:55:53.737" critical="yes"></status>
</test>
<doc>This suite will verifiy all OpenBMC rest interfaces
Details of valid interfaces can be found here...
https://github.com/openbmc/docs/blob/master/rest-api.md</doc>
<status status="PASS" starttime="20161207 04:55:52.447" endtime="20161207 04:55:53.738"></status>
</suite>
<status status="FAIL" starttime="20161207 04:51:50.860" endtime="20161207 04:55:53.743"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="6">Critical Tests</stat>
<stat fail="1" pass="6">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">chassisboot</stat>
<stat fail="0" pass="2">CI</stat>
<stat fail="0" pass="1">clear_any_logs</stat>
<stat fail="0" pass="1">Create_error_log_on_single_FRU</stat>
<stat fail="0" pass="1">Delete_error_log</stat>
<stat fail="0" pass="1">Get_a_Property</stat>
<stat fail="1" pass="0">power_on_test</stat>
<stat fail="0" pass="1">Test_SSL_Connection</stat>
<stat fail="0" pass="1">write_a_log</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Tests" pass="6">Tests</stat>
<stat fail="0" id="s1-s1" name="Security" pass="1">Tests.Security</stat>
<stat fail="0" id="s1-s1-s1" name="Test Ssl" pass="1">Tests.Security.Test Ssl</stat>
<stat fail="0" id="s1-s2" name="Test Association" pass="2">Tests.Test Association</stat>
<stat fail="1" id="s1-s3" name="Test Basic Poweron" pass="0">Tests.Test Basic Poweron</stat>
<stat fail="0" id="s1-s4" name="Test Eventlog" pass="2">Tests.Test Eventlog</stat>
<stat fail="0" id="s1-s5" name="Test Obmcrest" pass="1">Tests.Test Obmcrest</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
