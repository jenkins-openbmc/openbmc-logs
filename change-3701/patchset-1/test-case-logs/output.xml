<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.0.2 (Python 2.7.12 on linux2)" generated="20170414 16:30:57.224">
<suite name="Tests" id="s1" source="/tmp/root/28691/obmc-robot/tests">
<kw name="System Driver Data" type="setup">
<doc>System driver information.</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:30:57.784">Dictionary does not contain key 'host'.</msg>
<status starttime="20170414 16:30:57.783" status="FAIL" endtime="20170414 16:30:57.784"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:30:57.784">${has_host} = False</msg>
<status starttime="20170414 16:30:57.783" status="PASS" endtime="20170414 16:30:57.784"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170414 16:30:57.785" status="PASS" endtime="20170414 16:30:57.785"></status>
</kw>
<status starttime="20170414 16:30:57.784" status="PASS" endtime="20170414 16:30:57.785"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:30:57.786">${port_num} = 22</msg>
<status starttime="20170414 16:30:57.786" status="PASS" endtime="20170414 16:30:57.787"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:30:57.787">${SSH_PORT} = 22</msg>
<status starttime="20170414 16:30:57.787" status="PASS" endtime="20170414 16:30:57.787"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:30:57.788">${https_num} = 443</msg>
<status starttime="20170414 16:30:57.787" status="PASS" endtime="20170414 16:30:57.788"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:30:57.788">${AUTH_URI} = https://9.3.86.161:443</msg>
<status starttime="20170414 16:30:57.788" status="PASS" endtime="20170414 16:30:57.788"></status>
</kw>
<status starttime="20170414 16:30:57.786" status="PASS" endtime="20170414 16:30:57.788"></status>
</kw>
<status starttime="20170414 16:30:57.785" status="PASS" endtime="20170414 16:30:57.788"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:30:57.789">Dictionary does not contain key 'port'.</msg>
<status starttime="20170414 16:30:57.789" status="FAIL" endtime="20170414 16:30:57.789"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:30:57.789">${has_port} = False</msg>
<status starttime="20170414 16:30:57.789" status="PASS" endtime="20170414 16:30:57.789"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170414 16:30:57.791" status="PASS" endtime="20170414 16:30:57.791"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170414 16:30:57.791" status="PASS" endtime="20170414 16:30:57.792"></status>
</kw>
<status starttime="20170414 16:30:57.790" status="PASS" endtime="20170414 16:30:57.792"></status>
</kw>
<status starttime="20170414 16:30:57.790" status="PASS" endtime="20170414 16:30:57.792"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:30:57.792">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170414 16:30:59.651">Read output: root@witherspoon:~#</msg>
<status starttime="20170414 16:30:57.792" status="PASS" endtime="20170414 16:30:59.651"></status>
</kw>
<status starttime="20170414 16:30:57.782" status="PASS" endtime="20170414 16:30:59.652"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:30:59.653">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg level="INFO" timestamp="20170414 16:30:59.729">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170414 16:30:59.729">${output} = VERSION_ID="v1.99.4-24-g3b094c6"</msg>
<msg level="INFO" timestamp="20170414 16:30:59.729">${stderr} = </msg>
<status starttime="20170414 16:30:59.652" status="PASS" endtime="20170414 16:30:59.730"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:30:59.730">Length is 0</msg>
<status starttime="20170414 16:30:59.730" status="PASS" endtime="20170414 16:30:59.730"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:30:59.731">VERSION_ID="v1.99.4-24-g3b094c6"</msg>
<status starttime="20170414 16:30:59.730" status="PASS" endtime="20170414 16:30:59.731"></status>
</kw>
<status starttime="20170414 16:30:59.652" status="PASS" endtime="20170414 16:30:59.731"></status>
</kw>
<status starttime="20170414 16:30:59.652" status="PASS" endtime="20170414 16:30:59.731"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>${PNOR_CMD}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:30:59.732">Executing command '/usr/sbin/pflash -r /tmp/out.txt -P VERSION; cat /tmp/out.txt'.</msg>
<msg level="INFO" timestamp="20170414 16:30:59.867">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170414 16:30:59.867">${stdout} = Reading to "/tmp/out.txt" from 0x027e0000..0x027e1000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.15...</msg>
<msg level="INFO" timestamp="20170414 16:30:59.867">${stderr} = </msg>
<status starttime="20170414 16:30:59.732" status="PASS" endtime="20170414 16:30:59.868"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:30:59.868">Length is 0</msg>
<status starttime="20170414 16:30:59.868" status="PASS" endtime="20170414 16:30:59.868"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:30:59.868">${pnor_details} = Reading to "/tmp/out.txt" from 0x027e0000..0x027e1000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.15...</msg>
<status starttime="20170414 16:30:59.732" status="PASS" endtime="20170414 16:30:59.868"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>PNOR_INFO=${pnor_details}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:30:59.869">PNOR_INFO=Reading to "/tmp/out.txt" from 0x027e0000..0x027e1000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.15_1.22
	op-build-v1.15-115-ge46df0d-dirty
	buildroot-2017.02-4-gc28573e
	skiboot-5.5.0-rc3
	hostboot-3a3d65e
	linux-4.10.7-openpower1-pb32b856
	petitboot-v1.4.2-pa470686
	witherspoon-xml-07ef29d
	occ-e1889e5
	hostboot-binaries-46670e3
	capp-ucode-1bb7503
</msg>
<status starttime="20170414 16:30:59.869" status="PASS" endtime="20170414 16:30:59.870"></status>
</kw>
<status starttime="20170414 16:30:59.731" status="PASS" endtime="20170414 16:30:59.870"></status>
</kw>
<status starttime="20170414 16:30:59.731" status="PASS" endtime="20170414 16:30:59.870"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw library="utils" name="Get BMC System Model">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:30:59.872">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170414 16:30:59.966">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170414 16:30:59.966">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170414 16:30:59.966">${stderr} = </msg>
<status starttime="20170414 16:30:59.871" status="PASS" endtime="20170414 16:30:59.966"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:30:59.967">Length is 0</msg>
<status starttime="20170414 16:30:59.967" status="PASS" endtime="20170414 16:30:59.967"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:30:59.967">Length is 11</msg>
<status starttime="20170414 16:30:59.967" status="PASS" endtime="20170414 16:30:59.967"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:30:59.968">${bmc_model} = Witherspoon</msg>
<status starttime="20170414 16:30:59.871" status="PASS" endtime="20170414 16:30:59.968"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:30:59.968">BMC Model=Witherspoon</msg>
<status starttime="20170414 16:30:59.968" status="PASS" endtime="20170414 16:30:59.968"></status>
</kw>
<status starttime="20170414 16:30:59.871" status="PASS" endtime="20170414 16:30:59.968"></status>
</kw>
<status starttime="20170414 16:30:59.870" status="PASS" endtime="20170414 16:30:59.968"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw library="utils" name="Enable Core Dump On BMC">
<doc>Enable core dump collection.</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:30:59.970">Dictionary does not contain key 'host'.</msg>
<status starttime="20170414 16:30:59.970" status="FAIL" endtime="20170414 16:30:59.971"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:30:59.971">${has_host} = False</msg>
<status starttime="20170414 16:30:59.970" status="PASS" endtime="20170414 16:30:59.971"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170414 16:30:59.971" status="PASS" endtime="20170414 16:30:59.972"></status>
</kw>
<status starttime="20170414 16:30:59.971" status="PASS" endtime="20170414 16:30:59.972"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:30:59.973">${port_num} = 22</msg>
<status starttime="20170414 16:30:59.973" status="PASS" endtime="20170414 16:30:59.973"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:30:59.974">${SSH_PORT} = 22</msg>
<status starttime="20170414 16:30:59.973" status="PASS" endtime="20170414 16:30:59.974"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:30:59.974">${https_num} = 443</msg>
<status starttime="20170414 16:30:59.974" status="PASS" endtime="20170414 16:30:59.974"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:30:59.975">${AUTH_URI} = https://9.3.86.161:443</msg>
<status starttime="20170414 16:30:59.974" status="PASS" endtime="20170414 16:30:59.975"></status>
</kw>
<status starttime="20170414 16:30:59.973" status="PASS" endtime="20170414 16:30:59.975"></status>
</kw>
<status starttime="20170414 16:30:59.972" status="PASS" endtime="20170414 16:30:59.975"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:30:59.976">Dictionary does not contain key 'port'.</msg>
<status starttime="20170414 16:30:59.976" status="FAIL" endtime="20170414 16:30:59.976"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:30:59.976">${has_port} = False</msg>
<status starttime="20170414 16:30:59.975" status="PASS" endtime="20170414 16:30:59.976"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170414 16:30:59.977" status="PASS" endtime="20170414 16:30:59.978"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170414 16:30:59.978" status="PASS" endtime="20170414 16:30:59.978"></status>
</kw>
<status starttime="20170414 16:30:59.977" status="PASS" endtime="20170414 16:30:59.978"></status>
</kw>
<status starttime="20170414 16:30:59.976" status="PASS" endtime="20170414 16:30:59.978"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:30:59.979">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170414 16:31:01.624">Read output: root@witherspoon:~#</msg>
<status starttime="20170414 16:30:59.979" status="PASS" endtime="20170414 16:31:01.624"></status>
</kw>
<status starttime="20170414 16:30:59.969" status="PASS" endtime="20170414 16:31:01.624"></status>
</kw>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:01.625">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg level="INFO" timestamp="20170414 16:31:01.692">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170414 16:31:01.692">${stdout} = /tmp/core_%e.%p</msg>
<msg level="INFO" timestamp="20170414 16:31:01.692">${stderr} = </msg>
<status starttime="20170414 16:31:01.625" status="PASS" endtime="20170414 16:31:01.692"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:01.692">Length is 0</msg>
<status starttime="20170414 16:31:01.692" status="PASS" endtime="20170414 16:31:01.692"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:31:01.693">${core_pattern} = /tmp/core_%e.%p</msg>
<status starttime="20170414 16:31:01.624" status="PASS" endtime="20170414 16:31:01.693"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status starttime="20170414 16:31:01.693" status="PASS" endtime="20170414 16:31:01.693"></status>
</kw>
<status starttime="20170414 16:30:59.969" status="PASS" endtime="20170414 16:31:01.693"></status>
</kw>
<status starttime="20170414 16:30:59.969" status="PASS" endtime="20170414 16:31:01.693"></status>
</kw>
<status starttime="20170414 16:30:57.782" status="PASS" endtime="20170414 16:31:01.693"></status>
</kw>
<suite name="Security" id="s1-s1" source="/tmp/root/28691/obmc-robot/tests/security">
<suite name="Test Ssl" id="s1-s1-s1" source="/tmp/root/28691/obmc-robot/tests/security/test_ssl.robot">
<test name="Test SSL Connection" id="s1-s1-s1-t1">
<kw library="rest_client" name="Initialize OpenBMC">
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:01.764">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:31:01.764" status="PASS" endtime="20170414 16:31:01.765"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:01.766">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:31:01.765" status="PASS" endtime="20170414 16:31:01.766"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:01.766">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:31:01.766" status="PASS" endtime="20170414 16:31:01.766"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:01.767">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:31:01.767" status="PASS" endtime="20170414 16:31:01.767"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:01.962">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:31:01.768" status="PASS" endtime="20170414 16:31:01.962"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:31:01.962">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:31:01.962">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:31:01.767" status="PASS" endtime="20170414 16:31:01.962"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:01.963">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:31:01.962" status="PASS" endtime="20170414 16:31:01.963"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:01.963">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:31:01.963" status="PASS" endtime="20170414 16:31:01.964"></status>
</kw>
<status starttime="20170414 16:31:01.764" status="PASS" endtime="20170414 16:31:01.964"></status>
</kw>
<kw library="openbmc_ffdc" name="FFDC On Test Case Fail" type="teardown">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="state_manager" name="Is Host Quiesced">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:01.969">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:31:01.969" status="PASS" endtime="20170414 16:31:01.970"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:01.970">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:31:01.970" status="PASS" endtime="20170414 16:31:01.970"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:01.971">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:31:01.971" status="PASS" endtime="20170414 16:31:01.971"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:01.972">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:31:01.972" status="PASS" endtime="20170414 16:31:01.972"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:02.154">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:31:01.973" status="PASS" endtime="20170414 16:31:02.154"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:31:02.154">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:31:02.154">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:31:01.972" status="PASS" endtime="20170414 16:31:02.154"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:02.155">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:31:02.154" status="PASS" endtime="20170414 16:31:02.155"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:02.155">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:31:02.155" status="PASS" endtime="20170414 16:31:02.155"></status>
</kw>
<status starttime="20170414 16:31:01.968" status="PASS" endtime="20170414 16:31:02.156"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:02.156">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170414 16:31:02.156" status="PASS" endtime="20170414 16:31:02.156"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:02.158">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170414 16:31:02.157" status="PASS" endtime="20170414 16:31:02.158"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:02.159">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170414 16:31:02.159" status="PASS" endtime="20170414 16:31:02.159"></status>
</kw>
<status starttime="20170414 16:31:02.158" status="PASS" endtime="20170414 16:31:02.160"></status>
</kw>
<status starttime="20170414 16:31:02.157" status="PASS" endtime="20170414 16:31:02.160"></status>
</kw>
<status starttime="20170414 16:31:02.156" status="PASS" endtime="20170414 16:31:02.160"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:02.223">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170414 16:31:02.223">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:31:02.160" status="PASS" endtime="20170414 16:31:02.223"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:02.225">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:31:02.224" status="PASS" endtime="20170414 16:31:02.225"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:02.226">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:31:02.226" status="PASS" endtime="20170414 16:31:02.226"></status>
</kw>
<status starttime="20170414 16:31:02.225" status="PASS" endtime="20170414 16:31:02.226"></status>
</kw>
<status starttime="20170414 16:31:02.224" status="PASS" endtime="20170414 16:31:02.226"></status>
</kw>
<status starttime="20170414 16:31:02.223" status="PASS" endtime="20170414 16:31:02.226"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:31:02.226">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:31:01.967" status="PASS" endtime="20170414 16:31:02.226"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:02.227">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:31:02.227" status="PASS" endtime="20170414 16:31:02.227"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:02.228">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170414 16:31:02.228">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170414 16:31:02.228">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status starttime="20170414 16:31:02.227" status="PASS" endtime="20170414 16:31:02.228"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:31:02.228">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170414 16:31:01.965" status="PASS" endtime="20170414 16:31:02.228"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:31:02.228">${host_state} = Off</msg>
<status starttime="20170414 16:31:01.965" status="PASS" endtime="20170414 16:31:02.228"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:31:02.229">Off != Quiesced</msg>
<status starttime="20170414 16:31:02.229" status="FAIL" endtime="20170414 16:31:02.230"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:31:02.230">${status} = False</msg>
<status starttime="20170414 16:31:02.229" status="PASS" endtime="20170414 16:31:02.230"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:31:02.230">${status} = False</msg>
<status starttime="20170414 16:31:01.964" status="PASS" endtime="20170414 16:31:02.230"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status starttime="20170414 16:31:02.230" status="PASS" endtime="20170414 16:31:02.231"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status starttime="20170414 16:31:02.231" status="PASS" endtime="20170414 16:31:02.231"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170414 16:31:02.232">Created directory '&lt;a href="file:///tmp/root/28691/obmc-robot/logs"&gt;/tmp/root/28691/obmc-robot/logs&lt;/a&gt;'.</msg>
<status starttime="20170414 16:31:02.232" status="PASS" endtime="20170414 16:31:02.232"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:31:02.233">File '/tmp/root/28691/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status starttime="20170414 16:31:02.233" status="FAIL" endtime="20170414 16:31:02.233"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:31:02.233">${exist} = False</msg>
<status starttime="20170414 16:31:02.232" status="PASS" endtime="20170414 16:31:02.233"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170414 16:31:02.234">Created file '&lt;a href="file:///tmp/root/28691/obmc-robot/logs/test_history.txt"&gt;/tmp/root/28691/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20170414 16:31:02.234" status="PASS" endtime="20170414 16:31:02.234"></status>
</kw>
<status starttime="20170414 16:31:02.233" status="PASS" endtime="20170414 16:31:02.234"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:02.235">${cur_time} = 2017-04-14 16:31:02:235226</msg>
<status starttime="20170414 16:31:02.235" status="PASS" endtime="20170414 16:31:02.235"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:02.236">${cur_time} = 20170414163102235226</msg>
<status starttime="20170414 16:31:02.236" status="PASS" endtime="20170414 16:31:02.236"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:31:02.236">${cur_time} = 20170414163102235226</msg>
<status starttime="20170414 16:31:02.235" status="PASS" endtime="20170414 16:31:02.236"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170414 16:31:02.237">Appended to file '&lt;a href="file:///tmp/root/28691/obmc-robot/logs/test_history.txt"&gt;/tmp/root/28691/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20170414 16:31:02.236" status="PASS" endtime="20170414 16:31:02.237"></status>
</kw>
<status starttime="20170414 16:31:02.231" status="PASS" endtime="20170414 16:31:02.237"></status>
</kw>
<status starttime="20170414 16:31:01.964" status="PASS" endtime="20170414 16:31:02.237"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status starttime="20170414 16:31:01.763" critical="yes" status="PASS" endtime="20170414 16:31:02.238"></status>
</test>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions" type="teardown">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170414 16:31:02.238">Delete All Sessions</msg>
<status starttime="20170414 16:31:02.238" status="PASS" endtime="20170414 16:31:02.239"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status starttime="20170414 16:31:01.695" status="PASS" endtime="20170414 16:31:02.239"></status>
</suite>
<status starttime="20170414 16:31:01.694" status="PASS" endtime="20170414 16:31:02.241"></status>
</suite>
<suite name="Test Basic Poweron" id="s1-s2" source="/tmp/root/28691/obmc-robot/tests/test_basic_poweron.robot">
<test name="Power On Test" id="s1-s2-t1">
<kw library="utils" name="Start SOL Console Logging" type="setup">
<doc>Start system console log to file.</doc>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:02.272">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status starttime="20170414 16:31:02.271" status="PASS" endtime="20170414 16:31:02.272"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:02.272">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status starttime="20170414 16:31:02.272" status="PASS" endtime="20170414 16:31:02.273"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:31:02.273">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status starttime="20170414 16:31:02.271" status="PASS" endtime="20170414 16:31:02.273"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:02.274">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status starttime="20170414 16:31:02.274" status="PASS" endtime="20170414 16:31:02.274"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:02.275">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status starttime="20170414 16:31:02.275" status="PASS" endtime="20170414 16:31:02.275"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:31:02.276">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status starttime="20170414 16:31:02.273" status="PASS" endtime="20170414 16:31:02.276"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:02.277">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20170414 16:31:02.276" status="PASS" endtime="20170414 16:31:02.277"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170414 16:31:02.277" status="PASS" endtime="20170414 16:31:02.288"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:02.293">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170414 16:31:02.296">${rc} = 0</msg>
<msg level="INFO" timestamp="20170414 16:31:02.297">${output} = /tmp/root/28691/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20170414 16:31:02.288" status="PASS" endtime="20170414 16:31:02.297"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170414 16:31:02.299" status="PASS" endtime="20170414 16:31:02.307"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status starttime="20170414 16:31:02.307" status="PASS" endtime="20170414 16:31:02.308"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:02.308">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.3.86.161</msg>
<status starttime="20170414 16:31:02.308" status="PASS" endtime="20170414 16:31:02.308"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:31:02.309">${search_string} = ssh_pw 0penBmc -p 2200 root@9.3.86.161</msg>
<status starttime="20170414 16:31:02.276" status="PASS" endtime="20170414 16:31:02.309"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:02.309">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status starttime="20170414 16:31:02.309" status="PASS" endtime="20170414 16:31:02.309"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170414 16:31:02.310" status="PASS" endtime="20170414 16:31:02.316"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:02.321">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170414 16:31:02.327">${rc} = 0</msg>
<msg level="INFO" timestamp="20170414 16:31:02.328">${os_con_pid} = </msg>
<status starttime="20170414 16:31:02.317" status="PASS" endtime="20170414 16:31:02.328"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status starttime="20170414 16:31:02.330" status="PASS" endtime="20170414 16:31:02.337"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:02.338">${cmd_buf} = kill -9 </msg>
<status starttime="20170414 16:31:02.338" status="PASS" endtime="20170414 16:31:02.338"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170414 16:31:02.338" status="PASS" endtime="20170414 16:31:02.339"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:02.340">${rc} = None</msg>
<msg level="INFO" timestamp="20170414 16:31:02.340">${output} = None</msg>
<status starttime="20170414 16:31:02.339" status="PASS" endtime="20170414 16:31:02.340"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170414 16:31:02.340" status="PASS" endtime="20170414 16:31:02.340"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>cat ${log_file_path} 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:02.341">${cmd_buf} = cat /tmp/9.3.86.161_os_console 2&gt;&amp;1</msg>
<status starttime="20170414 16:31:02.341" status="PASS" endtime="20170414 16:31:02.341"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170414 16:31:02.341" status="PASS" endtime="20170414 16:31:02.348"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:02.351">Running command 'cat /tmp/9.3.86.161_os_console 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170414 16:31:02.355">${rc} = 1</msg>
<msg level="INFO" timestamp="20170414 16:31:02.355">${output} = cat: /tmp/9.3.86.161_os_console: No such file or directory</msg>
<status starttime="20170414 16:31:02.348" status="PASS" endtime="20170414 16:31:02.355"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
</arguments>
<status starttime="20170414 16:31:02.358" status="PASS" endtime="20170414 16:31:02.366"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status starttime="20170414 16:31:02.366" status="PASS" endtime="20170414 16:31:02.367"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:31:02.367">${log_output} = cat: /tmp/9.3.86.161_os_console: No such file or directory</msg>
<status starttime="20170414 16:31:02.273" status="PASS" endtime="20170414 16:31:02.367"></status>
</kw>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170414 16:31:02.368">Created file '&lt;a href="file:///tmp/9.3.86.161_os_console"&gt;/tmp/9.3.86.161_os_console&lt;/a&gt;'.</msg>
<status starttime="20170414 16:31:02.367" status="PASS" endtime="20170414 16:31:02.368"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:02.369">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20170414 16:31:02.369" status="PASS" endtime="20170414 16:31:02.369"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170414 16:31:02.369" status="PASS" endtime="20170414 16:31:02.376"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:02.379">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170414 16:31:02.382">${rc} = 0</msg>
<msg level="INFO" timestamp="20170414 16:31:02.382">${output} = /tmp/root/28691/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20170414 16:31:02.376" status="PASS" endtime="20170414 16:31:02.382"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170414 16:31:02.385" status="PASS" endtime="20170414 16:31:02.395"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status starttime="20170414 16:31:02.395" status="PASS" endtime="20170414 16:31:02.396"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:02.397">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.3.86.161</msg>
<status starttime="20170414 16:31:02.397" status="PASS" endtime="20170414 16:31:02.397"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:31:02.398">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.3.86.161</msg>
<status starttime="20170414 16:31:02.368" status="PASS" endtime="20170414 16:31:02.398"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:02.398">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console 2&gt;&amp;1 &amp;</msg>
<status starttime="20170414 16:31:02.398" status="PASS" endtime="20170414 16:31:02.398"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170414 16:31:02.399" status="PASS" endtime="20170414 16:31:02.407"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:02.418">Running command 'ssh_pw 0penBmc -p 2200 root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console 2&gt;&amp;1 &amp;'.</msg>
<msg level="INFO" timestamp="20170414 16:31:02.441">${rc} = 0</msg>
<msg level="INFO" timestamp="20170414 16:31:02.441">${output} = </msg>
<status starttime="20170414 16:31:02.408" status="PASS" endtime="20170414 16:31:02.441"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status starttime="20170414 16:31:02.452" status="PASS" endtime="20170414 16:31:02.454"></status>
</kw>
<status starttime="20170414 16:31:02.271" status="PASS" endtime="20170414 16:31:02.455"></status>
</kw>
<kw library="BuiltIn" name="Repeat Keyword">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:02.456">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw library="state_manager" name="Initiate Host PowerOff">
<doc>Initiate host power off.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:02.460">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status starttime="20170414 16:31:02.459" status="PASS" endtime="20170414 16:31:02.460"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:02.462">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status starttime="20170414 16:31:02.461" status="PASS" endtime="20170414 16:31:02.462"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:02.465">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:31:02.463" status="PASS" endtime="20170414 16:31:02.467"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:02.468">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:31:02.467" status="PASS" endtime="20170414 16:31:02.468"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:02.469">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:31:02.468" status="PASS" endtime="20170414 16:31:02.469"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:02.470">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:31:02.470" status="PASS" endtime="20170414 16:31:02.470"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:03.063">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:31:02.471" status="PASS" endtime="20170414 16:31:03.064"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:31:03.064">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:31:03.064">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:31:02.470" status="PASS" endtime="20170414 16:31:03.064"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:03.064">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:31:03.064" status="PASS" endtime="20170414 16:31:03.064"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:03.065">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:31:03.065" status="PASS" endtime="20170414 16:31:03.065"></status>
</kw>
<status starttime="20170414 16:31:02.463" status="PASS" endtime="20170414 16:31:03.065"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:03.066">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status starttime="20170414 16:31:03.065" status="PASS" endtime="20170414 16:31:03.066"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:03.066">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:31:03.066" status="PASS" endtime="20170414 16:31:03.066"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20170414 16:31:03.067" status="PASS" endtime="20170414 16:31:03.067"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:03.068">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-...</msg>
<status starttime="20170414 16:31:03.068" status="PASS" endtime="20170414 16:31:03.069"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:03.069">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20170414 16:31:03.069" status="PASS" endtime="20170414 16:31:03.069"></status>
</kw>
<status starttime="20170414 16:31:03.069" status="PASS" endtime="20170414 16:31:03.070"></status>
</kw>
<status starttime="20170414 16:31:03.067" status="PASS" endtime="20170414 16:31:03.070"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:03.444">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170414 16:31:03.444">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:31:03.070" status="PASS" endtime="20170414 16:31:03.444"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:03.446">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:31:03.445" status="PASS" endtime="20170414 16:31:03.446"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:03.446">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:31:03.446" status="PASS" endtime="20170414 16:31:03.447"></status>
</kw>
<status starttime="20170414 16:31:03.446" status="PASS" endtime="20170414 16:31:03.447"></status>
</kw>
<status starttime="20170414 16:31:03.445" status="PASS" endtime="20170414 16:31:03.447"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:31:03.447">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:31:02.462" status="PASS" endtime="20170414 16:31:03.447"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:03.448">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:31:03.447" status="PASS" endtime="20170414 16:31:03.448"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:03.448">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170414 16:31:03.448">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170414 16:31:03.449">${json} = {u'message': u'200 OK', u'data': None, u'status': u'ok'}</msg>
<status starttime="20170414 16:31:03.448" status="PASS" endtime="20170414 16:31:03.449"></status>
</kw>
<status starttime="20170414 16:31:02.460" status="PASS" endtime="20170414 16:31:03.449"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status starttime="20170414 16:31:03.449" status="PASS" endtime="20170414 16:31:03.449"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:03.453">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:31:03.453" status="PASS" endtime="20170414 16:31:03.453"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:03.454">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:31:03.453" status="PASS" endtime="20170414 16:31:03.454"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:03.454">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:31:03.454" status="PASS" endtime="20170414 16:31:03.454"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:03.455">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:31:03.455" status="PASS" endtime="20170414 16:31:03.455"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:04.860">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:31:03.456" status="PASS" endtime="20170414 16:31:04.860"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:31:04.860">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:31:04.860">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:31:03.455" status="PASS" endtime="20170414 16:31:04.860"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:04.861">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:31:04.860" status="PASS" endtime="20170414 16:31:04.861"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:04.861">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:31:04.861" status="PASS" endtime="20170414 16:31:04.861"></status>
</kw>
<status starttime="20170414 16:31:03.452" status="PASS" endtime="20170414 16:31:04.862"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:04.862">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170414 16:31:04.862" status="PASS" endtime="20170414 16:31:04.862"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:04.864">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170414 16:31:04.863" status="PASS" endtime="20170414 16:31:04.864"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:04.865">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170414 16:31:04.865" status="PASS" endtime="20170414 16:31:04.865"></status>
</kw>
<status starttime="20170414 16:31:04.865" status="PASS" endtime="20170414 16:31:04.865"></status>
</kw>
<status starttime="20170414 16:31:04.863" status="PASS" endtime="20170414 16:31:04.866"></status>
</kw>
<status starttime="20170414 16:31:04.862" status="PASS" endtime="20170414 16:31:04.866"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:05.879">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170414 16:31:05.880">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:31:04.866" status="PASS" endtime="20170414 16:31:05.880"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:05.882">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:31:05.881" status="PASS" endtime="20170414 16:31:05.882"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:05.883">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:31:05.883" status="PASS" endtime="20170414 16:31:05.883"></status>
</kw>
<status starttime="20170414 16:31:05.882" status="PASS" endtime="20170414 16:31:05.883"></status>
</kw>
<status starttime="20170414 16:31:05.881" status="PASS" endtime="20170414 16:31:05.883"></status>
</kw>
<status starttime="20170414 16:31:05.880" status="PASS" endtime="20170414 16:31:05.883"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:31:05.883">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:31:03.451" status="PASS" endtime="20170414 16:31:05.883"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:05.884">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:31:05.884" status="PASS" endtime="20170414 16:31:05.884"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:05.885">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170414 16:31:05.885">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170414 16:31:05.885">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status starttime="20170414 16:31:05.884" status="PASS" endtime="20170414 16:31:05.885"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:31:05.885">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170414 16:31:03.451" status="PASS" endtime="20170414 16:31:05.885"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:31:05.885">${host_state} = Off</msg>
<status starttime="20170414 16:31:03.450" status="PASS" endtime="20170414 16:31:05.885"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170414 16:31:05.886" status="PASS" endtime="20170414 16:31:05.886"></status>
</kw>
<status starttime="20170414 16:31:03.450" status="PASS" endtime="20170414 16:31:05.886"></status>
</kw>
<status starttime="20170414 16:31:03.449" status="PASS" endtime="20170414 16:31:05.886"></status>
</kw>
<status starttime="20170414 16:31:02.457" status="PASS" endtime="20170414 16:31:05.886"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Is OS Off</arg>
</arguments>
<kw library="utils" name="Is OS Off">
<doc>Check if boot progress is "Off".</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:05.890">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:31:05.889" status="PASS" endtime="20170414 16:31:05.890"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:05.891">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:31:05.890" status="PASS" endtime="20170414 16:31:05.891"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:05.891">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:31:05.891" status="PASS" endtime="20170414 16:31:05.891"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:05.892">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:31:05.892" status="PASS" endtime="20170414 16:31:05.892"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:06.309">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:31:05.893" status="PASS" endtime="20170414 16:31:06.309"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:31:06.309">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:31:06.309">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:31:05.892" status="PASS" endtime="20170414 16:31:06.309"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:06.310">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:31:06.310" status="PASS" endtime="20170414 16:31:06.310"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:06.311">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:31:06.310" status="PASS" endtime="20170414 16:31:06.311"></status>
</kw>
<status starttime="20170414 16:31:05.889" status="PASS" endtime="20170414 16:31:06.311"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:06.311">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170414 16:31:06.311" status="PASS" endtime="20170414 16:31:06.312"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:06.314">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:31:06.313" status="PASS" endtime="20170414 16:31:06.314"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:06.315">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:31:06.315" status="PASS" endtime="20170414 16:31:06.315"></status>
</kw>
<status starttime="20170414 16:31:06.314" status="PASS" endtime="20170414 16:31:06.315"></status>
</kw>
<status starttime="20170414 16:31:06.312" status="PASS" endtime="20170414 16:31:06.315"></status>
</kw>
<status starttime="20170414 16:31:06.312" status="PASS" endtime="20170414 16:31:06.315"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:06.414">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170414 16:31:06.414">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:31:06.316" status="PASS" endtime="20170414 16:31:06.414"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:06.416">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:31:06.416" status="PASS" endtime="20170414 16:31:06.416"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:06.417">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:31:06.417" status="PASS" endtime="20170414 16:31:06.417"></status>
</kw>
<status starttime="20170414 16:31:06.416" status="PASS" endtime="20170414 16:31:06.417"></status>
</kw>
<status starttime="20170414 16:31:06.415" status="PASS" endtime="20170414 16:31:06.417"></status>
</kw>
<status starttime="20170414 16:31:06.414" status="PASS" endtime="20170414 16:31:06.418"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:31:06.418">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:31:05.888" status="PASS" endtime="20170414 16:31:06.418"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:06.418">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:31:06.418" status="PASS" endtime="20170414 16:31:06.418"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:06.419">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170414 16:31:06.419">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170414 16:31:06.419">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status starttime="20170414 16:31:06.419" status="PASS" endtime="20170414 16:31:06.419"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:31:06.419">${state} = Off</msg>
<status starttime="20170414 16:31:05.888" status="PASS" endtime="20170414 16:31:06.420"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:31:06.420">${boot_progress} = Off</msg>
<status starttime="20170414 16:31:05.887" status="PASS" endtime="20170414 16:31:06.420"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>Off</arg>
</arguments>
<status starttime="20170414 16:31:06.420" status="PASS" endtime="20170414 16:31:06.420"></status>
</kw>
<status starttime="20170414 16:31:05.887" status="PASS" endtime="20170414 16:31:06.420"></status>
</kw>
<status starttime="20170414 16:31:05.886" status="PASS" endtime="20170414 16:31:06.420"></status>
</kw>
<kw library="state_manager" name="Initiate Host Boot">
<doc>Initiate host power on.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:06.421">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status starttime="20170414 16:31:06.421" status="PASS" endtime="20170414 16:31:06.421"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:06.423">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status starttime="20170414 16:31:06.422" status="PASS" endtime="20170414 16:31:06.423"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:06.424">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:31:06.424" status="PASS" endtime="20170414 16:31:06.425"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:06.425">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:31:06.425" status="PASS" endtime="20170414 16:31:06.425"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:06.426">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:31:06.425" status="PASS" endtime="20170414 16:31:06.426"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:06.426">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:31:06.426" status="PASS" endtime="20170414 16:31:06.426"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:06.660">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:31:06.427" status="PASS" endtime="20170414 16:31:06.660"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:31:06.660">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:31:06.660">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:31:06.427" status="PASS" endtime="20170414 16:31:06.660"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:06.661">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:31:06.661" status="PASS" endtime="20170414 16:31:06.661"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:06.662">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:31:06.661" status="PASS" endtime="20170414 16:31:06.662"></status>
</kw>
<status starttime="20170414 16:31:06.423" status="PASS" endtime="20170414 16:31:06.662"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:06.663">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status starttime="20170414 16:31:06.662" status="PASS" endtime="20170414 16:31:06.663"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:06.663">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:31:06.663" status="PASS" endtime="20170414 16:31:06.663"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20170414 16:31:06.663" status="PASS" endtime="20170414 16:31:06.664"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:06.665">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-T...</msg>
<status starttime="20170414 16:31:06.665" status="PASS" endtime="20170414 16:31:06.665"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:06.666">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20170414 16:31:06.666" status="PASS" endtime="20170414 16:31:06.666"></status>
</kw>
<status starttime="20170414 16:31:06.665" status="PASS" endtime="20170414 16:31:06.666"></status>
</kw>
<status starttime="20170414 16:31:06.664" status="PASS" endtime="20170414 16:31:06.666"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:07.140">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170414 16:31:07.140">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:31:06.667" status="PASS" endtime="20170414 16:31:07.140"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:07.141">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:31:07.141" status="PASS" endtime="20170414 16:31:07.141"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:07.142">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:31:07.142" status="PASS" endtime="20170414 16:31:07.142"></status>
</kw>
<status starttime="20170414 16:31:07.141" status="PASS" endtime="20170414 16:31:07.142"></status>
</kw>
<status starttime="20170414 16:31:07.140" status="PASS" endtime="20170414 16:31:07.143"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:31:07.143">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:31:06.423" status="PASS" endtime="20170414 16:31:07.143"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:07.143">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:31:07.143" status="PASS" endtime="20170414 16:31:07.143"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:07.144">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170414 16:31:07.144">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170414 16:31:07.144">${json} = {u'message': u'200 OK', u'data': None, u'status': u'ok'}</msg>
<status starttime="20170414 16:31:07.144" status="PASS" endtime="20170414 16:31:07.144"></status>
</kw>
<status starttime="20170414 16:31:06.422" status="PASS" endtime="20170414 16:31:07.144"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status starttime="20170414 16:31:07.144" status="PASS" endtime="20170414 16:31:07.145"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is Host Running</arg>
</arguments>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:07.149">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:31:07.149" status="PASS" endtime="20170414 16:31:07.149"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:07.150">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:31:07.150" status="PASS" endtime="20170414 16:31:07.150"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:07.151">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:31:07.150" status="PASS" endtime="20170414 16:31:07.151"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:07.151">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:31:07.151" status="PASS" endtime="20170414 16:31:07.151"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:08.538">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:31:07.152" status="PASS" endtime="20170414 16:31:08.538"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:31:08.538">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:31:08.538">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:31:07.152" status="PASS" endtime="20170414 16:31:08.538"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:08.539">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:31:08.539" status="PASS" endtime="20170414 16:31:08.539"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:08.540">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:31:08.539" status="PASS" endtime="20170414 16:31:08.540"></status>
</kw>
<status starttime="20170414 16:31:07.148" status="PASS" endtime="20170414 16:31:08.540"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:08.540">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170414 16:31:08.540" status="PASS" endtime="20170414 16:31:08.541"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:08.543">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170414 16:31:08.542" status="PASS" endtime="20170414 16:31:08.543"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:08.543">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170414 16:31:08.543" status="PASS" endtime="20170414 16:31:08.544"></status>
</kw>
<status starttime="20170414 16:31:08.543" status="PASS" endtime="20170414 16:31:08.544"></status>
</kw>
<status starttime="20170414 16:31:08.541" status="PASS" endtime="20170414 16:31:08.544"></status>
</kw>
<status starttime="20170414 16:31:08.541" status="PASS" endtime="20170414 16:31:08.544"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:09.426">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170414 16:31:09.426">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:31:08.544" status="PASS" endtime="20170414 16:31:09.426"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:09.428">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:31:09.428" status="PASS" endtime="20170414 16:31:09.428"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:09.429">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:31:09.429" status="PASS" endtime="20170414 16:31:09.429"></status>
</kw>
<status starttime="20170414 16:31:09.428" status="PASS" endtime="20170414 16:31:09.430"></status>
</kw>
<status starttime="20170414 16:31:09.427" status="PASS" endtime="20170414 16:31:09.430"></status>
</kw>
<status starttime="20170414 16:31:09.427" status="PASS" endtime="20170414 16:31:09.430"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:31:09.430">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:31:07.147" status="PASS" endtime="20170414 16:31:09.430"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:09.431">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:31:09.430" status="PASS" endtime="20170414 16:31:09.431"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:09.431">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170414 16:31:09.431">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170414 16:31:09.431">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status starttime="20170414 16:31:09.431" status="PASS" endtime="20170414 16:31:09.431"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:31:09.432">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170414 16:31:07.147" status="PASS" endtime="20170414 16:31:09.432"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:31:09.432">${host_state} = Off</msg>
<status starttime="20170414 16:31:07.146" status="PASS" endtime="20170414 16:31:09.432"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:31:09.433">Running != Off</msg>
<status starttime="20170414 16:31:09.432" status="FAIL" endtime="20170414 16:31:09.433"></status>
</kw>
<status starttime="20170414 16:31:07.145" status="FAIL" endtime="20170414 16:31:09.433"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:19.437">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:31:19.436" status="PASS" endtime="20170414 16:31:19.437"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:19.438">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:31:19.437" status="PASS" endtime="20170414 16:31:19.438"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:19.438">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:31:19.438" status="PASS" endtime="20170414 16:31:19.438"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:19.439">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:31:19.439" status="PASS" endtime="20170414 16:31:19.439"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:20.667">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:31:19.440" status="PASS" endtime="20170414 16:31:20.667"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:31:20.667">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:31:20.667">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:31:19.439" status="PASS" endtime="20170414 16:31:20.667"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:20.668">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:31:20.668" status="PASS" endtime="20170414 16:31:20.668"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:20.669">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:31:20.668" status="PASS" endtime="20170414 16:31:20.669"></status>
</kw>
<status starttime="20170414 16:31:19.436" status="PASS" endtime="20170414 16:31:20.669"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:20.669">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170414 16:31:20.669" status="PASS" endtime="20170414 16:31:20.669"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:20.672">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170414 16:31:20.671" status="PASS" endtime="20170414 16:31:20.672"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:20.673">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170414 16:31:20.672" status="PASS" endtime="20170414 16:31:20.673"></status>
</kw>
<status starttime="20170414 16:31:20.672" status="PASS" endtime="20170414 16:31:20.673"></status>
</kw>
<status starttime="20170414 16:31:20.670" status="PASS" endtime="20170414 16:31:20.673"></status>
</kw>
<status starttime="20170414 16:31:20.670" status="PASS" endtime="20170414 16:31:20.673"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:25.811">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170414 16:31:25.812">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:31:20.673" status="PASS" endtime="20170414 16:31:25.812"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:25.814">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:31:25.813" status="PASS" endtime="20170414 16:31:25.814"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:25.814">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:31:25.814" status="PASS" endtime="20170414 16:31:25.815"></status>
</kw>
<status starttime="20170414 16:31:25.814" status="PASS" endtime="20170414 16:31:25.815"></status>
</kw>
<status starttime="20170414 16:31:25.813" status="PASS" endtime="20170414 16:31:25.815"></status>
</kw>
<status starttime="20170414 16:31:25.812" status="PASS" endtime="20170414 16:31:25.815"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:31:25.815">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:31:19.435" status="PASS" endtime="20170414 16:31:25.815"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:25.816">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:31:25.815" status="PASS" endtime="20170414 16:31:25.816"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:25.816">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170414 16:31:25.816">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170414 16:31:25.816">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status starttime="20170414 16:31:25.816" status="PASS" endtime="20170414 16:31:25.816"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:31:25.817">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170414 16:31:19.434" status="PASS" endtime="20170414 16:31:25.817"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:31:25.817">${host_state} = Off</msg>
<status starttime="20170414 16:31:19.434" status="PASS" endtime="20170414 16:31:25.817"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:31:25.818">Running != Off</msg>
<status starttime="20170414 16:31:25.817" status="FAIL" endtime="20170414 16:31:25.818"></status>
</kw>
<status starttime="20170414 16:31:19.433" status="FAIL" endtime="20170414 16:31:25.818"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:35.822">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:31:35.822" status="PASS" endtime="20170414 16:31:35.822"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:35.823">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:31:35.823" status="PASS" endtime="20170414 16:31:35.823"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:35.824">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:31:35.823" status="PASS" endtime="20170414 16:31:35.824"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:35.824">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:31:35.824" status="PASS" endtime="20170414 16:31:35.824"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:36.081">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:31:35.825" status="PASS" endtime="20170414 16:31:36.081"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:31:36.081">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:31:36.081">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:31:35.824" status="PASS" endtime="20170414 16:31:36.081"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:36.081">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:31:36.081" status="PASS" endtime="20170414 16:31:36.082"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:36.082">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:31:36.082" status="PASS" endtime="20170414 16:31:36.082"></status>
</kw>
<status starttime="20170414 16:31:35.821" status="PASS" endtime="20170414 16:31:36.082"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:36.083">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170414 16:31:36.083" status="PASS" endtime="20170414 16:31:36.083"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:36.085">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170414 16:31:36.084" status="PASS" endtime="20170414 16:31:36.085"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:36.086">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170414 16:31:36.086" status="PASS" endtime="20170414 16:31:36.086"></status>
</kw>
<status starttime="20170414 16:31:36.085" status="PASS" endtime="20170414 16:31:36.086"></status>
</kw>
<status starttime="20170414 16:31:36.084" status="PASS" endtime="20170414 16:31:36.086"></status>
</kw>
<status starttime="20170414 16:31:36.083" status="PASS" endtime="20170414 16:31:36.086"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:36.151">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170414 16:31:36.151">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:31:36.086" status="PASS" endtime="20170414 16:31:36.151"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:36.153">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:31:36.152" status="PASS" endtime="20170414 16:31:36.153"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:36.154">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:31:36.153" status="PASS" endtime="20170414 16:31:36.154"></status>
</kw>
<status starttime="20170414 16:31:36.153" status="PASS" endtime="20170414 16:31:36.154"></status>
</kw>
<status starttime="20170414 16:31:36.152" status="PASS" endtime="20170414 16:31:36.154"></status>
</kw>
<status starttime="20170414 16:31:36.151" status="PASS" endtime="20170414 16:31:36.154"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:31:36.154">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:31:35.820" status="PASS" endtime="20170414 16:31:36.154"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:36.155">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:31:36.155" status="PASS" endtime="20170414 16:31:36.155"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:36.155">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170414 16:31:36.156">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170414 16:31:36.156">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status starttime="20170414 16:31:36.155" status="PASS" endtime="20170414 16:31:36.156"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:31:36.156">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170414 16:31:35.820" status="PASS" endtime="20170414 16:31:36.156"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:31:36.156">${host_state} = Running</msg>
<status starttime="20170414 16:31:35.819" status="PASS" endtime="20170414 16:31:36.156"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170414 16:31:36.157" status="PASS" endtime="20170414 16:31:36.157"></status>
</kw>
<status starttime="20170414 16:31:35.819" status="PASS" endtime="20170414 16:31:36.157"></status>
</kw>
<status starttime="20170414 16:31:07.145" status="PASS" endtime="20170414 16:31:36.157"></status>
</kw>
<status starttime="20170414 16:31:06.421" status="PASS" endtime="20170414 16:31:36.157"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is OS Starting</arg>
</arguments>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:36.161">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:31:36.160" status="PASS" endtime="20170414 16:31:36.161"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:36.162">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:31:36.161" status="PASS" endtime="20170414 16:31:36.162"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:36.162">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:31:36.162" status="PASS" endtime="20170414 16:31:36.162"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:36.163">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:31:36.163" status="PASS" endtime="20170414 16:31:36.163"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:36.960">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:31:36.164" status="PASS" endtime="20170414 16:31:36.960"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:31:36.960">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:31:36.960">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:31:36.163" status="PASS" endtime="20170414 16:31:36.960"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:36.961">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:31:36.961" status="PASS" endtime="20170414 16:31:36.961"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:36.962">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:31:36.961" status="PASS" endtime="20170414 16:31:36.962"></status>
</kw>
<status starttime="20170414 16:31:36.160" status="PASS" endtime="20170414 16:31:36.962"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:36.963">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170414 16:31:36.962" status="PASS" endtime="20170414 16:31:36.963"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:36.965">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:31:36.964" status="PASS" endtime="20170414 16:31:36.965"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:36.966">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:31:36.965" status="PASS" endtime="20170414 16:31:36.966"></status>
</kw>
<status starttime="20170414 16:31:36.965" status="PASS" endtime="20170414 16:31:36.966"></status>
</kw>
<status starttime="20170414 16:31:36.963" status="PASS" endtime="20170414 16:31:36.966"></status>
</kw>
<status starttime="20170414 16:31:36.963" status="PASS" endtime="20170414 16:31:36.966"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:37.066">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170414 16:31:37.066">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:31:36.966" status="PASS" endtime="20170414 16:31:37.066"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:37.068">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:31:37.067" status="PASS" endtime="20170414 16:31:37.068"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:37.069">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:31:37.068" status="PASS" endtime="20170414 16:31:37.069"></status>
</kw>
<status starttime="20170414 16:31:37.068" status="PASS" endtime="20170414 16:31:37.069"></status>
</kw>
<status starttime="20170414 16:31:37.067" status="PASS" endtime="20170414 16:31:37.069"></status>
</kw>
<status starttime="20170414 16:31:37.066" status="PASS" endtime="20170414 16:31:37.069"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:31:37.070">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:31:36.159" status="PASS" endtime="20170414 16:31:37.070"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:37.070">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:31:37.070" status="PASS" endtime="20170414 16:31:37.070"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:37.071">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170414 16:31:37.071">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170414 16:31:37.071">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status starttime="20170414 16:31:37.070" status="PASS" endtime="20170414 16:31:37.071"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:31:37.071">${state} = Off</msg>
<status starttime="20170414 16:31:36.159" status="PASS" endtime="20170414 16:31:37.071"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:31:37.071">${boot_progress} = Off</msg>
<status starttime="20170414 16:31:36.158" status="PASS" endtime="20170414 16:31:37.071"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:31:37.072">Off != FW Progress, Starting OS</msg>
<status starttime="20170414 16:31:37.072" status="FAIL" endtime="20170414 16:31:37.072"></status>
</kw>
<status starttime="20170414 16:31:36.158" status="FAIL" endtime="20170414 16:31:37.072"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:47.076">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:31:47.076" status="PASS" endtime="20170414 16:31:47.076"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:47.077">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:31:47.077" status="PASS" endtime="20170414 16:31:47.077"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:47.078">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:31:47.077" status="PASS" endtime="20170414 16:31:47.078"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:47.078">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:31:47.078" status="PASS" endtime="20170414 16:31:47.078"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:47.293">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:31:47.079" status="PASS" endtime="20170414 16:31:47.293"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:31:47.293">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:31:47.293">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:31:47.079" status="PASS" endtime="20170414 16:31:47.294"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:47.294">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:31:47.294" status="PASS" endtime="20170414 16:31:47.294"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:47.295">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:31:47.295" status="PASS" endtime="20170414 16:31:47.295"></status>
</kw>
<status starttime="20170414 16:31:47.075" status="PASS" endtime="20170414 16:31:47.295"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:47.296">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170414 16:31:47.295" status="PASS" endtime="20170414 16:31:47.296"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:47.298">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:31:47.297" status="PASS" endtime="20170414 16:31:47.298"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:47.299">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:31:47.299" status="PASS" endtime="20170414 16:31:47.299"></status>
</kw>
<status starttime="20170414 16:31:47.298" status="PASS" endtime="20170414 16:31:47.299"></status>
</kw>
<status starttime="20170414 16:31:47.296" status="PASS" endtime="20170414 16:31:47.299"></status>
</kw>
<status starttime="20170414 16:31:47.296" status="PASS" endtime="20170414 16:31:47.299"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:47.400">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170414 16:31:47.400">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:31:47.300" status="PASS" endtime="20170414 16:31:47.400"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:47.401">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:31:47.401" status="PASS" endtime="20170414 16:31:47.401"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:47.402">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:31:47.402" status="PASS" endtime="20170414 16:31:47.402"></status>
</kw>
<status starttime="20170414 16:31:47.402" status="PASS" endtime="20170414 16:31:47.403"></status>
</kw>
<status starttime="20170414 16:31:47.400" status="PASS" endtime="20170414 16:31:47.403"></status>
</kw>
<status starttime="20170414 16:31:47.400" status="PASS" endtime="20170414 16:31:47.403"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:31:47.403">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:31:47.074" status="PASS" endtime="20170414 16:31:47.403"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:47.403">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:31:47.403" status="PASS" endtime="20170414 16:31:47.404"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:47.404">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170414 16:31:47.404">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170414 16:31:47.404">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status starttime="20170414 16:31:47.404" status="PASS" endtime="20170414 16:31:47.404"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:31:47.405">${state} = Off</msg>
<status starttime="20170414 16:31:47.074" status="PASS" endtime="20170414 16:31:47.405"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:31:47.405">${boot_progress} = Off</msg>
<status starttime="20170414 16:31:47.073" status="PASS" endtime="20170414 16:31:47.405"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:31:47.405">Off != FW Progress, Starting OS</msg>
<status starttime="20170414 16:31:47.405" status="FAIL" endtime="20170414 16:31:47.405"></status>
</kw>
<status starttime="20170414 16:31:47.073" status="FAIL" endtime="20170414 16:31:47.406"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:57.409">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:31:57.409" status="PASS" endtime="20170414 16:31:57.410"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:57.410">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:31:57.410" status="PASS" endtime="20170414 16:31:57.410"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:57.411">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:31:57.410" status="PASS" endtime="20170414 16:31:57.411"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:57.411">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:31:57.411" status="PASS" endtime="20170414 16:31:57.411"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:57.590">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:31:57.412" status="PASS" endtime="20170414 16:31:57.590"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:31:57.590">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:31:57.590">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:31:57.412" status="PASS" endtime="20170414 16:31:57.590"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:57.591">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:31:57.591" status="PASS" endtime="20170414 16:31:57.591"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:57.592">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:31:57.591" status="PASS" endtime="20170414 16:31:57.592"></status>
</kw>
<status starttime="20170414 16:31:57.408" status="PASS" endtime="20170414 16:31:57.592"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:57.592">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170414 16:31:57.592" status="PASS" endtime="20170414 16:31:57.593"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:57.594">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:31:57.594" status="PASS" endtime="20170414 16:31:57.595"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:57.595">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:31:57.595" status="PASS" endtime="20170414 16:31:57.595"></status>
</kw>
<status starttime="20170414 16:31:57.595" status="PASS" endtime="20170414 16:31:57.596"></status>
</kw>
<status starttime="20170414 16:31:57.593" status="PASS" endtime="20170414 16:31:57.596"></status>
</kw>
<status starttime="20170414 16:31:57.593" status="PASS" endtime="20170414 16:31:57.596"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:57.662">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170414 16:31:57.662">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:31:57.596" status="PASS" endtime="20170414 16:31:57.662"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:57.664">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:31:57.663" status="PASS" endtime="20170414 16:31:57.664"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:57.665">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:31:57.665" status="PASS" endtime="20170414 16:31:57.665"></status>
</kw>
<status starttime="20170414 16:31:57.664" status="PASS" endtime="20170414 16:31:57.665"></status>
</kw>
<status starttime="20170414 16:31:57.663" status="PASS" endtime="20170414 16:31:57.665"></status>
</kw>
<status starttime="20170414 16:31:57.662" status="PASS" endtime="20170414 16:31:57.665"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:31:57.665">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:31:57.408" status="PASS" endtime="20170414 16:31:57.666"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:31:57.666">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:31:57.666" status="PASS" endtime="20170414 16:31:57.666"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:31:57.667">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170414 16:31:57.667">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170414 16:31:57.667">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status starttime="20170414 16:31:57.666" status="PASS" endtime="20170414 16:31:57.667"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:31:57.667">${state} = Off</msg>
<status starttime="20170414 16:31:57.407" status="PASS" endtime="20170414 16:31:57.667"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:31:57.667">${boot_progress} = Off</msg>
<status starttime="20170414 16:31:57.407" status="PASS" endtime="20170414 16:31:57.667"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:31:57.668">Off != FW Progress, Starting OS</msg>
<status starttime="20170414 16:31:57.668" status="FAIL" endtime="20170414 16:31:57.668"></status>
</kw>
<status starttime="20170414 16:31:57.406" status="FAIL" endtime="20170414 16:31:57.668"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:32:07.672">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:32:07.672" status="PASS" endtime="20170414 16:32:07.673"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:32:07.673">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:32:07.673" status="PASS" endtime="20170414 16:32:07.673"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:32:07.674">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:32:07.674" status="PASS" endtime="20170414 16:32:07.674"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:32:07.674">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:32:07.674" status="PASS" endtime="20170414 16:32:07.675"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:32:07.903">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:32:07.675" status="PASS" endtime="20170414 16:32:07.903"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:32:07.903">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:32:07.903">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:32:07.675" status="PASS" endtime="20170414 16:32:07.903"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:32:07.904">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:32:07.904" status="PASS" endtime="20170414 16:32:07.904"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:32:07.905">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:32:07.904" status="PASS" endtime="20170414 16:32:07.905"></status>
</kw>
<status starttime="20170414 16:32:07.671" status="PASS" endtime="20170414 16:32:07.905"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:32:07.905">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170414 16:32:07.905" status="PASS" endtime="20170414 16:32:07.905"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:32:07.907">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:32:07.907" status="PASS" endtime="20170414 16:32:07.908"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:32:07.908">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:32:07.908" status="PASS" endtime="20170414 16:32:07.909"></status>
</kw>
<status starttime="20170414 16:32:07.908" status="PASS" endtime="20170414 16:32:07.909"></status>
</kw>
<status starttime="20170414 16:32:07.906" status="PASS" endtime="20170414 16:32:07.909"></status>
</kw>
<status starttime="20170414 16:32:07.906" status="PASS" endtime="20170414 16:32:07.909"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:32:07.977">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170414 16:32:07.977">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:32:07.909" status="PASS" endtime="20170414 16:32:07.978"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:32:07.979">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:32:07.979" status="PASS" endtime="20170414 16:32:07.979"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:32:07.980">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:32:07.980" status="PASS" endtime="20170414 16:32:07.981"></status>
</kw>
<status starttime="20170414 16:32:07.979" status="PASS" endtime="20170414 16:32:07.981"></status>
</kw>
<status starttime="20170414 16:32:07.978" status="PASS" endtime="20170414 16:32:07.981"></status>
</kw>
<status starttime="20170414 16:32:07.978" status="PASS" endtime="20170414 16:32:07.981"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:32:07.981">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:32:07.670" status="PASS" endtime="20170414 16:32:07.981"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:32:07.982">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:32:07.981" status="PASS" endtime="20170414 16:32:07.982"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:32:07.982">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170414 16:32:07.982">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170414 16:32:07.982">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status starttime="20170414 16:32:07.982" status="PASS" endtime="20170414 16:32:07.982"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:32:07.983">${state} = Off</msg>
<status starttime="20170414 16:32:07.670" status="PASS" endtime="20170414 16:32:07.983"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:32:07.983">${boot_progress} = Off</msg>
<status starttime="20170414 16:32:07.669" status="PASS" endtime="20170414 16:32:07.983"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:32:07.984">Off != FW Progress, Starting OS</msg>
<status starttime="20170414 16:32:07.983" status="FAIL" endtime="20170414 16:32:07.984"></status>
</kw>
<status starttime="20170414 16:32:07.669" status="FAIL" endtime="20170414 16:32:07.984"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:32:17.987">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:32:17.987" status="PASS" endtime="20170414 16:32:17.988"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:32:17.988">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:32:17.988" status="PASS" endtime="20170414 16:32:17.988"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:32:17.989">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:32:17.988" status="PASS" endtime="20170414 16:32:17.989"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:32:17.990">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:32:17.989" status="PASS" endtime="20170414 16:32:17.990"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:32:18.651">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:32:17.990" status="PASS" endtime="20170414 16:32:18.651"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:32:18.651">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:32:18.651">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:32:17.990" status="PASS" endtime="20170414 16:32:18.651"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:32:18.652">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:32:18.652" status="PASS" endtime="20170414 16:32:18.652"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:32:18.653">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:32:18.652" status="PASS" endtime="20170414 16:32:18.653"></status>
</kw>
<status starttime="20170414 16:32:17.986" status="PASS" endtime="20170414 16:32:18.653"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:32:18.653">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170414 16:32:18.653" status="PASS" endtime="20170414 16:32:18.653"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:32:18.656">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:32:18.655" status="PASS" endtime="20170414 16:32:18.656"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:32:18.657">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:32:18.656" status="PASS" endtime="20170414 16:32:18.657"></status>
</kw>
<status starttime="20170414 16:32:18.656" status="PASS" endtime="20170414 16:32:18.657"></status>
</kw>
<status starttime="20170414 16:32:18.654" status="PASS" endtime="20170414 16:32:18.657"></status>
</kw>
<status starttime="20170414 16:32:18.654" status="PASS" endtime="20170414 16:32:18.657"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:32:18.757">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170414 16:32:18.757">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:32:18.657" status="PASS" endtime="20170414 16:32:18.757"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:32:18.759">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:32:18.758" status="PASS" endtime="20170414 16:32:18.759"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:32:18.760">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:32:18.759" status="PASS" endtime="20170414 16:32:18.760"></status>
</kw>
<status starttime="20170414 16:32:18.759" status="PASS" endtime="20170414 16:32:18.760"></status>
</kw>
<status starttime="20170414 16:32:18.758" status="PASS" endtime="20170414 16:32:18.760"></status>
</kw>
<status starttime="20170414 16:32:18.757" status="PASS" endtime="20170414 16:32:18.760"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:32:18.760">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:32:17.986" status="PASS" endtime="20170414 16:32:18.760"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:32:18.761">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:32:18.761" status="PASS" endtime="20170414 16:32:18.761"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:32:18.761">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170414 16:32:18.762">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170414 16:32:18.762">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status starttime="20170414 16:32:18.761" status="PASS" endtime="20170414 16:32:18.762"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:32:18.762">${state} = Off</msg>
<status starttime="20170414 16:32:17.985" status="PASS" endtime="20170414 16:32:18.762"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:32:18.762">${boot_progress} = Off</msg>
<status starttime="20170414 16:32:17.985" status="PASS" endtime="20170414 16:32:18.762"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:32:18.763">Off != FW Progress, Starting OS</msg>
<status starttime="20170414 16:32:18.762" status="FAIL" endtime="20170414 16:32:18.763"></status>
</kw>
<status starttime="20170414 16:32:17.984" status="FAIL" endtime="20170414 16:32:18.763"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:32:28.766">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:32:28.766" status="PASS" endtime="20170414 16:32:28.767"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:32:28.767">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:32:28.767" status="PASS" endtime="20170414 16:32:28.767"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:32:28.768">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:32:28.768" status="PASS" endtime="20170414 16:32:28.768"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:32:28.769">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:32:28.768" status="PASS" endtime="20170414 16:32:28.769"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:32:28.977">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:32:28.769" status="PASS" endtime="20170414 16:32:28.977"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:32:28.977">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:32:28.977">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:32:28.769" status="PASS" endtime="20170414 16:32:28.977"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:32:28.977">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:32:28.977" status="PASS" endtime="20170414 16:32:28.978"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:32:28.978">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:32:28.978" status="PASS" endtime="20170414 16:32:28.978"></status>
</kw>
<status starttime="20170414 16:32:28.766" status="PASS" endtime="20170414 16:32:28.978"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:32:28.979">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170414 16:32:28.979" status="PASS" endtime="20170414 16:32:28.979"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:32:28.981">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:32:28.980" status="PASS" endtime="20170414 16:32:28.981"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:32:28.982">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:32:28.982" status="PASS" endtime="20170414 16:32:28.982"></status>
</kw>
<status starttime="20170414 16:32:28.981" status="PASS" endtime="20170414 16:32:28.982"></status>
</kw>
<status starttime="20170414 16:32:28.980" status="PASS" endtime="20170414 16:32:28.982"></status>
</kw>
<status starttime="20170414 16:32:28.979" status="PASS" endtime="20170414 16:32:28.983"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:32:29.592">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170414 16:32:29.592">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:32:28.983" status="PASS" endtime="20170414 16:32:29.592"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:32:29.594">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:32:29.593" status="PASS" endtime="20170414 16:32:29.594"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:32:29.595">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:32:29.595" status="PASS" endtime="20170414 16:32:29.595"></status>
</kw>
<status starttime="20170414 16:32:29.594" status="PASS" endtime="20170414 16:32:29.595"></status>
</kw>
<status starttime="20170414 16:32:29.593" status="PASS" endtime="20170414 16:32:29.595"></status>
</kw>
<status starttime="20170414 16:32:29.593" status="PASS" endtime="20170414 16:32:29.595"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:32:29.595">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:32:28.765" status="PASS" endtime="20170414 16:32:29.595"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:32:29.596">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:32:29.596" status="PASS" endtime="20170414 16:32:29.596"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:32:29.597">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170414 16:32:29.597">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170414 16:32:29.597">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status starttime="20170414 16:32:29.596" status="PASS" endtime="20170414 16:32:29.597"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:32:29.597">${state} = Off</msg>
<status starttime="20170414 16:32:28.764" status="PASS" endtime="20170414 16:32:29.597"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:32:29.597">${boot_progress} = Off</msg>
<status starttime="20170414 16:32:28.764" status="PASS" endtime="20170414 16:32:29.597"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:32:29.598">Off != FW Progress, Starting OS</msg>
<status starttime="20170414 16:32:29.598" status="FAIL" endtime="20170414 16:32:29.598"></status>
</kw>
<status starttime="20170414 16:32:28.763" status="FAIL" endtime="20170414 16:32:29.598"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:32:39.602">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:32:39.601" status="PASS" endtime="20170414 16:32:39.602"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:32:39.603">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:32:39.603" status="PASS" endtime="20170414 16:32:39.603"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:32:39.604">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:32:39.603" status="PASS" endtime="20170414 16:32:39.604"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:32:39.604">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:32:39.604" status="PASS" endtime="20170414 16:32:39.604"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:32:39.845">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:32:39.605" status="PASS" endtime="20170414 16:32:39.845"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:32:39.845">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:32:39.845">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:32:39.605" status="PASS" endtime="20170414 16:32:39.846"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:32:39.846">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:32:39.846" status="PASS" endtime="20170414 16:32:39.846"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:32:39.847">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:32:39.846" status="PASS" endtime="20170414 16:32:39.847"></status>
</kw>
<status starttime="20170414 16:32:39.601" status="PASS" endtime="20170414 16:32:39.847"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:32:39.848">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170414 16:32:39.847" status="PASS" endtime="20170414 16:32:39.848"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:32:39.850">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:32:39.849" status="PASS" endtime="20170414 16:32:39.850"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:32:39.850">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:32:39.850" status="PASS" endtime="20170414 16:32:39.851"></status>
</kw>
<status starttime="20170414 16:32:39.850" status="PASS" endtime="20170414 16:32:39.851"></status>
</kw>
<status starttime="20170414 16:32:39.848" status="PASS" endtime="20170414 16:32:39.851"></status>
</kw>
<status starttime="20170414 16:32:39.848" status="PASS" endtime="20170414 16:32:39.851"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:32:39.917">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170414 16:32:39.917">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:32:39.851" status="PASS" endtime="20170414 16:32:39.917"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:32:39.919">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:32:39.918" status="PASS" endtime="20170414 16:32:39.919"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:32:39.919">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:32:39.919" status="PASS" endtime="20170414 16:32:39.920"></status>
</kw>
<status starttime="20170414 16:32:39.919" status="PASS" endtime="20170414 16:32:39.920"></status>
</kw>
<status starttime="20170414 16:32:39.918" status="PASS" endtime="20170414 16:32:39.920"></status>
</kw>
<status starttime="20170414 16:32:39.917" status="PASS" endtime="20170414 16:32:39.920"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:32:39.920">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:32:39.600" status="PASS" endtime="20170414 16:32:39.920"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:32:39.921">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:32:39.920" status="PASS" endtime="20170414 16:32:39.921"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:32:39.921">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170414 16:32:39.921">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170414 16:32:39.921">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status starttime="20170414 16:32:39.921" status="PASS" endtime="20170414 16:32:39.921"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:32:39.922">${state} = Off</msg>
<status starttime="20170414 16:32:39.600" status="PASS" endtime="20170414 16:32:39.922"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:32:39.922">${boot_progress} = Off</msg>
<status starttime="20170414 16:32:39.599" status="PASS" endtime="20170414 16:32:39.922"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:32:39.923">Off != FW Progress, Starting OS</msg>
<status starttime="20170414 16:32:39.922" status="FAIL" endtime="20170414 16:32:39.923"></status>
</kw>
<status starttime="20170414 16:32:39.599" status="FAIL" endtime="20170414 16:32:39.923"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:32:49.927">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:32:49.926" status="PASS" endtime="20170414 16:32:49.927"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:32:49.928">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:32:49.927" status="PASS" endtime="20170414 16:32:49.928"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:32:49.928">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:32:49.928" status="PASS" endtime="20170414 16:32:49.928"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:32:49.929">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:32:49.928" status="PASS" endtime="20170414 16:32:49.929"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:32:50.255">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:32:49.930" status="PASS" endtime="20170414 16:32:50.255"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:32:50.255">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:32:50.255">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:32:49.929" status="PASS" endtime="20170414 16:32:50.255"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:32:50.256">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:32:50.255" status="PASS" endtime="20170414 16:32:50.256"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:32:50.256">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:32:50.256" status="PASS" endtime="20170414 16:32:50.256"></status>
</kw>
<status starttime="20170414 16:32:49.926" status="PASS" endtime="20170414 16:32:50.257"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:32:50.257">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170414 16:32:50.257" status="PASS" endtime="20170414 16:32:50.257"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:32:50.260">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:32:50.259" status="PASS" endtime="20170414 16:32:50.260"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:32:50.261">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:32:50.261" status="PASS" endtime="20170414 16:32:50.261"></status>
</kw>
<status starttime="20170414 16:32:50.260" status="PASS" endtime="20170414 16:32:50.261"></status>
</kw>
<status starttime="20170414 16:32:50.258" status="PASS" endtime="20170414 16:32:50.261"></status>
</kw>
<status starttime="20170414 16:32:50.258" status="PASS" endtime="20170414 16:32:50.261"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:32:50.643">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170414 16:32:50.644">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:32:50.261" status="PASS" endtime="20170414 16:32:50.644"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:32:50.645">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:32:50.645" status="PASS" endtime="20170414 16:32:50.645"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:32:50.646">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:32:50.646" status="PASS" endtime="20170414 16:32:50.646"></status>
</kw>
<status starttime="20170414 16:32:50.646" status="PASS" endtime="20170414 16:32:50.646"></status>
</kw>
<status starttime="20170414 16:32:50.644" status="PASS" endtime="20170414 16:32:50.647"></status>
</kw>
<status starttime="20170414 16:32:50.644" status="PASS" endtime="20170414 16:32:50.647"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:32:50.647">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:32:49.925" status="PASS" endtime="20170414 16:32:50.647"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:32:50.647">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:32:50.647" status="PASS" endtime="20170414 16:32:50.648"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:32:50.648">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170414 16:32:50.648">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170414 16:32:50.648">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status starttime="20170414 16:32:50.648" status="PASS" endtime="20170414 16:32:50.648"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:32:50.649">${state} = Off</msg>
<status starttime="20170414 16:32:49.925" status="PASS" endtime="20170414 16:32:50.649"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:32:50.649">${boot_progress} = Off</msg>
<status starttime="20170414 16:32:49.924" status="PASS" endtime="20170414 16:32:50.649"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:32:50.649">Off != FW Progress, Starting OS</msg>
<status starttime="20170414 16:32:50.649" status="FAIL" endtime="20170414 16:32:50.650"></status>
</kw>
<status starttime="20170414 16:32:49.923" status="FAIL" endtime="20170414 16:32:50.650"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:33:00.653">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:33:00.653" status="PASS" endtime="20170414 16:33:00.654"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:33:00.655">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:33:00.654" status="PASS" endtime="20170414 16:33:00.655"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:33:00.656">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:33:00.655" status="PASS" endtime="20170414 16:33:00.656"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:33:00.657">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:33:00.656" status="PASS" endtime="20170414 16:33:00.657"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:33:00.833">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:33:00.658" status="PASS" endtime="20170414 16:33:00.833"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:33:00.833">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:33:00.833">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:33:00.657" status="PASS" endtime="20170414 16:33:00.833"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:33:00.834">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:33:00.834" status="PASS" endtime="20170414 16:33:00.834"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:33:00.835">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:33:00.834" status="PASS" endtime="20170414 16:33:00.835"></status>
</kw>
<status starttime="20170414 16:33:00.652" status="PASS" endtime="20170414 16:33:00.835"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:33:00.835">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170414 16:33:00.835" status="PASS" endtime="20170414 16:33:00.835"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:33:00.837">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:33:00.837" status="PASS" endtime="20170414 16:33:00.837"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:33:00.838">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:33:00.838" status="PASS" endtime="20170414 16:33:00.838"></status>
</kw>
<status starttime="20170414 16:33:00.838" status="PASS" endtime="20170414 16:33:00.839"></status>
</kw>
<status starttime="20170414 16:33:00.836" status="PASS" endtime="20170414 16:33:00.839"></status>
</kw>
<status starttime="20170414 16:33:00.836" status="PASS" endtime="20170414 16:33:00.839"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:33:00.905">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170414 16:33:00.905">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:33:00.839" status="PASS" endtime="20170414 16:33:00.905"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:33:00.907">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:33:00.906" status="PASS" endtime="20170414 16:33:00.907"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:33:00.908">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:33:00.907" status="PASS" endtime="20170414 16:33:00.908"></status>
</kw>
<status starttime="20170414 16:33:00.907" status="PASS" endtime="20170414 16:33:00.908"></status>
</kw>
<status starttime="20170414 16:33:00.906" status="PASS" endtime="20170414 16:33:00.908"></status>
</kw>
<status starttime="20170414 16:33:00.905" status="PASS" endtime="20170414 16:33:00.908"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:33:00.908">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:33:00.652" status="PASS" endtime="20170414 16:33:00.908"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:33:00.909">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:33:00.909" status="PASS" endtime="20170414 16:33:00.909"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:33:00.910">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170414 16:33:00.910">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170414 16:33:00.910">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status starttime="20170414 16:33:00.909" status="PASS" endtime="20170414 16:33:00.910"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:33:00.910">${state} = Off</msg>
<status starttime="20170414 16:33:00.651" status="PASS" endtime="20170414 16:33:00.910"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:33:00.910">${boot_progress} = Off</msg>
<status starttime="20170414 16:33:00.651" status="PASS" endtime="20170414 16:33:00.910"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:33:00.911">Off != FW Progress, Starting OS</msg>
<status starttime="20170414 16:33:00.910" status="FAIL" endtime="20170414 16:33:00.911"></status>
</kw>
<status starttime="20170414 16:33:00.650" status="FAIL" endtime="20170414 16:33:00.911"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:33:10.915">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:33:10.915" status="PASS" endtime="20170414 16:33:10.916"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:33:10.916">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:33:10.916" status="PASS" endtime="20170414 16:33:10.916"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:33:10.917">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:33:10.917" status="PASS" endtime="20170414 16:33:10.917"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:33:10.917">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:33:10.917" status="PASS" endtime="20170414 16:33:10.918"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:33:11.492">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:33:10.918" status="PASS" endtime="20170414 16:33:11.492"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:33:11.492">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:33:11.492">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:33:10.918" status="PASS" endtime="20170414 16:33:11.492"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:33:11.493">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:33:11.493" status="PASS" endtime="20170414 16:33:11.493"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:33:11.494">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:33:11.493" status="PASS" endtime="20170414 16:33:11.494"></status>
</kw>
<status starttime="20170414 16:33:10.914" status="PASS" endtime="20170414 16:33:11.494"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:33:11.494">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170414 16:33:11.494" status="PASS" endtime="20170414 16:33:11.494"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:33:11.496">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:33:11.496" status="PASS" endtime="20170414 16:33:11.496"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:33:11.497">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:33:11.497" status="PASS" endtime="20170414 16:33:11.497"></status>
</kw>
<status starttime="20170414 16:33:11.497" status="PASS" endtime="20170414 16:33:11.497"></status>
</kw>
<status starttime="20170414 16:33:11.495" status="PASS" endtime="20170414 16:33:11.498"></status>
</kw>
<status starttime="20170414 16:33:11.495" status="PASS" endtime="20170414 16:33:11.498"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:33:11.565">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170414 16:33:11.565">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:33:11.498" status="PASS" endtime="20170414 16:33:11.565"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:33:11.567">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:33:11.567" status="PASS" endtime="20170414 16:33:11.567"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:33:11.568">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:33:11.568" status="PASS" endtime="20170414 16:33:11.568"></status>
</kw>
<status starttime="20170414 16:33:11.568" status="PASS" endtime="20170414 16:33:11.568"></status>
</kw>
<status starttime="20170414 16:33:11.566" status="PASS" endtime="20170414 16:33:11.569"></status>
</kw>
<status starttime="20170414 16:33:11.566" status="PASS" endtime="20170414 16:33:11.569"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:33:11.569">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:33:10.913" status="PASS" endtime="20170414 16:33:11.569"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:33:11.569">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:33:11.569" status="PASS" endtime="20170414 16:33:11.570"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:33:11.570">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170414 16:33:11.570">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170414 16:33:11.570">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status starttime="20170414 16:33:11.570" status="PASS" endtime="20170414 16:33:11.570"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:33:11.571">${state} = Off</msg>
<status starttime="20170414 16:33:10.913" status="PASS" endtime="20170414 16:33:11.571"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:33:11.571">${boot_progress} = Off</msg>
<status starttime="20170414 16:33:10.912" status="PASS" endtime="20170414 16:33:11.571"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:33:11.571">Off != FW Progress, Starting OS</msg>
<status starttime="20170414 16:33:11.571" status="FAIL" endtime="20170414 16:33:11.571"></status>
</kw>
<status starttime="20170414 16:33:10.912" status="FAIL" endtime="20170414 16:33:11.572"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:33:21.575">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:33:21.575" status="PASS" endtime="20170414 16:33:21.576"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:33:21.576">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:33:21.576" status="PASS" endtime="20170414 16:33:21.576"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:33:21.577">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:33:21.577" status="PASS" endtime="20170414 16:33:21.577"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:33:21.578">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:33:21.577" status="PASS" endtime="20170414 16:33:21.578"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:33:22.318">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:33:21.578" status="PASS" endtime="20170414 16:33:22.318"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:33:22.318">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:33:22.318">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:33:21.578" status="PASS" endtime="20170414 16:33:22.318"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:33:22.319">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:33:22.319" status="PASS" endtime="20170414 16:33:22.319"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:33:22.320">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:33:22.319" status="PASS" endtime="20170414 16:33:22.320"></status>
</kw>
<status starttime="20170414 16:33:21.575" status="PASS" endtime="20170414 16:33:22.320"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:33:22.320">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170414 16:33:22.320" status="PASS" endtime="20170414 16:33:22.321"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:33:22.323">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:33:22.322" status="PASS" endtime="20170414 16:33:22.323"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:33:22.324">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:33:22.324" status="PASS" endtime="20170414 16:33:22.324"></status>
</kw>
<status starttime="20170414 16:33:22.323" status="PASS" endtime="20170414 16:33:22.324"></status>
</kw>
<status starttime="20170414 16:33:22.321" status="PASS" endtime="20170414 16:33:22.324"></status>
</kw>
<status starttime="20170414 16:33:22.321" status="PASS" endtime="20170414 16:33:22.324"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:33:22.424">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170414 16:33:22.424">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:33:22.324" status="PASS" endtime="20170414 16:33:22.424"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:33:22.426">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:33:22.425" status="PASS" endtime="20170414 16:33:22.426"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:33:22.426">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:33:22.426" status="PASS" endtime="20170414 16:33:22.427"></status>
</kw>
<status starttime="20170414 16:33:22.426" status="PASS" endtime="20170414 16:33:22.427"></status>
</kw>
<status starttime="20170414 16:33:22.425" status="PASS" endtime="20170414 16:33:22.427"></status>
</kw>
<status starttime="20170414 16:33:22.424" status="PASS" endtime="20170414 16:33:22.427"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:33:22.427">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:33:21.574" status="PASS" endtime="20170414 16:33:22.427"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:33:22.428">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:33:22.427" status="PASS" endtime="20170414 16:33:22.428"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:33:22.428">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170414 16:33:22.428">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170414 16:33:22.428">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status starttime="20170414 16:33:22.428" status="PASS" endtime="20170414 16:33:22.428"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:33:22.429">${state} = Off</msg>
<status starttime="20170414 16:33:21.573" status="PASS" endtime="20170414 16:33:22.429"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:33:22.429">${boot_progress} = Off</msg>
<status starttime="20170414 16:33:21.573" status="PASS" endtime="20170414 16:33:22.429"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:33:22.430">Off != FW Progress, Starting OS</msg>
<status starttime="20170414 16:33:22.429" status="FAIL" endtime="20170414 16:33:22.430"></status>
</kw>
<status starttime="20170414 16:33:21.572" status="FAIL" endtime="20170414 16:33:22.430"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:33:32.433">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:33:32.433" status="PASS" endtime="20170414 16:33:32.434"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:33:32.434">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:33:32.434" status="PASS" endtime="20170414 16:33:32.435"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:33:32.435">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:33:32.435" status="PASS" endtime="20170414 16:33:32.435"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:33:32.436">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:33:32.435" status="PASS" endtime="20170414 16:33:32.436"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:33:32.672">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:33:32.436" status="PASS" endtime="20170414 16:33:32.672"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:33:32.672">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:33:32.672">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:33:32.436" status="PASS" endtime="20170414 16:33:32.672"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:33:32.673">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:33:32.672" status="PASS" endtime="20170414 16:33:32.673"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:33:32.673">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:33:32.673" status="PASS" endtime="20170414 16:33:32.673"></status>
</kw>
<status starttime="20170414 16:33:32.433" status="PASS" endtime="20170414 16:33:32.673"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:33:32.674">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170414 16:33:32.674" status="PASS" endtime="20170414 16:33:32.674"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:33:32.676">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:33:32.675" status="PASS" endtime="20170414 16:33:32.676"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:33:32.677">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:33:32.677" status="PASS" endtime="20170414 16:33:32.677"></status>
</kw>
<status starttime="20170414 16:33:32.676" status="PASS" endtime="20170414 16:33:32.677"></status>
</kw>
<status starttime="20170414 16:33:32.675" status="PASS" endtime="20170414 16:33:32.677"></status>
</kw>
<status starttime="20170414 16:33:32.674" status="PASS" endtime="20170414 16:33:32.677"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:33:32.744">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170414 16:33:32.744">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:33:32.677" status="PASS" endtime="20170414 16:33:32.744"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:33:32.746">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:33:32.745" status="PASS" endtime="20170414 16:33:32.746"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:33:32.747">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:33:32.746" status="PASS" endtime="20170414 16:33:32.747"></status>
</kw>
<status starttime="20170414 16:33:32.746" status="PASS" endtime="20170414 16:33:32.747"></status>
</kw>
<status starttime="20170414 16:33:32.745" status="PASS" endtime="20170414 16:33:32.747"></status>
</kw>
<status starttime="20170414 16:33:32.744" status="PASS" endtime="20170414 16:33:32.747"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:33:32.747">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:33:32.432" status="PASS" endtime="20170414 16:33:32.747"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:33:32.748">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:33:32.748" status="PASS" endtime="20170414 16:33:32.748"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:33:32.749">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170414 16:33:32.749">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170414 16:33:32.749">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status starttime="20170414 16:33:32.748" status="PASS" endtime="20170414 16:33:32.749"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:33:32.749">${state} = Off</msg>
<status starttime="20170414 16:33:32.431" status="PASS" endtime="20170414 16:33:32.749"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:33:32.749">${boot_progress} = Off</msg>
<status starttime="20170414 16:33:32.431" status="PASS" endtime="20170414 16:33:32.749"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:33:32.750">Off != FW Progress, Starting OS</msg>
<status starttime="20170414 16:33:32.749" status="FAIL" endtime="20170414 16:33:32.750"></status>
</kw>
<status starttime="20170414 16:33:32.430" status="FAIL" endtime="20170414 16:33:32.750"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:33:42.754">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:33:42.753" status="PASS" endtime="20170414 16:33:42.754"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:33:42.755">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:33:42.755" status="PASS" endtime="20170414 16:33:42.755"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:33:42.755">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:33:42.755" status="PASS" endtime="20170414 16:33:42.756"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:33:42.756">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:33:42.756" status="PASS" endtime="20170414 16:33:42.756"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:33:42.931">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:33:42.757" status="PASS" endtime="20170414 16:33:42.931"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:33:42.932">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:33:42.932">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:33:42.756" status="PASS" endtime="20170414 16:33:42.932"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:33:42.932">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:33:42.932" status="PASS" endtime="20170414 16:33:42.932"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:33:42.933">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:33:42.933" status="PASS" endtime="20170414 16:33:42.933"></status>
</kw>
<status starttime="20170414 16:33:42.753" status="PASS" endtime="20170414 16:33:42.933"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:33:42.934">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170414 16:33:42.933" status="PASS" endtime="20170414 16:33:42.934"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:33:42.936">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:33:42.935" status="PASS" endtime="20170414 16:33:42.936"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:33:42.937">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:33:42.936" status="PASS" endtime="20170414 16:33:42.937"></status>
</kw>
<status starttime="20170414 16:33:42.936" status="PASS" endtime="20170414 16:33:42.937"></status>
</kw>
<status starttime="20170414 16:33:42.934" status="PASS" endtime="20170414 16:33:42.937"></status>
</kw>
<status starttime="20170414 16:33:42.934" status="PASS" endtime="20170414 16:33:42.937"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:33:43.004">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170414 16:33:43.004">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:33:42.937" status="PASS" endtime="20170414 16:33:43.004"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:33:43.005">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:33:43.005" status="PASS" endtime="20170414 16:33:43.005"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:33:43.006">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:33:43.006" status="PASS" endtime="20170414 16:33:43.006"></status>
</kw>
<status starttime="20170414 16:33:43.006" status="PASS" endtime="20170414 16:33:43.007"></status>
</kw>
<status starttime="20170414 16:33:43.004" status="PASS" endtime="20170414 16:33:43.007"></status>
</kw>
<status starttime="20170414 16:33:43.004" status="PASS" endtime="20170414 16:33:43.007"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:33:43.007">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:33:42.752" status="PASS" endtime="20170414 16:33:43.007"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:33:43.008">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:33:43.007" status="PASS" endtime="20170414 16:33:43.008"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:33:43.008">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170414 16:33:43.008">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170414 16:33:43.008">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status starttime="20170414 16:33:43.008" status="PASS" endtime="20170414 16:33:43.008"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:33:43.009">${state} = Off</msg>
<status starttime="20170414 16:33:42.751" status="PASS" endtime="20170414 16:33:43.009"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:33:43.009">${boot_progress} = Off</msg>
<status starttime="20170414 16:33:42.751" status="PASS" endtime="20170414 16:33:43.009"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:33:43.009">Off != FW Progress, Starting OS</msg>
<status starttime="20170414 16:33:43.009" status="FAIL" endtime="20170414 16:33:43.009"></status>
</kw>
<status starttime="20170414 16:33:42.751" status="FAIL" endtime="20170414 16:33:43.010"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:33:53.014">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:33:53.013" status="PASS" endtime="20170414 16:33:53.014"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:33:53.014">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:33:53.014" status="PASS" endtime="20170414 16:33:53.015"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:33:53.015">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:33:53.015" status="PASS" endtime="20170414 16:33:53.015"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:33:53.016">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:33:53.015" status="PASS" endtime="20170414 16:33:53.016"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:33:53.190">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:33:53.016" status="PASS" endtime="20170414 16:33:53.191"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:33:53.191">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:33:53.191">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:33:53.016" status="PASS" endtime="20170414 16:33:53.191"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:33:53.191">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:33:53.191" status="PASS" endtime="20170414 16:33:53.191"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:33:53.192">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:33:53.192" status="PASS" endtime="20170414 16:33:53.192"></status>
</kw>
<status starttime="20170414 16:33:53.013" status="PASS" endtime="20170414 16:33:53.192"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:33:53.193">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170414 16:33:53.192" status="PASS" endtime="20170414 16:33:53.193"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:33:53.195">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:33:53.194" status="PASS" endtime="20170414 16:33:53.195"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:33:53.196">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:33:53.196" status="PASS" endtime="20170414 16:33:53.196"></status>
</kw>
<status starttime="20170414 16:33:53.195" status="PASS" endtime="20170414 16:33:53.196"></status>
</kw>
<status starttime="20170414 16:33:53.193" status="PASS" endtime="20170414 16:33:53.196"></status>
</kw>
<status starttime="20170414 16:33:53.193" status="PASS" endtime="20170414 16:33:53.196"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:33:53.263">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170414 16:33:53.263">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:33:53.197" status="PASS" endtime="20170414 16:33:53.263"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:33:53.265">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:33:53.264" status="PASS" endtime="20170414 16:33:53.265"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:33:53.266">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:33:53.265" status="PASS" endtime="20170414 16:33:53.266"></status>
</kw>
<status starttime="20170414 16:33:53.265" status="PASS" endtime="20170414 16:33:53.266"></status>
</kw>
<status starttime="20170414 16:33:53.264" status="PASS" endtime="20170414 16:33:53.266"></status>
</kw>
<status starttime="20170414 16:33:53.263" status="PASS" endtime="20170414 16:33:53.266"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:33:53.266">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:33:53.012" status="PASS" endtime="20170414 16:33:53.266"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:33:53.267">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:33:53.266" status="PASS" endtime="20170414 16:33:53.267"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:33:53.267">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170414 16:33:53.267">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170414 16:33:53.268">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status starttime="20170414 16:33:53.267" status="PASS" endtime="20170414 16:33:53.268"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:33:53.268">${state} = Off</msg>
<status starttime="20170414 16:33:53.011" status="PASS" endtime="20170414 16:33:53.268"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:33:53.268">${boot_progress} = Off</msg>
<status starttime="20170414 16:33:53.011" status="PASS" endtime="20170414 16:33:53.268"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:33:53.269">Off != FW Progress, Starting OS</msg>
<status starttime="20170414 16:33:53.268" status="FAIL" endtime="20170414 16:33:53.269"></status>
</kw>
<status starttime="20170414 16:33:53.010" status="FAIL" endtime="20170414 16:33:53.269"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:34:03.272">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:34:03.272" status="PASS" endtime="20170414 16:34:03.273"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:34:03.273">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:34:03.273" status="PASS" endtime="20170414 16:34:03.273"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:34:03.274">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:34:03.274" status="PASS" endtime="20170414 16:34:03.274"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:34:03.275">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:34:03.274" status="PASS" endtime="20170414 16:34:03.275"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:34:03.449">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:34:03.275" status="PASS" endtime="20170414 16:34:03.449"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:34:03.449">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:34:03.449">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:34:03.275" status="PASS" endtime="20170414 16:34:03.449"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:34:03.450">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:34:03.450" status="PASS" endtime="20170414 16:34:03.450"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:34:03.451">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:34:03.450" status="PASS" endtime="20170414 16:34:03.451"></status>
</kw>
<status starttime="20170414 16:34:03.271" status="PASS" endtime="20170414 16:34:03.451"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:34:03.452">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170414 16:34:03.451" status="PASS" endtime="20170414 16:34:03.452"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:34:03.454">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:34:03.453" status="PASS" endtime="20170414 16:34:03.454"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:34:03.454">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:34:03.454" status="PASS" endtime="20170414 16:34:03.455"></status>
</kw>
<status starttime="20170414 16:34:03.454" status="PASS" endtime="20170414 16:34:03.455"></status>
</kw>
<status starttime="20170414 16:34:03.452" status="PASS" endtime="20170414 16:34:03.455"></status>
</kw>
<status starttime="20170414 16:34:03.452" status="PASS" endtime="20170414 16:34:03.455"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:34:03.520">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170414 16:34:03.521">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:34:03.455" status="PASS" endtime="20170414 16:34:03.521"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:34:03.522">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:34:03.522" status="PASS" endtime="20170414 16:34:03.522"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:34:03.523">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:34:03.523" status="PASS" endtime="20170414 16:34:03.523"></status>
</kw>
<status starttime="20170414 16:34:03.522" status="PASS" endtime="20170414 16:34:03.523"></status>
</kw>
<status starttime="20170414 16:34:03.521" status="PASS" endtime="20170414 16:34:03.523"></status>
</kw>
<status starttime="20170414 16:34:03.521" status="PASS" endtime="20170414 16:34:03.523"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:34:03.524">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:34:03.271" status="PASS" endtime="20170414 16:34:03.524"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:34:03.524">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:34:03.524" status="PASS" endtime="20170414 16:34:03.524"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:34:03.525">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170414 16:34:03.525">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170414 16:34:03.525">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status starttime="20170414 16:34:03.525" status="PASS" endtime="20170414 16:34:03.525"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:34:03.525">${state} = Off</msg>
<status starttime="20170414 16:34:03.270" status="PASS" endtime="20170414 16:34:03.525"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:34:03.526">${boot_progress} = Off</msg>
<status starttime="20170414 16:34:03.270" status="PASS" endtime="20170414 16:34:03.526"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:34:03.526">Off != FW Progress, Starting OS</msg>
<status starttime="20170414 16:34:03.526" status="FAIL" endtime="20170414 16:34:03.526"></status>
</kw>
<status starttime="20170414 16:34:03.269" status="FAIL" endtime="20170414 16:34:03.526"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:34:13.530">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:34:13.530" status="PASS" endtime="20170414 16:34:13.531"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:34:13.532">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:34:13.531" status="PASS" endtime="20170414 16:34:13.532"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:34:13.532">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:34:13.532" status="PASS" endtime="20170414 16:34:13.532"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:34:13.533">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:34:13.532" status="PASS" endtime="20170414 16:34:13.533"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:34:13.715">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:34:13.533" status="PASS" endtime="20170414 16:34:13.716"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:34:13.716">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:34:13.716">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:34:13.533" status="PASS" endtime="20170414 16:34:13.716"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:34:13.716">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:34:13.716" status="PASS" endtime="20170414 16:34:13.716"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:34:13.717">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:34:13.717" status="PASS" endtime="20170414 16:34:13.717"></status>
</kw>
<status starttime="20170414 16:34:13.529" status="PASS" endtime="20170414 16:34:13.717"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:34:13.718">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170414 16:34:13.718" status="PASS" endtime="20170414 16:34:13.718"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:34:13.720">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:34:13.719" status="PASS" endtime="20170414 16:34:13.720"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:34:13.721">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:34:13.721" status="PASS" endtime="20170414 16:34:13.721"></status>
</kw>
<status starttime="20170414 16:34:13.720" status="PASS" endtime="20170414 16:34:13.721"></status>
</kw>
<status starttime="20170414 16:34:13.719" status="PASS" endtime="20170414 16:34:13.721"></status>
</kw>
<status starttime="20170414 16:34:13.718" status="PASS" endtime="20170414 16:34:13.721"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:34:13.788">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170414 16:34:13.788">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:34:13.721" status="PASS" endtime="20170414 16:34:13.789"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:34:13.790">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:34:13.790" status="PASS" endtime="20170414 16:34:13.790"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:34:13.791">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:34:13.791" status="PASS" endtime="20170414 16:34:13.791"></status>
</kw>
<status starttime="20170414 16:34:13.790" status="PASS" endtime="20170414 16:34:13.791"></status>
</kw>
<status starttime="20170414 16:34:13.789" status="PASS" endtime="20170414 16:34:13.791"></status>
</kw>
<status starttime="20170414 16:34:13.789" status="PASS" endtime="20170414 16:34:13.792"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:34:13.792">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:34:13.529" status="PASS" endtime="20170414 16:34:13.792"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:34:13.792">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:34:13.792" status="PASS" endtime="20170414 16:34:13.792"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:34:13.793">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170414 16:34:13.793">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170414 16:34:13.793">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status starttime="20170414 16:34:13.793" status="PASS" endtime="20170414 16:34:13.793"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:34:13.793">${state} = Off</msg>
<status starttime="20170414 16:34:13.528" status="PASS" endtime="20170414 16:34:13.793"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:34:13.794">${boot_progress} = Off</msg>
<status starttime="20170414 16:34:13.527" status="PASS" endtime="20170414 16:34:13.794"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:34:13.794">Off != FW Progress, Starting OS</msg>
<status starttime="20170414 16:34:13.794" status="FAIL" endtime="20170414 16:34:13.794"></status>
</kw>
<status starttime="20170414 16:34:13.527" status="FAIL" endtime="20170414 16:34:13.794"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:34:23.798">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:34:23.798" status="PASS" endtime="20170414 16:34:23.799"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:34:23.799">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:34:23.799" status="PASS" endtime="20170414 16:34:23.799"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:34:23.800">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:34:23.800" status="PASS" endtime="20170414 16:34:23.800"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:34:23.801">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:34:23.800" status="PASS" endtime="20170414 16:34:23.801"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:34:23.982">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:34:23.801" status="PASS" endtime="20170414 16:34:23.982"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:34:23.982">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:34:23.982">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:34:23.801" status="PASS" endtime="20170414 16:34:23.982"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:34:23.983">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:34:23.982" status="PASS" endtime="20170414 16:34:23.983"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:34:23.983">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:34:23.983" status="PASS" endtime="20170414 16:34:23.983"></status>
</kw>
<status starttime="20170414 16:34:23.797" status="PASS" endtime="20170414 16:34:23.983"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:34:23.984">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170414 16:34:23.984" status="PASS" endtime="20170414 16:34:23.984"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:34:23.986">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:34:23.985" status="PASS" endtime="20170414 16:34:23.986"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:34:23.987">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:34:23.987" status="PASS" endtime="20170414 16:34:23.987"></status>
</kw>
<status starttime="20170414 16:34:23.986" status="PASS" endtime="20170414 16:34:23.987"></status>
</kw>
<status starttime="20170414 16:34:23.985" status="PASS" endtime="20170414 16:34:23.988"></status>
</kw>
<status starttime="20170414 16:34:23.984" status="PASS" endtime="20170414 16:34:23.988"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:34:24.055">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170414 16:34:24.055">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:34:23.988" status="PASS" endtime="20170414 16:34:24.055"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:34:24.057">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:34:24.056" status="PASS" endtime="20170414 16:34:24.057"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:34:24.057">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:34:24.057" status="PASS" endtime="20170414 16:34:24.058"></status>
</kw>
<status starttime="20170414 16:34:24.057" status="PASS" endtime="20170414 16:34:24.058"></status>
</kw>
<status starttime="20170414 16:34:24.056" status="PASS" endtime="20170414 16:34:24.058"></status>
</kw>
<status starttime="20170414 16:34:24.055" status="PASS" endtime="20170414 16:34:24.058"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:34:24.058">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:34:23.797" status="PASS" endtime="20170414 16:34:24.058"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:34:24.059">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:34:24.059" status="PASS" endtime="20170414 16:34:24.059"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:34:24.059">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170414 16:34:24.060">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170414 16:34:24.060">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status starttime="20170414 16:34:24.059" status="PASS" endtime="20170414 16:34:24.060"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:34:24.060">${state} = Off</msg>
<status starttime="20170414 16:34:23.796" status="PASS" endtime="20170414 16:34:24.060"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:34:24.060">${boot_progress} = Off</msg>
<status starttime="20170414 16:34:23.796" status="PASS" endtime="20170414 16:34:24.060"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:34:24.061">Off != FW Progress, Starting OS</msg>
<status starttime="20170414 16:34:24.060" status="FAIL" endtime="20170414 16:34:24.061"></status>
</kw>
<status starttime="20170414 16:34:23.795" status="FAIL" endtime="20170414 16:34:24.061"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:34:34.065">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:34:34.064" status="PASS" endtime="20170414 16:34:34.065"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:34:34.066">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:34:34.065" status="PASS" endtime="20170414 16:34:34.066"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:34:34.066">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:34:34.066" status="PASS" endtime="20170414 16:34:34.066"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:34:34.067">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:34:34.066" status="PASS" endtime="20170414 16:34:34.067"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:34:34.243">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:34:34.067" status="PASS" endtime="20170414 16:34:34.244"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:34:34.244">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:34:34.244">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:34:34.067" status="PASS" endtime="20170414 16:34:34.244"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:34:34.244">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:34:34.244" status="PASS" endtime="20170414 16:34:34.244"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:34:34.245">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:34:34.245" status="PASS" endtime="20170414 16:34:34.245"></status>
</kw>
<status starttime="20170414 16:34:34.064" status="PASS" endtime="20170414 16:34:34.245"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:34:34.246">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170414 16:34:34.245" status="PASS" endtime="20170414 16:34:34.246"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:34:34.248">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:34:34.247" status="PASS" endtime="20170414 16:34:34.248"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:34:34.249">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:34:34.249" status="PASS" endtime="20170414 16:34:34.249"></status>
</kw>
<status starttime="20170414 16:34:34.248" status="PASS" endtime="20170414 16:34:34.249"></status>
</kw>
<status starttime="20170414 16:34:34.247" status="PASS" endtime="20170414 16:34:34.249"></status>
</kw>
<status starttime="20170414 16:34:34.246" status="PASS" endtime="20170414 16:34:34.249"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:34:34.316">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170414 16:34:34.316">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:34:34.249" status="PASS" endtime="20170414 16:34:34.316"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:34:34.318">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:34:34.317" status="PASS" endtime="20170414 16:34:34.318"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:34:34.319">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:34:34.318" status="PASS" endtime="20170414 16:34:34.319"></status>
</kw>
<status starttime="20170414 16:34:34.318" status="PASS" endtime="20170414 16:34:34.319"></status>
</kw>
<status starttime="20170414 16:34:34.317" status="PASS" endtime="20170414 16:34:34.319"></status>
</kw>
<status starttime="20170414 16:34:34.316" status="PASS" endtime="20170414 16:34:34.319"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:34:34.319">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:34:34.063" status="PASS" endtime="20170414 16:34:34.319"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:34:34.320">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:34:34.319" status="PASS" endtime="20170414 16:34:34.320"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:34:34.320">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170414 16:34:34.320">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170414 16:34:34.321">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status starttime="20170414 16:34:34.320" status="PASS" endtime="20170414 16:34:34.321"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:34:34.321">${state} = Off</msg>
<status starttime="20170414 16:34:34.063" status="PASS" endtime="20170414 16:34:34.321"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:34:34.321">${boot_progress} = Off</msg>
<status starttime="20170414 16:34:34.062" status="PASS" endtime="20170414 16:34:34.321"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:34:34.322">Off != FW Progress, Starting OS</msg>
<status starttime="20170414 16:34:34.322" status="FAIL" endtime="20170414 16:34:34.322"></status>
</kw>
<status starttime="20170414 16:34:34.062" status="FAIL" endtime="20170414 16:34:34.322"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:34:44.326">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:34:44.325" status="PASS" endtime="20170414 16:34:44.327"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:34:44.327">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:34:44.327" status="PASS" endtime="20170414 16:34:44.327"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:34:44.328">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:34:44.328" status="PASS" endtime="20170414 16:34:44.328"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:34:44.329">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:34:44.328" status="PASS" endtime="20170414 16:34:44.329"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:34:44.511">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:34:44.329" status="PASS" endtime="20170414 16:34:44.511"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:34:44.512">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:34:44.512">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:34:44.329" status="PASS" endtime="20170414 16:34:44.512"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:34:44.512">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:34:44.512" status="PASS" endtime="20170414 16:34:44.512"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:34:44.513">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:34:44.513" status="PASS" endtime="20170414 16:34:44.513"></status>
</kw>
<status starttime="20170414 16:34:44.325" status="PASS" endtime="20170414 16:34:44.513"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:34:44.514">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170414 16:34:44.513" status="PASS" endtime="20170414 16:34:44.514"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:34:44.516">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:34:44.515" status="PASS" endtime="20170414 16:34:44.516"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:34:44.517">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:34:44.517" status="PASS" endtime="20170414 16:34:44.517"></status>
</kw>
<status starttime="20170414 16:34:44.516" status="PASS" endtime="20170414 16:34:44.517"></status>
</kw>
<status starttime="20170414 16:34:44.514" status="PASS" endtime="20170414 16:34:44.517"></status>
</kw>
<status starttime="20170414 16:34:44.514" status="PASS" endtime="20170414 16:34:44.517"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:34:44.584">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170414 16:34:44.584">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:34:44.517" status="PASS" endtime="20170414 16:34:44.584"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:34:44.586">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:34:44.585" status="PASS" endtime="20170414 16:34:44.586"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:34:44.586">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:34:44.586" status="PASS" endtime="20170414 16:34:44.587"></status>
</kw>
<status starttime="20170414 16:34:44.586" status="PASS" endtime="20170414 16:34:44.587"></status>
</kw>
<status starttime="20170414 16:34:44.585" status="PASS" endtime="20170414 16:34:44.587"></status>
</kw>
<status starttime="20170414 16:34:44.584" status="PASS" endtime="20170414 16:34:44.587"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:34:44.587">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:34:44.324" status="PASS" endtime="20170414 16:34:44.587"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:34:44.588">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:34:44.587" status="PASS" endtime="20170414 16:34:44.588"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:34:44.588">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170414 16:34:44.588">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170414 16:34:44.588">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status starttime="20170414 16:34:44.588" status="PASS" endtime="20170414 16:34:44.589"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:34:44.589">${state} = Off</msg>
<status starttime="20170414 16:34:44.324" status="PASS" endtime="20170414 16:34:44.589"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:34:44.589">${boot_progress} = Off</msg>
<status starttime="20170414 16:34:44.323" status="PASS" endtime="20170414 16:34:44.589"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:34:44.590">Off != FW Progress, Starting OS</msg>
<status starttime="20170414 16:34:44.589" status="FAIL" endtime="20170414 16:34:44.590"></status>
</kw>
<status starttime="20170414 16:34:44.323" status="FAIL" endtime="20170414 16:34:44.590"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:34:54.594">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:34:54.594" status="PASS" endtime="20170414 16:34:54.594"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:34:54.595">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:34:54.595" status="PASS" endtime="20170414 16:34:54.595"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:34:54.596">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:34:54.595" status="PASS" endtime="20170414 16:34:54.596"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:34:54.596">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:34:54.596" status="PASS" endtime="20170414 16:34:54.596"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:34:54.779">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:34:54.597" status="PASS" endtime="20170414 16:34:54.779"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:34:54.779">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:34:54.779">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:34:54.596" status="PASS" endtime="20170414 16:34:54.779"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:34:54.780">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:34:54.780" status="PASS" endtime="20170414 16:34:54.780"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:34:54.781">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:34:54.780" status="PASS" endtime="20170414 16:34:54.781"></status>
</kw>
<status starttime="20170414 16:34:54.593" status="PASS" endtime="20170414 16:34:54.781"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:34:54.781">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170414 16:34:54.781" status="PASS" endtime="20170414 16:34:54.782"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:34:54.784">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:34:54.783" status="PASS" endtime="20170414 16:34:54.784"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:34:54.785">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:34:54.784" status="PASS" endtime="20170414 16:34:54.785"></status>
</kw>
<status starttime="20170414 16:34:54.784" status="PASS" endtime="20170414 16:34:54.785"></status>
</kw>
<status starttime="20170414 16:34:54.782" status="PASS" endtime="20170414 16:34:54.785"></status>
</kw>
<status starttime="20170414 16:34:54.782" status="PASS" endtime="20170414 16:34:54.785"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:34:54.852">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170414 16:34:54.852">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:34:54.786" status="PASS" endtime="20170414 16:34:54.852"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:34:54.854">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:34:54.853" status="PASS" endtime="20170414 16:34:54.854"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:34:54.854">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:34:54.854" status="PASS" endtime="20170414 16:34:54.855"></status>
</kw>
<status starttime="20170414 16:34:54.854" status="PASS" endtime="20170414 16:34:54.855"></status>
</kw>
<status starttime="20170414 16:34:54.853" status="PASS" endtime="20170414 16:34:54.855"></status>
</kw>
<status starttime="20170414 16:34:54.852" status="PASS" endtime="20170414 16:34:54.855"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:34:54.855">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:34:54.592" status="PASS" endtime="20170414 16:34:54.855"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:34:54.856">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:34:54.855" status="PASS" endtime="20170414 16:34:54.856"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:34:54.856">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170414 16:34:54.856">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170414 16:34:54.856">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status starttime="20170414 16:34:54.856" status="PASS" endtime="20170414 16:34:54.856"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:34:54.857">${state} = Off</msg>
<status starttime="20170414 16:34:54.592" status="PASS" endtime="20170414 16:34:54.857"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:34:54.857">${boot_progress} = Off</msg>
<status starttime="20170414 16:34:54.591" status="PASS" endtime="20170414 16:34:54.857"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:34:54.858">Off != FW Progress, Starting OS</msg>
<status starttime="20170414 16:34:54.857" status="FAIL" endtime="20170414 16:34:54.858"></status>
</kw>
<status starttime="20170414 16:34:54.591" status="FAIL" endtime="20170414 16:34:54.858"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:35:04.861">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:35:04.861" status="PASS" endtime="20170414 16:35:04.862"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:35:04.863">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:35:04.862" status="PASS" endtime="20170414 16:35:04.863"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:35:04.863">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:35:04.863" status="PASS" endtime="20170414 16:35:04.863"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:35:04.864">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:35:04.863" status="PASS" endtime="20170414 16:35:04.864"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:35:05.054">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:35:04.864" status="PASS" endtime="20170414 16:35:05.054"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:35:05.054">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:35:05.054">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:35:04.864" status="PASS" endtime="20170414 16:35:05.054"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:35:05.055">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:35:05.055" status="PASS" endtime="20170414 16:35:05.055"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:35:05.056">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:35:05.055" status="PASS" endtime="20170414 16:35:05.056"></status>
</kw>
<status starttime="20170414 16:35:04.861" status="PASS" endtime="20170414 16:35:05.056"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:35:05.056">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170414 16:35:05.056" status="PASS" endtime="20170414 16:35:05.056"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:35:05.058">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:35:05.058" status="PASS" endtime="20170414 16:35:05.059"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:35:05.059">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:35:05.059" status="PASS" endtime="20170414 16:35:05.059"></status>
</kw>
<status starttime="20170414 16:35:05.059" status="PASS" endtime="20170414 16:35:05.060"></status>
</kw>
<status starttime="20170414 16:35:05.057" status="PASS" endtime="20170414 16:35:05.060"></status>
</kw>
<status starttime="20170414 16:35:05.057" status="PASS" endtime="20170414 16:35:05.060"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:35:05.189">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170414 16:35:05.189">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:35:05.060" status="PASS" endtime="20170414 16:35:05.189"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:35:05.191">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:35:05.191" status="PASS" endtime="20170414 16:35:05.191"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:35:05.192">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:35:05.192" status="PASS" endtime="20170414 16:35:05.192"></status>
</kw>
<status starttime="20170414 16:35:05.191" status="PASS" endtime="20170414 16:35:05.192"></status>
</kw>
<status starttime="20170414 16:35:05.190" status="PASS" endtime="20170414 16:35:05.193"></status>
</kw>
<status starttime="20170414 16:35:05.190" status="PASS" endtime="20170414 16:35:05.193"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:35:05.193">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:35:04.860" status="PASS" endtime="20170414 16:35:05.193"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:35:05.193">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:35:05.193" status="PASS" endtime="20170414 16:35:05.193"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:35:05.194">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170414 16:35:05.194">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170414 16:35:05.194">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status starttime="20170414 16:35:05.194" status="PASS" endtime="20170414 16:35:05.194"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:35:05.194">${state} = Off</msg>
<status starttime="20170414 16:35:04.859" status="PASS" endtime="20170414 16:35:05.194"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:35:05.195">${boot_progress} = Off</msg>
<status starttime="20170414 16:35:04.859" status="PASS" endtime="20170414 16:35:05.195"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:35:05.195">Off != FW Progress, Starting OS</msg>
<status starttime="20170414 16:35:05.195" status="FAIL" endtime="20170414 16:35:05.195"></status>
</kw>
<status starttime="20170414 16:35:04.858" status="FAIL" endtime="20170414 16:35:05.196"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:35:15.199">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:35:15.199" status="PASS" endtime="20170414 16:35:15.246"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:35:15.247">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:35:15.247" status="PASS" endtime="20170414 16:35:15.247"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:35:15.248">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:35:15.247" status="PASS" endtime="20170414 16:35:15.248"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:35:15.249">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:35:15.248" status="PASS" endtime="20170414 16:35:15.249"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:35:15.446">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:35:15.250" status="PASS" endtime="20170414 16:35:15.446"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:35:15.447">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:35:15.447">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:35:15.249" status="PASS" endtime="20170414 16:35:15.447"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:35:15.447">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:35:15.447" status="PASS" endtime="20170414 16:35:15.447"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:35:15.448">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:35:15.448" status="PASS" endtime="20170414 16:35:15.448"></status>
</kw>
<status starttime="20170414 16:35:15.198" status="PASS" endtime="20170414 16:35:15.448"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:35:15.449">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170414 16:35:15.448" status="PASS" endtime="20170414 16:35:15.449"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:35:15.451">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:35:15.450" status="PASS" endtime="20170414 16:35:15.451"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:35:15.452">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:35:15.452" status="PASS" endtime="20170414 16:35:15.452"></status>
</kw>
<status starttime="20170414 16:35:15.451" status="PASS" endtime="20170414 16:35:15.452"></status>
</kw>
<status starttime="20170414 16:35:15.449" status="PASS" endtime="20170414 16:35:15.453"></status>
</kw>
<status starttime="20170414 16:35:15.449" status="PASS" endtime="20170414 16:35:15.453"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:35:15.519">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170414 16:35:15.519">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:35:15.453" status="PASS" endtime="20170414 16:35:15.519"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:35:15.521">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:35:15.521" status="PASS" endtime="20170414 16:35:15.521"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:35:15.522">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:35:15.522" status="PASS" endtime="20170414 16:35:15.522"></status>
</kw>
<status starttime="20170414 16:35:15.521" status="PASS" endtime="20170414 16:35:15.522"></status>
</kw>
<status starttime="20170414 16:35:15.520" status="PASS" endtime="20170414 16:35:15.523"></status>
</kw>
<status starttime="20170414 16:35:15.520" status="PASS" endtime="20170414 16:35:15.523"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:35:15.523">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:35:15.198" status="PASS" endtime="20170414 16:35:15.523"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:35:15.523">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:35:15.523" status="PASS" endtime="20170414 16:35:15.523"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:35:15.524">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170414 16:35:15.524">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170414 16:35:15.524">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status starttime="20170414 16:35:15.524" status="PASS" endtime="20170414 16:35:15.524"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:35:15.524">${state} = Off</msg>
<status starttime="20170414 16:35:15.197" status="PASS" endtime="20170414 16:35:15.524"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:35:15.525">${boot_progress} = Off</msg>
<status starttime="20170414 16:35:15.197" status="PASS" endtime="20170414 16:35:15.525"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:35:15.525">Off != FW Progress, Starting OS</msg>
<status starttime="20170414 16:35:15.525" status="FAIL" endtime="20170414 16:35:15.525"></status>
</kw>
<status starttime="20170414 16:35:15.196" status="FAIL" endtime="20170414 16:35:15.526"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:35:25.529">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:35:25.529" status="PASS" endtime="20170414 16:35:25.530"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:35:25.530">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:35:25.530" status="PASS" endtime="20170414 16:35:25.530"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:35:25.531">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:35:25.530" status="PASS" endtime="20170414 16:35:25.531"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:35:25.531">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:35:25.531" status="PASS" endtime="20170414 16:35:25.532"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:35:25.718">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:35:25.532" status="PASS" endtime="20170414 16:35:25.718"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:35:25.718">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:35:25.718">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:35:25.532" status="PASS" endtime="20170414 16:35:25.718"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:35:25.718">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:35:25.718" status="PASS" endtime="20170414 16:35:25.719"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:35:25.719">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:35:25.719" status="PASS" endtime="20170414 16:35:25.719"></status>
</kw>
<status starttime="20170414 16:35:25.528" status="PASS" endtime="20170414 16:35:25.719"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:35:25.720">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170414 16:35:25.720" status="PASS" endtime="20170414 16:35:25.720"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:35:25.723">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:35:25.722" status="PASS" endtime="20170414 16:35:25.723"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:35:25.723">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:35:25.723" status="PASS" endtime="20170414 16:35:25.724"></status>
</kw>
<status starttime="20170414 16:35:25.723" status="PASS" endtime="20170414 16:35:25.724"></status>
</kw>
<status starttime="20170414 16:35:25.721" status="PASS" endtime="20170414 16:35:25.724"></status>
</kw>
<status starttime="20170414 16:35:25.720" status="PASS" endtime="20170414 16:35:25.724"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:35:25.791">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170414 16:35:25.791">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:35:25.724" status="PASS" endtime="20170414 16:35:25.791"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:35:25.793">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:35:25.792" status="PASS" endtime="20170414 16:35:25.793"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:35:25.794">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:35:25.793" status="PASS" endtime="20170414 16:35:25.794"></status>
</kw>
<status starttime="20170414 16:35:25.793" status="PASS" endtime="20170414 16:35:25.794"></status>
</kw>
<status starttime="20170414 16:35:25.792" status="PASS" endtime="20170414 16:35:25.794"></status>
</kw>
<status starttime="20170414 16:35:25.791" status="PASS" endtime="20170414 16:35:25.794"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:35:25.794">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:35:25.528" status="PASS" endtime="20170414 16:35:25.794"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:35:25.795">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:35:25.794" status="PASS" endtime="20170414 16:35:25.795"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:35:25.795">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170414 16:35:25.795">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170414 16:35:25.796">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status starttime="20170414 16:35:25.795" status="PASS" endtime="20170414 16:35:25.796"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:35:25.796">${state} = Off</msg>
<status starttime="20170414 16:35:25.527" status="PASS" endtime="20170414 16:35:25.796"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:35:25.796">${boot_progress} = Off</msg>
<status starttime="20170414 16:35:25.527" status="PASS" endtime="20170414 16:35:25.796"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:35:25.797">Off != FW Progress, Starting OS</msg>
<status starttime="20170414 16:35:25.796" status="FAIL" endtime="20170414 16:35:25.797"></status>
</kw>
<status starttime="20170414 16:35:25.526" status="FAIL" endtime="20170414 16:35:25.797"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:35:35.801">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:35:35.800" status="PASS" endtime="20170414 16:35:35.801"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:35:35.802">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:35:35.801" status="PASS" endtime="20170414 16:35:35.802"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:35:35.802">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:35:35.802" status="PASS" endtime="20170414 16:35:35.802"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:35:35.803">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:35:35.803" status="PASS" endtime="20170414 16:35:35.803"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:35:35.988">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:35:35.804" status="PASS" endtime="20170414 16:35:35.989"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:35:35.989">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:35:35.989">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:35:35.804" status="PASS" endtime="20170414 16:35:35.989"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:35:35.989">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:35:35.989" status="PASS" endtime="20170414 16:35:35.990"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:35:35.990">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:35:35.990" status="PASS" endtime="20170414 16:35:35.990"></status>
</kw>
<status starttime="20170414 16:35:35.800" status="PASS" endtime="20170414 16:35:35.990"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:35:35.991">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170414 16:35:35.991" status="PASS" endtime="20170414 16:35:35.991"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:35:35.993">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:35:35.992" status="PASS" endtime="20170414 16:35:35.993"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:35:35.994">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:35:35.994" status="PASS" endtime="20170414 16:35:35.994"></status>
</kw>
<status starttime="20170414 16:35:35.993" status="PASS" endtime="20170414 16:35:35.994"></status>
</kw>
<status starttime="20170414 16:35:35.992" status="PASS" endtime="20170414 16:35:35.994"></status>
</kw>
<status starttime="20170414 16:35:35.991" status="PASS" endtime="20170414 16:35:35.994"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:35:36.061">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170414 16:35:36.061">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:35:35.995" status="PASS" endtime="20170414 16:35:36.062"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:35:36.063">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:35:36.063" status="PASS" endtime="20170414 16:35:36.063"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:35:36.064">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:35:36.064" status="PASS" endtime="20170414 16:35:36.064"></status>
</kw>
<status starttime="20170414 16:35:36.063" status="PASS" endtime="20170414 16:35:36.064"></status>
</kw>
<status starttime="20170414 16:35:36.062" status="PASS" endtime="20170414 16:35:36.064"></status>
</kw>
<status starttime="20170414 16:35:36.062" status="PASS" endtime="20170414 16:35:36.065"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:35:36.065">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:35:35.799" status="PASS" endtime="20170414 16:35:36.065"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:35:36.065">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:35:36.065" status="PASS" endtime="20170414 16:35:36.065"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:35:36.066">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170414 16:35:36.066">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170414 16:35:36.066">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status starttime="20170414 16:35:36.066" status="PASS" endtime="20170414 16:35:36.066"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:35:36.066">${state} = Off</msg>
<status starttime="20170414 16:35:35.798" status="PASS" endtime="20170414 16:35:36.067"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:35:36.067">${boot_progress} = Off</msg>
<status starttime="20170414 16:35:35.798" status="PASS" endtime="20170414 16:35:36.067"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:35:36.067">Off != FW Progress, Starting OS</msg>
<status starttime="20170414 16:35:36.067" status="FAIL" endtime="20170414 16:35:36.067"></status>
</kw>
<status starttime="20170414 16:35:35.797" status="FAIL" endtime="20170414 16:35:36.068"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:35:46.071">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:35:46.071" status="PASS" endtime="20170414 16:35:46.072"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:35:46.072">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:35:46.072" status="PASS" endtime="20170414 16:35:46.073"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:35:46.073">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:35:46.073" status="PASS" endtime="20170414 16:35:46.073"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:35:46.074">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:35:46.073" status="PASS" endtime="20170414 16:35:46.074"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:35:46.265">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:35:46.074" status="PASS" endtime="20170414 16:35:46.265"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:35:46.265">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:35:46.265">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:35:46.074" status="PASS" endtime="20170414 16:35:46.265"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:35:46.266">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:35:46.266" status="PASS" endtime="20170414 16:35:46.266"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:35:46.267">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:35:46.266" status="PASS" endtime="20170414 16:35:46.267"></status>
</kw>
<status starttime="20170414 16:35:46.071" status="PASS" endtime="20170414 16:35:46.267"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:35:46.267">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170414 16:35:46.267" status="PASS" endtime="20170414 16:35:46.268"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:35:46.270">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:35:46.269" status="PASS" endtime="20170414 16:35:46.270"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:35:46.271">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:35:46.270" status="PASS" endtime="20170414 16:35:46.271"></status>
</kw>
<status starttime="20170414 16:35:46.270" status="PASS" endtime="20170414 16:35:46.271"></status>
</kw>
<status starttime="20170414 16:35:46.268" status="PASS" endtime="20170414 16:35:46.271"></status>
</kw>
<status starttime="20170414 16:35:46.268" status="PASS" endtime="20170414 16:35:46.271"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:35:46.337">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170414 16:35:46.337">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:35:46.271" status="PASS" endtime="20170414 16:35:46.338"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:35:46.339">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:35:46.339" status="PASS" endtime="20170414 16:35:46.339"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:35:46.340">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:35:46.340" status="PASS" endtime="20170414 16:35:46.340"></status>
</kw>
<status starttime="20170414 16:35:46.339" status="PASS" endtime="20170414 16:35:46.340"></status>
</kw>
<status starttime="20170414 16:35:46.338" status="PASS" endtime="20170414 16:35:46.340"></status>
</kw>
<status starttime="20170414 16:35:46.338" status="PASS" endtime="20170414 16:35:46.340"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:35:46.341">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:35:46.070" status="PASS" endtime="20170414 16:35:46.341"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:35:46.341">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:35:46.341" status="PASS" endtime="20170414 16:35:46.341"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:35:46.342">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170414 16:35:46.342">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170414 16:35:46.342">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status starttime="20170414 16:35:46.342" status="PASS" endtime="20170414 16:35:46.342"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:35:46.342">${state} = Off</msg>
<status starttime="20170414 16:35:46.069" status="PASS" endtime="20170414 16:35:46.342"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:35:46.343">${boot_progress} = Off</msg>
<status starttime="20170414 16:35:46.069" status="PASS" endtime="20170414 16:35:46.343"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:35:46.343">Off != FW Progress, Starting OS</msg>
<status starttime="20170414 16:35:46.343" status="FAIL" endtime="20170414 16:35:46.343"></status>
</kw>
<status starttime="20170414 16:35:46.068" status="FAIL" endtime="20170414 16:35:46.343"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:35:56.347">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:35:56.347" status="PASS" endtime="20170414 16:35:56.347"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:35:56.348">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:35:56.348" status="PASS" endtime="20170414 16:35:56.348"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:35:56.349">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:35:56.348" status="PASS" endtime="20170414 16:35:56.349"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:35:56.349">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:35:56.349" status="PASS" endtime="20170414 16:35:56.349"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:35:56.537">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:35:56.350" status="PASS" endtime="20170414 16:35:56.537"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:35:56.537">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:35:56.537">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:35:56.350" status="PASS" endtime="20170414 16:35:56.537"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:35:56.538">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:35:56.537" status="PASS" endtime="20170414 16:35:56.538"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:35:56.538">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:35:56.538" status="PASS" endtime="20170414 16:35:56.538"></status>
</kw>
<status starttime="20170414 16:35:56.346" status="PASS" endtime="20170414 16:35:56.538"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:35:56.539">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170414 16:35:56.539" status="PASS" endtime="20170414 16:35:56.539"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:35:56.541">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:35:56.540" status="PASS" endtime="20170414 16:35:56.541"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:35:56.542">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:35:56.542" status="PASS" endtime="20170414 16:35:56.542"></status>
</kw>
<status starttime="20170414 16:35:56.541" status="PASS" endtime="20170414 16:35:56.542"></status>
</kw>
<status starttime="20170414 16:35:56.540" status="PASS" endtime="20170414 16:35:56.542"></status>
</kw>
<status starttime="20170414 16:35:56.539" status="PASS" endtime="20170414 16:35:56.542"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:35:56.740">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170414 16:35:56.740">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:35:56.543" status="PASS" endtime="20170414 16:35:56.740"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:35:56.742">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:35:56.742" status="PASS" endtime="20170414 16:35:56.742"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:35:56.743">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:35:56.743" status="PASS" endtime="20170414 16:35:56.743"></status>
</kw>
<status starttime="20170414 16:35:56.742" status="PASS" endtime="20170414 16:35:56.743"></status>
</kw>
<status starttime="20170414 16:35:56.741" status="PASS" endtime="20170414 16:35:56.743"></status>
</kw>
<status starttime="20170414 16:35:56.741" status="PASS" endtime="20170414 16:35:56.743"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:35:56.744">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:35:56.345" status="PASS" endtime="20170414 16:35:56.744"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:35:56.744">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:35:56.744" status="PASS" endtime="20170414 16:35:56.744"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:35:56.745">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170414 16:35:56.745">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170414 16:35:56.745">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status starttime="20170414 16:35:56.744" status="PASS" endtime="20170414 16:35:56.745"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:35:56.745">${state} = Off</msg>
<status starttime="20170414 16:35:56.345" status="PASS" endtime="20170414 16:35:56.745"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:35:56.746">${boot_progress} = Off</msg>
<status starttime="20170414 16:35:56.344" status="PASS" endtime="20170414 16:35:56.746"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:35:56.746">Off != FW Progress, Starting OS</msg>
<status starttime="20170414 16:35:56.746" status="FAIL" endtime="20170414 16:35:56.746"></status>
</kw>
<status starttime="20170414 16:35:56.344" status="FAIL" endtime="20170414 16:35:56.746"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:36:06.750">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:36:06.750" status="PASS" endtime="20170414 16:36:06.751"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:36:06.751">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:36:06.751" status="PASS" endtime="20170414 16:36:06.751"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:36:06.752">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:36:06.751" status="PASS" endtime="20170414 16:36:06.752"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:36:06.752">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:36:06.752" status="PASS" endtime="20170414 16:36:06.752"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:36:06.940">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:36:06.753" status="PASS" endtime="20170414 16:36:06.940"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:36:06.940">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:36:06.940">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:36:06.753" status="PASS" endtime="20170414 16:36:06.940"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:36:06.941">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:36:06.941" status="PASS" endtime="20170414 16:36:06.941"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:36:06.942">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:36:06.941" status="PASS" endtime="20170414 16:36:06.942"></status>
</kw>
<status starttime="20170414 16:36:06.749" status="PASS" endtime="20170414 16:36:06.942"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:36:06.942">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170414 16:36:06.942" status="PASS" endtime="20170414 16:36:06.942"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:36:06.945">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:36:06.944" status="PASS" endtime="20170414 16:36:06.945"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:36:06.945">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:36:06.945" status="PASS" endtime="20170414 16:36:06.946"></status>
</kw>
<status starttime="20170414 16:36:06.945" status="PASS" endtime="20170414 16:36:06.946"></status>
</kw>
<status starttime="20170414 16:36:06.943" status="PASS" endtime="20170414 16:36:06.946"></status>
</kw>
<status starttime="20170414 16:36:06.943" status="PASS" endtime="20170414 16:36:06.946"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:36:07.013">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170414 16:36:07.013">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:36:06.946" status="PASS" endtime="20170414 16:36:07.013"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:36:07.015">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:36:07.014" status="PASS" endtime="20170414 16:36:07.015"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:36:07.016">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:36:07.016" status="PASS" endtime="20170414 16:36:07.016"></status>
</kw>
<status starttime="20170414 16:36:07.015" status="PASS" endtime="20170414 16:36:07.016"></status>
</kw>
<status starttime="20170414 16:36:07.014" status="PASS" endtime="20170414 16:36:07.017"></status>
</kw>
<status starttime="20170414 16:36:07.013" status="PASS" endtime="20170414 16:36:07.017"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:36:07.017">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:36:06.748" status="PASS" endtime="20170414 16:36:07.017"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:36:07.017">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:36:07.017" status="PASS" endtime="20170414 16:36:07.017"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:36:07.018">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170414 16:36:07.018">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170414 16:36:07.018">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status starttime="20170414 16:36:07.018" status="PASS" endtime="20170414 16:36:07.018"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:36:07.018">${state} = Off</msg>
<status starttime="20170414 16:36:06.748" status="PASS" endtime="20170414 16:36:07.018"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:36:07.019">${boot_progress} = Off</msg>
<status starttime="20170414 16:36:06.747" status="PASS" endtime="20170414 16:36:07.019"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:36:07.019">Off != FW Progress, Starting OS</msg>
<status starttime="20170414 16:36:07.019" status="FAIL" endtime="20170414 16:36:07.019"></status>
</kw>
<status starttime="20170414 16:36:06.747" status="FAIL" endtime="20170414 16:36:07.020"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:36:17.023">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:36:17.023" status="PASS" endtime="20170414 16:36:17.024"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:36:17.024">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:36:17.024" status="PASS" endtime="20170414 16:36:17.024"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:36:17.025">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:36:17.024" status="PASS" endtime="20170414 16:36:17.025"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:36:17.025">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:36:17.025" status="PASS" endtime="20170414 16:36:17.025"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:36:17.203">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:36:17.026" status="PASS" endtime="20170414 16:36:17.203"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:36:17.203">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:36:17.203">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:36:17.026" status="PASS" endtime="20170414 16:36:17.203"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:36:17.204">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:36:17.204" status="PASS" endtime="20170414 16:36:17.204"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:36:17.205">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:36:17.204" status="PASS" endtime="20170414 16:36:17.205"></status>
</kw>
<status starttime="20170414 16:36:17.022" status="PASS" endtime="20170414 16:36:17.205"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:36:17.205">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170414 16:36:17.205" status="PASS" endtime="20170414 16:36:17.205"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:36:17.208">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:36:17.207" status="PASS" endtime="20170414 16:36:17.208"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:36:17.209">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:36:17.208" status="PASS" endtime="20170414 16:36:17.209"></status>
</kw>
<status starttime="20170414 16:36:17.208" status="PASS" endtime="20170414 16:36:17.209"></status>
</kw>
<status starttime="20170414 16:36:17.206" status="PASS" endtime="20170414 16:36:17.209"></status>
</kw>
<status starttime="20170414 16:36:17.206" status="PASS" endtime="20170414 16:36:17.209"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:36:17.276">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170414 16:36:17.276">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:36:17.209" status="PASS" endtime="20170414 16:36:17.276"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:36:17.278">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:36:17.277" status="PASS" endtime="20170414 16:36:17.278"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:36:17.279">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:36:17.279" status="PASS" endtime="20170414 16:36:17.279"></status>
</kw>
<status starttime="20170414 16:36:17.278" status="PASS" endtime="20170414 16:36:17.279"></status>
</kw>
<status starttime="20170414 16:36:17.277" status="PASS" endtime="20170414 16:36:17.279"></status>
</kw>
<status starttime="20170414 16:36:17.277" status="PASS" endtime="20170414 16:36:17.279"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:36:17.279">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:36:17.022" status="PASS" endtime="20170414 16:36:17.280"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:36:17.280">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:36:17.280" status="PASS" endtime="20170414 16:36:17.280"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:36:17.281">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170414 16:36:17.281">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170414 16:36:17.281">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status starttime="20170414 16:36:17.280" status="PASS" endtime="20170414 16:36:17.281"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:36:17.281">${state} = Off</msg>
<status starttime="20170414 16:36:17.021" status="PASS" endtime="20170414 16:36:17.281"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:36:17.281">${boot_progress} = Off</msg>
<status starttime="20170414 16:36:17.021" status="PASS" endtime="20170414 16:36:17.281"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:36:17.282">Off != FW Progress, Starting OS</msg>
<status starttime="20170414 16:36:17.282" status="FAIL" endtime="20170414 16:36:17.282"></status>
</kw>
<status starttime="20170414 16:36:17.020" status="FAIL" endtime="20170414 16:36:17.282"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:36:27.286">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:36:27.286" status="PASS" endtime="20170414 16:36:27.287"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:36:27.287">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:36:27.287" status="PASS" endtime="20170414 16:36:27.287"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:36:27.288">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:36:27.287" status="PASS" endtime="20170414 16:36:27.288"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:36:27.288">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:36:27.288" status="PASS" endtime="20170414 16:36:27.288"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:36:27.465">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:36:27.289" status="PASS" endtime="20170414 16:36:27.465"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:36:27.465">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:36:27.465">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:36:27.289" status="PASS" endtime="20170414 16:36:27.465"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:36:27.466">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:36:27.465" status="PASS" endtime="20170414 16:36:27.466"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:36:27.466">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:36:27.466" status="PASS" endtime="20170414 16:36:27.467"></status>
</kw>
<status starttime="20170414 16:36:27.285" status="PASS" endtime="20170414 16:36:27.467"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:36:27.467">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170414 16:36:27.467" status="PASS" endtime="20170414 16:36:27.467"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:36:27.469">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:36:27.469" status="PASS" endtime="20170414 16:36:27.469"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:36:27.470">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:36:27.470" status="PASS" endtime="20170414 16:36:27.470"></status>
</kw>
<status starttime="20170414 16:36:27.469" status="PASS" endtime="20170414 16:36:27.470"></status>
</kw>
<status starttime="20170414 16:36:27.468" status="PASS" endtime="20170414 16:36:27.471"></status>
</kw>
<status starttime="20170414 16:36:27.468" status="PASS" endtime="20170414 16:36:27.471"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:36:27.537">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170414 16:36:27.537">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:36:27.471" status="PASS" endtime="20170414 16:36:27.537"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:36:27.539">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:36:27.538" status="PASS" endtime="20170414 16:36:27.539"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:36:27.540">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:36:27.540" status="PASS" endtime="20170414 16:36:27.540"></status>
</kw>
<status starttime="20170414 16:36:27.539" status="PASS" endtime="20170414 16:36:27.540"></status>
</kw>
<status starttime="20170414 16:36:27.538" status="PASS" endtime="20170414 16:36:27.540"></status>
</kw>
<status starttime="20170414 16:36:27.537" status="PASS" endtime="20170414 16:36:27.540"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:36:27.540">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:36:27.285" status="PASS" endtime="20170414 16:36:27.540"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:36:27.541">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:36:27.541" status="PASS" endtime="20170414 16:36:27.541"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:36:27.542">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170414 16:36:27.542">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170414 16:36:27.542">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status starttime="20170414 16:36:27.541" status="PASS" endtime="20170414 16:36:27.542"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:36:27.542">${state} = Off</msg>
<status starttime="20170414 16:36:27.284" status="PASS" endtime="20170414 16:36:27.542"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:36:27.542">${boot_progress} = Off</msg>
<status starttime="20170414 16:36:27.283" status="PASS" endtime="20170414 16:36:27.542"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:36:27.543">Off != FW Progress, Starting OS</msg>
<status starttime="20170414 16:36:27.543" status="FAIL" endtime="20170414 16:36:27.543"></status>
</kw>
<status starttime="20170414 16:36:27.283" status="FAIL" endtime="20170414 16:36:27.543"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:36:37.547">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:36:37.547" status="PASS" endtime="20170414 16:36:37.548"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:36:37.548">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:36:37.548" status="PASS" endtime="20170414 16:36:37.548"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:36:37.549">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:36:37.548" status="PASS" endtime="20170414 16:36:37.549"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:36:37.550">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:36:37.549" status="PASS" endtime="20170414 16:36:37.550"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:36:37.725">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:36:37.550" status="PASS" endtime="20170414 16:36:37.725"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:36:37.725">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:36:37.725">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:36:37.550" status="PASS" endtime="20170414 16:36:37.725"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:36:37.726">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:36:37.725" status="PASS" endtime="20170414 16:36:37.726"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:36:37.726">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:36:37.726" status="PASS" endtime="20170414 16:36:37.727"></status>
</kw>
<status starttime="20170414 16:36:37.546" status="PASS" endtime="20170414 16:36:37.727"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:36:37.727">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170414 16:36:37.727" status="PASS" endtime="20170414 16:36:37.727"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:36:37.729">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:36:37.729" status="PASS" endtime="20170414 16:36:37.729"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:36:37.730">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:36:37.730" status="PASS" endtime="20170414 16:36:37.730"></status>
</kw>
<status starttime="20170414 16:36:37.729" status="PASS" endtime="20170414 16:36:37.730"></status>
</kw>
<status starttime="20170414 16:36:37.728" status="PASS" endtime="20170414 16:36:37.731"></status>
</kw>
<status starttime="20170414 16:36:37.728" status="PASS" endtime="20170414 16:36:37.731"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:36:37.797">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170414 16:36:37.797">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:36:37.731" status="PASS" endtime="20170414 16:36:37.797"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:36:37.800">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:36:37.800" status="PASS" endtime="20170414 16:36:37.800"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:36:37.801">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:36:37.801" status="PASS" endtime="20170414 16:36:37.801"></status>
</kw>
<status starttime="20170414 16:36:37.801" status="PASS" endtime="20170414 16:36:37.802"></status>
</kw>
<status starttime="20170414 16:36:37.798" status="PASS" endtime="20170414 16:36:37.802"></status>
</kw>
<status starttime="20170414 16:36:37.797" status="PASS" endtime="20170414 16:36:37.802"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:36:37.802">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:36:37.545" status="PASS" endtime="20170414 16:36:37.802"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:36:37.803">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:36:37.802" status="PASS" endtime="20170414 16:36:37.803"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:36:37.803">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170414 16:36:37.803">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170414 16:36:37.803">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status starttime="20170414 16:36:37.803" status="PASS" endtime="20170414 16:36:37.803"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:36:37.804">${state} = Off</msg>
<status starttime="20170414 16:36:37.545" status="PASS" endtime="20170414 16:36:37.804"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:36:37.804">${boot_progress} = Off</msg>
<status starttime="20170414 16:36:37.544" status="PASS" endtime="20170414 16:36:37.804"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:36:37.805">Off != FW Progress, Starting OS</msg>
<status starttime="20170414 16:36:37.804" status="FAIL" endtime="20170414 16:36:37.805"></status>
</kw>
<status starttime="20170414 16:36:37.544" status="FAIL" endtime="20170414 16:36:37.805"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:36:47.808">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:36:47.808" status="PASS" endtime="20170414 16:36:47.809"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:36:47.809">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:36:47.809" status="PASS" endtime="20170414 16:36:47.809"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:36:47.810">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:36:47.810" status="PASS" endtime="20170414 16:36:47.810"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:36:47.811">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:36:47.810" status="PASS" endtime="20170414 16:36:47.811"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:36:47.988">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:36:47.811" status="PASS" endtime="20170414 16:36:47.988"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:36:47.988">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:36:47.988">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:36:47.811" status="PASS" endtime="20170414 16:36:47.988"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:36:47.988">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:36:47.988" status="PASS" endtime="20170414 16:36:47.989"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:36:47.989">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:36:47.989" status="PASS" endtime="20170414 16:36:47.989"></status>
</kw>
<status starttime="20170414 16:36:47.807" status="PASS" endtime="20170414 16:36:47.989"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:36:47.990">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170414 16:36:47.990" status="PASS" endtime="20170414 16:36:47.990"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:36:47.992">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:36:47.992" status="PASS" endtime="20170414 16:36:47.992"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:36:47.993">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:36:47.993" status="PASS" endtime="20170414 16:36:47.993"></status>
</kw>
<status starttime="20170414 16:36:47.993" status="PASS" endtime="20170414 16:36:47.994"></status>
</kw>
<status starttime="20170414 16:36:47.991" status="PASS" endtime="20170414 16:36:47.994"></status>
</kw>
<status starttime="20170414 16:36:47.990" status="PASS" endtime="20170414 16:36:47.994"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:36:48.060">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170414 16:36:48.060">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:36:47.994" status="PASS" endtime="20170414 16:36:48.060"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:36:48.062">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:36:48.061" status="PASS" endtime="20170414 16:36:48.062"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:36:48.063">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:36:48.063" status="PASS" endtime="20170414 16:36:48.063"></status>
</kw>
<status starttime="20170414 16:36:48.062" status="PASS" endtime="20170414 16:36:48.063"></status>
</kw>
<status starttime="20170414 16:36:48.061" status="PASS" endtime="20170414 16:36:48.063"></status>
</kw>
<status starttime="20170414 16:36:48.060" status="PASS" endtime="20170414 16:36:48.063"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:36:48.063">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:36:47.807" status="PASS" endtime="20170414 16:36:48.064"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:36:48.064">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:36:48.064" status="PASS" endtime="20170414 16:36:48.064"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:36:48.065">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170414 16:36:48.065">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170414 16:36:48.065">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status starttime="20170414 16:36:48.064" status="PASS" endtime="20170414 16:36:48.065"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:36:48.065">${state} = Off</msg>
<status starttime="20170414 16:36:47.806" status="PASS" endtime="20170414 16:36:48.065"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:36:48.065">${boot_progress} = Off</msg>
<status starttime="20170414 16:36:47.806" status="PASS" endtime="20170414 16:36:48.065"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:36:48.066">Off != FW Progress, Starting OS</msg>
<status starttime="20170414 16:36:48.066" status="FAIL" endtime="20170414 16:36:48.066"></status>
</kw>
<status starttime="20170414 16:36:47.805" status="FAIL" endtime="20170414 16:36:48.066"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:36:58.070">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:36:58.070" status="PASS" endtime="20170414 16:36:58.070"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:36:58.071">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:36:58.071" status="PASS" endtime="20170414 16:36:58.071"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:36:58.072">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:36:58.071" status="PASS" endtime="20170414 16:36:58.072"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:36:58.072">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:36:58.072" status="PASS" endtime="20170414 16:36:58.072"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:36:58.256">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:36:58.073" status="PASS" endtime="20170414 16:36:58.256"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:36:58.256">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:36:58.257">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:36:58.073" status="PASS" endtime="20170414 16:36:58.257"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:36:58.257">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:36:58.257" status="PASS" endtime="20170414 16:36:58.257"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:36:58.258">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:36:58.258" status="PASS" endtime="20170414 16:36:58.258"></status>
</kw>
<status starttime="20170414 16:36:58.069" status="PASS" endtime="20170414 16:36:58.258"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:36:58.259">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170414 16:36:58.258" status="PASS" endtime="20170414 16:36:58.259"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:36:58.261">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:36:58.260" status="PASS" endtime="20170414 16:36:58.261"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:36:58.262">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:36:58.262" status="PASS" endtime="20170414 16:36:58.262"></status>
</kw>
<status starttime="20170414 16:36:58.261" status="PASS" endtime="20170414 16:36:58.262"></status>
</kw>
<status starttime="20170414 16:36:58.260" status="PASS" endtime="20170414 16:36:58.262"></status>
</kw>
<status starttime="20170414 16:36:58.259" status="PASS" endtime="20170414 16:36:58.262"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:36:58.329">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170414 16:36:58.330">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:36:58.263" status="PASS" endtime="20170414 16:36:58.330"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:36:58.331">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:36:58.331" status="PASS" endtime="20170414 16:36:58.331"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:36:58.332">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:36:58.332" status="PASS" endtime="20170414 16:36:58.332"></status>
</kw>
<status starttime="20170414 16:36:58.331" status="PASS" endtime="20170414 16:36:58.332"></status>
</kw>
<status starttime="20170414 16:36:58.330" status="PASS" endtime="20170414 16:36:58.333"></status>
</kw>
<status starttime="20170414 16:36:58.330" status="PASS" endtime="20170414 16:36:58.333"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:36:58.333">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:36:58.068" status="PASS" endtime="20170414 16:36:58.333"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:36:58.333">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:36:58.333" status="PASS" endtime="20170414 16:36:58.333"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:36:58.334">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170414 16:36:58.334">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170414 16:36:58.334">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status starttime="20170414 16:36:58.334" status="PASS" endtime="20170414 16:36:58.334"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:36:58.334">${state} = Off</msg>
<status starttime="20170414 16:36:58.068" status="PASS" endtime="20170414 16:36:58.335"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:36:58.335">${boot_progress} = Off</msg>
<status starttime="20170414 16:36:58.067" status="PASS" endtime="20170414 16:36:58.335"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:36:58.335">Off != FW Progress, Starting OS</msg>
<status starttime="20170414 16:36:58.335" status="FAIL" endtime="20170414 16:36:58.335"></status>
</kw>
<status starttime="20170414 16:36:58.067" status="FAIL" endtime="20170414 16:36:58.336"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:37:08.339">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:37:08.339" status="PASS" endtime="20170414 16:37:08.340"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:37:08.340">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:37:08.340" status="PASS" endtime="20170414 16:37:08.340"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:37:08.341">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:37:08.341" status="PASS" endtime="20170414 16:37:08.341"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:37:08.342">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:37:08.341" status="PASS" endtime="20170414 16:37:08.342"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:37:08.535">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:37:08.343" status="PASS" endtime="20170414 16:37:08.535"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:37:08.535">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:37:08.535">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:37:08.342" status="PASS" endtime="20170414 16:37:08.535"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:37:08.536">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:37:08.536" status="PASS" endtime="20170414 16:37:08.536"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:37:08.537">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:37:08.536" status="PASS" endtime="20170414 16:37:08.537"></status>
</kw>
<status starttime="20170414 16:37:08.338" status="PASS" endtime="20170414 16:37:08.537"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:37:08.537">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170414 16:37:08.537" status="PASS" endtime="20170414 16:37:08.537"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:37:08.539">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:37:08.539" status="PASS" endtime="20170414 16:37:08.539"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:37:08.540">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:37:08.540" status="PASS" endtime="20170414 16:37:08.540"></status>
</kw>
<status starttime="20170414 16:37:08.540" status="PASS" endtime="20170414 16:37:08.541"></status>
</kw>
<status starttime="20170414 16:37:08.538" status="PASS" endtime="20170414 16:37:08.541"></status>
</kw>
<status starttime="20170414 16:37:08.538" status="PASS" endtime="20170414 16:37:08.541"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:37:08.608">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170414 16:37:08.608">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:37:08.541" status="PASS" endtime="20170414 16:37:08.608"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:37:08.609">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:37:08.609" status="PASS" endtime="20170414 16:37:08.609"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:37:08.611">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:37:08.610" status="PASS" endtime="20170414 16:37:08.611"></status>
</kw>
<status starttime="20170414 16:37:08.610" status="PASS" endtime="20170414 16:37:08.611"></status>
</kw>
<status starttime="20170414 16:37:08.608" status="PASS" endtime="20170414 16:37:08.611"></status>
</kw>
<status starttime="20170414 16:37:08.608" status="PASS" endtime="20170414 16:37:08.611"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:37:08.611">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:37:08.337" status="PASS" endtime="20170414 16:37:08.611"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:37:08.612">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:37:08.612" status="PASS" endtime="20170414 16:37:08.612"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:37:08.612">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170414 16:37:08.613">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170414 16:37:08.613">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status starttime="20170414 16:37:08.612" status="PASS" endtime="20170414 16:37:08.613"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:37:08.613">${state} = Off</msg>
<status starttime="20170414 16:37:08.337" status="PASS" endtime="20170414 16:37:08.613"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:37:08.613">${boot_progress} = Off</msg>
<status starttime="20170414 16:37:08.337" status="PASS" endtime="20170414 16:37:08.613"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:37:08.614">Off != FW Progress, Starting OS</msg>
<status starttime="20170414 16:37:08.614" status="FAIL" endtime="20170414 16:37:08.614"></status>
</kw>
<status starttime="20170414 16:37:08.336" status="FAIL" endtime="20170414 16:37:08.614"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:37:18.618">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:37:18.618" status="PASS" endtime="20170414 16:37:18.618"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:37:18.619">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:37:18.619" status="PASS" endtime="20170414 16:37:18.619"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:37:18.620">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:37:18.619" status="PASS" endtime="20170414 16:37:18.620"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:37:18.620">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:37:18.620" status="PASS" endtime="20170414 16:37:18.620"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:37:18.796">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:37:18.621" status="PASS" endtime="20170414 16:37:18.796"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:37:18.796">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:37:18.796">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:37:18.620" status="PASS" endtime="20170414 16:37:18.796"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:37:18.797">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:37:18.796" status="PASS" endtime="20170414 16:37:18.797"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:37:18.797">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:37:18.797" status="PASS" endtime="20170414 16:37:18.798"></status>
</kw>
<status starttime="20170414 16:37:18.617" status="PASS" endtime="20170414 16:37:18.798"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:37:18.798">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170414 16:37:18.798" status="PASS" endtime="20170414 16:37:18.798"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:37:18.801">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:37:18.800" status="PASS" endtime="20170414 16:37:18.801"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:37:18.801">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:37:18.801" status="PASS" endtime="20170414 16:37:18.802"></status>
</kw>
<status starttime="20170414 16:37:18.801" status="PASS" endtime="20170414 16:37:18.802"></status>
</kw>
<status starttime="20170414 16:37:18.799" status="PASS" endtime="20170414 16:37:18.802"></status>
</kw>
<status starttime="20170414 16:37:18.798" status="PASS" endtime="20170414 16:37:18.802"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:37:18.868">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170414 16:37:18.868">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:37:18.802" status="PASS" endtime="20170414 16:37:18.869"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:37:18.870">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:37:18.870" status="PASS" endtime="20170414 16:37:18.870"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:37:18.871">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:37:18.871" status="PASS" endtime="20170414 16:37:18.871"></status>
</kw>
<status starttime="20170414 16:37:18.870" status="PASS" endtime="20170414 16:37:18.871"></status>
</kw>
<status starttime="20170414 16:37:18.869" status="PASS" endtime="20170414 16:37:18.871"></status>
</kw>
<status starttime="20170414 16:37:18.869" status="PASS" endtime="20170414 16:37:18.872"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:37:18.872">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:37:18.616" status="PASS" endtime="20170414 16:37:18.872"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:37:18.872">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:37:18.872" status="PASS" endtime="20170414 16:37:18.872"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:37:18.873">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170414 16:37:18.873">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170414 16:37:18.873">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status starttime="20170414 16:37:18.873" status="PASS" endtime="20170414 16:37:18.873"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:37:18.873">${state} = Off</msg>
<status starttime="20170414 16:37:18.616" status="PASS" endtime="20170414 16:37:18.873"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:37:18.874">${boot_progress} = Off</msg>
<status starttime="20170414 16:37:18.615" status="PASS" endtime="20170414 16:37:18.874"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:37:18.874">Off != FW Progress, Starting OS</msg>
<status starttime="20170414 16:37:18.874" status="FAIL" endtime="20170414 16:37:18.874"></status>
</kw>
<status starttime="20170414 16:37:18.615" status="FAIL" endtime="20170414 16:37:18.875"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:37:28.878">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:37:28.878" status="PASS" endtime="20170414 16:37:28.878"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:37:28.879">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:37:28.879" status="PASS" endtime="20170414 16:37:28.879"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:37:28.880">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:37:28.879" status="PASS" endtime="20170414 16:37:28.880"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:37:28.880">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:37:28.880" status="PASS" endtime="20170414 16:37:28.880"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:37:29.056">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:37:28.881" status="PASS" endtime="20170414 16:37:29.056"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:37:29.057">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:37:29.057">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:37:28.880" status="PASS" endtime="20170414 16:37:29.057"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:37:29.057">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:37:29.057" status="PASS" endtime="20170414 16:37:29.057"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:37:29.058">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:37:29.058" status="PASS" endtime="20170414 16:37:29.058"></status>
</kw>
<status starttime="20170414 16:37:28.877" status="PASS" endtime="20170414 16:37:29.058"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:37:29.059">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170414 16:37:29.059" status="PASS" endtime="20170414 16:37:29.059"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:37:29.061">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:37:29.060" status="PASS" endtime="20170414 16:37:29.061"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:37:29.062">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:37:29.062" status="PASS" endtime="20170414 16:37:29.062"></status>
</kw>
<status starttime="20170414 16:37:29.061" status="PASS" endtime="20170414 16:37:29.062"></status>
</kw>
<status starttime="20170414 16:37:29.060" status="PASS" endtime="20170414 16:37:29.062"></status>
</kw>
<status starttime="20170414 16:37:29.059" status="PASS" endtime="20170414 16:37:29.062"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:37:29.130">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170414 16:37:29.130">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:37:29.063" status="PASS" endtime="20170414 16:37:29.130"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:37:29.132">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:37:29.131" status="PASS" endtime="20170414 16:37:29.132"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:37:29.133">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:37:29.132" status="PASS" endtime="20170414 16:37:29.133"></status>
</kw>
<status starttime="20170414 16:37:29.132" status="PASS" endtime="20170414 16:37:29.133"></status>
</kw>
<status starttime="20170414 16:37:29.131" status="PASS" endtime="20170414 16:37:29.133"></status>
</kw>
<status starttime="20170414 16:37:29.130" status="PASS" endtime="20170414 16:37:29.133"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:37:29.133">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:37:28.876" status="PASS" endtime="20170414 16:37:29.133"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:37:29.134">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:37:29.133" status="PASS" endtime="20170414 16:37:29.134"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:37:29.134">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170414 16:37:29.134">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170414 16:37:29.135">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status starttime="20170414 16:37:29.134" status="PASS" endtime="20170414 16:37:29.135"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:37:29.135">${state} = Off</msg>
<status starttime="20170414 16:37:28.876" status="PASS" endtime="20170414 16:37:29.135"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:37:29.135">${boot_progress} = Off</msg>
<status starttime="20170414 16:37:28.875" status="PASS" endtime="20170414 16:37:29.135"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:37:29.136">Off != FW Progress, Starting OS</msg>
<status starttime="20170414 16:37:29.135" status="FAIL" endtime="20170414 16:37:29.136"></status>
</kw>
<status starttime="20170414 16:37:28.875" status="FAIL" endtime="20170414 16:37:29.136"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:37:39.140">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:37:39.139" status="PASS" endtime="20170414 16:37:39.140"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:37:39.141">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:37:39.141" status="PASS" endtime="20170414 16:37:39.141"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:37:39.142">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:37:39.141" status="PASS" endtime="20170414 16:37:39.142"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:37:39.142">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:37:39.142" status="PASS" endtime="20170414 16:37:39.142"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:37:39.317">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:37:39.143" status="PASS" endtime="20170414 16:37:39.317"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:37:39.317">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:37:39.317">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:37:39.143" status="PASS" endtime="20170414 16:37:39.317"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:37:39.317">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:37:39.317" status="PASS" endtime="20170414 16:37:39.318"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:37:39.318">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:37:39.318" status="PASS" endtime="20170414 16:37:39.318"></status>
</kw>
<status starttime="20170414 16:37:39.139" status="PASS" endtime="20170414 16:37:39.318"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:37:39.319">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170414 16:37:39.319" status="PASS" endtime="20170414 16:37:39.319"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:37:39.321">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:37:39.320" status="PASS" endtime="20170414 16:37:39.321"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:37:39.322">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:37:39.322" status="PASS" endtime="20170414 16:37:39.322"></status>
</kw>
<status starttime="20170414 16:37:39.321" status="PASS" endtime="20170414 16:37:39.322"></status>
</kw>
<status starttime="20170414 16:37:39.320" status="PASS" endtime="20170414 16:37:39.322"></status>
</kw>
<status starttime="20170414 16:37:39.319" status="PASS" endtime="20170414 16:37:39.322"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:37:39.389">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170414 16:37:39.389">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:37:39.322" status="PASS" endtime="20170414 16:37:39.389"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:37:39.391">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:37:39.390" status="PASS" endtime="20170414 16:37:39.391"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:37:39.392">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:37:39.392" status="PASS" endtime="20170414 16:37:39.392"></status>
</kw>
<status starttime="20170414 16:37:39.391" status="PASS" endtime="20170414 16:37:39.392"></status>
</kw>
<status starttime="20170414 16:37:39.390" status="PASS" endtime="20170414 16:37:39.392"></status>
</kw>
<status starttime="20170414 16:37:39.389" status="PASS" endtime="20170414 16:37:39.392"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:37:39.393">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:37:39.138" status="PASS" endtime="20170414 16:37:39.393"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:37:39.393">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:37:39.393" status="PASS" endtime="20170414 16:37:39.393"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:37:39.394">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170414 16:37:39.394">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170414 16:37:39.394">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status starttime="20170414 16:37:39.394" status="PASS" endtime="20170414 16:37:39.394"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:37:39.394">${state} = Off</msg>
<status starttime="20170414 16:37:39.137" status="PASS" endtime="20170414 16:37:39.394"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:37:39.395">${boot_progress} = Off</msg>
<status starttime="20170414 16:37:39.137" status="PASS" endtime="20170414 16:37:39.395"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:37:39.395">Off != FW Progress, Starting OS</msg>
<status starttime="20170414 16:37:39.395" status="FAIL" endtime="20170414 16:37:39.395"></status>
</kw>
<status starttime="20170414 16:37:39.136" status="FAIL" endtime="20170414 16:37:39.396"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:37:49.399">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:37:49.399" status="PASS" endtime="20170414 16:37:49.399"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:37:49.400">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:37:49.400" status="PASS" endtime="20170414 16:37:49.400"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:37:49.401">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:37:49.400" status="PASS" endtime="20170414 16:37:49.401"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:37:49.401">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:37:49.401" status="PASS" endtime="20170414 16:37:49.401"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:37:49.577">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:37:49.402" status="PASS" endtime="20170414 16:37:49.577"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:37:49.577">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:37:49.577">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:37:49.402" status="PASS" endtime="20170414 16:37:49.577"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:37:49.578">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:37:49.577" status="PASS" endtime="20170414 16:37:49.578"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:37:49.578">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:37:49.578" status="PASS" endtime="20170414 16:37:49.579"></status>
</kw>
<status starttime="20170414 16:37:49.398" status="PASS" endtime="20170414 16:37:49.579"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:37:49.579">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170414 16:37:49.579" status="PASS" endtime="20170414 16:37:49.579"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:37:49.582">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:37:49.581" status="PASS" endtime="20170414 16:37:49.582"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:37:49.583">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:37:49.582" status="PASS" endtime="20170414 16:37:49.583"></status>
</kw>
<status starttime="20170414 16:37:49.582" status="PASS" endtime="20170414 16:37:49.583"></status>
</kw>
<status starttime="20170414 16:37:49.580" status="PASS" endtime="20170414 16:37:49.583"></status>
</kw>
<status starttime="20170414 16:37:49.580" status="PASS" endtime="20170414 16:37:49.583"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:37:49.657">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170414 16:37:49.657">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:37:49.583" status="PASS" endtime="20170414 16:37:49.657"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:37:49.659">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:37:49.658" status="PASS" endtime="20170414 16:37:49.659"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:37:49.660">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:37:49.660" status="PASS" endtime="20170414 16:37:49.660"></status>
</kw>
<status starttime="20170414 16:37:49.659" status="PASS" endtime="20170414 16:37:49.660"></status>
</kw>
<status starttime="20170414 16:37:49.658" status="PASS" endtime="20170414 16:37:49.660"></status>
</kw>
<status starttime="20170414 16:37:49.657" status="PASS" endtime="20170414 16:37:49.660"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:37:49.660">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:37:49.397" status="PASS" endtime="20170414 16:37:49.660"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:37:49.661">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:37:49.661" status="PASS" endtime="20170414 16:37:49.661"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:37:49.662">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170414 16:37:49.662">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170414 16:37:49.662">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status starttime="20170414 16:37:49.661" status="PASS" endtime="20170414 16:37:49.662"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:37:49.662">${state} = Off</msg>
<status starttime="20170414 16:37:49.397" status="PASS" endtime="20170414 16:37:49.662"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:37:49.662">${boot_progress} = Off</msg>
<status starttime="20170414 16:37:49.396" status="PASS" endtime="20170414 16:37:49.662"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:37:49.663">Off != FW Progress, Starting OS</msg>
<status starttime="20170414 16:37:49.663" status="FAIL" endtime="20170414 16:37:49.663"></status>
</kw>
<status starttime="20170414 16:37:49.396" status="FAIL" endtime="20170414 16:37:49.663"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:37:59.667">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:37:59.666" status="PASS" endtime="20170414 16:37:59.667"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:37:59.668">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:37:59.667" status="PASS" endtime="20170414 16:37:59.668"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:37:59.668">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:37:59.668" status="PASS" endtime="20170414 16:37:59.668"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:37:59.669">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:37:59.669" status="PASS" endtime="20170414 16:37:59.669"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:37:59.844">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:37:59.670" status="PASS" endtime="20170414 16:37:59.844"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:37:59.845">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:37:59.845">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:37:59.669" status="PASS" endtime="20170414 16:37:59.845"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:37:59.845">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:37:59.845" status="PASS" endtime="20170414 16:37:59.845"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:37:59.846">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:37:59.846" status="PASS" endtime="20170414 16:37:59.846"></status>
</kw>
<status starttime="20170414 16:37:59.666" status="PASS" endtime="20170414 16:37:59.846"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:37:59.847">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170414 16:37:59.846" status="PASS" endtime="20170414 16:37:59.847"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:37:59.849">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:37:59.848" status="PASS" endtime="20170414 16:37:59.849"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:37:59.850">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:37:59.850" status="PASS" endtime="20170414 16:37:59.850"></status>
</kw>
<status starttime="20170414 16:37:59.849" status="PASS" endtime="20170414 16:37:59.850"></status>
</kw>
<status starttime="20170414 16:37:59.848" status="PASS" endtime="20170414 16:37:59.850"></status>
</kw>
<status starttime="20170414 16:37:59.847" status="PASS" endtime="20170414 16:37:59.850"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:37:59.917">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170414 16:37:59.917">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:37:59.850" status="PASS" endtime="20170414 16:37:59.917"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:37:59.919">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:37:59.919" status="PASS" endtime="20170414 16:37:59.919"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:37:59.920">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:37:59.920" status="PASS" endtime="20170414 16:37:59.920"></status>
</kw>
<status starttime="20170414 16:37:59.919" status="PASS" endtime="20170414 16:37:59.920"></status>
</kw>
<status starttime="20170414 16:37:59.918" status="PASS" endtime="20170414 16:37:59.920"></status>
</kw>
<status starttime="20170414 16:37:59.918" status="PASS" endtime="20170414 16:37:59.920"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:37:59.921">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:37:59.665" status="PASS" endtime="20170414 16:37:59.921"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:37:59.921">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:37:59.921" status="PASS" endtime="20170414 16:37:59.921"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:37:59.922">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170414 16:37:59.922">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170414 16:37:59.922">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status starttime="20170414 16:37:59.922" status="PASS" endtime="20170414 16:37:59.922"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:37:59.922">${state} = Off</msg>
<status starttime="20170414 16:37:59.664" status="PASS" endtime="20170414 16:37:59.922"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:37:59.923">${boot_progress} = Off</msg>
<status starttime="20170414 16:37:59.664" status="PASS" endtime="20170414 16:37:59.923"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:37:59.923">Off != FW Progress, Starting OS</msg>
<status starttime="20170414 16:37:59.923" status="FAIL" endtime="20170414 16:37:59.923"></status>
</kw>
<status starttime="20170414 16:37:59.664" status="FAIL" endtime="20170414 16:37:59.924"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:38:09.928">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:38:09.927" status="PASS" endtime="20170414 16:38:09.928"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:38:09.929">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:38:09.928" status="PASS" endtime="20170414 16:38:09.929"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:38:09.929">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:38:09.929" status="PASS" endtime="20170414 16:38:09.929"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:38:09.930">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:38:09.930" status="PASS" endtime="20170414 16:38:09.930"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:38:10.104">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:38:09.931" status="PASS" endtime="20170414 16:38:10.104"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:38:10.104">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:38:10.104">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:38:09.930" status="PASS" endtime="20170414 16:38:10.104"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:38:10.105">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:38:10.105" status="PASS" endtime="20170414 16:38:10.105"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:38:10.106">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:38:10.105" status="PASS" endtime="20170414 16:38:10.106"></status>
</kw>
<status starttime="20170414 16:38:09.927" status="PASS" endtime="20170414 16:38:10.106"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:38:10.106">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170414 16:38:10.106" status="PASS" endtime="20170414 16:38:10.106"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:38:10.109">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:38:10.108" status="PASS" endtime="20170414 16:38:10.109"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:38:10.110">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:38:10.109" status="PASS" endtime="20170414 16:38:10.110"></status>
</kw>
<status starttime="20170414 16:38:10.109" status="PASS" endtime="20170414 16:38:10.110"></status>
</kw>
<status starttime="20170414 16:38:10.107" status="PASS" endtime="20170414 16:38:10.110"></status>
</kw>
<status starttime="20170414 16:38:10.107" status="PASS" endtime="20170414 16:38:10.110"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:38:10.176">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170414 16:38:10.176">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:38:10.110" status="PASS" endtime="20170414 16:38:10.177"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:38:10.181">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:38:10.180" status="PASS" endtime="20170414 16:38:10.181"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:38:10.181">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:38:10.181" status="PASS" endtime="20170414 16:38:10.182"></status>
</kw>
<status starttime="20170414 16:38:10.181" status="PASS" endtime="20170414 16:38:10.182"></status>
</kw>
<status starttime="20170414 16:38:10.177" status="PASS" endtime="20170414 16:38:10.182"></status>
</kw>
<status starttime="20170414 16:38:10.177" status="PASS" endtime="20170414 16:38:10.182"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:38:10.182">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:38:09.926" status="PASS" endtime="20170414 16:38:10.182"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:38:10.183">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:38:10.183" status="PASS" endtime="20170414 16:38:10.183"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:38:10.183">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170414 16:38:10.184">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170414 16:38:10.184">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status starttime="20170414 16:38:10.183" status="PASS" endtime="20170414 16:38:10.184"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:38:10.184">${state} = Off</msg>
<status starttime="20170414 16:38:09.925" status="PASS" endtime="20170414 16:38:10.184"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:38:10.184">${boot_progress} = Off</msg>
<status starttime="20170414 16:38:09.925" status="PASS" endtime="20170414 16:38:10.184"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:38:10.185">Off != FW Progress, Starting OS</msg>
<status starttime="20170414 16:38:10.184" status="FAIL" endtime="20170414 16:38:10.185"></status>
</kw>
<status starttime="20170414 16:38:09.924" status="FAIL" endtime="20170414 16:38:10.185"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:38:20.189">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:38:20.188" status="PASS" endtime="20170414 16:38:20.189"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:38:20.190">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:38:20.189" status="PASS" endtime="20170414 16:38:20.190"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:38:20.190">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:38:20.190" status="PASS" endtime="20170414 16:38:20.190"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:38:20.191">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:38:20.190" status="PASS" endtime="20170414 16:38:20.191"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:38:20.367">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:38:20.192" status="PASS" endtime="20170414 16:38:20.367"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:38:20.367">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:38:20.367">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:38:20.191" status="PASS" endtime="20170414 16:38:20.367"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:38:20.368">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:38:20.367" status="PASS" endtime="20170414 16:38:20.368"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:38:20.368">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:38:20.368" status="PASS" endtime="20170414 16:38:20.369"></status>
</kw>
<status starttime="20170414 16:38:20.188" status="PASS" endtime="20170414 16:38:20.369"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:38:20.369">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170414 16:38:20.369" status="PASS" endtime="20170414 16:38:20.369"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:38:20.372">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:38:20.371" status="PASS" endtime="20170414 16:38:20.372"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:38:20.372">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:38:20.372" status="PASS" endtime="20170414 16:38:20.373"></status>
</kw>
<status starttime="20170414 16:38:20.372" status="PASS" endtime="20170414 16:38:20.373"></status>
</kw>
<status starttime="20170414 16:38:20.370" status="PASS" endtime="20170414 16:38:20.373"></status>
</kw>
<status starttime="20170414 16:38:20.369" status="PASS" endtime="20170414 16:38:20.373"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:38:20.439">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170414 16:38:20.439">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:38:20.373" status="PASS" endtime="20170414 16:38:20.439"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:38:20.441">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:38:20.440" status="PASS" endtime="20170414 16:38:20.441"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:38:20.442">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:38:20.441" status="PASS" endtime="20170414 16:38:20.442"></status>
</kw>
<status starttime="20170414 16:38:20.441" status="PASS" endtime="20170414 16:38:20.442"></status>
</kw>
<status starttime="20170414 16:38:20.440" status="PASS" endtime="20170414 16:38:20.442"></status>
</kw>
<status starttime="20170414 16:38:20.439" status="PASS" endtime="20170414 16:38:20.442"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:38:20.442">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:38:20.187" status="PASS" endtime="20170414 16:38:20.442"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:38:20.443">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:38:20.443" status="PASS" endtime="20170414 16:38:20.443"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:38:20.443">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170414 16:38:20.443">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170414 16:38:20.444">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status starttime="20170414 16:38:20.443" status="PASS" endtime="20170414 16:38:20.444"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:38:20.444">${state} = Off</msg>
<status starttime="20170414 16:38:20.187" status="PASS" endtime="20170414 16:38:20.444"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:38:20.444">${boot_progress} = Off</msg>
<status starttime="20170414 16:38:20.186" status="PASS" endtime="20170414 16:38:20.444"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:38:20.445">Off != FW Progress, Starting OS</msg>
<status starttime="20170414 16:38:20.444" status="FAIL" endtime="20170414 16:38:20.445"></status>
</kw>
<status starttime="20170414 16:38:20.186" status="FAIL" endtime="20170414 16:38:20.445"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:38:30.448">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:38:30.448" status="PASS" endtime="20170414 16:38:30.449"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:38:30.449">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:38:30.449" status="PASS" endtime="20170414 16:38:30.449"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:38:30.450">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:38:30.450" status="PASS" endtime="20170414 16:38:30.450"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:38:30.451">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:38:30.450" status="PASS" endtime="20170414 16:38:30.451"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:38:30.627">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:38:30.451" status="PASS" endtime="20170414 16:38:30.627"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:38:30.628">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:38:30.628">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:38:30.451" status="PASS" endtime="20170414 16:38:30.628"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:38:30.628">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:38:30.628" status="PASS" endtime="20170414 16:38:30.628"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:38:30.629">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:38:30.629" status="PASS" endtime="20170414 16:38:30.629"></status>
</kw>
<status starttime="20170414 16:38:30.448" status="PASS" endtime="20170414 16:38:30.629"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:38:30.630">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170414 16:38:30.629" status="PASS" endtime="20170414 16:38:30.630"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:38:30.632">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:38:30.631" status="PASS" endtime="20170414 16:38:30.632"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:38:30.633">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:38:30.632" status="PASS" endtime="20170414 16:38:30.633"></status>
</kw>
<status starttime="20170414 16:38:30.632" status="PASS" endtime="20170414 16:38:30.633"></status>
</kw>
<status starttime="20170414 16:38:30.630" status="PASS" endtime="20170414 16:38:30.633"></status>
</kw>
<status starttime="20170414 16:38:30.630" status="PASS" endtime="20170414 16:38:30.633"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:38:30.699">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170414 16:38:30.700">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:38:30.633" status="PASS" endtime="20170414 16:38:30.700"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:38:30.701">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:38:30.701" status="PASS" endtime="20170414 16:38:30.701"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:38:30.702">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:38:30.702" status="PASS" endtime="20170414 16:38:30.702"></status>
</kw>
<status starttime="20170414 16:38:30.701" status="PASS" endtime="20170414 16:38:30.702"></status>
</kw>
<status starttime="20170414 16:38:30.700" status="PASS" endtime="20170414 16:38:30.702"></status>
</kw>
<status starttime="20170414 16:38:30.700" status="PASS" endtime="20170414 16:38:30.703"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:38:30.703">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:38:30.447" status="PASS" endtime="20170414 16:38:30.703"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:38:30.703">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:38:30.703" status="PASS" endtime="20170414 16:38:30.703"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:38:30.704">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170414 16:38:30.704">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170414 16:38:30.704">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status starttime="20170414 16:38:30.704" status="PASS" endtime="20170414 16:38:30.704"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:38:30.704">${state} = Off</msg>
<status starttime="20170414 16:38:30.446" status="PASS" endtime="20170414 16:38:30.704"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:38:30.705">${boot_progress} = Off</msg>
<status starttime="20170414 16:38:30.446" status="PASS" endtime="20170414 16:38:30.705"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:38:30.705">Off != FW Progress, Starting OS</msg>
<status starttime="20170414 16:38:30.705" status="FAIL" endtime="20170414 16:38:30.705"></status>
</kw>
<status starttime="20170414 16:38:30.445" status="FAIL" endtime="20170414 16:38:30.706"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:38:40.709">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:38:40.709" status="PASS" endtime="20170414 16:38:40.710"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:38:40.710">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:38:40.710" status="PASS" endtime="20170414 16:38:40.710"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:38:40.711">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:38:40.711" status="PASS" endtime="20170414 16:38:40.711"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:38:40.712">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:38:40.711" status="PASS" endtime="20170414 16:38:40.712"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:38:40.888">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:38:40.712" status="PASS" endtime="20170414 16:38:40.888"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:38:40.888">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:38:40.888">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:38:40.712" status="PASS" endtime="20170414 16:38:40.889"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:38:40.889">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:38:40.889" status="PASS" endtime="20170414 16:38:40.889"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:38:40.890">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:38:40.890" status="PASS" endtime="20170414 16:38:40.890"></status>
</kw>
<status starttime="20170414 16:38:40.708" status="PASS" endtime="20170414 16:38:40.890"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:38:40.891">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170414 16:38:40.890" status="PASS" endtime="20170414 16:38:40.891"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:38:40.893">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:38:40.892" status="PASS" endtime="20170414 16:38:40.893"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:38:40.894">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:38:40.893" status="PASS" endtime="20170414 16:38:40.894"></status>
</kw>
<status starttime="20170414 16:38:40.893" status="PASS" endtime="20170414 16:38:40.894"></status>
</kw>
<status starttime="20170414 16:38:40.891" status="PASS" endtime="20170414 16:38:40.894"></status>
</kw>
<status starttime="20170414 16:38:40.891" status="PASS" endtime="20170414 16:38:40.894"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:38:40.968">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170414 16:38:40.968">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:38:40.894" status="PASS" endtime="20170414 16:38:40.968"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:38:40.970">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:38:40.969" status="PASS" endtime="20170414 16:38:40.970"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:38:40.971">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:38:40.970" status="PASS" endtime="20170414 16:38:40.971"></status>
</kw>
<status starttime="20170414 16:38:40.970" status="PASS" endtime="20170414 16:38:40.971"></status>
</kw>
<status starttime="20170414 16:38:40.969" status="PASS" endtime="20170414 16:38:40.971"></status>
</kw>
<status starttime="20170414 16:38:40.968" status="PASS" endtime="20170414 16:38:40.971"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:38:40.972">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:38:40.707" status="PASS" endtime="20170414 16:38:40.972"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:38:40.972">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:38:40.972" status="PASS" endtime="20170414 16:38:40.972"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:38:40.973">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170414 16:38:40.973">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170414 16:38:40.973">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status starttime="20170414 16:38:40.972" status="PASS" endtime="20170414 16:38:40.973"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:38:40.973">${state} = Off</msg>
<status starttime="20170414 16:38:40.707" status="PASS" endtime="20170414 16:38:40.973"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:38:40.973">${boot_progress} = Off</msg>
<status starttime="20170414 16:38:40.706" status="PASS" endtime="20170414 16:38:40.973"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:38:40.974">Off != FW Progress, Starting OS</msg>
<status starttime="20170414 16:38:40.974" status="FAIL" endtime="20170414 16:38:40.974"></status>
</kw>
<status starttime="20170414 16:38:40.706" status="FAIL" endtime="20170414 16:38:40.974"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:38:50.978">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:38:50.978" status="PASS" endtime="20170414 16:38:50.978"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:38:50.979">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:38:50.979" status="PASS" endtime="20170414 16:38:50.979"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:38:50.980">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:38:50.979" status="PASS" endtime="20170414 16:38:50.980"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:38:50.980">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:38:50.980" status="PASS" endtime="20170414 16:38:50.980"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:38:51.157">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:38:50.981" status="PASS" endtime="20170414 16:38:51.157"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:38:51.157">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:38:51.157">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:38:50.981" status="PASS" endtime="20170414 16:38:51.157"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:38:51.158">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:38:51.157" status="PASS" endtime="20170414 16:38:51.158"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:38:51.158">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:38:51.158" status="PASS" endtime="20170414 16:38:51.159"></status>
</kw>
<status starttime="20170414 16:38:50.977" status="PASS" endtime="20170414 16:38:51.159"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:38:51.159">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170414 16:38:51.159" status="PASS" endtime="20170414 16:38:51.159"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:38:51.162">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:38:51.161" status="PASS" endtime="20170414 16:38:51.162"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:38:51.162">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:38:51.162" status="PASS" endtime="20170414 16:38:51.163"></status>
</kw>
<status starttime="20170414 16:38:51.162" status="PASS" endtime="20170414 16:38:51.163"></status>
</kw>
<status starttime="20170414 16:38:51.160" status="PASS" endtime="20170414 16:38:51.163"></status>
</kw>
<status starttime="20170414 16:38:51.159" status="PASS" endtime="20170414 16:38:51.163"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:38:51.230">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170414 16:38:51.230">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:38:51.163" status="PASS" endtime="20170414 16:38:51.230"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:38:51.232">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:38:51.231" status="PASS" endtime="20170414 16:38:51.232"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:38:51.233">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:38:51.233" status="PASS" endtime="20170414 16:38:51.233"></status>
</kw>
<status starttime="20170414 16:38:51.232" status="PASS" endtime="20170414 16:38:51.233"></status>
</kw>
<status starttime="20170414 16:38:51.231" status="PASS" endtime="20170414 16:38:51.233"></status>
</kw>
<status starttime="20170414 16:38:51.231" status="PASS" endtime="20170414 16:38:51.233"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:38:51.234">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:38:50.976" status="PASS" endtime="20170414 16:38:51.234"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:38:51.234">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:38:51.234" status="PASS" endtime="20170414 16:38:51.234"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:38:51.235">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170414 16:38:51.235">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170414 16:38:51.235">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status starttime="20170414 16:38:51.234" status="PASS" endtime="20170414 16:38:51.235"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:38:51.235">${state} = Off</msg>
<status starttime="20170414 16:38:50.976" status="PASS" endtime="20170414 16:38:51.235"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:38:51.235">${boot_progress} = Off</msg>
<status starttime="20170414 16:38:50.975" status="PASS" endtime="20170414 16:38:51.235"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:38:51.236">Off != FW Progress, Starting OS</msg>
<status starttime="20170414 16:38:51.236" status="FAIL" endtime="20170414 16:38:51.236"></status>
</kw>
<status starttime="20170414 16:38:50.975" status="FAIL" endtime="20170414 16:38:51.236"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:39:01.240">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:39:01.239" status="PASS" endtime="20170414 16:39:01.240"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:39:01.241">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:39:01.240" status="PASS" endtime="20170414 16:39:01.241"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:39:01.241">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:39:01.241" status="PASS" endtime="20170414 16:39:01.241"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:39:01.242">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:39:01.242" status="PASS" endtime="20170414 16:39:01.242"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:39:01.417">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:39:01.243" status="PASS" endtime="20170414 16:39:01.418"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:39:01.418">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:39:01.418">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:39:01.242" status="PASS" endtime="20170414 16:39:01.418"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:39:01.418">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:39:01.418" status="PASS" endtime="20170414 16:39:01.418"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:39:01.419">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:39:01.419" status="PASS" endtime="20170414 16:39:01.419"></status>
</kw>
<status starttime="20170414 16:39:01.239" status="PASS" endtime="20170414 16:39:01.419"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:39:01.420">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170414 16:39:01.419" status="PASS" endtime="20170414 16:39:01.420"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:39:01.422">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:39:01.421" status="PASS" endtime="20170414 16:39:01.422"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:39:01.423">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:39:01.423" status="PASS" endtime="20170414 16:39:01.423"></status>
</kw>
<status starttime="20170414 16:39:01.422" status="PASS" endtime="20170414 16:39:01.423"></status>
</kw>
<status starttime="20170414 16:39:01.421" status="PASS" endtime="20170414 16:39:01.423"></status>
</kw>
<status starttime="20170414 16:39:01.420" status="PASS" endtime="20170414 16:39:01.423"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:39:01.489">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170414 16:39:01.489">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:39:01.424" status="PASS" endtime="20170414 16:39:01.489"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:39:01.491">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:39:01.491" status="PASS" endtime="20170414 16:39:01.491"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:39:01.492">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:39:01.492" status="PASS" endtime="20170414 16:39:01.492"></status>
</kw>
<status starttime="20170414 16:39:01.491" status="PASS" endtime="20170414 16:39:01.492"></status>
</kw>
<status starttime="20170414 16:39:01.490" status="PASS" endtime="20170414 16:39:01.492"></status>
</kw>
<status starttime="20170414 16:39:01.490" status="PASS" endtime="20170414 16:39:01.492"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:39:01.493">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:39:01.238" status="PASS" endtime="20170414 16:39:01.493"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:39:01.493">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:39:01.493" status="PASS" endtime="20170414 16:39:01.493"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:39:01.494">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170414 16:39:01.494">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170414 16:39:01.494">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status starttime="20170414 16:39:01.494" status="PASS" endtime="20170414 16:39:01.494"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:39:01.494">${state} = Off</msg>
<status starttime="20170414 16:39:01.238" status="PASS" endtime="20170414 16:39:01.494"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:39:01.495">${boot_progress} = Off</msg>
<status starttime="20170414 16:39:01.237" status="PASS" endtime="20170414 16:39:01.495"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:39:01.495">Off != FW Progress, Starting OS</msg>
<status starttime="20170414 16:39:01.495" status="FAIL" endtime="20170414 16:39:01.495"></status>
</kw>
<status starttime="20170414 16:39:01.237" status="FAIL" endtime="20170414 16:39:01.495"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:39:11.499">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:39:11.498" status="PASS" endtime="20170414 16:39:11.499"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:39:11.500">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:39:11.500" status="PASS" endtime="20170414 16:39:11.500"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:39:11.501">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:39:11.500" status="PASS" endtime="20170414 16:39:11.501"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:39:11.501">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:39:11.501" status="PASS" endtime="20170414 16:39:11.501"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:39:11.685">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:39:11.502" status="PASS" endtime="20170414 16:39:11.685"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:39:11.685">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:39:11.685">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:39:11.502" status="PASS" endtime="20170414 16:39:11.685"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:39:11.686">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:39:11.686" status="PASS" endtime="20170414 16:39:11.686"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:39:11.687">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:39:11.686" status="PASS" endtime="20170414 16:39:11.687"></status>
</kw>
<status starttime="20170414 16:39:11.498" status="PASS" endtime="20170414 16:39:11.687"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:39:11.687">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170414 16:39:11.687" status="PASS" endtime="20170414 16:39:11.687"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:39:11.689">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:39:11.689" status="PASS" endtime="20170414 16:39:11.689"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:39:11.690">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:39:11.690" status="PASS" endtime="20170414 16:39:11.690"></status>
</kw>
<status starttime="20170414 16:39:11.690" status="PASS" endtime="20170414 16:39:11.691"></status>
</kw>
<status starttime="20170414 16:39:11.688" status="PASS" endtime="20170414 16:39:11.691"></status>
</kw>
<status starttime="20170414 16:39:11.688" status="PASS" endtime="20170414 16:39:11.691"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:39:11.757">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170414 16:39:11.757">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:39:11.691" status="PASS" endtime="20170414 16:39:11.757"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:39:11.759">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:39:11.758" status="PASS" endtime="20170414 16:39:11.759"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:39:11.760">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:39:11.760" status="PASS" endtime="20170414 16:39:11.760"></status>
</kw>
<status starttime="20170414 16:39:11.759" status="PASS" endtime="20170414 16:39:11.760"></status>
</kw>
<status starttime="20170414 16:39:11.758" status="PASS" endtime="20170414 16:39:11.761"></status>
</kw>
<status starttime="20170414 16:39:11.757" status="PASS" endtime="20170414 16:39:11.761"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:39:11.761">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:39:11.497" status="PASS" endtime="20170414 16:39:11.761"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:39:11.761">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:39:11.761" status="PASS" endtime="20170414 16:39:11.762"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:39:11.762">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170414 16:39:11.762">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170414 16:39:11.762">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status starttime="20170414 16:39:11.762" status="PASS" endtime="20170414 16:39:11.762"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:39:11.763">${state} = Off</msg>
<status starttime="20170414 16:39:11.497" status="PASS" endtime="20170414 16:39:11.763"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:39:11.763">${boot_progress} = Off</msg>
<status starttime="20170414 16:39:11.496" status="PASS" endtime="20170414 16:39:11.763"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:39:11.763">Off != FW Progress, Starting OS</msg>
<status starttime="20170414 16:39:11.763" status="FAIL" endtime="20170414 16:39:11.764"></status>
</kw>
<status starttime="20170414 16:39:11.496" status="FAIL" endtime="20170414 16:39:11.764"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:39:21.767">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:39:21.767" status="PASS" endtime="20170414 16:39:21.768"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:39:21.768">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:39:21.768" status="PASS" endtime="20170414 16:39:21.768"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:39:21.769">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:39:21.768" status="PASS" endtime="20170414 16:39:21.769"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:39:21.769">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:39:21.769" status="PASS" endtime="20170414 16:39:21.769"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:39:21.951">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:39:21.770" status="PASS" endtime="20170414 16:39:21.952"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:39:21.952">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:39:21.952">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:39:21.770" status="PASS" endtime="20170414 16:39:21.952"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:39:21.952">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:39:21.952" status="PASS" endtime="20170414 16:39:21.952"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:39:21.953">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:39:21.953" status="PASS" endtime="20170414 16:39:21.953"></status>
</kw>
<status starttime="20170414 16:39:21.766" status="PASS" endtime="20170414 16:39:21.953"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:39:21.954">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170414 16:39:21.954" status="PASS" endtime="20170414 16:39:21.954"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:39:21.956">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:39:21.956" status="PASS" endtime="20170414 16:39:21.956"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:39:21.957">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:39:21.957" status="PASS" endtime="20170414 16:39:21.957"></status>
</kw>
<status starttime="20170414 16:39:21.957" status="PASS" endtime="20170414 16:39:21.958"></status>
</kw>
<status starttime="20170414 16:39:21.955" status="PASS" endtime="20170414 16:39:21.958"></status>
</kw>
<status starttime="20170414 16:39:21.954" status="PASS" endtime="20170414 16:39:21.958"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:39:22.024">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170414 16:39:22.024">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:39:21.958" status="PASS" endtime="20170414 16:39:22.024"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:39:22.026">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:39:22.025" status="PASS" endtime="20170414 16:39:22.026"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:39:22.027">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:39:22.026" status="PASS" endtime="20170414 16:39:22.027"></status>
</kw>
<status starttime="20170414 16:39:22.026" status="PASS" endtime="20170414 16:39:22.027"></status>
</kw>
<status starttime="20170414 16:39:22.025" status="PASS" endtime="20170414 16:39:22.027"></status>
</kw>
<status starttime="20170414 16:39:22.024" status="PASS" endtime="20170414 16:39:22.027"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:39:22.027">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:39:21.766" status="PASS" endtime="20170414 16:39:22.027"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:39:22.028">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:39:22.027" status="PASS" endtime="20170414 16:39:22.028"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:39:22.028">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170414 16:39:22.028">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170414 16:39:22.029">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status starttime="20170414 16:39:22.028" status="PASS" endtime="20170414 16:39:22.029"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:39:22.029">${state} = Off</msg>
<status starttime="20170414 16:39:21.765" status="PASS" endtime="20170414 16:39:22.029"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:39:22.029">${boot_progress} = Off</msg>
<status starttime="20170414 16:39:21.765" status="PASS" endtime="20170414 16:39:22.029"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:39:22.030">Off != FW Progress, Starting OS</msg>
<status starttime="20170414 16:39:22.029" status="FAIL" endtime="20170414 16:39:22.030"></status>
</kw>
<status starttime="20170414 16:39:21.764" status="FAIL" endtime="20170414 16:39:22.030"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:39:32.033">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:39:32.033" status="PASS" endtime="20170414 16:39:32.034"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:39:32.034">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:39:32.034" status="PASS" endtime="20170414 16:39:32.034"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:39:32.035">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:39:32.034" status="PASS" endtime="20170414 16:39:32.035"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:39:32.035">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:39:32.035" status="PASS" endtime="20170414 16:39:32.035"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:39:32.220">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:39:32.036" status="PASS" endtime="20170414 16:39:32.220"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:39:32.221">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:39:32.221">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:39:32.036" status="PASS" endtime="20170414 16:39:32.221"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:39:32.221">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:39:32.221" status="PASS" endtime="20170414 16:39:32.221"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:39:32.222">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:39:32.222" status="PASS" endtime="20170414 16:39:32.222"></status>
</kw>
<status starttime="20170414 16:39:32.032" status="PASS" endtime="20170414 16:39:32.222"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:39:32.223">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170414 16:39:32.222" status="PASS" endtime="20170414 16:39:32.223"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:39:32.225">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:39:32.224" status="PASS" endtime="20170414 16:39:32.225"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:39:32.226">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:39:32.225" status="PASS" endtime="20170414 16:39:32.226"></status>
</kw>
<status starttime="20170414 16:39:32.225" status="PASS" endtime="20170414 16:39:32.226"></status>
</kw>
<status starttime="20170414 16:39:32.223" status="PASS" endtime="20170414 16:39:32.226"></status>
</kw>
<status starttime="20170414 16:39:32.223" status="PASS" endtime="20170414 16:39:32.226"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:39:32.294">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170414 16:39:32.294">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:39:32.227" status="PASS" endtime="20170414 16:39:32.294"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:39:32.296">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:39:32.295" status="PASS" endtime="20170414 16:39:32.296"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:39:32.297">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:39:32.296" status="PASS" endtime="20170414 16:39:32.297"></status>
</kw>
<status starttime="20170414 16:39:32.296" status="PASS" endtime="20170414 16:39:32.297"></status>
</kw>
<status starttime="20170414 16:39:32.295" status="PASS" endtime="20170414 16:39:32.297"></status>
</kw>
<status starttime="20170414 16:39:32.294" status="PASS" endtime="20170414 16:39:32.297"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:39:32.297">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:39:32.032" status="PASS" endtime="20170414 16:39:32.297"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:39:32.298">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:39:32.298" status="PASS" endtime="20170414 16:39:32.298"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:39:32.299">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170414 16:39:32.299">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170414 16:39:32.299">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status starttime="20170414 16:39:32.298" status="PASS" endtime="20170414 16:39:32.299"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:39:32.299">${state} = Off</msg>
<status starttime="20170414 16:39:32.031" status="PASS" endtime="20170414 16:39:32.299"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:39:32.299">${boot_progress} = Off</msg>
<status starttime="20170414 16:39:32.031" status="PASS" endtime="20170414 16:39:32.299"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:39:32.300">Off != FW Progress, Starting OS</msg>
<status starttime="20170414 16:39:32.299" status="FAIL" endtime="20170414 16:39:32.300"></status>
</kw>
<status starttime="20170414 16:39:32.030" status="FAIL" endtime="20170414 16:39:32.300"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:39:42.304">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:39:42.304" status="PASS" endtime="20170414 16:39:42.305"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:39:42.305">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:39:42.305" status="PASS" endtime="20170414 16:39:42.305"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:39:42.306">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:39:42.306" status="PASS" endtime="20170414 16:39:42.306"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:39:42.307">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:39:42.306" status="PASS" endtime="20170414 16:39:42.307"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:39:42.525">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:39:42.307" status="PASS" endtime="20170414 16:39:42.525"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:39:42.525">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:39:42.526">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:39:42.307" status="PASS" endtime="20170414 16:39:42.526"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:39:42.526">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:39:42.526" status="PASS" endtime="20170414 16:39:42.526"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:39:42.527">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:39:42.526" status="PASS" endtime="20170414 16:39:42.527"></status>
</kw>
<status starttime="20170414 16:39:42.303" status="PASS" endtime="20170414 16:39:42.527"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:39:42.528">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170414 16:39:42.527" status="PASS" endtime="20170414 16:39:42.528"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:39:42.530">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:39:42.529" status="PASS" endtime="20170414 16:39:42.530"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:39:42.531">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:39:42.530" status="PASS" endtime="20170414 16:39:42.531"></status>
</kw>
<status starttime="20170414 16:39:42.530" status="PASS" endtime="20170414 16:39:42.531"></status>
</kw>
<status starttime="20170414 16:39:42.528" status="PASS" endtime="20170414 16:39:42.531"></status>
</kw>
<status starttime="20170414 16:39:42.528" status="PASS" endtime="20170414 16:39:42.531"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:39:42.597">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170414 16:39:42.597">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:39:42.531" status="PASS" endtime="20170414 16:39:42.597"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:39:42.601">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:39:42.599" status="PASS" endtime="20170414 16:39:42.601"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:39:42.603">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:39:42.603" status="PASS" endtime="20170414 16:39:42.604"></status>
</kw>
<status starttime="20170414 16:39:42.602" status="PASS" endtime="20170414 16:39:42.604"></status>
</kw>
<status starttime="20170414 16:39:42.598" status="PASS" endtime="20170414 16:39:42.604"></status>
</kw>
<status starttime="20170414 16:39:42.598" status="PASS" endtime="20170414 16:39:42.604"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:39:42.604">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:39:42.302" status="PASS" endtime="20170414 16:39:42.604"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:39:42.605">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:39:42.604" status="PASS" endtime="20170414 16:39:42.605"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:39:42.605">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170414 16:39:42.605">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170414 16:39:42.605">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status starttime="20170414 16:39:42.605" status="PASS" endtime="20170414 16:39:42.605"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:39:42.606">${state} = Off</msg>
<status starttime="20170414 16:39:42.302" status="PASS" endtime="20170414 16:39:42.606"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:39:42.606">${boot_progress} = Off</msg>
<status starttime="20170414 16:39:42.301" status="PASS" endtime="20170414 16:39:42.606"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:39:42.607">Off != FW Progress, Starting OS</msg>
<status starttime="20170414 16:39:42.606" status="FAIL" endtime="20170414 16:39:42.607"></status>
</kw>
<status starttime="20170414 16:39:42.301" status="FAIL" endtime="20170414 16:39:42.608"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:39:52.612">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:39:52.611" status="PASS" endtime="20170414 16:39:52.612"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:39:52.613">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:39:52.612" status="PASS" endtime="20170414 16:39:52.613"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:39:52.613">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:39:52.613" status="PASS" endtime="20170414 16:39:52.613"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:39:52.614">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:39:52.613" status="PASS" endtime="20170414 16:39:52.614"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:39:52.788">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:39:52.614" status="PASS" endtime="20170414 16:39:52.788"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:39:52.788">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:39:52.788">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:39:52.614" status="PASS" endtime="20170414 16:39:52.788"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:39:52.789">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:39:52.789" status="PASS" endtime="20170414 16:39:52.789"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:39:52.789">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:39:52.789" status="PASS" endtime="20170414 16:39:52.790"></status>
</kw>
<status starttime="20170414 16:39:52.611" status="PASS" endtime="20170414 16:39:52.790"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:39:52.790">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170414 16:39:52.790" status="PASS" endtime="20170414 16:39:52.790"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:39:52.793">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:39:52.792" status="PASS" endtime="20170414 16:39:52.793"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:39:52.794">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:39:52.793" status="PASS" endtime="20170414 16:39:52.794"></status>
</kw>
<status starttime="20170414 16:39:52.793" status="PASS" endtime="20170414 16:39:52.794"></status>
</kw>
<status starttime="20170414 16:39:52.791" status="PASS" endtime="20170414 16:39:52.794"></status>
</kw>
<status starttime="20170414 16:39:52.791" status="PASS" endtime="20170414 16:39:52.794"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:39:52.861">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170414 16:39:52.861">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:39:52.794" status="PASS" endtime="20170414 16:39:52.861"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:39:52.862">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:39:52.862" status="PASS" endtime="20170414 16:39:52.862"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:39:52.863">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:39:52.863" status="PASS" endtime="20170414 16:39:52.863"></status>
</kw>
<status starttime="20170414 16:39:52.863" status="PASS" endtime="20170414 16:39:52.863"></status>
</kw>
<status starttime="20170414 16:39:52.861" status="PASS" endtime="20170414 16:39:52.864"></status>
</kw>
<status starttime="20170414 16:39:52.861" status="PASS" endtime="20170414 16:39:52.864"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:39:52.864">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:39:52.610" status="PASS" endtime="20170414 16:39:52.864"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:39:52.864">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:39:52.864" status="PASS" endtime="20170414 16:39:52.865"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:39:52.865">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170414 16:39:52.865">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170414 16:39:52.865">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status starttime="20170414 16:39:52.865" status="PASS" endtime="20170414 16:39:52.865"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:39:52.865">${state} = Off</msg>
<status starttime="20170414 16:39:52.610" status="PASS" endtime="20170414 16:39:52.866"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:39:52.866">${boot_progress} = Off</msg>
<status starttime="20170414 16:39:52.609" status="PASS" endtime="20170414 16:39:52.866"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:39:52.866">Off != FW Progress, Starting OS</msg>
<status starttime="20170414 16:39:52.866" status="FAIL" endtime="20170414 16:39:52.866"></status>
</kw>
<status starttime="20170414 16:39:52.609" status="FAIL" endtime="20170414 16:39:52.867"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:40:02.870">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:40:02.870" status="PASS" endtime="20170414 16:40:02.871"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:40:02.871">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:40:02.871" status="PASS" endtime="20170414 16:40:02.872"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:40:02.872">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:40:02.872" status="PASS" endtime="20170414 16:40:02.872"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:40:02.873">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:40:02.872" status="PASS" endtime="20170414 16:40:02.873"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:40:03.053">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:40:02.873" status="PASS" endtime="20170414 16:40:03.053"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:40:03.054">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:40:03.054">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:40:02.873" status="PASS" endtime="20170414 16:40:03.054"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:40:03.054">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:40:03.054" status="PASS" endtime="20170414 16:40:03.054"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:40:03.055">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:40:03.055" status="PASS" endtime="20170414 16:40:03.055"></status>
</kw>
<status starttime="20170414 16:40:02.869" status="PASS" endtime="20170414 16:40:03.055"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:40:03.056">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170414 16:40:03.055" status="PASS" endtime="20170414 16:40:03.056"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:40:03.058">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:40:03.057" status="PASS" endtime="20170414 16:40:03.058"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:40:03.059">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:40:03.059" status="PASS" endtime="20170414 16:40:03.059"></status>
</kw>
<status starttime="20170414 16:40:03.058" status="PASS" endtime="20170414 16:40:03.059"></status>
</kw>
<status starttime="20170414 16:40:03.056" status="PASS" endtime="20170414 16:40:03.059"></status>
</kw>
<status starttime="20170414 16:40:03.056" status="PASS" endtime="20170414 16:40:03.059"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:40:03.125">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170414 16:40:03.125">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:40:03.059" status="PASS" endtime="20170414 16:40:03.125"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:40:03.127">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:40:03.127" status="PASS" endtime="20170414 16:40:03.127"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:40:03.128">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:40:03.128" status="PASS" endtime="20170414 16:40:03.128"></status>
</kw>
<status starttime="20170414 16:40:03.128" status="PASS" endtime="20170414 16:40:03.128"></status>
</kw>
<status starttime="20170414 16:40:03.126" status="PASS" endtime="20170414 16:40:03.129"></status>
</kw>
<status starttime="20170414 16:40:03.126" status="PASS" endtime="20170414 16:40:03.129"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:40:03.129">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:40:02.868" status="PASS" endtime="20170414 16:40:03.129"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:40:03.130">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:40:03.129" status="PASS" endtime="20170414 16:40:03.130"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:40:03.130">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170414 16:40:03.130">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170414 16:40:03.130">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status starttime="20170414 16:40:03.130" status="PASS" endtime="20170414 16:40:03.130"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:40:03.131">${state} = Off</msg>
<status starttime="20170414 16:40:02.868" status="PASS" endtime="20170414 16:40:03.131"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:40:03.131">${boot_progress} = Off</msg>
<status starttime="20170414 16:40:02.868" status="PASS" endtime="20170414 16:40:03.131"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:40:03.132">Off != FW Progress, Starting OS</msg>
<status starttime="20170414 16:40:03.131" status="FAIL" endtime="20170414 16:40:03.132"></status>
</kw>
<status starttime="20170414 16:40:02.867" status="FAIL" endtime="20170414 16:40:03.132"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:40:13.135">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:40:13.135" status="PASS" endtime="20170414 16:40:13.136"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:40:13.137">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:40:13.136" status="PASS" endtime="20170414 16:40:13.137"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:40:13.137">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:40:13.137" status="PASS" endtime="20170414 16:40:13.137"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:40:13.138">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:40:13.138" status="PASS" endtime="20170414 16:40:13.138"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:40:13.315">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:40:13.139" status="PASS" endtime="20170414 16:40:13.315"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:40:13.316">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:40:13.316">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:40:13.138" status="PASS" endtime="20170414 16:40:13.316"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:40:13.316">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:40:13.316" status="PASS" endtime="20170414 16:40:13.316"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:40:13.317">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:40:13.317" status="PASS" endtime="20170414 16:40:13.317"></status>
</kw>
<status starttime="20170414 16:40:13.134" status="PASS" endtime="20170414 16:40:13.317"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:40:13.318">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170414 16:40:13.318" status="PASS" endtime="20170414 16:40:13.318"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:40:13.320">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:40:13.320" status="PASS" endtime="20170414 16:40:13.320"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:40:13.321">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:40:13.321" status="PASS" endtime="20170414 16:40:13.321"></status>
</kw>
<status starttime="20170414 16:40:13.320" status="PASS" endtime="20170414 16:40:13.321"></status>
</kw>
<status starttime="20170414 16:40:13.319" status="PASS" endtime="20170414 16:40:13.322"></status>
</kw>
<status starttime="20170414 16:40:13.318" status="PASS" endtime="20170414 16:40:13.322"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:40:13.389">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170414 16:40:13.389">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:40:13.322" status="PASS" endtime="20170414 16:40:13.389"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:40:13.391">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:40:13.390" status="PASS" endtime="20170414 16:40:13.391"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:40:13.391">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:40:13.391" status="PASS" endtime="20170414 16:40:13.392"></status>
</kw>
<status starttime="20170414 16:40:13.391" status="PASS" endtime="20170414 16:40:13.392"></status>
</kw>
<status starttime="20170414 16:40:13.390" status="PASS" endtime="20170414 16:40:13.392"></status>
</kw>
<status starttime="20170414 16:40:13.389" status="PASS" endtime="20170414 16:40:13.392"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:40:13.392">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:40:13.134" status="PASS" endtime="20170414 16:40:13.392"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:40:13.393">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:40:13.392" status="PASS" endtime="20170414 16:40:13.393"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:40:13.393">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170414 16:40:13.393">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170414 16:40:13.393">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status starttime="20170414 16:40:13.393" status="PASS" endtime="20170414 16:40:13.393"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:40:13.394">${state} = Off</msg>
<status starttime="20170414 16:40:13.133" status="PASS" endtime="20170414 16:40:13.394"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:40:13.394">${boot_progress} = Off</msg>
<status starttime="20170414 16:40:13.133" status="PASS" endtime="20170414 16:40:13.394"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:40:13.395">Off != FW Progress, Starting OS</msg>
<status starttime="20170414 16:40:13.394" status="FAIL" endtime="20170414 16:40:13.395"></status>
</kw>
<status starttime="20170414 16:40:13.132" status="FAIL" endtime="20170414 16:40:13.395"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:40:23.399">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:40:23.398" status="PASS" endtime="20170414 16:40:23.399"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:40:23.400">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:40:23.399" status="PASS" endtime="20170414 16:40:23.400"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:40:23.401">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:40:23.400" status="PASS" endtime="20170414 16:40:23.401"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:40:23.402">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:40:23.401" status="PASS" endtime="20170414 16:40:23.402"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:40:23.578">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:40:23.402" status="PASS" endtime="20170414 16:40:23.579"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:40:23.579">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:40:23.579">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:40:23.402" status="PASS" endtime="20170414 16:40:23.579"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:40:23.579">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:40:23.579" status="PASS" endtime="20170414 16:40:23.579"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:40:23.580">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:40:23.580" status="PASS" endtime="20170414 16:40:23.580"></status>
</kw>
<status starttime="20170414 16:40:23.398" status="PASS" endtime="20170414 16:40:23.580"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:40:23.581">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170414 16:40:23.580" status="PASS" endtime="20170414 16:40:23.581"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:40:23.583">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:40:23.582" status="PASS" endtime="20170414 16:40:23.583"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:40:23.584">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:40:23.584" status="PASS" endtime="20170414 16:40:23.584"></status>
</kw>
<status starttime="20170414 16:40:23.583" status="PASS" endtime="20170414 16:40:23.584"></status>
</kw>
<status starttime="20170414 16:40:23.582" status="PASS" endtime="20170414 16:40:23.584"></status>
</kw>
<status starttime="20170414 16:40:23.581" status="PASS" endtime="20170414 16:40:23.584"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:40:23.653">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170414 16:40:23.653">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:40:23.585" status="PASS" endtime="20170414 16:40:23.653"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:40:23.655">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:40:23.654" status="PASS" endtime="20170414 16:40:23.655"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:40:23.655">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:40:23.655" status="PASS" endtime="20170414 16:40:23.656"></status>
</kw>
<status starttime="20170414 16:40:23.655" status="PASS" endtime="20170414 16:40:23.656"></status>
</kw>
<status starttime="20170414 16:40:23.654" status="PASS" endtime="20170414 16:40:23.656"></status>
</kw>
<status starttime="20170414 16:40:23.653" status="PASS" endtime="20170414 16:40:23.656"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:40:23.656">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:40:23.397" status="PASS" endtime="20170414 16:40:23.656"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:40:23.657">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:40:23.656" status="PASS" endtime="20170414 16:40:23.657"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:40:23.657">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170414 16:40:23.657">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170414 16:40:23.657">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status starttime="20170414 16:40:23.657" status="PASS" endtime="20170414 16:40:23.658"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:40:23.658">${state} = Off</msg>
<status starttime="20170414 16:40:23.397" status="PASS" endtime="20170414 16:40:23.658"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:40:23.658">${boot_progress} = Off</msg>
<status starttime="20170414 16:40:23.396" status="PASS" endtime="20170414 16:40:23.658"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:40:23.659">Off != FW Progress, Starting OS</msg>
<status starttime="20170414 16:40:23.658" status="FAIL" endtime="20170414 16:40:23.659"></status>
</kw>
<status starttime="20170414 16:40:23.395" status="FAIL" endtime="20170414 16:40:23.659"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:40:33.662">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:40:33.662" status="PASS" endtime="20170414 16:40:33.663"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:40:33.663">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:40:33.663" status="PASS" endtime="20170414 16:40:33.663"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:40:33.664">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:40:33.664" status="PASS" endtime="20170414 16:40:33.664"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:40:33.665">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:40:33.664" status="PASS" endtime="20170414 16:40:33.665"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:40:33.847">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:40:33.665" status="PASS" endtime="20170414 16:40:33.847"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:40:33.847">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:40:33.847">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:40:33.665" status="PASS" endtime="20170414 16:40:33.847"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:40:33.847">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:40:33.847" status="PASS" endtime="20170414 16:40:33.848"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:40:33.848">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:40:33.848" status="PASS" endtime="20170414 16:40:33.848"></status>
</kw>
<status starttime="20170414 16:40:33.661" status="PASS" endtime="20170414 16:40:33.848"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:40:33.849">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170414 16:40:33.849" status="PASS" endtime="20170414 16:40:33.849"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:40:33.851">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:40:33.850" status="PASS" endtime="20170414 16:40:33.851"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:40:33.852">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:40:33.852" status="PASS" endtime="20170414 16:40:33.852"></status>
</kw>
<status starttime="20170414 16:40:33.851" status="PASS" endtime="20170414 16:40:33.852"></status>
</kw>
<status starttime="20170414 16:40:33.850" status="PASS" endtime="20170414 16:40:33.852"></status>
</kw>
<status starttime="20170414 16:40:33.849" status="PASS" endtime="20170414 16:40:33.852"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:40:33.918">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170414 16:40:33.918">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:40:33.853" status="PASS" endtime="20170414 16:40:33.918"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:40:33.920">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:40:33.919" status="PASS" endtime="20170414 16:40:33.920"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:40:33.920">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:40:33.920" status="PASS" endtime="20170414 16:40:33.921"></status>
</kw>
<status starttime="20170414 16:40:33.920" status="PASS" endtime="20170414 16:40:33.921"></status>
</kw>
<status starttime="20170414 16:40:33.919" status="PASS" endtime="20170414 16:40:33.921"></status>
</kw>
<status starttime="20170414 16:40:33.918" status="PASS" endtime="20170414 16:40:33.921"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:40:33.921">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:40:33.661" status="PASS" endtime="20170414 16:40:33.921"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:40:33.922">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:40:33.921" status="PASS" endtime="20170414 16:40:33.922"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:40:33.922">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170414 16:40:33.922">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170414 16:40:33.922">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status starttime="20170414 16:40:33.922" status="PASS" endtime="20170414 16:40:33.923"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:40:33.923">${state} = Off</msg>
<status starttime="20170414 16:40:33.660" status="PASS" endtime="20170414 16:40:33.923"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:40:33.923">${boot_progress} = Off</msg>
<status starttime="20170414 16:40:33.660" status="PASS" endtime="20170414 16:40:33.923"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:40:33.924">Off != FW Progress, Starting OS</msg>
<status starttime="20170414 16:40:33.923" status="FAIL" endtime="20170414 16:40:33.924"></status>
</kw>
<status starttime="20170414 16:40:33.659" status="FAIL" endtime="20170414 16:40:33.924"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:40:43.928">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:40:43.927" status="PASS" endtime="20170414 16:40:43.929"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:40:43.930">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:40:43.929" status="PASS" endtime="20170414 16:40:43.930"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:40:43.931">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:40:43.930" status="PASS" endtime="20170414 16:40:43.931"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:40:43.932">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:40:43.931" status="PASS" endtime="20170414 16:40:43.932"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:40:44.116">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:40:43.933" status="PASS" endtime="20170414 16:40:44.116"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:40:44.116">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:40:44.116">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:40:43.932" status="PASS" endtime="20170414 16:40:44.116"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:40:44.117">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:40:44.116" status="PASS" endtime="20170414 16:40:44.117"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:40:44.118">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:40:44.117" status="PASS" endtime="20170414 16:40:44.118"></status>
</kw>
<status starttime="20170414 16:40:43.927" status="PASS" endtime="20170414 16:40:44.118"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:40:44.118">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170414 16:40:44.118" status="PASS" endtime="20170414 16:40:44.118"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:40:44.121">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:40:44.120" status="PASS" endtime="20170414 16:40:44.121"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:40:44.121">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:40:44.121" status="PASS" endtime="20170414 16:40:44.122"></status>
</kw>
<status starttime="20170414 16:40:44.121" status="PASS" endtime="20170414 16:40:44.122"></status>
</kw>
<status starttime="20170414 16:40:44.119" status="PASS" endtime="20170414 16:40:44.122"></status>
</kw>
<status starttime="20170414 16:40:44.119" status="PASS" endtime="20170414 16:40:44.122"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:40:44.189">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170414 16:40:44.189">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:40:44.122" status="PASS" endtime="20170414 16:40:44.189"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:40:44.191">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:40:44.190" status="PASS" endtime="20170414 16:40:44.191"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:40:44.192">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:40:44.192" status="PASS" endtime="20170414 16:40:44.192"></status>
</kw>
<status starttime="20170414 16:40:44.191" status="PASS" endtime="20170414 16:40:44.192"></status>
</kw>
<status starttime="20170414 16:40:44.190" status="PASS" endtime="20170414 16:40:44.192"></status>
</kw>
<status starttime="20170414 16:40:44.189" status="PASS" endtime="20170414 16:40:44.193"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:40:44.193">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:40:43.926" status="PASS" endtime="20170414 16:40:44.193"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:40:44.193">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:40:44.193" status="PASS" endtime="20170414 16:40:44.193"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:40:44.194">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170414 16:40:44.194">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170414 16:40:44.194">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status starttime="20170414 16:40:44.194" status="PASS" endtime="20170414 16:40:44.194"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:40:44.194">${state} = Off</msg>
<status starttime="20170414 16:40:43.925" status="PASS" endtime="20170414 16:40:44.195"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:40:44.195">${boot_progress} = Off</msg>
<status starttime="20170414 16:40:43.925" status="PASS" endtime="20170414 16:40:44.195"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:40:44.195">Off != FW Progress, Starting OS</msg>
<status starttime="20170414 16:40:44.195" status="FAIL" endtime="20170414 16:40:44.195"></status>
</kw>
<status starttime="20170414 16:40:43.924" status="FAIL" endtime="20170414 16:40:44.196"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:40:54.199">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:40:54.199" status="PASS" endtime="20170414 16:40:54.200"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:40:54.200">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:40:54.200" status="PASS" endtime="20170414 16:40:54.200"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:40:54.201">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:40:54.200" status="PASS" endtime="20170414 16:40:54.201"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:40:54.201">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:40:54.201" status="PASS" endtime="20170414 16:40:54.201"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:40:54.378">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:40:54.202" status="PASS" endtime="20170414 16:40:54.378"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:40:54.378">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:40:54.378">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:40:54.202" status="PASS" endtime="20170414 16:40:54.378"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:40:54.379">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:40:54.379" status="PASS" endtime="20170414 16:40:54.379"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:40:54.380">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:40:54.379" status="PASS" endtime="20170414 16:40:54.380"></status>
</kw>
<status starttime="20170414 16:40:54.198" status="PASS" endtime="20170414 16:40:54.380"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:40:54.380">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170414 16:40:54.380" status="PASS" endtime="20170414 16:40:54.380"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:40:54.383">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:40:54.382" status="PASS" endtime="20170414 16:40:54.383"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:40:54.384">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:40:54.383" status="PASS" endtime="20170414 16:40:54.384"></status>
</kw>
<status starttime="20170414 16:40:54.383" status="PASS" endtime="20170414 16:40:54.384"></status>
</kw>
<status starttime="20170414 16:40:54.381" status="PASS" endtime="20170414 16:40:54.384"></status>
</kw>
<status starttime="20170414 16:40:54.381" status="PASS" endtime="20170414 16:40:54.384"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:40:54.450">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170414 16:40:54.450">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:40:54.384" status="PASS" endtime="20170414 16:40:54.451"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:40:54.452">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:40:54.452" status="PASS" endtime="20170414 16:40:54.452"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:40:54.453">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:40:54.453" status="PASS" endtime="20170414 16:40:54.453"></status>
</kw>
<status starttime="20170414 16:40:54.452" status="PASS" endtime="20170414 16:40:54.453"></status>
</kw>
<status starttime="20170414 16:40:54.451" status="PASS" endtime="20170414 16:40:54.454"></status>
</kw>
<status starttime="20170414 16:40:54.451" status="PASS" endtime="20170414 16:40:54.454"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:40:54.454">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:40:54.198" status="PASS" endtime="20170414 16:40:54.454"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:40:54.454">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:40:54.454" status="PASS" endtime="20170414 16:40:54.455"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:40:54.455">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170414 16:40:54.455">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170414 16:40:54.455">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status starttime="20170414 16:40:54.455" status="PASS" endtime="20170414 16:40:54.455"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:40:54.455">${state} = Off</msg>
<status starttime="20170414 16:40:54.197" status="PASS" endtime="20170414 16:40:54.456"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:40:54.456">${boot_progress} = Off</msg>
<status starttime="20170414 16:40:54.197" status="PASS" endtime="20170414 16:40:54.456"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:40:54.456">Off != FW Progress, Starting OS</msg>
<status starttime="20170414 16:40:54.456" status="FAIL" endtime="20170414 16:40:54.456"></status>
</kw>
<status starttime="20170414 16:40:54.196" status="FAIL" endtime="20170414 16:40:54.457"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:04.460">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:41:04.460" status="PASS" endtime="20170414 16:41:04.461"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:04.461">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:41:04.461" status="PASS" endtime="20170414 16:41:04.461"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:04.462">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:41:04.462" status="PASS" endtime="20170414 16:41:04.462"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:04.463">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:41:04.463" status="PASS" endtime="20170414 16:41:04.463"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:04.641">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:41:04.464" status="PASS" endtime="20170414 16:41:04.642"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:41:04.642">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:41:04.642">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:41:04.463" status="PASS" endtime="20170414 16:41:04.642"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:04.643">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:41:04.642" status="PASS" endtime="20170414 16:41:04.643"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:04.644">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:41:04.643" status="PASS" endtime="20170414 16:41:04.644"></status>
</kw>
<status starttime="20170414 16:41:04.459" status="PASS" endtime="20170414 16:41:04.644"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:04.645">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170414 16:41:04.644" status="PASS" endtime="20170414 16:41:04.645"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:04.648">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:41:04.647" status="PASS" endtime="20170414 16:41:04.648"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:04.649">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:41:04.649" status="PASS" endtime="20170414 16:41:04.649"></status>
</kw>
<status starttime="20170414 16:41:04.648" status="PASS" endtime="20170414 16:41:04.649"></status>
</kw>
<status starttime="20170414 16:41:04.646" status="PASS" endtime="20170414 16:41:04.650"></status>
</kw>
<status starttime="20170414 16:41:04.645" status="PASS" endtime="20170414 16:41:04.650"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:04.764">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170414 16:41:04.764">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:41:04.650" status="PASS" endtime="20170414 16:41:04.764"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:04.767">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:41:04.766" status="PASS" endtime="20170414 16:41:04.767"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:04.769">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:41:04.768" status="PASS" endtime="20170414 16:41:04.769"></status>
</kw>
<status starttime="20170414 16:41:04.767" status="PASS" endtime="20170414 16:41:04.769"></status>
</kw>
<status starttime="20170414 16:41:04.765" status="PASS" endtime="20170414 16:41:04.769"></status>
</kw>
<status starttime="20170414 16:41:04.764" status="PASS" endtime="20170414 16:41:04.769"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:41:04.770">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:41:04.458" status="PASS" endtime="20170414 16:41:04.770"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:04.770">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:41:04.770" status="PASS" endtime="20170414 16:41:04.771"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:04.771">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170414 16:41:04.771">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170414 16:41:04.771">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status starttime="20170414 16:41:04.771" status="PASS" endtime="20170414 16:41:04.772"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:41:04.772">${state} = Off</msg>
<status starttime="20170414 16:41:04.458" status="PASS" endtime="20170414 16:41:04.772"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:41:04.772">${boot_progress} = Off</msg>
<status starttime="20170414 16:41:04.457" status="PASS" endtime="20170414 16:41:04.772"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:41:04.773">Off != FW Progress, Starting OS</msg>
<status starttime="20170414 16:41:04.773" status="FAIL" endtime="20170414 16:41:04.773"></status>
</kw>
<status starttime="20170414 16:41:04.457" status="FAIL" endtime="20170414 16:41:04.774"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:14.779">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:41:14.779" status="PASS" endtime="20170414 16:41:14.780"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:14.781">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:41:14.780" status="PASS" endtime="20170414 16:41:14.781"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:14.781">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:41:14.781" status="PASS" endtime="20170414 16:41:14.781"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:14.782">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:41:14.781" status="PASS" endtime="20170414 16:41:14.782"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:14.961">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:41:14.783" status="PASS" endtime="20170414 16:41:14.961"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:41:14.961">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:41:14.961">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:41:14.782" status="PASS" endtime="20170414 16:41:14.961"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:14.962">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:41:14.961" status="PASS" endtime="20170414 16:41:14.962"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:14.962">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:41:14.962" status="PASS" endtime="20170414 16:41:14.963"></status>
</kw>
<status starttime="20170414 16:41:14.777" status="PASS" endtime="20170414 16:41:14.963"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:14.963">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170414 16:41:14.963" status="PASS" endtime="20170414 16:41:14.963"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:14.965">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:41:14.965" status="PASS" endtime="20170414 16:41:14.965"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:14.966">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:41:14.966" status="PASS" endtime="20170414 16:41:14.966"></status>
</kw>
<status starttime="20170414 16:41:14.965" status="PASS" endtime="20170414 16:41:14.966"></status>
</kw>
<status starttime="20170414 16:41:14.964" status="PASS" endtime="20170414 16:41:14.967"></status>
</kw>
<status starttime="20170414 16:41:14.963" status="PASS" endtime="20170414 16:41:14.967"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:15.034">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170414 16:41:15.034">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:41:14.967" status="PASS" endtime="20170414 16:41:15.034"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:15.038">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:41:15.035" status="PASS" endtime="20170414 16:41:15.038"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:15.039">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:41:15.038" status="PASS" endtime="20170414 16:41:15.039"></status>
</kw>
<status starttime="20170414 16:41:15.038" status="PASS" endtime="20170414 16:41:15.039"></status>
</kw>
<status starttime="20170414 16:41:15.035" status="PASS" endtime="20170414 16:41:15.039"></status>
</kw>
<status starttime="20170414 16:41:15.034" status="PASS" endtime="20170414 16:41:15.039"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:41:15.039">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:41:14.776" status="PASS" endtime="20170414 16:41:15.039"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:15.040">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:41:15.040" status="PASS" endtime="20170414 16:41:15.040"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:15.041">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170414 16:41:15.041">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170414 16:41:15.041">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status starttime="20170414 16:41:15.040" status="PASS" endtime="20170414 16:41:15.041"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:41:15.041">${state} = Off</msg>
<status starttime="20170414 16:41:14.776" status="PASS" endtime="20170414 16:41:15.041"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:41:15.041">${boot_progress} = Off</msg>
<status starttime="20170414 16:41:14.775" status="PASS" endtime="20170414 16:41:15.041"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:41:15.042">Off != FW Progress, Starting OS</msg>
<status starttime="20170414 16:41:15.042" status="FAIL" endtime="20170414 16:41:15.042"></status>
</kw>
<status starttime="20170414 16:41:14.774" status="FAIL" endtime="20170414 16:41:15.042"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:25.047">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:41:25.047" status="PASS" endtime="20170414 16:41:25.048"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:25.048">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:41:25.048" status="PASS" endtime="20170414 16:41:25.048"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:25.049">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:41:25.049" status="PASS" endtime="20170414 16:41:25.049"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:25.050">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:41:25.049" status="PASS" endtime="20170414 16:41:25.050"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:25.232">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:41:25.050" status="PASS" endtime="20170414 16:41:25.232"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:41:25.233">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:41:25.233">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:41:25.050" status="PASS" endtime="20170414 16:41:25.233"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:25.233">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:41:25.233" status="PASS" endtime="20170414 16:41:25.233"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:25.234">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:41:25.234" status="PASS" endtime="20170414 16:41:25.234"></status>
</kw>
<status starttime="20170414 16:41:25.046" status="PASS" endtime="20170414 16:41:25.234"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:25.235">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170414 16:41:25.234" status="PASS" endtime="20170414 16:41:25.235"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:25.237">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:41:25.236" status="PASS" endtime="20170414 16:41:25.237"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:25.239">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:41:25.238" status="PASS" endtime="20170414 16:41:25.239"></status>
</kw>
<status starttime="20170414 16:41:25.238" status="PASS" endtime="20170414 16:41:25.239"></status>
</kw>
<status starttime="20170414 16:41:25.235" status="PASS" endtime="20170414 16:41:25.239"></status>
</kw>
<status starttime="20170414 16:41:25.235" status="PASS" endtime="20170414 16:41:25.239"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:25.306">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170414 16:41:25.306">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:41:25.239" status="PASS" endtime="20170414 16:41:25.306"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:25.308">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:41:25.307" status="PASS" endtime="20170414 16:41:25.308"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:25.308">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:41:25.308" status="PASS" endtime="20170414 16:41:25.309"></status>
</kw>
<status starttime="20170414 16:41:25.308" status="PASS" endtime="20170414 16:41:25.309"></status>
</kw>
<status starttime="20170414 16:41:25.307" status="PASS" endtime="20170414 16:41:25.309"></status>
</kw>
<status starttime="20170414 16:41:25.306" status="PASS" endtime="20170414 16:41:25.309"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:41:25.309">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:41:25.046" status="PASS" endtime="20170414 16:41:25.309"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:25.310">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:41:25.309" status="PASS" endtime="20170414 16:41:25.310"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:25.310">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170414 16:41:25.310">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170414 16:41:25.310">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status starttime="20170414 16:41:25.310" status="PASS" endtime="20170414 16:41:25.311"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:41:25.311">${state} = Off</msg>
<status starttime="20170414 16:41:25.045" status="PASS" endtime="20170414 16:41:25.311"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:41:25.311">${boot_progress} = Off</msg>
<status starttime="20170414 16:41:25.045" status="PASS" endtime="20170414 16:41:25.311"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:41:25.312">Off != FW Progress, Starting OS</msg>
<status starttime="20170414 16:41:25.311" status="FAIL" endtime="20170414 16:41:25.312"></status>
</kw>
<status starttime="20170414 16:41:25.044" status="FAIL" endtime="20170414 16:41:25.312"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:35.316">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:41:35.315" status="PASS" endtime="20170414 16:41:35.316"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:35.317">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:41:35.316" status="PASS" endtime="20170414 16:41:35.317"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:35.317">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:41:35.317" status="PASS" endtime="20170414 16:41:35.317"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:35.318">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:41:35.317" status="PASS" endtime="20170414 16:41:35.318"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:35.495">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:41:35.319" status="PASS" endtime="20170414 16:41:35.495"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:41:35.496">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:41:35.496">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:41:35.318" status="PASS" endtime="20170414 16:41:35.496"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:35.496">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:41:35.496" status="PASS" endtime="20170414 16:41:35.496"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:35.497">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:41:35.497" status="PASS" endtime="20170414 16:41:35.497"></status>
</kw>
<status starttime="20170414 16:41:35.315" status="PASS" endtime="20170414 16:41:35.497"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:35.498">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170414 16:41:35.497" status="PASS" endtime="20170414 16:41:35.498"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:35.500">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:41:35.499" status="PASS" endtime="20170414 16:41:35.500"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:35.501">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:41:35.500" status="PASS" endtime="20170414 16:41:35.501"></status>
</kw>
<status starttime="20170414 16:41:35.500" status="PASS" endtime="20170414 16:41:35.501"></status>
</kw>
<status starttime="20170414 16:41:35.498" status="PASS" endtime="20170414 16:41:35.501"></status>
</kw>
<status starttime="20170414 16:41:35.498" status="PASS" endtime="20170414 16:41:35.501"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:35.569">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170414 16:41:35.569">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:41:35.501" status="PASS" endtime="20170414 16:41:35.569"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:35.571">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:41:35.570" status="PASS" endtime="20170414 16:41:35.571"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:35.571">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:41:35.571" status="PASS" endtime="20170414 16:41:35.572"></status>
</kw>
<status starttime="20170414 16:41:35.571" status="PASS" endtime="20170414 16:41:35.572"></status>
</kw>
<status starttime="20170414 16:41:35.570" status="PASS" endtime="20170414 16:41:35.572"></status>
</kw>
<status starttime="20170414 16:41:35.569" status="PASS" endtime="20170414 16:41:35.572"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:41:35.572">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:41:35.314" status="PASS" endtime="20170414 16:41:35.572"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:35.573">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:41:35.572" status="PASS" endtime="20170414 16:41:35.573"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:35.573">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170414 16:41:35.573">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170414 16:41:35.573">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status starttime="20170414 16:41:35.573" status="PASS" endtime="20170414 16:41:35.573"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:41:35.574">${state} = Off</msg>
<status starttime="20170414 16:41:35.313" status="PASS" endtime="20170414 16:41:35.574"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:41:35.574">${boot_progress} = Off</msg>
<status starttime="20170414 16:41:35.313" status="PASS" endtime="20170414 16:41:35.574"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:41:35.575">Off != FW Progress, Starting OS</msg>
<status starttime="20170414 16:41:35.574" status="FAIL" endtime="20170414 16:41:35.575"></status>
</kw>
<status starttime="20170414 16:41:35.312" status="FAIL" endtime="20170414 16:41:35.575"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:45.578">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:41:45.578" status="PASS" endtime="20170414 16:41:45.579"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:45.580">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:41:45.580" status="PASS" endtime="20170414 16:41:45.580"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:45.580">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:41:45.580" status="PASS" endtime="20170414 16:41:45.580"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:45.581">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:41:45.581" status="PASS" endtime="20170414 16:41:45.581"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:45.757">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:41:45.582" status="PASS" endtime="20170414 16:41:45.757"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:41:45.757">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:41:45.757">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:41:45.581" status="PASS" endtime="20170414 16:41:45.757"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:45.758">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:41:45.757" status="PASS" endtime="20170414 16:41:45.758"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:45.758">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:41:45.758" status="PASS" endtime="20170414 16:41:45.758"></status>
</kw>
<status starttime="20170414 16:41:45.577" status="PASS" endtime="20170414 16:41:45.759"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:45.759">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170414 16:41:45.759" status="PASS" endtime="20170414 16:41:45.759"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:45.761">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:41:45.761" status="PASS" endtime="20170414 16:41:45.761"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:45.762">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170414 16:41:45.762" status="PASS" endtime="20170414 16:41:45.762"></status>
</kw>
<status starttime="20170414 16:41:45.761" status="PASS" endtime="20170414 16:41:45.762"></status>
</kw>
<status starttime="20170414 16:41:45.760" status="PASS" endtime="20170414 16:41:45.762"></status>
</kw>
<status starttime="20170414 16:41:45.760" status="PASS" endtime="20170414 16:41:45.763"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:45.829">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170414 16:41:45.829">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:41:45.763" status="PASS" endtime="20170414 16:41:45.829"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:45.831">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:41:45.830" status="PASS" endtime="20170414 16:41:45.831"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:45.832">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:41:45.832" status="PASS" endtime="20170414 16:41:45.832"></status>
</kw>
<status starttime="20170414 16:41:45.831" status="PASS" endtime="20170414 16:41:45.832"></status>
</kw>
<status starttime="20170414 16:41:45.830" status="PASS" endtime="20170414 16:41:45.832"></status>
</kw>
<status starttime="20170414 16:41:45.830" status="PASS" endtime="20170414 16:41:45.832"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:41:45.833">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:41:45.577" status="PASS" endtime="20170414 16:41:45.833"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:45.833">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:41:45.833" status="PASS" endtime="20170414 16:41:45.833"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:45.834">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170414 16:41:45.834">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170414 16:41:45.834">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status starttime="20170414 16:41:45.834" status="PASS" endtime="20170414 16:41:45.834"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:41:45.834">${state} = Off</msg>
<status starttime="20170414 16:41:45.576" status="PASS" endtime="20170414 16:41:45.834"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:41:45.835">${boot_progress} = Off</msg>
<status starttime="20170414 16:41:45.576" status="PASS" endtime="20170414 16:41:45.835"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:41:45.835">Off != FW Progress, Starting OS</msg>
<status starttime="20170414 16:41:45.835" status="FAIL" endtime="20170414 16:41:45.835"></status>
</kw>
<status starttime="20170414 16:41:45.575" status="FAIL" endtime="20170414 16:41:45.835"></status>
</kw>
<msg level="FAIL" timestamp="20170414 16:41:45.836">Keyword 'Is OS Starting' failed after retrying for 10 minutes. The last error was: Off != FW Progress, Starting OS</msg>
<status starttime="20170414 16:31:36.157" status="FAIL" endtime="20170414 16:41:45.836"></status>
</kw>
<status starttime="20170414 16:31:02.456" status="FAIL" endtime="20170414 16:41:45.836"></status>
</kw>
<status starttime="20170414 16:31:02.456" status="FAIL" endtime="20170414 16:41:45.836"></status>
</kw>
<kw name="Test Exit Logs" type="teardown">
<doc>Collect FFDC and SOL log.</doc>
<kw library="openbmc_ffdc" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="state_manager" name="Is Host Quiesced">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:45.841">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:41:45.840" status="PASS" endtime="20170414 16:41:45.841"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:45.842">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:41:45.842" status="PASS" endtime="20170414 16:41:45.842"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:45.843">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:41:45.843" status="PASS" endtime="20170414 16:41:45.843"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:45.844">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:41:45.843" status="PASS" endtime="20170414 16:41:45.844"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:46.026">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:41:45.845" status="PASS" endtime="20170414 16:41:46.026"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:41:46.026">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:41:46.026">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:41:45.844" status="PASS" endtime="20170414 16:41:46.026"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:46.026">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:41:46.026" status="PASS" endtime="20170414 16:41:46.027"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:46.027">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:41:46.027" status="PASS" endtime="20170414 16:41:46.027"></status>
</kw>
<status starttime="20170414 16:41:45.840" status="PASS" endtime="20170414 16:41:46.027"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:46.028">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170414 16:41:46.028" status="PASS" endtime="20170414 16:41:46.028"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:46.030">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170414 16:41:46.029" status="PASS" endtime="20170414 16:41:46.030"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:46.031">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170414 16:41:46.031" status="PASS" endtime="20170414 16:41:46.031"></status>
</kw>
<status starttime="20170414 16:41:46.030" status="PASS" endtime="20170414 16:41:46.031"></status>
</kw>
<status starttime="20170414 16:41:46.029" status="PASS" endtime="20170414 16:41:46.032"></status>
</kw>
<status starttime="20170414 16:41:46.028" status="PASS" endtime="20170414 16:41:46.032"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:46.095">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170414 16:41:46.095">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:41:46.032" status="PASS" endtime="20170414 16:41:46.095"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:46.097">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:41:46.096" status="PASS" endtime="20170414 16:41:46.097"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:46.098">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:41:46.098" status="PASS" endtime="20170414 16:41:46.098"></status>
</kw>
<status starttime="20170414 16:41:46.097" status="PASS" endtime="20170414 16:41:46.098"></status>
</kw>
<status starttime="20170414 16:41:46.096" status="PASS" endtime="20170414 16:41:46.098"></status>
</kw>
<status starttime="20170414 16:41:46.095" status="PASS" endtime="20170414 16:41:46.098"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:41:46.098">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:41:45.839" status="PASS" endtime="20170414 16:41:46.098"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:46.099">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:41:46.099" status="PASS" endtime="20170414 16:41:46.099"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:46.100">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170414 16:41:46.100">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170414 16:41:46.100">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok'}</msg>
<status starttime="20170414 16:41:46.099" status="PASS" endtime="20170414 16:41:46.100"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:41:46.100">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170414 16:41:45.838" status="PASS" endtime="20170414 16:41:46.100"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:41:46.100">${host_state} = Quiesced</msg>
<status starttime="20170414 16:41:45.838" status="PASS" endtime="20170414 16:41:46.101"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<status starttime="20170414 16:41:46.101" status="PASS" endtime="20170414 16:41:46.101"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:41:46.102">${status} = True</msg>
<status starttime="20170414 16:41:46.101" status="PASS" endtime="20170414 16:41:46.102"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:41:46.102">${status} = True</msg>
<status starttime="20170414 16:41:45.837" status="PASS" endtime="20170414 16:41:46.102"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw library="openbmc_ffdc" name="Ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw library="utils" name="Ping Host">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:46.104">Length is 10</msg>
<status starttime="20170414 16:41:46.103" status="PASS" endtime="20170414 16:41:46.104"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:46.109">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170414 16:41:49.112">${RC} = 0</msg>
<msg level="INFO" timestamp="20170414 16:41:49.112">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.36 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.665 ms
64 bytes from 9.3.86.161: icmp_seq...</msg>
<status starttime="20170414 16:41:46.104" status="PASS" endtime="20170414 16:41:49.112"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:49.115">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.36 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.665 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.619 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.595 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3000ms
rtt min/avg/max/mdev = 0.595/0.810/1.361/0.319 ms</msg>
<status starttime="20170414 16:41:49.114" status="PASS" endtime="20170414 16:41:49.115"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status starttime="20170414 16:41:49.115" status="PASS" endtime="20170414 16:41:49.115"></status>
</kw>
<status starttime="20170414 16:41:46.103" status="PASS" endtime="20170414 16:41:49.116"></status>
</kw>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:41:49.269">Dictionary does not contain key 'host'.</msg>
<status starttime="20170414 16:41:49.268" status="FAIL" endtime="20170414 16:41:49.269"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:41:49.269">${has_host} = False</msg>
<status starttime="20170414 16:41:49.268" status="PASS" endtime="20170414 16:41:49.269"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170414 16:41:49.270" status="PASS" endtime="20170414 16:41:49.270"></status>
</kw>
<status starttime="20170414 16:41:49.269" status="PASS" endtime="20170414 16:41:49.270"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:49.272">${port_num} = 22</msg>
<status starttime="20170414 16:41:49.271" status="PASS" endtime="20170414 16:41:49.272"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:49.272">${SSH_PORT} = 22</msg>
<status starttime="20170414 16:41:49.272" status="PASS" endtime="20170414 16:41:49.272"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:49.273">${https_num} = 443</msg>
<status starttime="20170414 16:41:49.272" status="PASS" endtime="20170414 16:41:49.273"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:49.274">${AUTH_URI} = https://9.3.86.161:443</msg>
<status starttime="20170414 16:41:49.273" status="PASS" endtime="20170414 16:41:49.274"></status>
</kw>
<status starttime="20170414 16:41:49.271" status="PASS" endtime="20170414 16:41:49.274"></status>
</kw>
<status starttime="20170414 16:41:49.270" status="PASS" endtime="20170414 16:41:49.274"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:41:49.275">Dictionary does not contain key 'port'.</msg>
<status starttime="20170414 16:41:49.274" status="FAIL" endtime="20170414 16:41:49.275"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:41:49.275">${has_port} = False</msg>
<status starttime="20170414 16:41:49.274" status="PASS" endtime="20170414 16:41:49.275"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170414 16:41:49.276" status="PASS" endtime="20170414 16:41:49.277"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170414 16:41:49.277" status="PASS" endtime="20170414 16:41:49.278"></status>
</kw>
<status starttime="20170414 16:41:49.276" status="PASS" endtime="20170414 16:41:49.278"></status>
</kw>
<status starttime="20170414 16:41:49.275" status="PASS" endtime="20170414 16:41:49.278"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:49.278">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170414 16:41:50.924">Read output: root@witherspoon:~#</msg>
<status starttime="20170414 16:41:49.278" status="PASS" endtime="20170414 16:41:50.925"></status>
</kw>
<status starttime="20170414 16:41:49.267" status="PASS" endtime="20170414 16:41:50.925"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:50.941">${cur_time} = 2017-04-14 16:41:50:940943</msg>
<status starttime="20170414 16:41:50.941" status="PASS" endtime="20170414 16:41:50.941"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:50.942">${cur_time} = 20170414164150940943</msg>
<status starttime="20170414 16:41:50.941" status="PASS" endtime="20170414 16:41:50.942"></status>
</kw>
<status starttime="20170414 16:41:50.940" status="PASS" endtime="20170414 16:41:50.942"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:41:50.946">${FFDC_TIME} = 20170414164150940943</msg>
<kw library="openbmc_ffdc_utils" name="Get Test Dir and Name">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:50.955">${suite_name} = TestsTestBasicPoweron</msg>
<status starttime="20170414 16:41:50.955" status="PASS" endtime="20170414 16:41:50.955"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:50.955">${suite_name} = 20170414164150940943_TestsTestBasicPoweron</msg>
<status starttime="20170414 16:41:50.955" status="PASS" endtime="20170414 16:41:50.955"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:50.956">${test_name} = PowerOnTest</msg>
<status starttime="20170414 16:41:50.956" status="PASS" endtime="20170414 16:41:50.956"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:50.957">${test_name} = 20170414164150940943_PowerOnTest</msg>
<status starttime="20170414 16:41:50.956" status="PASS" endtime="20170414 16:41:50.957"></status>
</kw>
<status starttime="20170414 16:41:50.954" status="PASS" endtime="20170414 16:41:50.957"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:41:50.976">${LOG_PREFIX} = /tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_</msg>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170414 16:41:50.977">Created directory '&lt;a href="file:///tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest"&gt;/tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest&lt;/a&gt;'.</msg>
<status starttime="20170414 16:41:50.977" status="PASS" endtime="20170414 16:41:50.977"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:41:50.981">${FFDC_FILE_PATH} = /tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt</msg>
<kw library="openbmc_ffdc_utils" name="Header Message">
<doc>Write header message to the report document manifest.</doc>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170414 16:41:50.983">Appended to file '&lt;a href="file:///tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt"&gt;/tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170414 16:41:50.982" status="PASS" endtime="20170414 16:41:50.983"></status>
</kw>
<status starttime="20170414 16:41:50.982" status="PASS" endtime="20170414 16:41:50.983"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170414 16:41:50.984">Appended to file '&lt;a href="file:///tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt"&gt;/tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170414 16:41:50.984" status="PASS" endtime="20170414 16:41:50.984"></status>
</kw>
<status starttime="20170414 16:41:50.983" status="PASS" endtime="20170414 16:41:50.984"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170414 16:41:50.985">Appended to file '&lt;a href="file:///tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt"&gt;/tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170414 16:41:50.985" status="PASS" endtime="20170414 16:41:50.986"></status>
</kw>
<status starttime="20170414 16:41:50.985" status="PASS" endtime="20170414 16:41:50.986"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170414 16:41:50.987">Appended to file '&lt;a href="file:///tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt"&gt;/tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170414 16:41:50.986" status="PASS" endtime="20170414 16:41:50.987"></status>
</kw>
<status starttime="20170414 16:41:50.986" status="PASS" endtime="20170414 16:41:50.987"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170414 16:41:50.988">Appended to file '&lt;a href="file:///tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt"&gt;/tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170414 16:41:50.988" status="PASS" endtime="20170414 16:41:50.988"></status>
</kw>
<status starttime="20170414 16:41:50.987" status="PASS" endtime="20170414 16:41:50.988"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170414 16:41:50.990">Appended to file '&lt;a href="file:///tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt"&gt;/tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170414 16:41:50.989" status="PASS" endtime="20170414 16:41:50.990"></status>
</kw>
<status starttime="20170414 16:41:50.988" status="PASS" endtime="20170414 16:41:50.990"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170414 16:41:50.991">Appended to file '&lt;a href="file:///tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt"&gt;/tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170414 16:41:50.991" status="PASS" endtime="20170414 16:41:50.991"></status>
</kw>
<status starttime="20170414 16:41:50.990" status="PASS" endtime="20170414 16:41:50.991"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170414 16:41:50.992">Appended to file '&lt;a href="file:///tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt"&gt;/tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170414 16:41:50.992" status="PASS" endtime="20170414 16:41:50.992"></status>
</kw>
<status starttime="20170414 16:41:50.991" status="PASS" endtime="20170414 16:41:50.993"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170414 16:41:50.994">Appended to file '&lt;a href="file:///tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt"&gt;/tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170414 16:41:50.993" status="PASS" endtime="20170414 16:41:50.994"></status>
</kw>
<status starttime="20170414 16:41:50.993" status="PASS" endtime="20170414 16:41:50.994"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Test Setup Info">
<doc>BMC IP, Model and other information</doc>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170414 16:41:50.995">Appended to file '&lt;a href="file:///tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt"&gt;/tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170414 16:41:50.995" status="PASS" endtime="20170414 16:41:50.995"></status>
</kw>
<status starttime="20170414 16:41:50.994" status="PASS" endtime="20170414 16:41:50.995"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170414 16:41:50.996">Appended to file '&lt;a href="file:///tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt"&gt;/tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170414 16:41:50.996" status="PASS" endtime="20170414 16:41:50.996"></status>
</kw>
<status starttime="20170414 16:41:50.996" status="PASS" endtime="20170414 16:41:50.997"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170414 16:41:50.998">Appended to file '&lt;a href="file:///tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt"&gt;/tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170414 16:41:50.997" status="PASS" endtime="20170414 16:41:50.998"></status>
</kw>
<status starttime="20170414 16:41:50.997" status="PASS" endtime="20170414 16:41:50.998"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170414 16:41:50.999">Appended to file '&lt;a href="file:///tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt"&gt;/tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170414 16:41:50.999" status="PASS" endtime="20170414 16:41:50.999"></status>
</kw>
<status starttime="20170414 16:41:50.998" status="PASS" endtime="20170414 16:41:50.999"></status>
</kw>
<kw library="utils" name="Get BMC System Model">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:51.000">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170414 16:41:51.077">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170414 16:41:51.077">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170414 16:41:51.077">${stderr} = </msg>
<status starttime="20170414 16:41:51.000" status="PASS" endtime="20170414 16:41:51.077"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:51.078">Length is 0</msg>
<status starttime="20170414 16:41:51.077" status="PASS" endtime="20170414 16:41:51.078"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:51.078">Length is 11</msg>
<status starttime="20170414 16:41:51.078" status="PASS" endtime="20170414 16:41:51.078"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:41:51.078">${model_name} = Witherspoon</msg>
<status starttime="20170414 16:41:50.999" status="PASS" endtime="20170414 16:41:51.078"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170414 16:41:51.080">Appended to file '&lt;a href="file:///tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt"&gt;/tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170414 16:41:51.079" status="PASS" endtime="20170414 16:41:51.080"></status>
</kw>
<status starttime="20170414 16:41:51.079" status="PASS" endtime="20170414 16:41:51.080"></status>
</kw>
<status starttime="20170414 16:41:50.994" status="PASS" endtime="20170414 16:41:51.080"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170414 16:41:51.081">Appended to file '&lt;a href="file:///tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt"&gt;/tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170414 16:41:51.081" status="PASS" endtime="20170414 16:41:51.081"></status>
</kw>
<status starttime="20170414 16:41:51.080" status="PASS" endtime="20170414 16:41:51.082"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:51.082">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status starttime="20170414 16:41:51.082" status="PASS" endtime="20170414 16:41:51.082"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170414 16:41:51.083">Appended to file '&lt;a href="file:///tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt"&gt;/tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170414 16:41:51.083" status="PASS" endtime="20170414 16:41:51.084"></status>
</kw>
<status starttime="20170414 16:41:51.082" status="PASS" endtime="20170414 16:41:51.084"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170414 16:41:51.085">Appended to file '&lt;a href="file:///tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt"&gt;/tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170414 16:41:51.084" status="PASS" endtime="20170414 16:41:51.085"></status>
</kw>
<status starttime="20170414 16:41:51.084" status="PASS" endtime="20170414 16:41:51.085"></status>
</kw>
<status starttime="20170414 16:41:51.082" status="PASS" endtime="20170414 16:41:51.085"></status>
</kw>
<kw name="${index} = DRIVER INFO" type="foritem">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170414 16:41:51.086">Appended to file '&lt;a href="file:///tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt"&gt;/tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170414 16:41:51.086" status="PASS" endtime="20170414 16:41:51.086"></status>
</kw>
<status starttime="20170414 16:41:51.085" status="PASS" endtime="20170414 16:41:51.087"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170414 16:41:51.088">Appended to file '&lt;a href="file:///tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt"&gt;/tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170414 16:41:51.087" status="PASS" endtime="20170414 16:41:51.088"></status>
</kw>
<status starttime="20170414 16:41:51.087" status="PASS" endtime="20170414 16:41:51.088"></status>
</kw>
<status starttime="20170414 16:41:51.085" status="PASS" endtime="20170414 16:41:51.088"></status>
</kw>
<kw name="${index} = BMC DATA" type="foritem">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170414 16:41:51.089">Appended to file '&lt;a href="file:///tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt"&gt;/tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170414 16:41:51.089" status="PASS" endtime="20170414 16:41:51.089"></status>
</kw>
<status starttime="20170414 16:41:51.088" status="PASS" endtime="20170414 16:41:51.089"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170414 16:41:51.090">Appended to file '&lt;a href="file:///tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt"&gt;/tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170414 16:41:51.090" status="PASS" endtime="20170414 16:41:51.090"></status>
</kw>
<status starttime="20170414 16:41:51.089" status="PASS" endtime="20170414 16:41:51.090"></status>
</kw>
<status starttime="20170414 16:41:51.088" status="PASS" endtime="20170414 16:41:51.091"></status>
</kw>
<status starttime="20170414 16:41:51.082" status="PASS" endtime="20170414 16:41:51.091"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170414 16:41:51.092">Appended to file '&lt;a href="file:///tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt"&gt;/tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170414 16:41:51.091" status="PASS" endtime="20170414 16:41:51.092"></status>
</kw>
<status starttime="20170414 16:41:51.091" status="PASS" endtime="20170414 16:41:51.092"></status>
</kw>
<status starttime="20170414 16:41:50.982" status="PASS" endtime="20170414 16:41:51.092"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Call FFDC Methods">
<doc>Calls into FFDC Keyword index list</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:51.093">@{entries} = [ BMC LOGS ]</msg>
<status starttime="20170414 16:41:51.093" status="PASS" endtime="20170414 16:41:51.093"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC LOGS" type="foritem">
<kw library="openbmc_ffdc_methods" name="Method Call Keyword List">
<doc>Iterate the list through keyword index</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Call">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:51.094">@{method_list} = [ ('OS FFDC', 'OS FFDC Files') | ('Core Files', 'SCP Coredump Files') | ('BMC Specific Files', 'BMC FFDC Files') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('SEL Log', 'Collect eSEL Log') | ('F...</msg>
<status starttime="20170414 16:41:51.094" status="PASS" endtime="20170414 16:41:51.094"></status>
</kw>
<kw name="${method} IN [ @{method_list} ]" type="for">
<kw name="${method} = ('OS FFDC', 'OS FFDC Files')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="OS FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:51.097">Returning from the enclosing user keyword.</msg>
<status starttime="20170414 16:41:51.096" status="PASS" endtime="20170414 16:41:51.097"></status>
</kw>
<status starttime="20170414 16:41:51.096" status="PASS" endtime="20170414 16:41:51.097"></status>
</kw>
<status starttime="20170414 16:41:51.095" status="PASS" endtime="20170414 16:41:51.097"></status>
</kw>
<status starttime="20170414 16:41:51.094" status="PASS" endtime="20170414 16:41:51.097"></status>
</kw>
<status starttime="20170414 16:41:51.094" status="PASS" endtime="20170414 16:41:51.097"></status>
</kw>
<kw name="${method} = ('Core Files', 'SCP Coredump Files')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="SCP Coredump Files">
<doc>Copy core dump file from BMC to local system.</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:41:51.100">Dictionary does not contain key 'host'.</msg>
<status starttime="20170414 16:41:51.100" status="FAIL" endtime="20170414 16:41:51.100"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:41:51.100">${has_host} = False</msg>
<status starttime="20170414 16:41:51.099" status="PASS" endtime="20170414 16:41:51.101"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170414 16:41:51.101" status="PASS" endtime="20170414 16:41:51.102"></status>
</kw>
<status starttime="20170414 16:41:51.101" status="PASS" endtime="20170414 16:41:51.102"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:51.103">${port_num} = 22</msg>
<status starttime="20170414 16:41:51.103" status="PASS" endtime="20170414 16:41:51.103"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:51.104">${SSH_PORT} = 22</msg>
<status starttime="20170414 16:41:51.103" status="PASS" endtime="20170414 16:41:51.104"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:51.104">${https_num} = 443</msg>
<status starttime="20170414 16:41:51.104" status="PASS" endtime="20170414 16:41:51.104"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:51.105">${AUTH_URI} = https://9.3.86.161:443</msg>
<status starttime="20170414 16:41:51.104" status="PASS" endtime="20170414 16:41:51.105"></status>
</kw>
<status starttime="20170414 16:41:51.102" status="PASS" endtime="20170414 16:41:51.105"></status>
</kw>
<status starttime="20170414 16:41:51.102" status="PASS" endtime="20170414 16:41:51.105"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:41:51.106">Dictionary does not contain key 'port'.</msg>
<status starttime="20170414 16:41:51.106" status="FAIL" endtime="20170414 16:41:51.106"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:41:51.106">${has_port} = False</msg>
<status starttime="20170414 16:41:51.105" status="PASS" endtime="20170414 16:41:51.106"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170414 16:41:51.108" status="PASS" endtime="20170414 16:41:51.108"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170414 16:41:51.108" status="PASS" endtime="20170414 16:41:51.111"></status>
</kw>
<status starttime="20170414 16:41:51.107" status="PASS" endtime="20170414 16:41:51.111"></status>
</kw>
<status starttime="20170414 16:41:51.107" status="PASS" endtime="20170414 16:41:51.111"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:51.112">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170414 16:41:52.720">Read output: root@witherspoon:~#</msg>
<status starttime="20170414 16:41:51.112" status="PASS" endtime="20170414 16:41:52.720"></status>
</kw>
<status starttime="20170414 16:41:51.099" status="PASS" endtime="20170414 16:41:52.721"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:52.721">Executing command 'ls /tmp/core_*'.</msg>
<msg level="INFO" timestamp="20170414 16:41:52.768">Command exited with return code 1.</msg>
<msg level="INFO" timestamp="20170414 16:41:52.768">${core_files} = </msg>
<status starttime="20170414 16:41:52.721" status="PASS" endtime="20170414 16:41:52.768"></status>
</kw>
<kw library="String" name="Split String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:52.768">@{core_list} = [ ]</msg>
<status starttime="20170414 16:41:52.768" status="PASS" endtime="20170414 16:41:52.768"></status>
</kw>
<kw library="connection_client" name="Open Connection for SCP">
<kw library="BuiltIn" name="Import Library">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status starttime="20170414 16:41:52.769" status="PASS" endtime="20170414 16:41:52.775"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw library="scp" name="Open Connection">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status starttime="20170414 16:41:52.776" status="PASS" endtime="20170414 16:41:53.411"></status>
</kw>
<status starttime="20170414 16:41:52.776" status="PASS" endtime="20170414 16:41:53.411"></status>
</kw>
<status starttime="20170414 16:41:52.775" status="PASS" endtime="20170414 16:41:53.411"></status>
</kw>
<status starttime="20170414 16:41:52.768" status="PASS" endtime="20170414 16:41:53.412"></status>
</kw>
<kw name="${index} IN [ @{core_list} ]" type="for">
<status starttime="20170414 16:41:53.412" status="PASS" endtime="20170414 16:41:53.412"></status>
</kw>
<status starttime="20170414 16:41:51.098" status="PASS" endtime="20170414 16:41:53.412"></status>
</kw>
<status starttime="20170414 16:41:51.098" status="PASS" endtime="20170414 16:41:53.412"></status>
</kw>
<status starttime="20170414 16:41:51.097" status="PASS" endtime="20170414 16:41:53.412"></status>
</kw>
<status starttime="20170414 16:41:51.097" status="PASS" endtime="20170414 16:41:53.412"></status>
</kw>
<kw name="${method} = ('BMC Specific Files', 'BMC FFDC Files')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:41:53.415">Dictionary does not contain key 'host'.</msg>
<status starttime="20170414 16:41:53.415" status="FAIL" endtime="20170414 16:41:53.415"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:41:53.415">${has_host} = False</msg>
<status starttime="20170414 16:41:53.414" status="PASS" endtime="20170414 16:41:53.415"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170414 16:41:53.416" status="PASS" endtime="20170414 16:41:53.416"></status>
</kw>
<status starttime="20170414 16:41:53.416" status="PASS" endtime="20170414 16:41:53.417"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:53.418">${port_num} = 22</msg>
<status starttime="20170414 16:41:53.418" status="PASS" endtime="20170414 16:41:53.418"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:53.419">${SSH_PORT} = 22</msg>
<status starttime="20170414 16:41:53.418" status="PASS" endtime="20170414 16:41:53.419"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:53.419">${https_num} = 443</msg>
<status starttime="20170414 16:41:53.419" status="PASS" endtime="20170414 16:41:53.419"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:53.420">${AUTH_URI} = https://9.3.86.161:443</msg>
<status starttime="20170414 16:41:53.419" status="PASS" endtime="20170414 16:41:53.420"></status>
</kw>
<status starttime="20170414 16:41:53.417" status="PASS" endtime="20170414 16:41:53.420"></status>
</kw>
<status starttime="20170414 16:41:53.417" status="PASS" endtime="20170414 16:41:53.421"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:41:53.421">Dictionary does not contain key 'port'.</msg>
<status starttime="20170414 16:41:53.421" status="FAIL" endtime="20170414 16:41:53.422"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:41:53.422">${has_port} = False</msg>
<status starttime="20170414 16:41:53.421" status="PASS" endtime="20170414 16:41:53.422"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170414 16:41:53.423" status="PASS" endtime="20170414 16:41:53.423"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170414 16:41:53.424" status="PASS" endtime="20170414 16:41:53.424"></status>
</kw>
<status starttime="20170414 16:41:53.423" status="PASS" endtime="20170414 16:41:53.424"></status>
</kw>
<status starttime="20170414 16:41:53.422" status="PASS" endtime="20170414 16:41:53.424"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:53.425">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170414 16:41:55.070">Read output: root@witherspoon:~#</msg>
<status starttime="20170414 16:41:53.424" status="PASS" endtime="20170414 16:41:55.070"></status>
</kw>
<status starttime="20170414 16:41:53.414" status="PASS" endtime="20170414 16:41:55.070"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc File Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:55.071">@{entries} = [ BMC FILES ]</msg>
<status starttime="20170414 16:41:55.071" status="PASS" endtime="20170414 16:41:55.071"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC FILES" type="foritem">
<kw library="openbmc_ffdc_methods" name="Create File and Write Data">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="OperatingSystem" name="Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>echo ${OPENBMC_HOST} | sed 's/\(\.\)/\\\1/g'</arg>
</arguments>
<assign>
<var>${OPENBMC_HOST_REGEX}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:55.077">Running command 'echo 9.3.86.161 | sed 's/(.)/\1/g' 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170414 16:41:55.081">${OPENBMC_HOST_REGEX} = sed: -e expression #1, char 10: invalid reference \1 on `s' command's RHS</msg>
<status starttime="20170414 16:41:55.072" status="PASS" endtime="20170414 16:41:55.081"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc File">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:55.084">@{cmd_list} = [ ('BMC_dmesg', 'dmesg') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_proc_list', 'top -n 1 -b') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_journalctl', 'journalctl --no-pager') ]</msg>
<status starttime="20170414 16:41:55.083" status="PASS" endtime="20170414 16:41:55.085"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_dmesg', 'dmesg')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:55.086">${logpath} = /tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_dmesg.txt</msg>
<status starttime="20170414 16:41:55.085" status="PASS" endtime="20170414 16:41:55.086"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170414 16:41:55.088" status="PASS" endtime="20170414 16:41:55.089"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:55.090">Executing command 'dmesg'.</msg>
<msg level="INFO" timestamp="20170414 16:41:55.148">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170414 16:41:55.148">${stdout} = aspeed-smc 1e620000.flash-controller: DMA support deactivated.
aspeed-smc 1e620000.flash-controller: control register changed to: 00000640
platform 1e620000.flash-controller:flash@0: mx25l25635e (3276...</msg>
<msg level="INFO" timestamp="20170414 16:41:55.149">${stderr} = </msg>
<status starttime="20170414 16:41:55.089" status="PASS" endtime="20170414 16:41:55.149"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170414 16:41:55.155">Appended to file '&lt;a href="file:///tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_dmesg.txt"&gt;/tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status starttime="20170414 16:41:55.154" status="PASS" endtime="20170414 16:41:55.155"></status>
</kw>
<status starttime="20170414 16:41:55.153" status="PASS" endtime="20170414 16:41:55.155"></status>
</kw>
<status starttime="20170414 16:41:55.149" status="PASS" endtime="20170414 16:41:55.155"></status>
</kw>
<status starttime="20170414 16:41:55.087" status="PASS" endtime="20170414 16:41:55.155"></status>
</kw>
<kw library="OperatingSystem" name="Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sed -i 's/'${OPENBMC_HOST_REGEX}'/DUMMYIP/g' ${logpath}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:55.160">Running command 'sed -i 's/'sed: -e expression #1, char 10: invalid reference \1 on `s' command's RHS'/DUMMYIP/g' /tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_dmesg.txt 2&gt;&amp;1'.</msg>
<status starttime="20170414 16:41:55.156" status="PASS" endtime="20170414 16:41:55.163"></status>
</kw>
<status starttime="20170414 16:41:55.085" status="PASS" endtime="20170414 16:41:55.163"></status>
</kw>
<kw name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:55.167">${logpath} = /tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_procinfo.txt</msg>
<status starttime="20170414 16:41:55.166" status="PASS" endtime="20170414 16:41:55.167"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170414 16:41:55.169" status="PASS" endtime="20170414 16:41:55.170"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:55.171">Executing command 'cat /proc/cpuinfo'.</msg>
<msg level="INFO" timestamp="20170414 16:41:55.224">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170414 16:41:55.224">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<msg level="INFO" timestamp="20170414 16:41:55.224">${stderr} = </msg>
<status starttime="20170414 16:41:55.170" status="PASS" endtime="20170414 16:41:55.224"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170414 16:41:55.231">Appended to file '&lt;a href="file:///tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_procinfo.txt"&gt;/tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status starttime="20170414 16:41:55.230" status="PASS" endtime="20170414 16:41:55.231"></status>
</kw>
<status starttime="20170414 16:41:55.229" status="PASS" endtime="20170414 16:41:55.231"></status>
</kw>
<status starttime="20170414 16:41:55.224" status="PASS" endtime="20170414 16:41:55.231"></status>
</kw>
<status starttime="20170414 16:41:55.167" status="PASS" endtime="20170414 16:41:55.231"></status>
</kw>
<kw library="OperatingSystem" name="Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sed -i 's/'${OPENBMC_HOST_REGEX}'/DUMMYIP/g' ${logpath}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:55.237">Running command 'sed -i 's/'sed: -e expression #1, char 10: invalid reference \1 on `s' command's RHS'/DUMMYIP/g' /tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_procinfo.txt 2&gt;&amp;1'.</msg>
<status starttime="20170414 16:41:55.232" status="PASS" endtime="20170414 16:41:55.242"></status>
</kw>
<status starttime="20170414 16:41:55.164" status="PASS" endtime="20170414 16:41:55.243"></status>
</kw>
<kw name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:55.246">${logpath} = /tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_proc_list.txt</msg>
<status starttime="20170414 16:41:55.245" status="PASS" endtime="20170414 16:41:55.246"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170414 16:41:55.248" status="PASS" endtime="20170414 16:41:55.248"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:55.249">Executing command 'top -n 1 -b'.</msg>
<msg level="INFO" timestamp="20170414 16:41:55.521">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170414 16:41:55.521">${stdout} = Mem: 145612K used, 287320K free, 14388K shrd, 10324K buff, 48504K cached
CPU:   8% usr   8% sys   0% nic  83% idle   0% io   0% irq   0% sirq
Load average: 1.08 1.14 0.99 1/126 1404
  PID  PPID USER  ...</msg>
<msg level="INFO" timestamp="20170414 16:41:55.522">${stderr} = </msg>
<status starttime="20170414 16:41:55.249" status="PASS" endtime="20170414 16:41:55.522"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170414 16:41:55.529">Appended to file '&lt;a href="file:///tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_proc_list.txt"&gt;/tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status starttime="20170414 16:41:55.528" status="PASS" endtime="20170414 16:41:55.529"></status>
</kw>
<status starttime="20170414 16:41:55.527" status="PASS" endtime="20170414 16:41:55.529"></status>
</kw>
<status starttime="20170414 16:41:55.522" status="PASS" endtime="20170414 16:41:55.529"></status>
</kw>
<status starttime="20170414 16:41:55.246" status="PASS" endtime="20170414 16:41:55.529"></status>
</kw>
<kw library="OperatingSystem" name="Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sed -i 's/'${OPENBMC_HOST_REGEX}'/DUMMYIP/g' ${logpath}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:55.534">Running command 'sed -i 's/'sed: -e expression #1, char 10: invalid reference \1 on `s' command's RHS'/DUMMYIP/g' /tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_proc_list.txt 2&gt;&amp;1'.</msg>
<status starttime="20170414 16:41:55.530" status="PASS" endtime="20170414 16:41:55.536"></status>
</kw>
<status starttime="20170414 16:41:55.243" status="PASS" endtime="20170414 16:41:55.537"></status>
</kw>
<kw name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:55.540">${logpath} = /tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_meminfo.txt</msg>
<status starttime="20170414 16:41:55.539" status="PASS" endtime="20170414 16:41:55.541"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170414 16:41:55.543" status="PASS" endtime="20170414 16:41:55.543"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:55.544">Executing command 'cat /proc/meminfo'.</msg>
<msg level="INFO" timestamp="20170414 16:41:55.596">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170414 16:41:55.597">${stdout} = MemTotal:         432932 kB
MemFree:          287320 kB
MemAvailable:     327480 kB
Buffers:           10324 kB
Cached:            48504 kB
SwapCached:            0 kB
Active:            95596 kB
Inac...</msg>
<msg level="INFO" timestamp="20170414 16:41:55.597">${stderr} = </msg>
<status starttime="20170414 16:41:55.544" status="PASS" endtime="20170414 16:41:55.597"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170414 16:41:55.604">Appended to file '&lt;a href="file:///tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_meminfo.txt"&gt;/tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status starttime="20170414 16:41:55.602" status="PASS" endtime="20170414 16:41:55.604"></status>
</kw>
<status starttime="20170414 16:41:55.602" status="PASS" endtime="20170414 16:41:55.604"></status>
</kw>
<status starttime="20170414 16:41:55.597" status="PASS" endtime="20170414 16:41:55.604"></status>
</kw>
<status starttime="20170414 16:41:55.541" status="PASS" endtime="20170414 16:41:55.604"></status>
</kw>
<kw library="OperatingSystem" name="Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sed -i 's/'${OPENBMC_HOST_REGEX}'/DUMMYIP/g' ${logpath}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:55.608">Running command 'sed -i 's/'sed: -e expression #1, char 10: invalid reference \1 on `s' command's RHS'/DUMMYIP/g' /tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_meminfo.txt 2&gt;&amp;1'.</msg>
<status starttime="20170414 16:41:55.605" status="PASS" endtime="20170414 16:41:55.612"></status>
</kw>
<status starttime="20170414 16:41:55.537" status="PASS" endtime="20170414 16:41:55.613"></status>
</kw>
<kw name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:55.616">${logpath} = /tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_journalctl.txt</msg>
<status starttime="20170414 16:41:55.615" status="PASS" endtime="20170414 16:41:55.616"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170414 16:41:55.618" status="PASS" endtime="20170414 16:41:55.619"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:55.619">Executing command 'journalctl --no-pager'.</msg>
<msg level="INFO" timestamp="20170414 16:41:57.104">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170414 16:41:57.105">${stdout} = -- Logs begin at Fri 2017-04-14 16:20:52 UTC, end at Fri 2017-04-14 16:41:55 UTC. --
Apr 14 16:20:52 witherspoon kernel: Booting Linux on physical CPU 0x0
Apr 14 16:20:52 witherspoon kernel: Linux ver...</msg>
<msg level="INFO" timestamp="20170414 16:41:57.105">${stderr} = </msg>
<status starttime="20170414 16:41:55.619" status="PASS" endtime="20170414 16:41:57.105"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170414 16:41:57.115">Appended to file '&lt;a href="file:///tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_journalctl.txt"&gt;/tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status starttime="20170414 16:41:57.113" status="PASS" endtime="20170414 16:41:57.117"></status>
</kw>
<status starttime="20170414 16:41:57.111" status="PASS" endtime="20170414 16:41:57.117"></status>
</kw>
<status starttime="20170414 16:41:57.106" status="PASS" endtime="20170414 16:41:57.117"></status>
</kw>
<status starttime="20170414 16:41:55.617" status="PASS" endtime="20170414 16:41:57.118"></status>
</kw>
<kw library="OperatingSystem" name="Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sed -i 's/'${OPENBMC_HOST_REGEX}'/DUMMYIP/g' ${logpath}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:57.123">Running command 'sed -i 's/'sed: -e expression #1, char 10: invalid reference \1 on `s' command's RHS'/DUMMYIP/g' /tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_journalctl.txt 2&gt;&amp;1'.</msg>
<status starttime="20170414 16:41:57.118" status="PASS" endtime="20170414 16:41:57.126"></status>
</kw>
<status starttime="20170414 16:41:55.613" status="PASS" endtime="20170414 16:41:57.126"></status>
</kw>
<status starttime="20170414 16:41:55.085" status="PASS" endtime="20170414 16:41:57.127"></status>
</kw>
<status starttime="20170414 16:41:55.071" status="PASS" endtime="20170414 16:41:57.127"></status>
</kw>
<status starttime="20170414 16:41:55.071" status="PASS" endtime="20170414 16:41:57.128"></status>
</kw>
<status starttime="20170414 16:41:55.071" status="PASS" endtime="20170414 16:41:57.128"></status>
</kw>
<status starttime="20170414 16:41:53.413" status="PASS" endtime="20170414 16:41:57.128"></status>
</kw>
<status starttime="20170414 16:41:53.413" status="PASS" endtime="20170414 16:41:57.128"></status>
</kw>
<status starttime="20170414 16:41:53.412" status="PASS" endtime="20170414 16:41:57.129"></status>
</kw>
<status starttime="20170414 16:41:53.412" status="PASS" endtime="20170414 16:41:57.129"></status>
</kw>
<kw name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Get Requests">
<doc>Get the command list and iterate</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:41:57.134">Dictionary does not contain key 'host'.</msg>
<status starttime="20170414 16:41:57.134" status="FAIL" endtime="20170414 16:41:57.134"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:41:57.134">${has_host} = False</msg>
<status starttime="20170414 16:41:57.133" status="PASS" endtime="20170414 16:41:57.134"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170414 16:41:57.135" status="PASS" endtime="20170414 16:41:57.136"></status>
</kw>
<status starttime="20170414 16:41:57.135" status="PASS" endtime="20170414 16:41:57.136"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:57.137">${port_num} = 22</msg>
<status starttime="20170414 16:41:57.137" status="PASS" endtime="20170414 16:41:57.137"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:57.138">${SSH_PORT} = 22</msg>
<status starttime="20170414 16:41:57.137" status="PASS" endtime="20170414 16:41:57.138"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:57.139">${https_num} = 443</msg>
<status starttime="20170414 16:41:57.138" status="PASS" endtime="20170414 16:41:57.139"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:57.140">${AUTH_URI} = https://9.3.86.161:443</msg>
<status starttime="20170414 16:41:57.139" status="PASS" endtime="20170414 16:41:57.140"></status>
</kw>
<status starttime="20170414 16:41:57.136" status="PASS" endtime="20170414 16:41:57.140"></status>
</kw>
<status starttime="20170414 16:41:57.136" status="PASS" endtime="20170414 16:41:57.140"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:41:57.141">Dictionary does not contain key 'port'.</msg>
<status starttime="20170414 16:41:57.141" status="FAIL" endtime="20170414 16:41:57.141"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:41:57.141">${has_port} = False</msg>
<status starttime="20170414 16:41:57.140" status="PASS" endtime="20170414 16:41:57.141"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170414 16:41:57.143" status="PASS" endtime="20170414 16:41:57.143"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170414 16:41:57.143" status="PASS" endtime="20170414 16:41:57.144"></status>
</kw>
<status starttime="20170414 16:41:57.142" status="PASS" endtime="20170414 16:41:57.144"></status>
</kw>
<status starttime="20170414 16:41:57.142" status="PASS" endtime="20170414 16:41:57.144"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:57.145">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170414 16:41:58.792">Read output: root@witherspoon:~#</msg>
<status starttime="20170414 16:41:57.145" status="PASS" endtime="20170414 16:41:58.792"></status>
</kw>
<status starttime="20170414 16:41:57.132" status="PASS" endtime="20170414 16:41:58.792"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:58.793">@{entries} = [ GET REQUESTS ]</msg>
<status starttime="20170414 16:41:58.792" status="PASS" endtime="20170414 16:41:58.793"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = GET REQUESTS" type="foritem">
<kw library="openbmc_ffdc_methods" name="Log FFDC Get Requests">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:58.794">@{cmd_list} = [ ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_led', '/org/openbmc/records/events/enumerate') | ('BMC_record_log', '/org/openbmc/control/led/enumerate') | ('BMC_elog', '/xyz/o...</msg>
<status starttime="20170414 16:41:58.794" status="PASS" endtime="20170414 16:41:58.794"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:58.795">${logpath} = /tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_inventory.txt</msg>
<status starttime="20170414 16:41:58.795" status="PASS" endtime="20170414 16:41:58.795"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:58.798">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:41:58.797" status="PASS" endtime="20170414 16:41:58.798"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:58.799">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:41:58.799" status="PASS" endtime="20170414 16:41:58.799"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:58.800">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:41:58.800" status="PASS" endtime="20170414 16:41:58.800"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:58.801">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:41:58.801" status="PASS" endtime="20170414 16:41:58.801"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:58.979">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:41:58.802" status="PASS" endtime="20170414 16:41:58.979"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:41:58.979">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:41:58.979">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:41:58.801" status="PASS" endtime="20170414 16:41:58.979"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:58.980">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:41:58.979" status="PASS" endtime="20170414 16:41:58.980"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:58.980">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:41:58.980" status="PASS" endtime="20170414 16:41:58.981"></status>
</kw>
<status starttime="20170414 16:41:58.796" status="PASS" endtime="20170414 16:41:58.981"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:58.981">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status starttime="20170414 16:41:58.981" status="PASS" endtime="20170414 16:41:58.981"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170414 16:41:58.981" status="PASS" endtime="20170414 16:41:58.982"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:59.146">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170414 16:41:59.146">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:41:58.982" status="PASS" endtime="20170414 16:41:59.146"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170414 16:41:59.147" status="PASS" endtime="20170414 16:41:59.147"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:41:59.147">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:41:58.795" status="PASS" endtime="20170414 16:41:59.147"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:59.148">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:41:59.148" status="PASS" endtime="20170414 16:41:59.148"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:41:59.148">${status} = True</msg>
<status starttime="20170414 16:41:59.148" status="PASS" endtime="20170414 16:41:59.148"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170414 16:41:59.149" status="PASS" endtime="20170414 16:41:59.149"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:59.150">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/createme3": {
      "ExampleProperty1": "foo"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170414 16:41:59.150">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170414 16:41:59.150">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/createme3": {
            "ExampleProperty1": "foo"
        },
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc":...</msg>
<status starttime="20170414 16:41:59.149" status="PASS" endtime="20170414 16:41:59.150"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170414 16:41:59.152">Appended to file '&lt;a href="file:///tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_inventory.txt"&gt;/tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status starttime="20170414 16:41:59.151" status="PASS" endtime="20170414 16:41:59.152"></status>
</kw>
<status starttime="20170414 16:41:59.150" status="PASS" endtime="20170414 16:41:59.152"></status>
</kw>
<status starttime="20170414 16:41:58.794" status="PASS" endtime="20170414 16:41:59.152"></status>
</kw>
<kw name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:59.153">${logpath} = /tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_led.txt</msg>
<status starttime="20170414 16:41:59.153" status="PASS" endtime="20170414 16:41:59.153"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:59.155">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:41:59.155" status="PASS" endtime="20170414 16:41:59.155"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:59.156">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:41:59.156" status="PASS" endtime="20170414 16:41:59.156"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:59.156">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:41:59.156" status="PASS" endtime="20170414 16:41:59.157"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:59.157">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:41:59.157" status="PASS" endtime="20170414 16:41:59.157"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:59.334">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:41:59.158" status="PASS" endtime="20170414 16:41:59.334"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:41:59.334">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:41:59.334">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:41:59.157" status="PASS" endtime="20170414 16:41:59.334"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:59.335">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:41:59.334" status="PASS" endtime="20170414 16:41:59.335"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:59.335">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:41:59.335" status="PASS" endtime="20170414 16:41:59.335"></status>
</kw>
<status starttime="20170414 16:41:59.154" status="PASS" endtime="20170414 16:41:59.336"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:59.336">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status starttime="20170414 16:41:59.336" status="PASS" endtime="20170414 16:41:59.336"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170414 16:41:59.336" status="PASS" endtime="20170414 16:41:59.337"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:59.429">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170414 16:41:59.429">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:41:59.337" status="PASS" endtime="20170414 16:41:59.429"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170414 16:41:59.430" status="PASS" endtime="20170414 16:41:59.430"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:41:59.430">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:41:59.153" status="PASS" endtime="20170414 16:41:59.430"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:59.431">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:41:59.431" status="PASS" endtime="20170414 16:41:59.431"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:41:59.431">${status} = True</msg>
<status starttime="20170414 16:41:59.431" status="PASS" endtime="20170414 16:41:59.432"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170414 16:41:59.432" status="PASS" endtime="20170414 16:41:59.432"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:59.433">To JSON using : content={
  "data": {}, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170414 16:41:59.433">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170414 16:41:59.433">${jsondata} = {
    "data": {},
    "message": "200 OK",
    "status": "ok"
}</msg>
<status starttime="20170414 16:41:59.432" status="PASS" endtime="20170414 16:41:59.433"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170414 16:41:59.434">Appended to file '&lt;a href="file:///tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_led.txt"&gt;/tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_led.txt&lt;/a&gt;'.</msg>
<status starttime="20170414 16:41:59.434" status="PASS" endtime="20170414 16:41:59.435"></status>
</kw>
<status starttime="20170414 16:41:59.433" status="PASS" endtime="20170414 16:41:59.435"></status>
</kw>
<status starttime="20170414 16:41:59.152" status="PASS" endtime="20170414 16:41:59.435"></status>
</kw>
<kw name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:59.435">${logpath} = /tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_record_log.txt</msg>
<status starttime="20170414 16:41:59.435" status="PASS" endtime="20170414 16:41:59.435"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:59.437">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:41:59.437" status="PASS" endtime="20170414 16:41:59.437"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:59.438">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:41:59.438" status="PASS" endtime="20170414 16:41:59.438"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:59.439">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:41:59.438" status="PASS" endtime="20170414 16:41:59.439"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:59.439">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:41:59.439" status="PASS" endtime="20170414 16:41:59.439"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:59.616">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:41:59.440" status="PASS" endtime="20170414 16:41:59.617"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:41:59.617">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:41:59.617">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:41:59.440" status="PASS" endtime="20170414 16:41:59.617"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:59.617">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:41:59.617" status="PASS" endtime="20170414 16:41:59.617"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:59.618">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:41:59.618" status="PASS" endtime="20170414 16:41:59.618"></status>
</kw>
<status starttime="20170414 16:41:59.436" status="PASS" endtime="20170414 16:41:59.619"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:59.619">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status starttime="20170414 16:41:59.619" status="PASS" endtime="20170414 16:41:59.620"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170414 16:41:59.620" status="PASS" endtime="20170414 16:41:59.620"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:59.667">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170414 16:41:59.667">${ret} = &lt;Response [404]&gt;</msg>
<status starttime="20170414 16:41:59.621" status="PASS" endtime="20170414 16:41:59.667"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170414 16:41:59.667" status="PASS" endtime="20170414 16:41:59.668"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:41:59.668">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20170414 16:41:59.436" status="PASS" endtime="20170414 16:41:59.668"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:59.669">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170414 16:41:59.669">404 != 200</msg>
<status starttime="20170414 16:41:59.669" status="FAIL" endtime="20170414 16:41:59.670"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:41:59.670">${status} = False</msg>
<status starttime="20170414 16:41:59.668" status="PASS" endtime="20170414 16:41:59.670"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw library="BuiltIn" name="Continue For Loop">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170414 16:41:59.671">Continuing for loop from the next iteration.</msg>
<status starttime="20170414 16:41:59.670" status="PASS" endtime="20170414 16:41:59.671"></status>
</kw>
<status starttime="20170414 16:41:59.670" status="PASS" endtime="20170414 16:41:59.671"></status>
</kw>
<status starttime="20170414 16:41:59.435" status="PASS" endtime="20170414 16:41:59.671"></status>
</kw>
<kw name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:59.672">${logpath} = /tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_elog.txt</msg>
<status starttime="20170414 16:41:59.671" status="PASS" endtime="20170414 16:41:59.672"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:59.673">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:41:59.673" status="PASS" endtime="20170414 16:41:59.674"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:59.674">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:41:59.674" status="PASS" endtime="20170414 16:41:59.674"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:59.675">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:41:59.674" status="PASS" endtime="20170414 16:41:59.675"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:59.675">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:41:59.675" status="PASS" endtime="20170414 16:41:59.675"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:59.849">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:41:59.676" status="PASS" endtime="20170414 16:41:59.849"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:41:59.849">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:41:59.849">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:41:59.676" status="PASS" endtime="20170414 16:41:59.849"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:59.850">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:41:59.850" status="PASS" endtime="20170414 16:41:59.850"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:59.851">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:41:59.850" status="PASS" endtime="20170414 16:41:59.851"></status>
</kw>
<status starttime="20170414 16:41:59.672" status="PASS" endtime="20170414 16:41:59.851"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:59.852">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status starttime="20170414 16:41:59.851" status="PASS" endtime="20170414 16:41:59.852"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170414 16:41:59.852" status="PASS" endtime="20170414 16:41:59.852"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:59.897">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170414 16:41:59.897">${ret} = &lt;Response [404]&gt;</msg>
<status starttime="20170414 16:41:59.853" status="PASS" endtime="20170414 16:41:59.897"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170414 16:41:59.897" status="PASS" endtime="20170414 16:41:59.898"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:41:59.898">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20170414 16:41:59.672" status="PASS" endtime="20170414 16:41:59.898"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:59.899">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170414 16:41:59.900">404 != 200</msg>
<status starttime="20170414 16:41:59.899" status="FAIL" endtime="20170414 16:41:59.900"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:41:59.900">${status} = False</msg>
<status starttime="20170414 16:41:59.899" status="PASS" endtime="20170414 16:41:59.900"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw library="BuiltIn" name="Continue For Loop">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170414 16:41:59.901">Continuing for loop from the next iteration.</msg>
<status starttime="20170414 16:41:59.901" status="PASS" endtime="20170414 16:41:59.901"></status>
</kw>
<status starttime="20170414 16:41:59.900" status="PASS" endtime="20170414 16:41:59.901"></status>
</kw>
<status starttime="20170414 16:41:59.671" status="PASS" endtime="20170414 16:41:59.901"></status>
</kw>
<kw name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:59.902">${logpath} = /tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_sensor_list.txt</msg>
<status starttime="20170414 16:41:59.901" status="PASS" endtime="20170414 16:41:59.902"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:41:59.904">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:41:59.903" status="PASS" endtime="20170414 16:41:59.904"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:59.905">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:41:59.904" status="PASS" endtime="20170414 16:41:59.905"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:59.905">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:41:59.905" status="PASS" endtime="20170414 16:41:59.906"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:41:59.906">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:41:59.906" status="PASS" endtime="20170414 16:41:59.906"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:42:00.082">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:41:59.907" status="PASS" endtime="20170414 16:42:00.082"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:42:00.083">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:42:00.083">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:41:59.907" status="PASS" endtime="20170414 16:42:00.083"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:42:00.083">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:42:00.083" status="PASS" endtime="20170414 16:42:00.083"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:42:00.084">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:42:00.084" status="PASS" endtime="20170414 16:42:00.084"></status>
</kw>
<status starttime="20170414 16:41:59.903" status="PASS" endtime="20170414 16:42:00.084"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:42:00.085">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status starttime="20170414 16:42:00.085" status="PASS" endtime="20170414 16:42:00.085"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170414 16:42:00.085" status="PASS" endtime="20170414 16:42:00.086"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:42:00.295">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170414 16:42:00.295">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:42:00.086" status="PASS" endtime="20170414 16:42:00.295"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170414 16:42:00.296" status="PASS" endtime="20170414 16:42:00.296"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:42:00.296">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:41:59.902" status="PASS" endtime="20170414 16:42:00.296"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:42:00.298">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:42:00.297" status="PASS" endtime="20170414 16:42:00.298"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:42:00.298">${status} = True</msg>
<status starttime="20170414 16:42:00.297" status="PASS" endtime="20170414 16:42:00.298"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170414 16:42:00.298" status="PASS" endtime="20170414 16:42:00.298"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:42:00.299">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 2
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }, 
    "/org/openbmc/sensors/host/cpu0/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/cpu1/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/powercap": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170414 16:42:00.299">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170414 16:42:00.300">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 2
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status starttime="20170414 16:42:00.299" status="PASS" endtime="20170414 16:42:00.300"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170414 16:42:00.301">Appended to file '&lt;a href="file:///tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_sensor_list.txt"&gt;/tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status starttime="20170414 16:42:00.300" status="PASS" endtime="20170414 16:42:00.301"></status>
</kw>
<status starttime="20170414 16:42:00.300" status="PASS" endtime="20170414 16:42:00.301"></status>
</kw>
<status starttime="20170414 16:41:59.901" status="PASS" endtime="20170414 16:42:00.301"></status>
</kw>
<status starttime="20170414 16:41:58.794" status="PASS" endtime="20170414 16:42:00.301"></status>
</kw>
<status starttime="20170414 16:41:58.793" status="PASS" endtime="20170414 16:42:00.301"></status>
</kw>
<status starttime="20170414 16:41:58.793" status="PASS" endtime="20170414 16:42:00.301"></status>
</kw>
<status starttime="20170414 16:41:58.793" status="PASS" endtime="20170414 16:42:00.301"></status>
</kw>
<status starttime="20170414 16:41:57.132" status="PASS" endtime="20170414 16:42:00.302"></status>
</kw>
<status starttime="20170414 16:41:57.132" status="PASS" endtime="20170414 16:42:00.302"></status>
</kw>
<status starttime="20170414 16:41:57.130" status="PASS" endtime="20170414 16:42:00.302"></status>
</kw>
<status starttime="20170414 16:41:57.129" status="PASS" endtime="20170414 16:42:00.302"></status>
</kw>
<kw name="${method} = ('SEL Log', 'Collect eSEL Log')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="Collect eSEL Log">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:42:00.305">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:42:00.304" status="PASS" endtime="20170414 16:42:00.305"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:42:00.306">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:42:00.305" status="PASS" endtime="20170414 16:42:00.306"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:42:00.306">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:42:00.306" status="PASS" endtime="20170414 16:42:00.306"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:42:00.307">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:42:00.307" status="PASS" endtime="20170414 16:42:00.307"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:42:00.484">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:42:00.308" status="PASS" endtime="20170414 16:42:00.484"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:42:00.484">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:42:00.484">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:42:00.307" status="PASS" endtime="20170414 16:42:00.484"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:42:00.485">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:42:00.485" status="PASS" endtime="20170414 16:42:00.485"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:42:00.486">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:42:00.485" status="PASS" endtime="20170414 16:42:00.486"></status>
</kw>
<status starttime="20170414 16:42:00.304" status="PASS" endtime="20170414 16:42:00.486"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:42:00.486">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status starttime="20170414 16:42:00.486" status="PASS" endtime="20170414 16:42:00.486"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170414 16:42:00.487" status="PASS" endtime="20170414 16:42:00.487"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:42:00.539">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170414 16:42:00.539">${ret} = &lt;Response [404]&gt;</msg>
<status starttime="20170414 16:42:00.487" status="PASS" endtime="20170414 16:42:00.539"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170414 16:42:00.539" status="PASS" endtime="20170414 16:42:00.540"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:42:00.540">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20170414 16:42:00.303" status="PASS" endtime="20170414 16:42:00.540"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:42:00.541">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170414 16:42:00.541">404 != 200</msg>
<status starttime="20170414 16:42:00.541" status="FAIL" endtime="20170414 16:42:00.541"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:42:00.541">${status} = False</msg>
<status starttime="20170414 16:42:00.540" status="PASS" endtime="20170414 16:42:00.541"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:42:00.542">Returning from the enclosing user keyword.</msg>
<status starttime="20170414 16:42:00.542" status="PASS" endtime="20170414 16:42:00.542"></status>
</kw>
<status starttime="20170414 16:42:00.303" status="PASS" endtime="20170414 16:42:00.542"></status>
</kw>
<status starttime="20170414 16:42:00.303" status="PASS" endtime="20170414 16:42:00.542"></status>
</kw>
<status starttime="20170414 16:42:00.302" status="PASS" endtime="20170414 16:42:00.542"></status>
</kw>
<status starttime="20170414 16:42:00.302" status="PASS" endtime="20170414 16:42:00.542"></status>
</kw>
<kw name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Manifest">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:42:00.545">Dictionary does not contain key 'host'.</msg>
<status starttime="20170414 16:42:00.545" status="FAIL" endtime="20170414 16:42:00.545"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:42:00.545">${has_host} = False</msg>
<status starttime="20170414 16:42:00.544" status="PASS" endtime="20170414 16:42:00.545"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170414 16:42:00.546" status="PASS" endtime="20170414 16:42:00.547"></status>
</kw>
<status starttime="20170414 16:42:00.546" status="PASS" endtime="20170414 16:42:00.547"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:42:00.548">${port_num} = 22</msg>
<status starttime="20170414 16:42:00.548" status="PASS" endtime="20170414 16:42:00.548"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:42:00.549">${SSH_PORT} = 22</msg>
<status starttime="20170414 16:42:00.548" status="PASS" endtime="20170414 16:42:00.549"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:42:00.549">${https_num} = 443</msg>
<status starttime="20170414 16:42:00.549" status="PASS" endtime="20170414 16:42:00.549"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:42:00.550">${AUTH_URI} = https://9.3.86.161:443</msg>
<status starttime="20170414 16:42:00.549" status="PASS" endtime="20170414 16:42:00.550"></status>
</kw>
<status starttime="20170414 16:42:00.547" status="PASS" endtime="20170414 16:42:00.550"></status>
</kw>
<status starttime="20170414 16:42:00.547" status="PASS" endtime="20170414 16:42:00.550"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170414 16:42:00.551">Dictionary does not contain key 'port'.</msg>
<status starttime="20170414 16:42:00.551" status="FAIL" endtime="20170414 16:42:00.551"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:42:00.551">${has_port} = False</msg>
<status starttime="20170414 16:42:00.551" status="PASS" endtime="20170414 16:42:00.551"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170414 16:42:00.553" status="PASS" endtime="20170414 16:42:00.553"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170414 16:42:00.554" status="PASS" endtime="20170414 16:42:00.554"></status>
</kw>
<status starttime="20170414 16:42:00.552" status="PASS" endtime="20170414 16:42:00.554"></status>
</kw>
<status starttime="20170414 16:42:00.552" status="PASS" endtime="20170414 16:42:00.554"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:42:00.555">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170414 16:42:02.203">Read output: root@witherspoon:~#</msg>
<status starttime="20170414 16:42:00.555" status="PASS" endtime="20170414 16:42:02.203"></status>
</kw>
<status starttime="20170414 16:42:00.544" status="PASS" endtime="20170414 16:42:02.203"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:42:02.204">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status starttime="20170414 16:42:02.203" status="PASS" endtime="20170414 16:42:02.204"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:42:02.205">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil  state') ]</msg>
<status starttime="20170414 16:42:02.205" status="PASS" endtime="20170414 16:42:02.205"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:42:02.210">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status starttime="20170414 16:42:02.205" status="PASS" endtime="20170414 16:42:02.210"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC state', '/usr/sbin/obmcutil  state')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170414 16:42:02.213">Appended to file '&lt;a href="file:///tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt"&gt;/tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170414 16:42:02.213" status="PASS" endtime="20170414 16:42:02.213"></status>
</kw>
<status starttime="20170414 16:42:02.212" status="PASS" endtime="20170414 16:42:02.213"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170414 16:42:02.215">Appended to file '&lt;a href="file:///tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt"&gt;/tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170414 16:42:02.214" status="PASS" endtime="20170414 16:42:02.215"></status>
</kw>
<status starttime="20170414 16:42:02.213" status="PASS" endtime="20170414 16:42:02.215"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170414 16:42:02.216">Appended to file '&lt;a href="file:///tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt"&gt;/tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170414 16:42:02.215" status="PASS" endtime="20170414 16:42:02.216"></status>
</kw>
<status starttime="20170414 16:42:02.215" status="PASS" endtime="20170414 16:42:02.216"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170414 16:42:02.217">Appended to file '&lt;a href="file:///tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt"&gt;/tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170414 16:42:02.217" status="PASS" endtime="20170414 16:42:02.217"></status>
</kw>
<status starttime="20170414 16:42:02.216" status="PASS" endtime="20170414 16:42:02.217"></status>
</kw>
<status starttime="20170414 16:42:02.211" status="PASS" endtime="20170414 16:42:02.217"></status>
</kw>
<status starttime="20170414 16:42:02.211" status="PASS" endtime="20170414 16:42:02.217"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:42:02.218">Executing command '/usr/sbin/obmcutil  state'.</msg>
<msg level="INFO" timestamp="20170414 16:42:03.473">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170414 16:42:03.473">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Quies...</msg>
<msg level="INFO" timestamp="20170414 16:42:03.474">${stderr} = </msg>
<status starttime="20170414 16:42:02.218" status="PASS" endtime="20170414 16:42:03.474"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170414 16:42:03.483">Appended to file '&lt;a href="file:///tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt"&gt;/tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170414 16:42:03.482" status="PASS" endtime="20170414 16:42:03.483"></status>
</kw>
<status starttime="20170414 16:42:03.481" status="PASS" endtime="20170414 16:42:03.483"></status>
</kw>
<status starttime="20170414 16:42:03.474" status="PASS" endtime="20170414 16:42:03.483"></status>
</kw>
<status starttime="20170414 16:42:02.210" status="PASS" endtime="20170414 16:42:03.483"></status>
</kw>
<status starttime="20170414 16:42:02.210" status="PASS" endtime="20170414 16:42:03.483"></status>
</kw>
<status starttime="20170414 16:42:02.210" status="PASS" endtime="20170414 16:42:03.483"></status>
</kw>
<status starttime="20170414 16:42:02.204" status="PASS" endtime="20170414 16:42:03.483"></status>
</kw>
<status starttime="20170414 16:42:02.204" status="PASS" endtime="20170414 16:42:03.483"></status>
</kw>
<kw name="${index} = DRIVER INFO" type="foritem">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:42:03.484">@{cmd_list} = [ ('FW Level', 'cat /etc/os-release') | ('Build Info', 'cat /etc/version') ]</msg>
<status starttime="20170414 16:42:03.484" status="PASS" endtime="20170414 16:42:03.484"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:42:03.485">${ENTRY_INDEX} = DRIVER INFO</msg>
<status starttime="20170414 16:42:03.484" status="PASS" endtime="20170414 16:42:03.485"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('FW Level', 'cat /etc/os-release')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170414 16:42:03.488">Appended to file '&lt;a href="file:///tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt"&gt;/tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170414 16:42:03.488" status="PASS" endtime="20170414 16:42:03.488"></status>
</kw>
<status starttime="20170414 16:42:03.487" status="PASS" endtime="20170414 16:42:03.488"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170414 16:42:03.489">Appended to file '&lt;a href="file:///tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt"&gt;/tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170414 16:42:03.489" status="PASS" endtime="20170414 16:42:03.490"></status>
</kw>
<status starttime="20170414 16:42:03.488" status="PASS" endtime="20170414 16:42:03.490"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170414 16:42:03.491">Appended to file '&lt;a href="file:///tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt"&gt;/tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170414 16:42:03.490" status="PASS" endtime="20170414 16:42:03.491"></status>
</kw>
<status starttime="20170414 16:42:03.490" status="PASS" endtime="20170414 16:42:03.491"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170414 16:42:03.492">Appended to file '&lt;a href="file:///tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt"&gt;/tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170414 16:42:03.492" status="PASS" endtime="20170414 16:42:03.492"></status>
</kw>
<status starttime="20170414 16:42:03.491" status="PASS" endtime="20170414 16:42:03.492"></status>
</kw>
<status starttime="20170414 16:42:03.487" status="PASS" endtime="20170414 16:42:03.492"></status>
</kw>
<status starttime="20170414 16:42:03.486" status="PASS" endtime="20170414 16:42:03.492"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:42:03.493">Executing command 'cat /etc/os-release'.</msg>
<msg level="INFO" timestamp="20170414 16:42:03.567">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170414 16:42:03.568">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.4-24"
VERSION_ID="v1.99.4-24-g3b094c6"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Project ...</msg>
<msg level="INFO" timestamp="20170414 16:42:03.568">${stderr} = </msg>
<status starttime="20170414 16:42:03.493" status="PASS" endtime="20170414 16:42:03.568"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170414 16:42:03.573">Appended to file '&lt;a href="file:///tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt"&gt;/tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170414 16:42:03.573" status="PASS" endtime="20170414 16:42:03.574"></status>
</kw>
<status starttime="20170414 16:42:03.572" status="PASS" endtime="20170414 16:42:03.574"></status>
</kw>
<status starttime="20170414 16:42:03.568" status="PASS" endtime="20170414 16:42:03.574"></status>
</kw>
<status starttime="20170414 16:42:03.485" status="PASS" endtime="20170414 16:42:03.574"></status>
</kw>
<status starttime="20170414 16:42:03.485" status="PASS" endtime="20170414 16:42:03.574"></status>
</kw>
<kw name="${cmd} = ('Build Info', 'cat /etc/version')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170414 16:42:03.577">Appended to file '&lt;a href="file:///tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt"&gt;/tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170414 16:42:03.577" status="PASS" endtime="20170414 16:42:03.577"></status>
</kw>
<status starttime="20170414 16:42:03.576" status="PASS" endtime="20170414 16:42:03.577"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170414 16:42:03.578">Appended to file '&lt;a href="file:///tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt"&gt;/tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170414 16:42:03.578" status="PASS" endtime="20170414 16:42:03.579"></status>
</kw>
<status starttime="20170414 16:42:03.577" status="PASS" endtime="20170414 16:42:03.579"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170414 16:42:03.580">Appended to file '&lt;a href="file:///tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt"&gt;/tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170414 16:42:03.580" status="PASS" endtime="20170414 16:42:03.580"></status>
</kw>
<status starttime="20170414 16:42:03.579" status="PASS" endtime="20170414 16:42:03.580"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170414 16:42:03.581">Appended to file '&lt;a href="file:///tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt"&gt;/tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170414 16:42:03.581" status="PASS" endtime="20170414 16:42:03.581"></status>
</kw>
<status starttime="20170414 16:42:03.580" status="PASS" endtime="20170414 16:42:03.581"></status>
</kw>
<status starttime="20170414 16:42:03.575" status="PASS" endtime="20170414 16:42:03.581"></status>
</kw>
<status starttime="20170414 16:42:03.575" status="PASS" endtime="20170414 16:42:03.581"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:42:03.582">Executing command 'cat /etc/version'.</msg>
<msg level="INFO" timestamp="20170414 16:42:03.699">Command exited with return code 1.</msg>
<msg level="INFO" timestamp="20170414 16:42:03.699">${stdout} = </msg>
<msg level="INFO" timestamp="20170414 16:42:03.699">${stderr} = cat: can't open '/etc/version': No such file or directory</msg>
<status starttime="20170414 16:42:03.582" status="PASS" endtime="20170414 16:42:03.699"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170414 16:42:03.705">Appended to file '&lt;a href="file:///tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt"&gt;/tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170414 16:42:03.704" status="PASS" endtime="20170414 16:42:03.705"></status>
</kw>
<status starttime="20170414 16:42:03.703" status="PASS" endtime="20170414 16:42:03.705"></status>
</kw>
<status starttime="20170414 16:42:03.699" status="PASS" endtime="20170414 16:42:03.705"></status>
</kw>
<status starttime="20170414 16:42:03.574" status="PASS" endtime="20170414 16:42:03.705"></status>
</kw>
<status starttime="20170414 16:42:03.574" status="PASS" endtime="20170414 16:42:03.705"></status>
</kw>
<status starttime="20170414 16:42:03.485" status="PASS" endtime="20170414 16:42:03.705"></status>
</kw>
<status starttime="20170414 16:42:03.483" status="PASS" endtime="20170414 16:42:03.705"></status>
</kw>
<status starttime="20170414 16:42:03.483" status="PASS" endtime="20170414 16:42:03.705"></status>
</kw>
<kw name="${index} = BMC DATA" type="foritem">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:42:03.706">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status starttime="20170414 16:42:03.706" status="PASS" endtime="20170414 16:42:03.706"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:42:03.707">${ENTRY_INDEX} = BMC DATA</msg>
<status starttime="20170414 16:42:03.707" status="PASS" endtime="20170414 16:42:03.707"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC Uptime', 'uptime')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170414 16:42:03.710">Appended to file '&lt;a href="file:///tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt"&gt;/tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170414 16:42:03.710" status="PASS" endtime="20170414 16:42:03.710"></status>
</kw>
<status starttime="20170414 16:42:03.709" status="PASS" endtime="20170414 16:42:03.710"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170414 16:42:03.711">Appended to file '&lt;a href="file:///tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt"&gt;/tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170414 16:42:03.711" status="PASS" endtime="20170414 16:42:03.712"></status>
</kw>
<status starttime="20170414 16:42:03.710" status="PASS" endtime="20170414 16:42:03.712"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170414 16:42:03.713">Appended to file '&lt;a href="file:///tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt"&gt;/tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170414 16:42:03.712" status="PASS" endtime="20170414 16:42:03.713"></status>
</kw>
<status starttime="20170414 16:42:03.712" status="PASS" endtime="20170414 16:42:03.713"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170414 16:42:03.715">Appended to file '&lt;a href="file:///tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt"&gt;/tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170414 16:42:03.714" status="PASS" endtime="20170414 16:42:03.715"></status>
</kw>
<status starttime="20170414 16:42:03.713" status="PASS" endtime="20170414 16:42:03.715"></status>
</kw>
<status starttime="20170414 16:42:03.709" status="PASS" endtime="20170414 16:42:03.715"></status>
</kw>
<status starttime="20170414 16:42:03.708" status="PASS" endtime="20170414 16:42:03.715"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:42:03.715">Executing command 'uptime'.</msg>
<msg level="INFO" timestamp="20170414 16:42:03.794">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170414 16:42:03.794">${stdout} =  16:42:05 up 21 min,  load average: 1.06, 1.13, 0.99</msg>
<msg level="INFO" timestamp="20170414 16:42:03.794">${stderr} = </msg>
<status starttime="20170414 16:42:03.715" status="PASS" endtime="20170414 16:42:03.794"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170414 16:42:03.800">Appended to file '&lt;a href="file:///tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt"&gt;/tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170414 16:42:03.800" status="PASS" endtime="20170414 16:42:03.800"></status>
</kw>
<status starttime="20170414 16:42:03.799" status="PASS" endtime="20170414 16:42:03.800"></status>
</kw>
<status starttime="20170414 16:42:03.795" status="PASS" endtime="20170414 16:42:03.800"></status>
</kw>
<status starttime="20170414 16:42:03.707" status="PASS" endtime="20170414 16:42:03.800"></status>
</kw>
<status starttime="20170414 16:42:03.707" status="PASS" endtime="20170414 16:42:03.800"></status>
</kw>
<kw name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170414 16:42:03.803">Appended to file '&lt;a href="file:///tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt"&gt;/tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170414 16:42:03.803" status="PASS" endtime="20170414 16:42:03.803"></status>
</kw>
<status starttime="20170414 16:42:03.802" status="PASS" endtime="20170414 16:42:03.803"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170414 16:42:03.805">Appended to file '&lt;a href="file:///tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt"&gt;/tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170414 16:42:03.804" status="PASS" endtime="20170414 16:42:03.805"></status>
</kw>
<status starttime="20170414 16:42:03.804" status="PASS" endtime="20170414 16:42:03.805"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170414 16:42:03.806">Appended to file '&lt;a href="file:///tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt"&gt;/tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170414 16:42:03.806" status="PASS" endtime="20170414 16:42:03.806"></status>
</kw>
<status starttime="20170414 16:42:03.805" status="PASS" endtime="20170414 16:42:03.806"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170414 16:42:03.807">Appended to file '&lt;a href="file:///tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt"&gt;/tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170414 16:42:03.807" status="PASS" endtime="20170414 16:42:03.807"></status>
</kw>
<status starttime="20170414 16:42:03.806" status="PASS" endtime="20170414 16:42:03.807"></status>
</kw>
<status starttime="20170414 16:42:03.802" status="PASS" endtime="20170414 16:42:03.807"></status>
</kw>
<status starttime="20170414 16:42:03.801" status="PASS" endtime="20170414 16:42:03.808"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:42:03.808">Executing command 'df -hT'.</msg>
<msg level="INFO" timestamp="20170414 16:42:03.903">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170414 16:42:03.903">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.1M         0    210.1M   0% /dev
tmpfs                tmpfs         211.4M     13.9...</msg>
<msg level="INFO" timestamp="20170414 16:42:03.903">${stderr} = </msg>
<status starttime="20170414 16:42:03.808" status="PASS" endtime="20170414 16:42:03.903"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170414 16:42:03.908">Appended to file '&lt;a href="file:///tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt"&gt;/tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170414 16:42:03.908" status="PASS" endtime="20170414 16:42:03.909"></status>
</kw>
<status starttime="20170414 16:42:03.907" status="PASS" endtime="20170414 16:42:03.909"></status>
</kw>
<status starttime="20170414 16:42:03.903" status="PASS" endtime="20170414 16:42:03.909"></status>
</kw>
<status starttime="20170414 16:42:03.801" status="PASS" endtime="20170414 16:42:03.909"></status>
</kw>
<status starttime="20170414 16:42:03.800" status="PASS" endtime="20170414 16:42:03.909"></status>
</kw>
<kw name="${cmd} = ('BMC OS', 'uname -a')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170414 16:42:03.912">Appended to file '&lt;a href="file:///tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt"&gt;/tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170414 16:42:03.912" status="PASS" endtime="20170414 16:42:03.912"></status>
</kw>
<status starttime="20170414 16:42:03.911" status="PASS" endtime="20170414 16:42:03.912"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170414 16:42:03.914">Appended to file '&lt;a href="file:///tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt"&gt;/tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170414 16:42:03.913" status="PASS" endtime="20170414 16:42:03.914"></status>
</kw>
<status starttime="20170414 16:42:03.913" status="PASS" endtime="20170414 16:42:03.914"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170414 16:42:03.915">Appended to file '&lt;a href="file:///tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt"&gt;/tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170414 16:42:03.915" status="PASS" endtime="20170414 16:42:03.915"></status>
</kw>
<status starttime="20170414 16:42:03.914" status="PASS" endtime="20170414 16:42:03.915"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170414 16:42:03.916">Appended to file '&lt;a href="file:///tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt"&gt;/tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170414 16:42:03.916" status="PASS" endtime="20170414 16:42:03.916"></status>
</kw>
<status starttime="20170414 16:42:03.915" status="PASS" endtime="20170414 16:42:03.916"></status>
</kw>
<status starttime="20170414 16:42:03.910" status="PASS" endtime="20170414 16:42:03.917"></status>
</kw>
<status starttime="20170414 16:42:03.910" status="PASS" endtime="20170414 16:42:03.917"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:42:03.917">Executing command 'uname -a'.</msg>
<msg level="INFO" timestamp="20170414 16:42:03.992">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170414 16:42:03.992">${stdout} = Linux witherspoon 4.7.10-6786cab8778ba96d84d89c7aec34374b5f4f1968 #1 Fri Apr 14 15:48:06 UTC 2017 armv6l GNU/Linux</msg>
<msg level="INFO" timestamp="20170414 16:42:03.992">${stderr} = </msg>
<status starttime="20170414 16:42:03.917" status="PASS" endtime="20170414 16:42:03.992"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170414 16:42:03.997">Appended to file '&lt;a href="file:///tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt"&gt;/tmp/root/28691/obmc-robot/logs/20170414164150940943_TestsTestBasicPoweron/20170414164150940943_PowerOnTest/20170414164150940943_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170414 16:42:03.997" status="PASS" endtime="20170414 16:42:03.997"></status>
</kw>
<status starttime="20170414 16:42:03.996" status="PASS" endtime="20170414 16:42:03.998"></status>
</kw>
<status starttime="20170414 16:42:03.992" status="PASS" endtime="20170414 16:42:03.998"></status>
</kw>
<status starttime="20170414 16:42:03.909" status="PASS" endtime="20170414 16:42:03.998"></status>
</kw>
<status starttime="20170414 16:42:03.909" status="PASS" endtime="20170414 16:42:03.998"></status>
</kw>
<status starttime="20170414 16:42:03.707" status="PASS" endtime="20170414 16:42:03.998"></status>
</kw>
<status starttime="20170414 16:42:03.705" status="PASS" endtime="20170414 16:42:03.998"></status>
</kw>
<status starttime="20170414 16:42:03.705" status="PASS" endtime="20170414 16:42:03.998"></status>
</kw>
<status starttime="20170414 16:42:02.204" status="PASS" endtime="20170414 16:42:03.998"></status>
</kw>
<status starttime="20170414 16:42:00.544" status="PASS" endtime="20170414 16:42:03.998"></status>
</kw>
<status starttime="20170414 16:42:00.543" status="PASS" endtime="20170414 16:42:03.998"></status>
</kw>
<status starttime="20170414 16:42:00.543" status="PASS" endtime="20170414 16:42:03.998"></status>
</kw>
<status starttime="20170414 16:42:00.542" status="PASS" endtime="20170414 16:42:03.998"></status>
</kw>
<status starttime="20170414 16:41:51.094" status="PASS" endtime="20170414 16:42:03.998"></status>
</kw>
<status starttime="20170414 16:41:51.093" status="PASS" endtime="20170414 16:42:03.999"></status>
</kw>
<status starttime="20170414 16:41:51.093" status="PASS" endtime="20170414 16:42:03.999"></status>
</kw>
<status starttime="20170414 16:41:51.093" status="PASS" endtime="20170414 16:42:03.999"></status>
</kw>
<kw library="SSHLibrary" name="Close All Connections">
<doc>Closes all open connections.</doc>
<status starttime="20170414 16:42:03.999" status="PASS" endtime="20170414 16:42:04.117"></status>
</kw>
<status starttime="20170414 16:41:51.092" status="PASS" endtime="20170414 16:42:04.117"></status>
</kw>
<status starttime="20170414 16:41:46.103" status="PASS" endtime="20170414 16:42:04.118"></status>
</kw>
<status starttime="20170414 16:41:46.102" status="PASS" endtime="20170414 16:42:04.118"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<kw library="state_manager" name="Recover Quiesced Host">
<doc>Recover host from quisced state.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is Host Quiesced</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="state_manager" name="Is Host Quiesced">
<doc>Check if host state is quiesced.</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:42:04.122">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:42:04.122" status="PASS" endtime="20170414 16:42:04.123"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:42:04.123">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:42:04.123" status="PASS" endtime="20170414 16:42:04.123"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:42:04.124">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:42:04.124" status="PASS" endtime="20170414 16:42:04.124"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:42:04.125">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:42:04.124" status="PASS" endtime="20170414 16:42:04.125"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:42:04.371">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:42:04.125" status="PASS" endtime="20170414 16:42:04.371"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:42:04.371">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:42:04.371">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:42:04.125" status="PASS" endtime="20170414 16:42:04.371"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:42:04.372">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:42:04.371" status="PASS" endtime="20170414 16:42:04.372"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:42:04.372">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:42:04.372" status="PASS" endtime="20170414 16:42:04.372"></status>
</kw>
<status starttime="20170414 16:42:04.121" status="PASS" endtime="20170414 16:42:04.373"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:42:04.374">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170414 16:42:04.373" status="PASS" endtime="20170414 16:42:04.374"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:42:04.376">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170414 16:42:04.375" status="PASS" endtime="20170414 16:42:04.376"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:42:04.377">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170414 16:42:04.376" status="PASS" endtime="20170414 16:42:04.377"></status>
</kw>
<status starttime="20170414 16:42:04.376" status="PASS" endtime="20170414 16:42:04.377"></status>
</kw>
<status starttime="20170414 16:42:04.374" status="PASS" endtime="20170414 16:42:04.377"></status>
</kw>
<status starttime="20170414 16:42:04.374" status="PASS" endtime="20170414 16:42:04.377"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:42:04.442">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170414 16:42:04.442">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:42:04.377" status="PASS" endtime="20170414 16:42:04.442"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:42:04.444">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:42:04.443" status="PASS" endtime="20170414 16:42:04.444"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:42:04.445">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:42:04.444" status="PASS" endtime="20170414 16:42:04.445"></status>
</kw>
<status starttime="20170414 16:42:04.444" status="PASS" endtime="20170414 16:42:04.445"></status>
</kw>
<status starttime="20170414 16:42:04.443" status="PASS" endtime="20170414 16:42:04.445"></status>
</kw>
<status starttime="20170414 16:42:04.442" status="PASS" endtime="20170414 16:42:04.445"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:42:04.445">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:42:04.121" status="PASS" endtime="20170414 16:42:04.445"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:42:04.446">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:42:04.446" status="PASS" endtime="20170414 16:42:04.446"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:42:04.447">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170414 16:42:04.447">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170414 16:42:04.447">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok'}</msg>
<status starttime="20170414 16:42:04.446" status="PASS" endtime="20170414 16:42:04.447"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:42:04.447">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170414 16:42:04.120" status="PASS" endtime="20170414 16:42:04.447"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:42:04.447">${host_state} = Quiesced</msg>
<status starttime="20170414 16:42:04.120" status="PASS" endtime="20170414 16:42:04.447"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<status starttime="20170414 16:42:04.448" status="PASS" endtime="20170414 16:42:04.448"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:42:04.448">${status} = True</msg>
<status starttime="20170414 16:42:04.448" status="PASS" endtime="20170414 16:42:04.448"></status>
</kw>
<status starttime="20170414 16:42:04.119" status="PASS" endtime="20170414 16:42:04.449"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:42:04.449">${resp} = True</msg>
<status starttime="20170414 16:42:04.119" status="PASS" endtime="20170414 16:42:04.449"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${resp}' == 'True'</arg>
<arg>Run Keywords</arg>
<arg>Initiate Host PowerOff</arg>
<arg>AND</arg>
<arg>Log</arg>
<arg>HOST is recovered from quiesced state</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Initiate Host PowerOff</arg>
<arg>AND</arg>
<arg>Log</arg>
<arg>HOST is recovered from quiesced state</arg>
</arguments>
<kw library="state_manager" name="Initiate Host PowerOff">
<doc>Initiate host power off.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:42:04.451">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status starttime="20170414 16:42:04.450" status="PASS" endtime="20170414 16:42:04.451"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:42:04.452">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status starttime="20170414 16:42:04.452" status="PASS" endtime="20170414 16:42:04.452"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:42:04.454">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:42:04.453" status="PASS" endtime="20170414 16:42:04.454"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:42:04.455">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:42:04.455" status="PASS" endtime="20170414 16:42:04.455"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:42:04.456">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:42:04.455" status="PASS" endtime="20170414 16:42:04.456"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:42:04.456">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:42:04.456" status="PASS" endtime="20170414 16:42:04.456"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:42:04.645">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:42:04.457" status="PASS" endtime="20170414 16:42:04.645"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:42:04.645">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:42:04.645">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:42:04.457" status="PASS" endtime="20170414 16:42:04.645"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:42:04.646">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:42:04.645" status="PASS" endtime="20170414 16:42:04.646"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:42:04.647">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:42:04.646" status="PASS" endtime="20170414 16:42:04.647"></status>
</kw>
<status starttime="20170414 16:42:04.453" status="PASS" endtime="20170414 16:42:04.647"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:42:04.647">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status starttime="20170414 16:42:04.647" status="PASS" endtime="20170414 16:42:04.647"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:42:04.648">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:42:04.648" status="PASS" endtime="20170414 16:42:04.648"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20170414 16:42:04.648" status="PASS" endtime="20170414 16:42:04.648"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:42:04.650">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-...</msg>
<status starttime="20170414 16:42:04.649" status="PASS" endtime="20170414 16:42:04.650"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:42:04.651">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20170414 16:42:04.651" status="PASS" endtime="20170414 16:42:04.651"></status>
</kw>
<status starttime="20170414 16:42:04.650" status="PASS" endtime="20170414 16:42:04.651"></status>
</kw>
<status starttime="20170414 16:42:04.649" status="PASS" endtime="20170414 16:42:04.651"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:42:04.879">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170414 16:42:04.879">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:42:04.652" status="PASS" endtime="20170414 16:42:04.879"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:42:04.880">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:42:04.880" status="PASS" endtime="20170414 16:42:04.881"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:42:04.881">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:42:04.881" status="PASS" endtime="20170414 16:42:04.882"></status>
</kw>
<status starttime="20170414 16:42:04.881" status="PASS" endtime="20170414 16:42:04.882"></status>
</kw>
<status starttime="20170414 16:42:04.879" status="PASS" endtime="20170414 16:42:04.882"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:42:04.882">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:42:04.452" status="PASS" endtime="20170414 16:42:04.882"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:42:04.883">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:42:04.882" status="PASS" endtime="20170414 16:42:04.883"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:42:04.883">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170414 16:42:04.883">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170414 16:42:04.883">${json} = {u'message': u'200 OK', u'data': None, u'status': u'ok'}</msg>
<status starttime="20170414 16:42:04.883" status="PASS" endtime="20170414 16:42:04.883"></status>
</kw>
<status starttime="20170414 16:42:04.451" status="PASS" endtime="20170414 16:42:04.884"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status starttime="20170414 16:42:04.884" status="PASS" endtime="20170414 16:42:04.884"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:42:04.888">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170414 16:42:04.888" status="PASS" endtime="20170414 16:42:04.888"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:42:04.889">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170414 16:42:04.889" status="PASS" endtime="20170414 16:42:04.889"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:42:04.890">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170414 16:42:04.889" status="PASS" endtime="20170414 16:42:04.890"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:42:04.890">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170414 16:42:04.890" status="PASS" endtime="20170414 16:42:04.890"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:42:05.214">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170414 16:42:04.891" status="PASS" endtime="20170414 16:42:05.214"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:42:05.214">${status} = PASS</msg>
<msg level="INFO" timestamp="20170414 16:42:05.215">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:42:04.891" status="PASS" endtime="20170414 16:42:05.215"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:42:05.215">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:42:05.215" status="PASS" endtime="20170414 16:42:05.215"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:42:05.216">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:42:05.215" status="PASS" endtime="20170414 16:42:05.216"></status>
</kw>
<status starttime="20170414 16:42:04.887" status="PASS" endtime="20170414 16:42:05.216"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:42:05.217">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170414 16:42:05.216" status="PASS" endtime="20170414 16:42:05.217"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:42:05.219">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170414 16:42:05.218" status="PASS" endtime="20170414 16:42:05.219"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:42:05.220">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170414 16:42:05.220" status="PASS" endtime="20170414 16:42:05.220"></status>
</kw>
<status starttime="20170414 16:42:05.219" status="PASS" endtime="20170414 16:42:05.220"></status>
</kw>
<status starttime="20170414 16:42:05.217" status="PASS" endtime="20170414 16:42:05.221"></status>
</kw>
<status starttime="20170414 16:42:05.217" status="PASS" endtime="20170414 16:42:05.221"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:42:05.383">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170414 16:42:05.384">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:42:05.221" status="PASS" endtime="20170414 16:42:05.384"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:42:05.386">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:42:05.385" status="PASS" endtime="20170414 16:42:05.386"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:42:05.387">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170414 16:42:05.387" status="PASS" endtime="20170414 16:42:05.387"></status>
</kw>
<status starttime="20170414 16:42:05.386" status="PASS" endtime="20170414 16:42:05.387"></status>
</kw>
<status starttime="20170414 16:42:05.384" status="PASS" endtime="20170414 16:42:05.387"></status>
</kw>
<status starttime="20170414 16:42:05.384" status="PASS" endtime="20170414 16:42:05.387"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:42:05.388">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170414 16:42:04.886" status="PASS" endtime="20170414 16:42:05.388"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:42:05.388">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170414 16:42:05.388" status="PASS" endtime="20170414 16:42:05.388"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:42:05.389">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170414 16:42:05.389">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170414 16:42:05.389">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status starttime="20170414 16:42:05.388" status="PASS" endtime="20170414 16:42:05.389"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:42:05.389">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170414 16:42:04.886" status="PASS" endtime="20170414 16:42:05.389"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:42:05.390">${host_state} = Off</msg>
<status starttime="20170414 16:42:04.885" status="PASS" endtime="20170414 16:42:05.390"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170414 16:42:05.390" status="PASS" endtime="20170414 16:42:05.390"></status>
</kw>
<status starttime="20170414 16:42:04.885" status="PASS" endtime="20170414 16:42:05.390"></status>
</kw>
<status starttime="20170414 16:42:04.884" status="PASS" endtime="20170414 16:42:05.390"></status>
</kw>
<status starttime="20170414 16:42:04.450" status="PASS" endtime="20170414 16:42:05.390"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>HOST is recovered from quiesced state</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:42:05.391">HOST is recovered from quiesced state</msg>
<status starttime="20170414 16:42:05.391" status="PASS" endtime="20170414 16:42:05.391"></status>
</kw>
<status starttime="20170414 16:42:04.450" status="PASS" endtime="20170414 16:42:05.391"></status>
</kw>
<status starttime="20170414 16:42:04.449" status="PASS" endtime="20170414 16:42:05.391"></status>
</kw>
<status starttime="20170414 16:42:04.119" status="PASS" endtime="20170414 16:42:05.391"></status>
</kw>
<status starttime="20170414 16:42:04.118" status="PASS" endtime="20170414 16:42:05.391"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170414 16:42:05.392">Directory '&lt;a href="file:///tmp/root/28691/obmc-robot/logs"&gt;/tmp/root/28691/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status starttime="20170414 16:42:05.392" status="PASS" endtime="20170414 16:42:05.392"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170414 16:42:05.393">File '&lt;a href="file:///tmp/root/28691/obmc-robot/logs/test_history.txt"&gt;/tmp/root/28691/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status starttime="20170414 16:42:05.393" status="PASS" endtime="20170414 16:42:05.393"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:42:05.393">${exist} = True</msg>
<status starttime="20170414 16:42:05.393" status="PASS" endtime="20170414 16:42:05.393"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status starttime="20170414 16:42:05.394" status="PASS" endtime="20170414 16:42:05.394"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:42:05.395">${cur_time} = 2017-04-14 16:42:05:394751</msg>
<status starttime="20170414 16:42:05.395" status="PASS" endtime="20170414 16:42:05.395"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:42:05.395">${cur_time} = 20170414164205394751</msg>
<status starttime="20170414 16:42:05.395" status="PASS" endtime="20170414 16:42:05.396"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:42:05.396">${cur_time} = 20170414164205394751</msg>
<status starttime="20170414 16:42:05.394" status="PASS" endtime="20170414 16:42:05.396"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170414 16:42:05.397">Appended to file '&lt;a href="file:///tmp/root/28691/obmc-robot/logs/test_history.txt"&gt;/tmp/root/28691/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20170414 16:42:05.396" status="PASS" endtime="20170414 16:42:05.397"></status>
</kw>
<status starttime="20170414 16:42:05.391" status="PASS" endtime="20170414 16:42:05.397"></status>
</kw>
<status starttime="20170414 16:41:45.836" status="PASS" endtime="20170414 16:42:05.397"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:42:05.399">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status starttime="20170414 16:42:05.398" status="PASS" endtime="20170414 16:42:05.399"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:42:05.399">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status starttime="20170414 16:42:05.399" status="PASS" endtime="20170414 16:42:05.399"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:42:05.400">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status starttime="20170414 16:42:05.398" status="PASS" endtime="20170414 16:42:05.400"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:42:05.400">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20170414 16:42:05.400" status="PASS" endtime="20170414 16:42:05.400"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170414 16:42:05.401" status="PASS" endtime="20170414 16:42:05.407"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:42:05.412">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170414 16:42:05.415">${rc} = 0</msg>
<msg level="INFO" timestamp="20170414 16:42:05.415">${output} = /tmp/root/28691/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20170414 16:42:05.408" status="PASS" endtime="20170414 16:42:05.415"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170414 16:42:05.417" status="PASS" endtime="20170414 16:42:05.427"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status starttime="20170414 16:42:05.427" status="PASS" endtime="20170414 16:42:05.427"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:42:05.428">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.3.86.161</msg>
<status starttime="20170414 16:42:05.428" status="PASS" endtime="20170414 16:42:05.428"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:42:05.429">${search_string} = ssh_pw 0penBmc -p 2200 root@9.3.86.161</msg>
<status starttime="20170414 16:42:05.400" status="PASS" endtime="20170414 16:42:05.429"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:42:05.429">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status starttime="20170414 16:42:05.429" status="PASS" endtime="20170414 16:42:05.429"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170414 16:42:05.429" status="PASS" endtime="20170414 16:42:05.440"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:42:05.445">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170414 16:42:05.453">${rc} = 0</msg>
<msg level="INFO" timestamp="20170414 16:42:05.454">${os_con_pid} = 169</msg>
<status starttime="20170414 16:42:05.440" status="PASS" endtime="20170414 16:42:05.454"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status starttime="20170414 16:42:05.456" status="PASS" endtime="20170414 16:42:05.464"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:42:05.465">${cmd_buf} = kill -9 169</msg>
<status starttime="20170414 16:42:05.465" status="PASS" endtime="20170414 16:42:05.465"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170414 16:42:05.466" status="PASS" endtime="20170414 16:42:05.473"></status>
</kw>
<status starttime="20170414 16:42:05.465" status="PASS" endtime="20170414 16:42:05.473"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:42:05.478">Running command 'kill -9 169 2&gt;&amp;1'.</msg>
<status starttime="20170414 16:42:05.474" status="PASS" endtime="20170414 16:42:05.480"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:42:05.481">${rc} = 0</msg>
<msg level="INFO" timestamp="20170414 16:42:05.482">${output} = </msg>
<status starttime="20170414 16:42:05.474" status="PASS" endtime="20170414 16:42:05.482"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170414 16:42:05.485" status="PASS" endtime="20170414 16:42:05.497"></status>
</kw>
<status starttime="20170414 16:42:05.484" status="PASS" endtime="20170414 16:42:05.497"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>cat ${log_file_path} 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:42:05.498">${cmd_buf} = cat /tmp/9.3.86.161_os_console 2&gt;&amp;1</msg>
<status starttime="20170414 16:42:05.497" status="PASS" endtime="20170414 16:42:05.498"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170414 16:42:05.498" status="PASS" endtime="20170414 16:42:05.509"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170414 16:42:05.514">Running command 'cat /tmp/9.3.86.161_os_console 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170414 16:42:05.517">${rc} = 0</msg>
<msg level="INFO" timestamp="20170414 16:42:05.517">${output} = spawn ssh -p 2200 root@9.3.86.161
The authenticity of host '[9.3.86.161]:2200 ([9.3.86.161]:2200)' can't be established.
RSA key fingerprint is SHA256:ZIQ9EwwDVn5VT8G4YjbFDwg5zd11CmKi9jXhPu077c4.
Are ...</msg>
<status starttime="20170414 16:42:05.509" status="PASS" endtime="20170414 16:42:05.517"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
</arguments>
<status starttime="20170414 16:42:05.519" status="PASS" endtime="20170414 16:42:05.528"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status starttime="20170414 16:42:05.528" status="PASS" endtime="20170414 16:42:05.529"></status>
</kw>
<msg level="INFO" timestamp="20170414 16:42:05.529">${sol_log} = spawn ssh -p 2200 root@9.3.86.161
The authenticity of host '[9.3.86.161]:2200 ([9.3.86.161]:2200)' can't be established.
RSA key fingerprint is SHA256:ZIQ9EwwDVn5VT8G4YjbFDwg5zd11CmKi9jXhPu077c4.
Are ...</msg>
<status starttime="20170414 16:42:05.397" status="PASS" endtime="20170414 16:42:05.530"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg level="INFO" timestamp="20170414 16:42:05.530">spawn ssh -p 2200 root@9.3.86.161
The authenticity of host '[9.3.86.161]:2200 ([9.3.86.161]:2200)' can't be established.
RSA key fingerprint is SHA256:ZIQ9EwwDVn5VT8G4YjbFDwg5zd11CmKi9jXhPu077c4.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: </msg>
<status starttime="20170414 16:42:05.530" status="PASS" endtime="20170414 16:42:05.530"></status>
</kw>
<status starttime="20170414 16:41:45.836" status="PASS" endtime="20170414 16:42:05.530"></status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status starttime="20170414 16:31:02.270" critical="yes" status="FAIL" endtime="20170414 16:42:05.531">Keyword 'Is OS Starting' failed after retrying for 10 minutes. The last error was: Off != FW Progress, Starting OS</status>
</test>
<doc>Test power on for HW CI.</doc>
<status starttime="20170414 16:31:02.242" status="FAIL" endtime="20170414 16:42:05.532"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status starttime="20170414 16:30:57.226" status="FAIL" endtime="20170414 16:42:05.536"></status>
</suite>
<statistics>
<total>
<stat pass="1" fail="1">Critical Tests</stat>
<stat pass="1" fail="1">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="1">chassisboot</stat>
<stat pass="0" fail="1">Power_On_Test</stat>
<stat pass="1" fail="0">Test_SSL_Connection</stat>
</tag>
<suite>
<stat name="Tests" pass="1" fail="1" id="s1">Tests</stat>
<stat name="Security" pass="1" fail="0" id="s1-s1">Tests.Security</stat>
<stat name="Test Ssl" pass="1" fail="0" id="s1-s1-s1">Tests.Security.Test Ssl</stat>
<stat name="Test Basic Poweron" pass="0" fail="1" id="s1-s2">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
