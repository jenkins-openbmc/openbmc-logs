<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170807 02:42:41.107" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/code_update/update_bmc.robot" id="s1" name="Update Bmc">
<test id="s1-t1" name="Initiate Code Update BMC">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${LAST_KNOWN_GOOD_VERSION}' != '${EMPTY}'</arg>
<arg>Run Keyword And Return Status</arg>
<arg>Validate BMC Version</arg>
<arg>${LAST_KNOWN_GOOD_VERSION}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<msg timestamp="20170807 02:42:42.137" level="INFO">${status} = None</msg>
<status status="PASS" endtime="20170807 02:42:42.137" starttime="20170807 02:42:42.136"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>Pass Execution</arg>
<arg>The BMC already has the requested build loaded so no further action will be taken.</arg>
</arguments>
<status status="PASS" endtime="20170807 02:42:42.138" starttime="20170807 02:42:42.137"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${FORCE_UPDATE} == ${0}</arg>
<arg>Prepare BMC For Update</arg>
</arguments>
<kw name="Prepare BMC For Update">
<doc>Prerequisite operation before code update.</doc>
<kw name="Check Boot Count And Time">
<doc>Check for unexpected reboots.</doc>
<kw name="Set BMC Reset Reference Time" library="utils">
<doc>Set current boot time as a reference and increment</doc>
<kw name="Get BMC Boot Time" library="utils">
<doc>Get boot time from /proc/stat.</doc>
<assign>
<var>${cur_btime}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170807 02:42:42.142" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170807 02:42:42.142" starttime="20170807 02:42:42.141"></status>
</kw>
<msg timestamp="20170807 02:42:42.142" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170807 02:42:42.142" starttime="20170807 02:42:42.141"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:42:42.143" starttime="20170807 02:42:42.143"></status>
</kw>
<status status="PASS" endtime="20170807 02:42:42.143" starttime="20170807 02:42:42.142"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170807 02:42:42.144" starttime="20170807 02:42:42.144"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170807 02:42:42.145" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170807 02:42:42.145" starttime="20170807 02:42:42.145"></status>
</kw>
<msg timestamp="20170807 02:42:42.145" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170807 02:42:42.145" starttime="20170807 02:42:42.144"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:42:42.147" starttime="20170807 02:42:42.147"></status>
</kw>
<status status="PASS" endtime="20170807 02:42:42.147" starttime="20170807 02:42:42.146"></status>
</kw>
<status status="PASS" endtime="20170807 02:42:42.147" starttime="20170807 02:42:42.146"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170807 02:42:42.148" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170807 02:42:43.822" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170807 02:42:43.822" starttime="20170807 02:42:42.148"></status>
</kw>
<status status="PASS" endtime="20170807 02:42:43.822" starttime="20170807 02:42:42.140"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>egrep '^btime ' /proc/stat | cut -f 2 -d ' '</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170807 02:42:43.823" level="INFO">Executing command 'egrep '^btime ' /proc/stat | cut -f 2 -d ' ''.</msg>
<msg timestamp="20170807 02:42:43.940" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170807 02:42:43.940" level="INFO">${output} = 1502072774</msg>
<msg timestamp="20170807 02:42:43.940" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170807 02:42:43.940" starttime="20170807 02:42:43.822"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170807 02:42:43.941" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170807 02:42:43.941" starttime="20170807 02:42:43.941"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${btime}</var>
</assign>
<msg timestamp="20170807 02:42:43.942" level="INFO">${btime} = 1502072774</msg>
<status status="PASS" endtime="20170807 02:42:43.942" starttime="20170807 02:42:43.941"></status>
</kw>
<msg timestamp="20170807 02:42:43.942" level="INFO">${cur_btime} = 1502072774</msg>
<status status="PASS" endtime="20170807 02:42:43.942" starttime="20170807 02:42:42.140"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_TIME} == ${0} and ${BOOT_COUNT} == ${0}</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>ELSE IF</arg>
<arg>${cur_btime} &gt; ${BOOT_TIME}</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_COUNT}</arg>
<arg>${BOOT_COUNT + 1}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
</arguments>
<msg timestamp="20170807 02:42:43.944" level="INFO">${BOOT_TIME} = 1502072774</msg>
<status status="PASS" endtime="20170807 02:42:43.944" starttime="20170807 02:42:43.943"></status>
</kw>
<status status="PASS" endtime="20170807 02:42:43.944" starttime="20170807 02:42:43.942"></status>
</kw>
<status status="PASS" endtime="20170807 02:42:43.944" starttime="20170807 02:42:42.139"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Count: ${BOOT_COUNT}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:42:43.945" starttime="20170807 02:42:43.944"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Time: ${BOOT_TIME}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:42:43.945" starttime="20170807 02:42:43.945"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_COUNT} &gt; ${MAX_BOOT_COUNT}</arg>
<arg>Log</arg>
<arg>Phantom Reboot!!! Unexpected reboot detected</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20170807 02:42:43.946" starttime="20170807 02:42:43.945"></status>
</kw>
<status status="PASS" endtime="20170807 02:42:43.946" starttime="20170807 02:42:42.139"></status>
</kw>
<kw name="Prune Journal Log" library="utils">
<doc>Prune archived journal logs.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170807 02:42:43.948" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170807 02:42:43.948" starttime="20170807 02:42:43.948"></status>
</kw>
<msg timestamp="20170807 02:42:43.948" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170807 02:42:43.948" starttime="20170807 02:42:43.947"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:42:43.950" starttime="20170807 02:42:43.949"></status>
</kw>
<status status="PASS" endtime="20170807 02:42:43.950" starttime="20170807 02:42:43.949"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170807 02:42:43.951" starttime="20170807 02:42:43.951"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170807 02:42:43.952" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170807 02:42:43.952" starttime="20170807 02:42:43.952"></status>
</kw>
<msg timestamp="20170807 02:42:43.952" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170807 02:42:43.952" starttime="20170807 02:42:43.951"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:42:43.954" starttime="20170807 02:42:43.954"></status>
</kw>
<status status="PASS" endtime="20170807 02:42:43.954" starttime="20170807 02:42:43.954"></status>
</kw>
<status status="PASS" endtime="20170807 02:42:43.954" starttime="20170807 02:42:43.953"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170807 02:42:43.955" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170807 02:42:45.639" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170807 02:42:45.639" starttime="20170807 02:42:43.955"></status>
</kw>
<status status="PASS" endtime="20170807 02:42:45.640" starttime="20170807 02:42:43.946"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>journalctl --vacuum-size=${vacuum_size}</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170807 02:42:45.640" level="INFO">Executing command 'journalctl --vacuum-size=1M'.</msg>
<msg timestamp="20170807 02:42:45.717" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170807 02:42:45.717" level="INFO">${output} = </msg>
<msg timestamp="20170807 02:42:45.717" level="INFO">${stderr} = Vacuuming done, freed 0B of archived journals from /run/log/journal/cc6e1404d87444e8a089dfdb00a18f7d.</msg>
<msg timestamp="20170807 02:42:45.717" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20170807 02:42:45.717" starttime="20170807 02:42:45.640"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${stderr}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:42:45.718" starttime="20170807 02:42:45.718"></status>
</kw>
<status status="PASS" endtime="20170807 02:42:45.718" starttime="20170807 02:42:43.946"></status>
</kw>
<kw name="Power Off Request" library="state_manager">
<doc>Select appropriate poweroff keyword.</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${OBMC_STATES_VERSION}' == '${0}'</arg>
<arg>Initiate Power Off</arg>
<arg>ELSE</arg>
<arg>Initiate Host PowerOff</arg>
</arguments>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170807 02:42:45.721" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status status="PASS" endtime="20170807 02:42:45.721" starttime="20170807 02:42:45.720"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170807 02:42:45.722" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" endtime="20170807 02:42:45.722" starttime="20170807 02:42:45.722"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170807 02:42:45.725" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 02:42:45.726" starttime="20170807 02:42:45.725"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 02:42:45.726" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 02:42:45.726" starttime="20170807 02:42:45.726"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170807 02:42:45.727" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 02:42:45.727" starttime="20170807 02:42:45.727"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170807 02:42:45.728" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 02:42:45.728" starttime="20170807 02:42:45.727"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170807 02:42:45.945" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 02:42:45.946" starttime="20170807 02:42:45.729"></status>
</kw>
<msg timestamp="20170807 02:42:45.946" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 02:42:45.946" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 02:42:45.946" starttime="20170807 02:42:45.728"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170807 02:42:45.947" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 02:42:45.947" starttime="20170807 02:42:45.946"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 02:42:45.947" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 02:42:45.947" starttime="20170807 02:42:45.947"></status>
</kw>
<status status="PASS" endtime="20170807 02:42:45.947" starttime="20170807 02:42:45.724"></status>
</kw>
<status status="PASS" endtime="20170807 02:42:45.948" starttime="20170807 02:42:45.724"></status>
</kw>
<status status="PASS" endtime="20170807 02:42:45.948" starttime="20170807 02:42:45.723"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170807 02:42:45.948" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" endtime="20170807 02:42:45.948" starttime="20170807 02:42:45.948"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 02:42:45.949" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 02:42:45.949" starttime="20170807 02:42:45.949"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:42:45.950" starttime="20170807 02:42:45.949"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170807 02:42:45.951" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type...</msg>
<status status="PASS" endtime="20170807 02:42:45.951" starttime="20170807 02:42:45.950"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170807 02:42:45.952" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170807 02:42:45.953" starttime="20170807 02:42:45.952"></status>
</kw>
<status status="PASS" endtime="20170807 02:42:45.953" starttime="20170807 02:42:45.951"></status>
</kw>
<status status="PASS" endtime="20170807 02:42:45.953" starttime="20170807 02:42:45.950"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170807 02:42:46.290" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170807 02:42:46.290" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 02:42:46.290" starttime="20170807 02:42:45.953"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170807 02:42:46.292" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 02:42:46.292" starttime="20170807 02:42:46.291"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170807 02:42:46.293" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 02:42:46.293" starttime="20170807 02:42:46.292"></status>
</kw>
<status status="PASS" endtime="20170807 02:42:46.293" starttime="20170807 02:42:46.292"></status>
</kw>
<status status="PASS" endtime="20170807 02:42:46.293" starttime="20170807 02:42:46.290"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170807 02:42:46.294" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 02:42:46.294" starttime="20170807 02:42:46.293"></status>
</kw>
<msg timestamp="20170807 02:42:46.294" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 02:42:46.294" starttime="20170807 02:42:45.722"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 02:42:46.294" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 02:42:46.295" starttime="20170807 02:42:46.294"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170807 02:42:46.297" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170807 02:42:46.297" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170807 02:42:46.297" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170807 02:42:46.298" starttime="20170807 02:42:46.297"></status>
</kw>
<status status="PASS" endtime="20170807 02:42:46.298" starttime="20170807 02:42:45.721"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" endtime="20170807 02:42:46.299" starttime="20170807 02:42:46.298"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170807 02:42:46.305" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 02:42:46.305" starttime="20170807 02:42:46.304"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 02:42:46.306" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 02:42:46.306" starttime="20170807 02:42:46.306"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170807 02:42:46.307" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 02:42:46.307" starttime="20170807 02:42:46.306"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170807 02:42:46.308" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 02:42:46.308" starttime="20170807 02:42:46.307"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170807 02:42:46.747" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 02:42:46.747" starttime="20170807 02:42:46.308"></status>
</kw>
<msg timestamp="20170807 02:42:46.748" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 02:42:46.748" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 02:42:46.748" starttime="20170807 02:42:46.308"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170807 02:42:46.748" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 02:42:46.748" starttime="20170807 02:42:46.748"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 02:42:46.749" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 02:42:46.749" starttime="20170807 02:42:46.749"></status>
</kw>
<status status="PASS" endtime="20170807 02:42:46.749" starttime="20170807 02:42:46.304"></status>
</kw>
<status status="PASS" endtime="20170807 02:42:46.749" starttime="20170807 02:42:46.303"></status>
</kw>
<status status="PASS" endtime="20170807 02:42:46.750" starttime="20170807 02:42:46.303"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170807 02:42:46.750" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170807 02:42:46.750" starttime="20170807 02:42:46.750"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:42:46.751" starttime="20170807 02:42:46.750"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170807 02:42:46.932" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170807 02:42:46.932" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 02:42:46.932" starttime="20170807 02:42:46.751"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:42:46.933" starttime="20170807 02:42:46.933"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170807 02:42:46.934" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 02:42:46.934" starttime="20170807 02:42:46.934"></status>
</kw>
<msg timestamp="20170807 02:42:46.934" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 02:42:46.934" starttime="20170807 02:42:46.302"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 02:42:46.935" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 02:42:46.935" starttime="20170807 02:42:46.934"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170807 02:42:46.935" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170807 02:42:46.935" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170807 02:42:46.935" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status status="PASS" endtime="20170807 02:42:46.935" starttime="20170807 02:42:46.935"></status>
</kw>
<msg timestamp="20170807 02:42:46.936" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170807 02:42:46.936" starttime="20170807 02:42:46.301"></status>
</kw>
<msg timestamp="20170807 02:42:46.936" level="INFO">${power_state} = Off</msg>
<status status="PASS" endtime="20170807 02:42:46.936" starttime="20170807 02:42:46.301"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:42:46.937" starttime="20170807 02:42:46.937"></status>
</kw>
<status status="PASS" endtime="20170807 02:42:46.937" starttime="20170807 02:42:46.300"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170807 02:42:46.941" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 02:42:46.941" starttime="20170807 02:42:46.940"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 02:42:46.942" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 02:42:46.942" starttime="20170807 02:42:46.942"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170807 02:42:46.943" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 02:42:46.943" starttime="20170807 02:42:46.942"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170807 02:42:46.943" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 02:42:46.943" starttime="20170807 02:42:46.943"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170807 02:42:47.273" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 02:42:47.274" starttime="20170807 02:42:46.944"></status>
</kw>
<msg timestamp="20170807 02:42:47.274" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 02:42:47.274" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 02:42:47.274" starttime="20170807 02:42:46.944"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170807 02:42:47.275" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 02:42:47.275" starttime="20170807 02:42:47.274"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 02:42:47.275" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 02:42:47.275" starttime="20170807 02:42:47.275"></status>
</kw>
<status status="PASS" endtime="20170807 02:42:47.276" starttime="20170807 02:42:46.940"></status>
</kw>
<status status="PASS" endtime="20170807 02:42:47.276" starttime="20170807 02:42:46.939"></status>
</kw>
<status status="PASS" endtime="20170807 02:42:47.276" starttime="20170807 02:42:46.939"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170807 02:42:47.276" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170807 02:42:47.276" starttime="20170807 02:42:47.276"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:42:47.277" starttime="20170807 02:42:47.277"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170807 02:42:47.528" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170807 02:42:47.528" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 02:42:47.528" starttime="20170807 02:42:47.277"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:42:47.529" starttime="20170807 02:42:47.529"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170807 02:42:47.530" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 02:42:47.530" starttime="20170807 02:42:47.529"></status>
</kw>
<msg timestamp="20170807 02:42:47.530" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 02:42:47.530" starttime="20170807 02:42:46.938"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 02:42:47.530" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 02:42:47.531" starttime="20170807 02:42:47.530"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170807 02:42:47.531" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170807 02:42:47.531" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170807 02:42:47.531" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170807 02:42:47.531" starttime="20170807 02:42:47.531"></status>
</kw>
<msg timestamp="20170807 02:42:47.532" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170807 02:42:47.532" starttime="20170807 02:42:46.938"></status>
</kw>
<msg timestamp="20170807 02:42:47.532" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170807 02:42:47.532" starttime="20170807 02:42:46.937"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:42:47.533" starttime="20170807 02:42:47.532"></status>
</kw>
<status status="PASS" endtime="20170807 02:42:47.533" starttime="20170807 02:42:46.300"></status>
</kw>
<status status="PASS" endtime="20170807 02:42:47.533" starttime="20170807 02:42:46.299"></status>
</kw>
<status status="PASS" endtime="20170807 02:42:47.533" starttime="20170807 02:42:45.720"></status>
</kw>
<status status="PASS" endtime="20170807 02:42:47.533" starttime="20170807 02:42:45.719"></status>
</kw>
<status status="PASS" endtime="20170807 02:42:47.533" starttime="20170807 02:42:45.719"></status>
</kw>
<kw name="Set Policy Setting" library="code_update_utils">
<doc>Set the given test policy</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20170807 02:42:47.534" level="INFO">${valueDict} = {u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170807 02:42:47.534" starttime="20170807 02:42:47.534"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170807 02:42:47.535" level="INFO">${base_uri} = /org/openbmc/settings/host0</msg>
<status status="PASS" endtime="20170807 02:42:47.535" starttime="20170807 02:42:47.535"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170807 02:42:47.538" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 02:42:47.539" starttime="20170807 02:42:47.538"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 02:42:47.540" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 02:42:47.540" starttime="20170807 02:42:47.539"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170807 02:42:47.540" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 02:42:47.540" starttime="20170807 02:42:47.540"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170807 02:42:47.541" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 02:42:47.541" starttime="20170807 02:42:47.541"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170807 02:42:47.729" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 02:42:47.729" starttime="20170807 02:42:47.542"></status>
</kw>
<msg timestamp="20170807 02:42:47.729" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 02:42:47.729" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 02:42:47.729" starttime="20170807 02:42:47.541"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170807 02:42:47.730" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 02:42:47.730" starttime="20170807 02:42:47.729"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 02:42:47.730" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 02:42:47.731" starttime="20170807 02:42:47.730"></status>
</kw>
<status status="PASS" endtime="20170807 02:42:47.731" starttime="20170807 02:42:47.537"></status>
</kw>
<status status="PASS" endtime="20170807 02:42:47.731" starttime="20170807 02:42:47.537"></status>
</kw>
<status status="PASS" endtime="20170807 02:42:47.731" starttime="20170807 02:42:47.536"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170807 02:42:47.731" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170807 02:42:47.732" starttime="20170807 02:42:47.731"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 02:42:47.732" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 02:42:47.732" starttime="20170807 02:42:47.732"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:42:47.733" starttime="20170807 02:42:47.733"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170807 02:42:47.734" level="INFO">${msg} = URI:https://9.3.86.161/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': u'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170807 02:42:47.734" starttime="20170807 02:42:47.734"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170807 02:42:47.735" level="INFO">URI:https://9.3.86.161/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': u'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170807 02:42:47.735" starttime="20170807 02:42:47.735"></status>
</kw>
<status status="PASS" endtime="20170807 02:42:47.736" starttime="20170807 02:42:47.735"></status>
</kw>
<status status="PASS" endtime="20170807 02:42:47.736" starttime="20170807 02:42:47.733"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170807 02:42:47.984" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, data={"data": "RESTORE_LAST_STATE"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170807 02:42:47.985" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 02:42:47.985" starttime="20170807 02:42:47.736"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170807 02:42:47.986" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 02:42:47.986" starttime="20170807 02:42:47.985"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170807 02:42:47.987" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 02:42:47.987" starttime="20170807 02:42:47.987"></status>
</kw>
<status status="PASS" endtime="20170807 02:42:47.988" starttime="20170807 02:42:47.986"></status>
</kw>
<status status="PASS" endtime="20170807 02:42:47.988" starttime="20170807 02:42:47.985"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170807 02:42:47.988" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 02:42:47.988" starttime="20170807 02:42:47.988"></status>
</kw>
<msg timestamp="20170807 02:42:47.989" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 02:42:47.989" starttime="20170807 02:42:47.536"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 02:42:47.989" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 02:42:47.989" starttime="20170807 02:42:47.989"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170807 02:42:47.990" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170807 02:42:47.990" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170807 02:42:47.990" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170807 02:42:47.990" starttime="20170807 02:42:47.990"></status>
</kw>
<status status="PASS" endtime="20170807 02:42:47.990" starttime="20170807 02:42:47.534"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170807 02:42:47.997" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 02:42:47.997" starttime="20170807 02:42:47.997"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 02:42:47.998" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 02:42:47.998" starttime="20170807 02:42:47.998"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170807 02:42:47.998" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 02:42:47.999" starttime="20170807 02:42:47.998"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170807 02:42:47.999" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 02:42:47.999" starttime="20170807 02:42:47.999"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170807 02:42:48.238" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 02:42:48.238" starttime="20170807 02:42:48.000"></status>
</kw>
<msg timestamp="20170807 02:42:48.238" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 02:42:48.238" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 02:42:48.238" starttime="20170807 02:42:48.000"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170807 02:42:48.239" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 02:42:48.239" starttime="20170807 02:42:48.238"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 02:42:48.240" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 02:42:48.240" starttime="20170807 02:42:48.239"></status>
</kw>
<status status="PASS" endtime="20170807 02:42:48.240" starttime="20170807 02:42:47.996"></status>
</kw>
<status status="PASS" endtime="20170807 02:42:48.240" starttime="20170807 02:42:47.995"></status>
</kw>
<status status="PASS" endtime="20170807 02:42:48.240" starttime="20170807 02:42:47.992"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170807 02:42:48.241" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170807 02:42:48.241" starttime="20170807 02:42:48.240"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:42:48.241" starttime="20170807 02:42:48.241"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170807 02:42:48.325" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, headers=None json=None</msg>
<msg timestamp="20170807 02:42:48.325" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 02:42:48.325" starttime="20170807 02:42:48.242"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:42:48.326" starttime="20170807 02:42:48.325"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170807 02:42:48.326" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 02:42:48.326" starttime="20170807 02:42:48.326"></status>
</kw>
<msg timestamp="20170807 02:42:48.326" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 02:42:48.326" starttime="20170807 02:42:47.991"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 02:42:48.327" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 02:42:48.327" starttime="20170807 02:42:48.327"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170807 02:42:48.328" level="INFO">To JSON using : content={
  "data": "RESTORE_LAST_STATE", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170807 02:42:48.328" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170807 02:42:48.328" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170807 02:42:48.328" starttime="20170807 02:42:48.327"></status>
</kw>
<msg timestamp="20170807 02:42:48.328" level="INFO">${currentPolicy} = RESTORE_LAST_STATE</msg>
<status status="PASS" endtime="20170807 02:42:48.328" starttime="20170807 02:42:47.991"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${currentPolicy}</arg>
<arg>${policy}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:42:48.329" starttime="20170807 02:42:48.329"></status>
</kw>
<status status="PASS" endtime="20170807 02:42:48.329" starttime="20170807 02:42:47.533"></status>
</kw>
<kw name="Prepare For Update" library="code_update_utils">
<doc>Switch to update mode in progress. This method calls</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170807 02:42:48.330" level="INFO">${data} = {u'data': []}</msg>
<status status="PASS" endtime="20170807 02:42:48.330" starttime="20170807 02:42:48.330"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${BMC_PREP_METHOD}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170807 02:42:48.333" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 02:42:48.334" starttime="20170807 02:42:48.333"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 02:42:48.334" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 02:42:48.334" starttime="20170807 02:42:48.334"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170807 02:42:48.335" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 02:42:48.335" starttime="20170807 02:42:48.335"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170807 02:42:48.336" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 02:42:48.336" starttime="20170807 02:42:48.335"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170807 02:42:48.512" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 02:42:48.512" starttime="20170807 02:42:48.336"></status>
</kw>
<msg timestamp="20170807 02:42:48.512" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 02:42:48.512" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 02:42:48.512" starttime="20170807 02:42:48.336"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170807 02:42:48.513" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 02:42:48.513" starttime="20170807 02:42:48.512"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 02:42:48.514" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 02:42:48.514" starttime="20170807 02:42:48.513"></status>
</kw>
<status status="PASS" endtime="20170807 02:42:48.514" starttime="20170807 02:42:48.332"></status>
</kw>
<status status="PASS" endtime="20170807 02:42:48.514" starttime="20170807 02:42:48.332"></status>
</kw>
<status status="PASS" endtime="20170807 02:42:48.514" starttime="20170807 02:42:48.331"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170807 02:42:48.515" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc/action/PrepareForUpdate</msg>
<status status="PASS" endtime="20170807 02:42:48.515" starttime="20170807 02:42:48.515"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 02:42:48.516" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 02:42:48.516" starttime="20170807 02:42:48.516"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:42:48.517" starttime="20170807 02:42:48.517"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:42:48.518" starttime="20170807 02:42:48.518"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170807 02:42:48.894" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc/action/PrepareForUpdate, data={"data": []}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20170807 02:42:48.895" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 02:42:48.895" starttime="20170807 02:42:48.518"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:42:48.895" starttime="20170807 02:42:48.895"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170807 02:42:48.896" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 02:42:48.896" starttime="20170807 02:42:48.896"></status>
</kw>
<msg timestamp="20170807 02:42:48.896" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 02:42:48.896" starttime="20170807 02:42:48.330"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 02:42:48.897" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 02:42:48.897" starttime="20170807 02:42:48.897"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10s</arg>
</arguments>
<msg timestamp="20170807 02:42:58.898" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20170807 02:42:58.898" starttime="20170807 02:42:48.897"></status>
</kw>
<status status="PASS" endtime="20170807 02:42:58.898" starttime="20170807 02:42:48.329"></status>
</kw>
<kw name="Check If BMC is Up" library="utils">
<doc>Wait for Host to be online. Checks every X seconds</doc>
<arguments>
<arg>20 min</arg>
<arg>10 sec</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${max_timeout}</arg>
<arg>${interval}</arg>
<arg>Verify Ping and REST Authentication</arg>
</arguments>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170807 02:42:58.901" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170807 02:42:58.902" starttime="20170807 02:42:58.901"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170807 02:42:58.912" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170807 02:43:01.910" level="INFO">${RC} = 0</msg>
<msg timestamp="20170807 02:43:01.911" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=2.74 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.615 ms
64 bytes from 9.3.86.161: icmp_seq...</msg>
<status status="PASS" endtime="20170807 02:43:01.911" starttime="20170807 02:42:58.902"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170807 02:43:01.914" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=2.74 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.615 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.559 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.586 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3000ms
rtt min/avg/max/mdev = 0.559/1.125/2.740/0.932 ms</msg>
<status status="PASS" endtime="20170807 02:43:01.914" starttime="20170807 02:43:01.913"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:43:01.914" starttime="20170807 02:43:01.914"></status>
</kw>
<status status="PASS" endtime="20170807 02:43:01.914" starttime="20170807 02:42:58.901"></status>
</kw>
<msg timestamp="20170807 02:43:01.915" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170807 02:43:01.915" starttime="20170807 02:42:58.900"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170807 02:43:01.915" starttime="20170807 02:43:01.915"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170807 02:43:01.918" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 02:43:01.919" starttime="20170807 02:43:01.918"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 02:43:01.920" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 02:43:01.920" starttime="20170807 02:43:01.920"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170807 02:43:01.921" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 02:43:01.921" starttime="20170807 02:43:01.920"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170807 02:43:01.921" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 02:43:01.921" starttime="20170807 02:43:01.921"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170807 02:43:04.011" level="FAIL">ConnectionError: ('Connection aborted.', error(104, 'Connection reset by peer'))</msg>
<status status="FAIL" endtime="20170807 02:43:04.011" starttime="20170807 02:43:01.922"></status>
</kw>
<msg timestamp="20170807 02:43:04.011" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170807 02:43:04.011" level="INFO">${resp} = ConnectionError: ('Connection aborted.', error(104, 'Connection reset by peer'))</msg>
<status status="PASS" endtime="20170807 02:43:04.011" starttime="20170807 02:43:01.922"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170807 02:43:04.012" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170807 02:43:04.012" level="FAIL">ConnectionError: ('Connection aborted.', error(104, 'Connection reset by peer')): FAIL != PASS</msg>
<status status="FAIL" endtime="20170807 02:43:04.012" starttime="20170807 02:43:04.012"></status>
</kw>
<status status="FAIL" endtime="20170807 02:43:04.013" starttime="20170807 02:43:01.917"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170807 02:43:24.015" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 02:43:24.016" starttime="20170807 02:43:24.015"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 02:43:24.016" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 02:43:24.016" starttime="20170807 02:43:24.016"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170807 02:43:24.017" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 02:43:24.017" starttime="20170807 02:43:24.017"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170807 02:43:24.018" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 02:43:24.018" starttime="20170807 02:43:24.017"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170807 02:43:44.042" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff8a49f910&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=20.0)')': /login</msg>
<msg timestamp="20170807 02:44:04.265" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff8a49f390&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=20.0)')': /login</msg>
<msg timestamp="20170807 02:44:39.314" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="FAIL" endtime="20170807 02:44:39.314" starttime="20170807 02:43:24.019"></status>
</kw>
<msg timestamp="20170807 02:44:39.315" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170807 02:44:39.315" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="PASS" endtime="20170807 02:44:39.315" starttime="20170807 02:43:24.018"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170807 02:44:39.316" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170807 02:44:39.317" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170807 02:44:39.317" starttime="20170807 02:44:39.316"></status>
</kw>
<status status="FAIL" endtime="20170807 02:44:39.317" starttime="20170807 02:43:24.013"></status>
</kw>
<msg timestamp="20170807 02:44:39.317" level="FAIL">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170807 02:44:39.317" starttime="20170807 02:43:01.917"></status>
</kw>
<status status="FAIL" endtime="20170807 02:44:39.318" starttime="20170807 02:43:01.916"></status>
</kw>
<msg timestamp="20170807 02:44:39.318" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20170807 02:44:39.318" starttime="20170807 02:43:01.916"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20170807 02:44:39.320" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20170807 02:44:39.320" starttime="20170807 02:44:39.319"></status>
</kw>
<status status="FAIL" endtime="20170807 02:44:39.320" starttime="20170807 02:44:39.318"></status>
</kw>
<status status="FAIL" endtime="20170807 02:44:39.320" starttime="20170807 02:42:58.900"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170807 02:44:49.323" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170807 02:44:49.323" starttime="20170807 02:44:49.323"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170807 02:44:49.327" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170807 02:44:52.331" level="INFO">${RC} = 0</msg>
<msg timestamp="20170807 02:44:52.331" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.15 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.608 ms
64 bytes from 9.3.86.161: icmp_seq...</msg>
<status status="PASS" endtime="20170807 02:44:52.331" starttime="20170807 02:44:49.323"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170807 02:44:52.334" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.15 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.608 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.682 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.674 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.608/0.780/1.158/0.221 ms</msg>
<status status="PASS" endtime="20170807 02:44:52.334" starttime="20170807 02:44:52.334"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:44:52.335" starttime="20170807 02:44:52.335"></status>
</kw>
<status status="PASS" endtime="20170807 02:44:52.336" starttime="20170807 02:44:49.322"></status>
</kw>
<msg timestamp="20170807 02:44:52.336" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170807 02:44:52.336" starttime="20170807 02:44:49.322"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170807 02:44:52.337" starttime="20170807 02:44:52.336"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170807 02:44:52.340" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 02:44:52.341" starttime="20170807 02:44:52.339"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 02:44:52.342" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 02:44:52.342" starttime="20170807 02:44:52.341"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170807 02:44:52.343" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 02:44:52.343" starttime="20170807 02:44:52.342"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170807 02:44:52.344" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 02:44:52.344" starttime="20170807 02:44:52.343"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170807 02:45:12.371" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="FAIL" endtime="20170807 02:45:12.371" starttime="20170807 02:44:52.344"></status>
</kw>
<msg timestamp="20170807 02:45:12.371" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170807 02:45:12.371" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="PASS" endtime="20170807 02:45:12.371" starttime="20170807 02:44:52.344"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170807 02:45:12.372" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170807 02:45:12.372" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170807 02:45:12.372" starttime="20170807 02:45:12.372"></status>
</kw>
<status status="FAIL" endtime="20170807 02:45:12.373" starttime="20170807 02:44:52.339"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170807 02:45:32.375" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 02:45:32.376" starttime="20170807 02:45:32.374"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 02:45:32.376" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 02:45:32.376" starttime="20170807 02:45:32.376"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170807 02:45:32.377" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 02:45:32.377" starttime="20170807 02:45:32.377"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170807 02:45:32.378" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 02:45:32.378" starttime="20170807 02:45:32.377"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170807 02:45:32.585" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 02:45:32.586" starttime="20170807 02:45:32.379"></status>
</kw>
<msg timestamp="20170807 02:45:32.586" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 02:45:32.586" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 02:45:32.586" starttime="20170807 02:45:32.378"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170807 02:45:32.587" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 02:45:32.587" starttime="20170807 02:45:32.586"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 02:45:32.588" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 02:45:32.588" starttime="20170807 02:45:32.587"></status>
</kw>
<status status="PASS" endtime="20170807 02:45:32.588" starttime="20170807 02:45:32.373"></status>
</kw>
<status status="PASS" endtime="20170807 02:45:32.588" starttime="20170807 02:44:52.338"></status>
</kw>
<status status="PASS" endtime="20170807 02:45:32.588" starttime="20170807 02:44:52.337"></status>
</kw>
<msg timestamp="20170807 02:45:32.588" level="INFO">${l_rest} = True</msg>
<status status="PASS" endtime="20170807 02:45:32.588" starttime="20170807 02:44:52.337"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<status status="PASS" endtime="20170807 02:45:32.589" starttime="20170807 02:45:32.588"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170807 02:45:32.590" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170807 02:45:32.590" starttime="20170807 02:45:32.590"></status>
</kw>
<msg timestamp="20170807 02:45:32.591" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170807 02:45:32.591" starttime="20170807 02:45:32.590"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:45:32.592" starttime="20170807 02:45:32.592"></status>
</kw>
<status status="PASS" endtime="20170807 02:45:32.592" starttime="20170807 02:45:32.591"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170807 02:45:32.593" starttime="20170807 02:45:32.592"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170807 02:45:32.594" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170807 02:45:32.594" starttime="20170807 02:45:32.593"></status>
</kw>
<msg timestamp="20170807 02:45:32.594" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170807 02:45:32.594" starttime="20170807 02:45:32.593"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:45:32.597" starttime="20170807 02:45:32.595"></status>
</kw>
<status status="PASS" endtime="20170807 02:45:32.597" starttime="20170807 02:45:32.595"></status>
</kw>
<status status="PASS" endtime="20170807 02:45:32.597" starttime="20170807 02:45:32.594"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170807 02:45:32.598" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170807 02:45:34.592" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170807 02:45:34.593" starttime="20170807 02:45:32.598"></status>
</kw>
<status status="PASS" endtime="20170807 02:45:34.593" starttime="20170807 02:45:32.589"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>hostname</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${system}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170807 02:45:34.593" level="INFO">Executing command 'hostname'.</msg>
<msg timestamp="20170807 02:45:34.650" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170807 02:45:34.651" level="INFO">${system} = witherspoon</msg>
<msg timestamp="20170807 02:45:34.651" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170807 02:45:34.651" starttime="20170807 02:45:34.593"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170807 02:45:34.651" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170807 02:45:34.651" starttime="20170807 02:45:34.651"></status>
</kw>
<status status="PASS" endtime="20170807 02:45:34.651" starttime="20170807 02:44:49.321"></status>
</kw>
<status status="PASS" endtime="20170807 02:45:34.652" starttime="20170807 02:42:58.899"></status>
</kw>
<status status="PASS" endtime="20170807 02:45:34.652" starttime="20170807 02:42:58.899"></status>
</kw>
<kw name="Check Boot Count And Time">
<doc>Check for unexpected reboots.</doc>
<kw name="Set BMC Reset Reference Time" library="utils">
<doc>Set current boot time as a reference and increment</doc>
<kw name="Get BMC Boot Time" library="utils">
<doc>Get boot time from /proc/stat.</doc>
<assign>
<var>${cur_btime}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170807 02:45:34.655" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170807 02:45:34.655" starttime="20170807 02:45:34.654"></status>
</kw>
<msg timestamp="20170807 02:45:34.655" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170807 02:45:34.655" starttime="20170807 02:45:34.654"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:45:34.656" starttime="20170807 02:45:34.656"></status>
</kw>
<status status="PASS" endtime="20170807 02:45:34.657" starttime="20170807 02:45:34.655"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170807 02:45:34.658" starttime="20170807 02:45:34.657"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170807 02:45:34.659" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170807 02:45:34.659" starttime="20170807 02:45:34.658"></status>
</kw>
<msg timestamp="20170807 02:45:34.659" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170807 02:45:34.659" starttime="20170807 02:45:34.658"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:45:34.661" starttime="20170807 02:45:34.660"></status>
</kw>
<status status="PASS" endtime="20170807 02:45:34.661" starttime="20170807 02:45:34.660"></status>
</kw>
<status status="PASS" endtime="20170807 02:45:34.661" starttime="20170807 02:45:34.659"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170807 02:45:34.661" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170807 02:45:36.855" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170807 02:45:36.856" starttime="20170807 02:45:34.661"></status>
</kw>
<status status="PASS" endtime="20170807 02:45:36.856" starttime="20170807 02:45:34.653"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>egrep '^btime ' /proc/stat | cut -f 2 -d ' '</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170807 02:45:36.857" level="INFO">Executing command 'egrep '^btime ' /proc/stat | cut -f 2 -d ' ''.</msg>
<msg timestamp="20170807 02:45:37.014" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170807 02:45:37.014" level="INFO">${output} = 1502073815</msg>
<msg timestamp="20170807 02:45:37.014" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170807 02:45:37.014" starttime="20170807 02:45:36.856"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170807 02:45:37.015" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170807 02:45:37.015" starttime="20170807 02:45:37.015"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${btime}</var>
</assign>
<msg timestamp="20170807 02:45:37.016" level="INFO">${btime} = 1502073815</msg>
<status status="PASS" endtime="20170807 02:45:37.016" starttime="20170807 02:45:37.015"></status>
</kw>
<msg timestamp="20170807 02:45:37.016" level="INFO">${cur_btime} = 1502073815</msg>
<status status="PASS" endtime="20170807 02:45:37.016" starttime="20170807 02:45:34.653"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_TIME} == ${0} and ${BOOT_COUNT} == ${0}</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>ELSE IF</arg>
<arg>${cur_btime} &gt; ${BOOT_TIME}</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_COUNT}</arg>
<arg>${BOOT_COUNT + 1}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_COUNT}</arg>
<arg>${BOOT_COUNT + 1}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
</arguments>
<msg timestamp="20170807 02:45:37.018" level="INFO">${BOOT_TIME} = 1502073815</msg>
<status status="PASS" endtime="20170807 02:45:37.018" starttime="20170807 02:45:37.018"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${BOOT_COUNT}</arg>
<arg>${BOOT_COUNT + 1}</arg>
</arguments>
<msg timestamp="20170807 02:45:37.019" level="INFO">${BOOT_COUNT} = 1</msg>
<status status="PASS" endtime="20170807 02:45:37.019" starttime="20170807 02:45:37.019"></status>
</kw>
<status status="PASS" endtime="20170807 02:45:37.019" starttime="20170807 02:45:37.017"></status>
</kw>
<status status="PASS" endtime="20170807 02:45:37.020" starttime="20170807 02:45:37.016"></status>
</kw>
<status status="PASS" endtime="20170807 02:45:37.020" starttime="20170807 02:45:34.652"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Count: ${BOOT_COUNT}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:45:37.020" starttime="20170807 02:45:37.020"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Time: ${BOOT_TIME}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:45:37.021" starttime="20170807 02:45:37.021"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_COUNT} &gt; ${MAX_BOOT_COUNT}</arg>
<arg>Log</arg>
<arg>Phantom Reboot!!! Unexpected reboot detected</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20170807 02:45:37.021" starttime="20170807 02:45:37.021"></status>
</kw>
<status status="PASS" endtime="20170807 02:45:37.022" starttime="20170807 02:45:34.652"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Temp BMC URI Check</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Temp BMC URI Check">
<doc>Check for transient "BMC0" interface.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/state/BMC0/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170807 02:45:37.025" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 02:45:37.026" starttime="20170807 02:45:37.025"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 02:45:37.027" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 02:45:37.027" starttime="20170807 02:45:37.026"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170807 02:45:37.028" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 02:45:37.028" starttime="20170807 02:45:37.027"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170807 02:45:37.028" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 02:45:37.028" starttime="20170807 02:45:37.028"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170807 02:45:37.211" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 02:45:37.211" starttime="20170807 02:45:37.029"></status>
</kw>
<msg timestamp="20170807 02:45:37.211" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 02:45:37.211" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 02:45:37.212" starttime="20170807 02:45:37.029"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170807 02:45:37.212" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 02:45:37.212" starttime="20170807 02:45:37.212"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 02:45:37.213" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 02:45:37.213" starttime="20170807 02:45:37.213"></status>
</kw>
<status status="PASS" endtime="20170807 02:45:37.214" starttime="20170807 02:45:37.025"></status>
</kw>
<status status="PASS" endtime="20170807 02:45:37.214" starttime="20170807 02:45:37.024"></status>
</kw>
<status status="PASS" endtime="20170807 02:45:37.214" starttime="20170807 02:45:37.023"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170807 02:45:37.215" level="INFO">${base_uri} = /xyz/openbmc_project/state/BMC0/</msg>
<status status="PASS" endtime="20170807 02:45:37.215" starttime="20170807 02:45:37.214"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:45:37.216" starttime="20170807 02:45:37.215"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170807 02:45:37.260" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/BMC0/, headers=None json=None</msg>
<msg timestamp="20170807 02:45:37.261" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170807 02:45:37.261" starttime="20170807 02:45:37.216"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:45:37.261" starttime="20170807 02:45:37.261"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170807 02:45:37.262" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 02:45:37.262" starttime="20170807 02:45:37.262"></status>
</kw>
<msg timestamp="20170807 02:45:37.262" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170807 02:45:37.262" starttime="20170807 02:45:37.022"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 02:45:37.263" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170807 02:45:37.263" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170807 02:45:37.263" starttime="20170807 02:45:37.263"></status>
</kw>
<status status="FAIL" endtime="20170807 02:45:37.263" starttime="20170807 02:45:37.022"></status>
</kw>
<msg timestamp="20170807 02:45:37.263" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170807 02:45:37.264" starttime="20170807 02:45:37.022"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Wait For BMC Ready</arg>
<arg>ELSE</arg>
<arg>Wait For Temp BMC Ready</arg>
</arguments>
<kw name="Wait For BMC Ready" library="state_manager">
<doc>Check BMC state and wait for BMC Ready.</doc>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>BMC_READY</arg>
<arg>HOST_POWERED_OFF</arg>
</arguments>
<assign>
<var>@{states}</var>
</assign>
<msg timestamp="20170807 02:45:37.265" level="INFO">@{states} = [ BMC_READY | HOST_POWERED_OFF ]</msg>
<status status="PASS" endtime="20170807 02:45:37.265" starttime="20170807 02:45:37.265"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${OBMC_STATES_VERSION}' == '${0}'</arg>
<arg>Wait Until Keyword Succeeds</arg>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Verify BMC State</arg>
<arg>${states}</arg>
<arg>ELSE</arg>
<arg>Wait Until Keyword Succeeds</arg>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is BMC Ready</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is BMC Ready</arg>
</arguments>
<kw name="Is BMC Ready" library="state_manager">
<doc>Check if BMC state is Ready.</doc>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170807 02:45:37.271" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 02:45:37.271" starttime="20170807 02:45:37.270"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 02:45:37.272" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 02:45:37.272" starttime="20170807 02:45:37.271"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170807 02:45:37.272" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 02:45:37.272" starttime="20170807 02:45:37.272"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170807 02:45:37.274" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 02:45:37.274" starttime="20170807 02:45:37.273"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170807 02:45:37.471" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 02:45:37.471" starttime="20170807 02:45:37.274"></status>
</kw>
<msg timestamp="20170807 02:45:37.471" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 02:45:37.471" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 02:45:37.471" starttime="20170807 02:45:37.274"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170807 02:45:37.472" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 02:45:37.472" starttime="20170807 02:45:37.471"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 02:45:37.473" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 02:45:37.473" starttime="20170807 02:45:37.472"></status>
</kw>
<status status="PASS" endtime="20170807 02:45:37.473" starttime="20170807 02:45:37.269"></status>
</kw>
<status status="PASS" endtime="20170807 02:45:37.473" starttime="20170807 02:45:37.269"></status>
</kw>
<status status="PASS" endtime="20170807 02:45:37.474" starttime="20170807 02:45:37.268"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170807 02:45:37.474" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170807 02:45:37.474" starttime="20170807 02:45:37.474"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:45:37.475" starttime="20170807 02:45:37.475"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170807 02:45:37.569" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None json=None</msg>
<msg timestamp="20170807 02:45:37.569" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 02:45:37.569" starttime="20170807 02:45:37.475"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:45:37.570" starttime="20170807 02:45:37.569"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170807 02:45:37.570" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 02:45:37.570" starttime="20170807 02:45:37.570"></status>
</kw>
<msg timestamp="20170807 02:45:37.571" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 02:45:37.571" starttime="20170807 02:45:37.268"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 02:45:37.571" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 02:45:37.571" starttime="20170807 02:45:37.571"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170807 02:45:37.572" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170807 02:45:37.572" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170807 02:45:37.572" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170807 02:45:37.572" starttime="20170807 02:45:37.572"></status>
</kw>
<msg timestamp="20170807 02:45:37.572" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170807 02:45:37.572" starttime="20170807 02:45:37.267"></status>
</kw>
<msg timestamp="20170807 02:45:37.573" level="INFO">${bmc_state} = Ready</msg>
<status status="PASS" endtime="20170807 02:45:37.573" starttime="20170807 02:45:37.267"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${BMC_READY_STATE}</arg>
<arg>${bmc_state}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:45:37.574" starttime="20170807 02:45:37.573"></status>
</kw>
<status status="PASS" endtime="20170807 02:45:37.574" starttime="20170807 02:45:37.266"></status>
</kw>
<status status="PASS" endtime="20170807 02:45:37.574" starttime="20170807 02:45:37.266"></status>
</kw>
<status status="PASS" endtime="20170807 02:45:37.574" starttime="20170807 02:45:37.265"></status>
</kw>
<status status="PASS" endtime="20170807 02:45:37.574" starttime="20170807 02:45:37.264"></status>
</kw>
<status status="PASS" endtime="20170807 02:45:37.574" starttime="20170807 02:45:37.264"></status>
</kw>
<status status="PASS" endtime="20170807 02:45:37.574" starttime="20170807 02:42:42.139"></status>
</kw>
<status status="PASS" endtime="20170807 02:45:37.574" starttime="20170807 02:42:42.138"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Preserve BMC Network Setting</arg>
</arguments>
<kw name="Preserve BMC Network Setting" library="code_update_utils">
<doc>Preserve Network setting</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<assign>
<var>${policy}</var>
</assign>
<msg timestamp="20170807 02:45:37.581" level="INFO">${policy} = 1</msg>
<status status="PASS" endtime="20170807 02:45:37.581" starttime="20170807 02:45:37.580"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20170807 02:45:37.581" level="INFO">${value} = {u'data': 1}</msg>
<status status="PASS" endtime="20170807 02:45:37.581" starttime="20170807 02:45:37.581"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${BMC_UPD_ATTR}</arg>
<arg>preserve_network_settings</arg>
<arg>data=${value}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170807 02:45:37.583" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc</msg>
<status status="PASS" endtime="20170807 02:45:37.583" starttime="20170807 02:45:37.582"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170807 02:45:37.586" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 02:45:37.586" starttime="20170807 02:45:37.585"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 02:45:37.587" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 02:45:37.587" starttime="20170807 02:45:37.586"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170807 02:45:37.588" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 02:45:37.588" starttime="20170807 02:45:37.587"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170807 02:45:37.588" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 02:45:37.588" starttime="20170807 02:45:37.588"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170807 02:45:37.765" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 02:45:37.765" starttime="20170807 02:45:37.589"></status>
</kw>
<msg timestamp="20170807 02:45:37.765" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 02:45:37.765" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 02:45:37.765" starttime="20170807 02:45:37.589"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170807 02:45:37.766" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 02:45:37.766" starttime="20170807 02:45:37.766"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 02:45:37.767" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 02:45:37.767" starttime="20170807 02:45:37.766"></status>
</kw>
<status status="PASS" endtime="20170807 02:45:37.767" starttime="20170807 02:45:37.585"></status>
</kw>
<status status="PASS" endtime="20170807 02:45:37.767" starttime="20170807 02:45:37.584"></status>
</kw>
<status status="PASS" endtime="20170807 02:45:37.767" starttime="20170807 02:45:37.584"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170807 02:45:37.768" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc/attr/preserve_network_settings</msg>
<status status="PASS" endtime="20170807 02:45:37.768" starttime="20170807 02:45:37.767"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 02:45:37.768" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 02:45:37.768" starttime="20170807 02:45:37.768"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:45:37.769" starttime="20170807 02:45:37.769"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170807 02:45:37.771" level="INFO">${msg} = URI:https://9.3.86.161/org/openbmc/control/flash/bmc/attr/preserve_network_settings, method:Put, args:{u'data': {u'data': 1}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170807 02:45:37.771" starttime="20170807 02:45:37.770"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170807 02:45:37.772" level="INFO">URI:https://9.3.86.161/org/openbmc/control/flash/bmc/attr/preserve_network_settings, method:Put, args:{u'data': {u'data': 1}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170807 02:45:37.772" starttime="20170807 02:45:37.771"></status>
</kw>
<status status="PASS" endtime="20170807 02:45:37.772" starttime="20170807 02:45:37.771"></status>
</kw>
<status status="PASS" endtime="20170807 02:45:37.772" starttime="20170807 02:45:37.769"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170807 02:45:38.067" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc/attr/preserve_network_settings, data={"data": 1},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170807 02:45:38.067" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 02:45:38.067" starttime="20170807 02:45:37.772"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170807 02:45:38.069" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 02:45:38.069" starttime="20170807 02:45:38.068"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170807 02:45:38.071" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 02:45:38.071" starttime="20170807 02:45:38.070"></status>
</kw>
<status status="PASS" endtime="20170807 02:45:38.072" starttime="20170807 02:45:38.069"></status>
</kw>
<status status="PASS" endtime="20170807 02:45:38.072" starttime="20170807 02:45:38.067"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170807 02:45:38.073" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 02:45:38.073" starttime="20170807 02:45:38.073"></status>
</kw>
<msg timestamp="20170807 02:45:38.073" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 02:45:38.073" starttime="20170807 02:45:37.583"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 02:45:38.074" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 02:45:38.074" starttime="20170807 02:45:38.074"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170807 02:45:38.075" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170807 02:45:38.075" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170807 02:45:38.075" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170807 02:45:38.075" starttime="20170807 02:45:38.074"></status>
</kw>
<status status="PASS" endtime="20170807 02:45:38.075" starttime="20170807 02:45:37.582"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${BMC_UPD_ATTR}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170807 02:45:38.079" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 02:45:38.080" starttime="20170807 02:45:38.079"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 02:45:38.080" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 02:45:38.080" starttime="20170807 02:45:38.080"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170807 02:45:38.081" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 02:45:38.081" starttime="20170807 02:45:38.081"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170807 02:45:38.082" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 02:45:38.082" starttime="20170807 02:45:38.081"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170807 02:45:38.296" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 02:45:38.296" starttime="20170807 02:45:38.083"></status>
</kw>
<msg timestamp="20170807 02:45:38.296" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 02:45:38.296" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 02:45:38.296" starttime="20170807 02:45:38.082"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170807 02:45:38.297" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 02:45:38.297" starttime="20170807 02:45:38.297"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 02:45:38.298" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 02:45:38.298" starttime="20170807 02:45:38.297"></status>
</kw>
<status status="PASS" endtime="20170807 02:45:38.298" starttime="20170807 02:45:38.078"></status>
</kw>
<status status="PASS" endtime="20170807 02:45:38.298" starttime="20170807 02:45:38.077"></status>
</kw>
<status status="PASS" endtime="20170807 02:45:38.298" starttime="20170807 02:45:38.077"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170807 02:45:38.299" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc</msg>
<status status="PASS" endtime="20170807 02:45:38.299" starttime="20170807 02:45:38.298"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:45:38.300" starttime="20170807 02:45:38.299"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170807 02:45:38.403" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc, headers=None json=None</msg>
<msg timestamp="20170807 02:45:38.403" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 02:45:38.404" starttime="20170807 02:45:38.300"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:45:38.404" starttime="20170807 02:45:38.404"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170807 02:45:38.405" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 02:45:38.405" starttime="20170807 02:45:38.405"></status>
</kw>
<msg timestamp="20170807 02:45:38.405" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 02:45:38.405" starttime="20170807 02:45:38.076"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 02:45:38.406" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 02:45:38.406" starttime="20170807 02:45:38.405"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170807 02:45:38.406" level="INFO">To JSON using : content={
  "data": {
    "auto_apply": 0, 
    "clear_persistent_files": 0, 
    "filename": "", 
    "preserve_network_settings": 1, 
    "restore_application_defaults": 0, 
    "status": "Idle", 
    "update_kernel_and_apps": 0
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170807 02:45:38.407" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170807 02:45:38.407" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Idle', u'update_kernel_and_apps': 0, u'clear_persistent_files': 0, u'auto_apply': 0, u'filename': u'', u'preserve_network_settings': 1,...</msg>
<status status="PASS" endtime="20170807 02:45:38.407" starttime="20170807 02:45:38.406"></status>
</kw>
<msg timestamp="20170807 02:45:38.407" level="INFO">${data} = {u'status': u'Idle', u'update_kernel_and_apps': 0, u'clear_persistent_files': 0, u'auto_apply': 0, u'filename': u'', u'preserve_network_settings': 1, u'restore_application_defaults': 0}</msg>
<status status="PASS" endtime="20170807 02:45:38.407" starttime="20170807 02:45:38.075"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${data['preserve_network_settings']}</arg>
<arg>${1}</arg>
<arg>msg=0 indicates network is not preserved</arg>
</arguments>
<status status="PASS" endtime="20170807 02:45:38.409" starttime="20170807 02:45:38.407"></status>
</kw>
<status status="PASS" endtime="20170807 02:45:38.409" starttime="20170807 02:45:37.580"></status>
</kw>
<status status="PASS" endtime="20170807 02:45:38.409" starttime="20170807 02:45:37.575"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>SCP Tar Image File To BMC \ ${FILE_PATH}</arg>
</arguments>
<kw name="SCP Tar Image File to BMC" library="code_update_utils">
<doc>Copy BMC tar image to BMC.</doc>
<arguments>
<arg>/home/fspcibld/witherspoon-20170807023124.all.tar</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170807 02:45:38.434" starttime="20170807 02:45:38.417"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:45:39.086" starttime="20170807 02:45:38.436"></status>
</kw>
<status status="PASS" endtime="20170807 02:45:39.086" starttime="20170807 02:45:38.435"></status>
</kw>
<status status="PASS" endtime="20170807 02:45:39.086" starttime="20170807 02:45:38.417"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170807 02:45:39.088" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170807 02:45:39.088" starttime="20170807 02:45:39.088"></status>
</kw>
<msg timestamp="20170807 02:45:39.088" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170807 02:45:39.088" starttime="20170807 02:45:39.087"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:45:39.090" starttime="20170807 02:45:39.089"></status>
</kw>
<status status="PASS" endtime="20170807 02:45:39.090" starttime="20170807 02:45:39.089"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170807 02:45:39.090" starttime="20170807 02:45:39.090"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170807 02:45:39.091" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170807 02:45:39.092" starttime="20170807 02:45:39.091"></status>
</kw>
<msg timestamp="20170807 02:45:39.092" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170807 02:45:39.092" starttime="20170807 02:45:39.091"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:45:39.094" starttime="20170807 02:45:39.093"></status>
</kw>
<status status="PASS" endtime="20170807 02:45:39.094" starttime="20170807 02:45:39.093"></status>
</kw>
<status status="PASS" endtime="20170807 02:45:39.094" starttime="20170807 02:45:39.092"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170807 02:45:39.094" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170807 02:45:40.821" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170807 02:45:40.821" starttime="20170807 02:45:39.094"></status>
</kw>
<status status="PASS" endtime="20170807 02:45:40.821" starttime="20170807 02:45:39.086"></status>
</kw>
<kw name="Loop SCP Retry" library="code_update_utils">
<doc>Try transferring the file 4 times.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<kw type="for" name="${index} IN RANGE [ 0 | 4 ]">
<kw type="foritem" name="${index} = 0">
<kw name="Retry SCP" library="code_update_utils">
<doc>Delete the incomplete file and scp file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/tmp/flashimg</arg>
</arguments>
<assign>
<var>${targ_file_path}</var>
</assign>
<msg timestamp="20170807 02:45:40.823" level="INFO">${targ_file_path} = /tmp/flashimg</msg>
<status status="PASS" endtime="20170807 02:45:40.823" starttime="20170807 02:45:40.823"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm -f /tmp/flashimg</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170807 02:45:40.825" level="INFO">Executing command 'rm -f /tmp/flashimg'.</msg>
<msg timestamp="20170807 02:45:40.883" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170807 02:45:40.883" level="INFO">${stdout} = </msg>
<msg timestamp="20170807 02:45:40.883" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170807 02:45:40.883" starttime="20170807 02:45:40.824"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170807 02:45:40.884" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170807 02:45:40.884" starttime="20170807 02:45:40.884"></status>
</kw>
<status status="PASS" endtime="20170807 02:45:40.884" starttime="20170807 02:45:40.824"></status>
</kw>
<kw name="Put File" library="scp">
<doc>Uploads a file to the remote machine from the local machine.</doc>
<arguments>
<arg>${image_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:45:57.521" starttime="20170807 02:45:40.884"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>ls -lh ${targ_file_path}</arg>
</arguments>
<assign>
<var>${file_size}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170807 02:45:57.523" level="INFO">Executing command 'ls -lh /tmp/flashimg'.</msg>
<msg timestamp="20170807 02:45:57.600" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170807 02:45:57.600" level="INFO">${stdout} = -rw-r--r--    1 root     root       36.4M Aug  7 02:46 /tmp/flashimg</msg>
<msg timestamp="20170807 02:45:57.600" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170807 02:45:57.600" starttime="20170807 02:45:57.523"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170807 02:45:57.601" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170807 02:45:57.601" starttime="20170807 02:45:57.601"></status>
</kw>
<msg timestamp="20170807 02:45:57.601" level="INFO">${file_size} = -rw-r--r--    1 root     root       36.4M Aug  7 02:46 /tmp/flashimg</msg>
<status status="PASS" endtime="20170807 02:45:57.601" starttime="20170807 02:45:57.521"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<msg timestamp="20170807 02:45:57.602" level="FAIL">Incomplete file transfer.: '-rw-r--r--    1 root     root       36.4M Aug  7 02:46 /tmp/flashimg' does not contain '32.0M'</msg>
<status status="FAIL" endtime="20170807 02:45:57.603" starttime="20170807 02:45:57.602"></status>
</kw>
<msg timestamp="20170807 02:45:57.603" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170807 02:45:57.603" starttime="20170807 02:45:57.602"></status>
</kw>
<msg timestamp="20170807 02:45:57.603" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170807 02:45:57.603" starttime="20170807 02:45:40.822"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
</arguments>
<status status="PASS" endtime="20170807 02:45:57.604" starttime="20170807 02:45:57.603"></status>
</kw>
<status status="PASS" endtime="20170807 02:45:57.604" starttime="20170807 02:45:40.822"></status>
</kw>
<kw type="foritem" name="${index} = 1">
<kw name="Retry SCP" library="code_update_utils">
<doc>Delete the incomplete file and scp file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/tmp/flashimg</arg>
</arguments>
<assign>
<var>${targ_file_path}</var>
</assign>
<msg timestamp="20170807 02:45:57.605" level="INFO">${targ_file_path} = /tmp/flashimg</msg>
<status status="PASS" endtime="20170807 02:45:57.605" starttime="20170807 02:45:57.605"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm -f /tmp/flashimg</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170807 02:45:57.606" level="INFO">Executing command 'rm -f /tmp/flashimg'.</msg>
<msg timestamp="20170807 02:45:57.763" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170807 02:45:57.763" level="INFO">${stdout} = </msg>
<msg timestamp="20170807 02:45:57.763" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170807 02:45:57.763" starttime="20170807 02:45:57.606"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170807 02:45:57.764" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170807 02:45:57.764" starttime="20170807 02:45:57.764"></status>
</kw>
<status status="PASS" endtime="20170807 02:45:57.765" starttime="20170807 02:45:57.605"></status>
</kw>
<kw name="Put File" library="scp">
<doc>Uploads a file to the remote machine from the local machine.</doc>
<arguments>
<arg>${image_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:46:14.837" starttime="20170807 02:45:57.765"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>ls -lh ${targ_file_path}</arg>
</arguments>
<assign>
<var>${file_size}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170807 02:46:14.839" level="INFO">Executing command 'ls -lh /tmp/flashimg'.</msg>
<msg timestamp="20170807 02:46:14.895" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170807 02:46:14.896" level="INFO">${stdout} = -rw-r--r--    1 root     root       36.4M Aug  7 02:46 /tmp/flashimg</msg>
<msg timestamp="20170807 02:46:14.896" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170807 02:46:14.896" starttime="20170807 02:46:14.839"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170807 02:46:14.896" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170807 02:46:14.896" starttime="20170807 02:46:14.896"></status>
</kw>
<msg timestamp="20170807 02:46:14.897" level="INFO">${file_size} = -rw-r--r--    1 root     root       36.4M Aug  7 02:46 /tmp/flashimg</msg>
<status status="PASS" endtime="20170807 02:46:14.897" starttime="20170807 02:46:14.838"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<msg timestamp="20170807 02:46:14.898" level="FAIL">Incomplete file transfer.: '-rw-r--r--    1 root     root       36.4M Aug  7 02:46 /tmp/flashimg' does not contain '32.0M'</msg>
<status status="FAIL" endtime="20170807 02:46:14.898" starttime="20170807 02:46:14.897"></status>
</kw>
<msg timestamp="20170807 02:46:14.898" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170807 02:46:14.898" starttime="20170807 02:46:14.897"></status>
</kw>
<msg timestamp="20170807 02:46:14.898" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170807 02:46:14.898" starttime="20170807 02:45:57.604"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
</arguments>
<status status="PASS" endtime="20170807 02:46:14.899" starttime="20170807 02:46:14.899"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:14.899" starttime="20170807 02:45:57.604"></status>
</kw>
<kw type="foritem" name="${index} = 2">
<kw name="Retry SCP" library="code_update_utils">
<doc>Delete the incomplete file and scp file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/tmp/flashimg</arg>
</arguments>
<assign>
<var>${targ_file_path}</var>
</assign>
<msg timestamp="20170807 02:46:14.900" level="INFO">${targ_file_path} = /tmp/flashimg</msg>
<status status="PASS" endtime="20170807 02:46:14.900" starttime="20170807 02:46:14.900"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm -f /tmp/flashimg</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170807 02:46:14.901" level="INFO">Executing command 'rm -f /tmp/flashimg'.</msg>
<msg timestamp="20170807 02:46:15.026" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170807 02:46:15.026" level="INFO">${stdout} = </msg>
<msg timestamp="20170807 02:46:15.026" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170807 02:46:15.027" starttime="20170807 02:46:14.901"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170807 02:46:15.027" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170807 02:46:15.027" starttime="20170807 02:46:15.027"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:15.027" starttime="20170807 02:46:14.900"></status>
</kw>
<kw name="Put File" library="scp">
<doc>Uploads a file to the remote machine from the local machine.</doc>
<arguments>
<arg>${image_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:46:31.560" starttime="20170807 02:46:15.028"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>ls -lh ${targ_file_path}</arg>
</arguments>
<assign>
<var>${file_size}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170807 02:46:31.562" level="INFO">Executing command 'ls -lh /tmp/flashimg'.</msg>
<msg timestamp="20170807 02:46:31.619" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170807 02:46:31.619" level="INFO">${stdout} = -rw-r--r--    1 root     root       36.4M Aug  7 02:46 /tmp/flashimg</msg>
<msg timestamp="20170807 02:46:31.619" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170807 02:46:31.619" starttime="20170807 02:46:31.562"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170807 02:46:31.620" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170807 02:46:31.620" starttime="20170807 02:46:31.620"></status>
</kw>
<msg timestamp="20170807 02:46:31.620" level="INFO">${file_size} = -rw-r--r--    1 root     root       36.4M Aug  7 02:46 /tmp/flashimg</msg>
<status status="PASS" endtime="20170807 02:46:31.620" starttime="20170807 02:46:31.561"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<msg timestamp="20170807 02:46:31.622" level="FAIL">Incomplete file transfer.: '-rw-r--r--    1 root     root       36.4M Aug  7 02:46 /tmp/flashimg' does not contain '32.0M'</msg>
<status status="FAIL" endtime="20170807 02:46:31.622" starttime="20170807 02:46:31.621"></status>
</kw>
<msg timestamp="20170807 02:46:31.622" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170807 02:46:31.622" starttime="20170807 02:46:31.621"></status>
</kw>
<msg timestamp="20170807 02:46:31.622" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170807 02:46:31.622" starttime="20170807 02:46:14.899"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
</arguments>
<status status="PASS" endtime="20170807 02:46:31.623" starttime="20170807 02:46:31.622"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:31.623" starttime="20170807 02:46:14.899"></status>
</kw>
<kw type="foritem" name="${index} = 3">
<kw name="Retry SCP" library="code_update_utils">
<doc>Delete the incomplete file and scp file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/tmp/flashimg</arg>
</arguments>
<assign>
<var>${targ_file_path}</var>
</assign>
<msg timestamp="20170807 02:46:31.624" level="INFO">${targ_file_path} = /tmp/flashimg</msg>
<status status="PASS" endtime="20170807 02:46:31.624" starttime="20170807 02:46:31.624"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm -f /tmp/flashimg</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170807 02:46:31.625" level="INFO">Executing command 'rm -f /tmp/flashimg'.</msg>
<msg timestamp="20170807 02:46:31.730" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170807 02:46:31.730" level="INFO">${stdout} = </msg>
<msg timestamp="20170807 02:46:31.730" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170807 02:46:31.730" starttime="20170807 02:46:31.625"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170807 02:46:31.731" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170807 02:46:31.731" starttime="20170807 02:46:31.730"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:31.731" starttime="20170807 02:46:31.624"></status>
</kw>
<kw name="Put File" library="scp">
<doc>Uploads a file to the remote machine from the local machine.</doc>
<arguments>
<arg>${image_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:46:48.419" starttime="20170807 02:46:31.731"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>ls -lh ${targ_file_path}</arg>
</arguments>
<assign>
<var>${file_size}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170807 02:46:48.421" level="INFO">Executing command 'ls -lh /tmp/flashimg'.</msg>
<msg timestamp="20170807 02:46:48.479" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170807 02:46:48.479" level="INFO">${stdout} = -rw-r--r--    1 root     root       36.4M Aug  7 02:46 /tmp/flashimg</msg>
<msg timestamp="20170807 02:46:48.479" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170807 02:46:48.479" starttime="20170807 02:46:48.421"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170807 02:46:48.480" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170807 02:46:48.480" starttime="20170807 02:46:48.479"></status>
</kw>
<msg timestamp="20170807 02:46:48.480" level="INFO">${file_size} = -rw-r--r--    1 root     root       36.4M Aug  7 02:46 /tmp/flashimg</msg>
<status status="PASS" endtime="20170807 02:46:48.480" starttime="20170807 02:46:48.420"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<msg timestamp="20170807 02:46:48.482" level="FAIL">Incomplete file transfer.: '-rw-r--r--    1 root     root       36.4M Aug  7 02:46 /tmp/flashimg' does not contain '32.0M'</msg>
<status status="FAIL" endtime="20170807 02:46:48.482" starttime="20170807 02:46:48.481"></status>
</kw>
<msg timestamp="20170807 02:46:48.482" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170807 02:46:48.482" starttime="20170807 02:46:48.481"></status>
</kw>
<msg timestamp="20170807 02:46:48.482" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170807 02:46:48.482" starttime="20170807 02:46:31.623"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
</arguments>
<status status="PASS" endtime="20170807 02:46:48.483" starttime="20170807 02:46:48.482"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:48.483" starttime="20170807 02:46:31.623"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:48.483" starttime="20170807 02:45:40.822"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:48.483" starttime="20170807 02:45:40.822"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:48.483" starttime="20170807 02:45:38.417"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:48.483" starttime="20170807 02:45:38.409"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>Activate BMC Flash Image</arg>
</arguments>
<kw name="Activate BMC flash image" library="code_update_utils">
<doc>Activate and verify the update status</doc>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>/tmp/flashimg</arg>
</arguments>
<assign>
<var>@{img_path}</var>
</assign>
<msg timestamp="20170807 02:46:48.492" level="INFO">@{img_path} = [ /tmp/flashimg ]</msg>
<status status="PASS" endtime="20170807 02:46:48.492" starttime="20170807 02:46:48.492"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{img_path}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170807 02:46:48.493" level="INFO">${data} = {u'data': [u'/tmp/flashimg']}</msg>
<status status="PASS" endtime="20170807 02:46:48.493" starttime="20170807 02:46:48.493"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${BMC_UPD_METHOD}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170807 02:46:48.499" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 02:46:48.499" starttime="20170807 02:46:48.498"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 02:46:48.500" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 02:46:48.500" starttime="20170807 02:46:48.500"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170807 02:46:48.501" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 02:46:48.501" starttime="20170807 02:46:48.500"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170807 02:46:48.501" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 02:46:48.501" starttime="20170807 02:46:48.501"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170807 02:46:48.692" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 02:46:48.692" starttime="20170807 02:46:48.502"></status>
</kw>
<msg timestamp="20170807 02:46:48.692" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 02:46:48.693" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 02:46:48.693" starttime="20170807 02:46:48.502"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170807 02:46:48.693" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 02:46:48.693" starttime="20170807 02:46:48.693"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 02:46:48.694" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 02:46:48.694" starttime="20170807 02:46:48.694"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:48.694" starttime="20170807 02:46:48.498"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:48.694" starttime="20170807 02:46:48.497"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:48.694" starttime="20170807 02:46:48.497"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170807 02:46:48.695" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc/action/update</msg>
<status status="PASS" endtime="20170807 02:46:48.695" starttime="20170807 02:46:48.695"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 02:46:48.696" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 02:46:48.696" starttime="20170807 02:46:48.696"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:46:48.697" starttime="20170807 02:46:48.696"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:46:48.698" starttime="20170807 02:46:48.697"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170807 02:46:52.487" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc/action/update, data={"data": ["/tmp/flashimg"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20170807 02:46:52.488" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 02:46:52.488" starttime="20170807 02:46:48.698"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:46:52.489" starttime="20170807 02:46:52.488"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170807 02:46:52.489" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 02:46:52.489" starttime="20170807 02:46:52.489"></status>
</kw>
<msg timestamp="20170807 02:46:52.489" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 02:46:52.489" starttime="20170807 02:46:48.496"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 02:46:52.490" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 02:46:52.490" starttime="20170807 02:46:52.490"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${BMC_UPD_ATTR}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170807 02:46:52.493" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 02:46:52.494" starttime="20170807 02:46:52.493"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 02:46:52.494" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 02:46:52.494" starttime="20170807 02:46:52.494"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170807 02:46:52.495" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 02:46:52.495" starttime="20170807 02:46:52.495"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170807 02:46:52.496" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 02:46:52.496" starttime="20170807 02:46:52.495"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170807 02:46:52.705" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 02:46:52.705" starttime="20170807 02:46:52.497"></status>
</kw>
<msg timestamp="20170807 02:46:52.705" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 02:46:52.705" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 02:46:52.705" starttime="20170807 02:46:52.496"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170807 02:46:52.706" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 02:46:52.706" starttime="20170807 02:46:52.706"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 02:46:52.707" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 02:46:52.707" starttime="20170807 02:46:52.706"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:52.707" starttime="20170807 02:46:52.493"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:52.707" starttime="20170807 02:46:52.492"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:52.707" starttime="20170807 02:46:52.491"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170807 02:46:52.708" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc</msg>
<status status="PASS" endtime="20170807 02:46:52.708" starttime="20170807 02:46:52.707"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:46:52.708" starttime="20170807 02:46:52.708"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170807 02:46:52.804" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc, headers=None json=None</msg>
<msg timestamp="20170807 02:46:52.804" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 02:46:52.804" starttime="20170807 02:46:52.709"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:46:52.805" starttime="20170807 02:46:52.804"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170807 02:46:52.805" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 02:46:52.805" starttime="20170807 02:46:52.805"></status>
</kw>
<msg timestamp="20170807 02:46:52.806" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 02:46:52.806" starttime="20170807 02:46:52.491"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 02:46:52.806" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 02:46:52.806" starttime="20170807 02:46:52.806"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170807 02:46:52.807" level="INFO">To JSON using : content={
  "data": {
    "auto_apply": 0, 
    "clear_persistent_files": 0, 
    "filename": "/tmp/flashimg", 
    "preserve_network_settings": 1, 
    "restore_application_defaults": 0, 
    "status": "Verify error: update: --no-flash --ignore-mount --no-save-files --no-restore-files --no-clean-saved-files\nERROR: Image image-bmc too big for mtd0.\n", 
    "update_kernel_and_apps": 0
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170807 02:46:52.807" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170807 02:46:52.807" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Verify error: update: --no-flash --ignore-mount --no-save-files --no-restore-files --no-clean-saved-files\nERROR: Image image-bmc too b...</msg>
<status status="PASS" endtime="20170807 02:46:52.807" starttime="20170807 02:46:52.807"></status>
</kw>
<msg timestamp="20170807 02:46:52.807" level="INFO">${data} = {u'status': u'Verify error: update: --no-flash --ignore-mount --no-save-files --no-restore-files --no-clean-saved-files\nERROR: Image image-bmc too big for mtd0.\n', u'update_kernel_and_apps': 0, u'cl...</msg>
<status status="PASS" endtime="20170807 02:46:52.808" starttime="20170807 02:46:52.490"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${data["filename"]}</arg>
<arg>/tmp/flashimg</arg>
</arguments>
<status status="PASS" endtime="20170807 02:46:52.808" starttime="20170807 02:46:52.808"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${data['status']}</arg>
<arg>to apply</arg>
</arguments>
<msg timestamp="20170807 02:46:52.809" level="FAIL">'Verify error: update: --no-flash --ignore-mount --no-save-files --no-restore-files --no-clean-saved-files
ERROR: Image image-bmc too big for mtd0.
' does not contain 'to apply'</msg>
<status status="FAIL" endtime="20170807 02:46:52.809" starttime="20170807 02:46:52.808"></status>
</kw>
<status status="FAIL" endtime="20170807 02:46:52.809" starttime="20170807 02:46:48.491"></status>
</kw>
<msg timestamp="20170807 02:46:52.810" level="FAIL">'Verify error: update: --no-flash --ignore-mount --no-save-files --no-restore-files --no-clean-saved-files
ERROR: Image image-bmc too big for mtd0.
' does not contain 'to apply'</msg>
<status status="FAIL" endtime="20170807 02:46:52.810" starttime="20170807 02:46:48.484"></status>
</kw>
<kw type="teardown" name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>FFDC On Test Case Fail</arg>
</arguments>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170807 02:46:52.822" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 02:46:52.823" starttime="20170807 02:46:52.822"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 02:46:52.823" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 02:46:52.823" starttime="20170807 02:46:52.823"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170807 02:46:52.824" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 02:46:52.824" starttime="20170807 02:46:52.824"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170807 02:46:52.825" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 02:46:52.825" starttime="20170807 02:46:52.824"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170807 02:46:53.003" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 02:46:53.003" starttime="20170807 02:46:52.826"></status>
</kw>
<msg timestamp="20170807 02:46:53.003" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 02:46:53.004" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 02:46:53.004" starttime="20170807 02:46:52.825"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170807 02:46:53.004" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 02:46:53.004" starttime="20170807 02:46:53.004"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 02:46:53.005" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 02:46:53.005" starttime="20170807 02:46:53.005"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:53.005" starttime="20170807 02:46:52.821"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:53.005" starttime="20170807 02:46:52.821"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:53.006" starttime="20170807 02:46:52.820"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170807 02:46:53.006" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170807 02:46:53.006" starttime="20170807 02:46:53.006"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:46:53.007" starttime="20170807 02:46:53.007"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170807 02:46:53.123" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170807 02:46:53.123" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 02:46:53.124" starttime="20170807 02:46:53.007"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:46:53.124" starttime="20170807 02:46:53.124"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170807 02:46:53.125" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 02:46:53.125" starttime="20170807 02:46:53.125"></status>
</kw>
<msg timestamp="20170807 02:46:53.125" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 02:46:53.125" starttime="20170807 02:46:52.820"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 02:46:53.126" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 02:46:53.126" starttime="20170807 02:46:53.125"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170807 02:46:53.126" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170807 02:46:53.126" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170807 02:46:53.127" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170807 02:46:53.127" starttime="20170807 02:46:53.126"></status>
</kw>
<msg timestamp="20170807 02:46:53.127" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170807 02:46:53.127" starttime="20170807 02:46:52.819"></status>
</kw>
<msg timestamp="20170807 02:46:53.127" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170807 02:46:53.127" starttime="20170807 02:46:52.819"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170807 02:46:53.128" level="FAIL">Off != Quiesced</msg>
<status status="FAIL" endtime="20170807 02:46:53.129" starttime="20170807 02:46:53.128"></status>
</kw>
<msg timestamp="20170807 02:46:53.129" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170807 02:46:53.129" starttime="20170807 02:46:53.128"></status>
</kw>
<msg timestamp="20170807 02:46:53.129" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170807 02:46:53.129" starttime="20170807 02:46:52.818"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170807 02:46:53.140" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170807 02:46:53.140" starttime="20170807 02:46:53.140"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170807 02:46:53.146" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170807 02:46:56.151" level="INFO">${RC} = 0</msg>
<msg timestamp="20170807 02:46:56.151" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.814 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.626 ms
64 bytes from 9.3.86.161: icmp_se...</msg>
<status status="PASS" endtime="20170807 02:46:56.151" starttime="20170807 02:46:53.141"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170807 02:46:56.155" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.814 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.626 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.641 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.870 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2998ms
rtt min/avg/max/mdev = 0.626/0.737/0.870/0.111 ms</msg>
<status status="PASS" endtime="20170807 02:46:56.156" starttime="20170807 02:46:56.154"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:46:56.156" starttime="20170807 02:46:56.156"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:56.157" starttime="20170807 02:46:53.140"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170807 02:46:56.187" level="INFO">${cur_time} = 2017-08-07 02:46:56:186558</msg>
<status status="PASS" endtime="20170807 02:46:56.187" starttime="20170807 02:46:56.186"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170807 02:46:56.188" level="INFO">${cur_time} = 20170807024656186558</msg>
<status status="PASS" endtime="20170807 02:46:56.188" starttime="20170807 02:46:56.187"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:56.188" starttime="20170807 02:46:56.186"></status>
</kw>
<msg timestamp="20170807 02:46:56.198" level="INFO">${FFDC_TIME} = 20170807024656186558</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170807 02:46:56.202" level="INFO">${suite_name} = UpdateBmc</msg>
<status status="PASS" endtime="20170807 02:46:56.202" starttime="20170807 02:46:56.202"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170807 02:46:56.203" level="INFO">${suite_name} = 20170807024656186558_UpdateBmc</msg>
<status status="PASS" endtime="20170807 02:46:56.203" starttime="20170807 02:46:56.202"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170807 02:46:56.203" level="INFO">${test_name} = InitiateCodeUpdateBMC</msg>
<status status="PASS" endtime="20170807 02:46:56.203" starttime="20170807 02:46:56.203"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170807 02:46:56.204" level="INFO">${test_name} = 20170807024656186558_InitiateCodeUpdateBMC</msg>
<status status="PASS" endtime="20170807 02:46:56.204" starttime="20170807 02:46:56.204"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:56.204" starttime="20170807 02:46:56.199"></status>
</kw>
<msg timestamp="20170807 02:46:56.209" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/</msg>
<msg timestamp="20170807 02:46:56.214" level="INFO">${FFDC_PREFIX} = 20170807024656186558_</msg>
<msg timestamp="20170807 02:46:56.234" level="INFO">${LOG_PREFIX} = /home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/</arg>
</arguments>
<msg timestamp="20170807 02:46:56.236" html="yes" level="INFO">Created directory '&lt;a href="file:///home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC"&gt;/home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 02:46:56.236" starttime="20170807 02:46:56.235"></status>
</kw>
<msg timestamp="20170807 02:46:56.241" level="INFO">${FFDC_FILE_PATH} = /home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 02:46:56.252" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt"&gt;/home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 02:46:56.252" starttime="20170807 02:46:56.251"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:56.252" starttime="20170807 02:46:56.250"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 02:46:56.253" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt"&gt;/home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 02:46:56.253" starttime="20170807 02:46:56.253"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:56.253" starttime="20170807 02:46:56.252"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 02:46:56.254" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt"&gt;/home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 02:46:56.254" starttime="20170807 02:46:56.254"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:56.254" starttime="20170807 02:46:56.253"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 02:46:56.256" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt"&gt;/home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 02:46:56.256" starttime="20170807 02:46:56.255"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:56.256" starttime="20170807 02:46:56.255"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 02:46:56.258" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt"&gt;/home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 02:46:56.258" starttime="20170807 02:46:56.257"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:56.258" starttime="20170807 02:46:56.256"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 02:46:56.259" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt"&gt;/home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 02:46:56.260" starttime="20170807 02:46:56.259"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:56.260" starttime="20170807 02:46:56.258"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 02:46:56.261" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt"&gt;/home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 02:46:56.261" starttime="20170807 02:46:56.260"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:56.261" starttime="20170807 02:46:56.260"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 02:46:56.262" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt"&gt;/home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 02:46:56.262" starttime="20170807 02:46:56.262"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:56.263" starttime="20170807 02:46:56.261"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 02:46:56.264" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt"&gt;/home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 02:46:56.264" starttime="20170807 02:46:56.263"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:56.264" starttime="20170807 02:46:56.263"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 02:46:56.265" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt"&gt;/home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 02:46:56.266" starttime="20170807 02:46:56.265"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:56.266" starttime="20170807 02:46:56.264"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 02:46:56.267" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt"&gt;/home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 02:46:56.267" starttime="20170807 02:46:56.266"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:56.267" starttime="20170807 02:46:56.266"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 02:46:56.268" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt"&gt;/home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 02:46:56.268" starttime="20170807 02:46:56.268"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:56.268" starttime="20170807 02:46:56.267"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 02:46:56.269" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt"&gt;/home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 02:46:56.270" starttime="20170807 02:46:56.269"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:56.270" starttime="20170807 02:46:56.268"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170807 02:46:56.288" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170807 02:46:56.288" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170807 02:46:57.076" level="INFO">Read output: root@witherspoon:~#</msg>
<msg timestamp="20170807 02:46:57.077" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170807 02:46:57.153" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170807 02:46:57.164" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170807 02:46:57.164" level="INFO">${stderr} = </msg>
<msg timestamp="20170807 02:46:57.164" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20170807 02:46:57.164" starttime="20170807 02:46:56.270"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170807 02:46:57.165" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170807 02:46:57.165" starttime="20170807 02:46:57.165"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170807 02:46:57.166" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170807 02:46:57.166" starttime="20170807 02:46:57.166"></status>
</kw>
<msg timestamp="20170807 02:46:57.166" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" endtime="20170807 02:46:57.167" starttime="20170807 02:46:56.270"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 02:46:57.168" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt"&gt;/home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 02:46:57.169" starttime="20170807 02:46:57.168"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:57.169" starttime="20170807 02:46:57.167"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:57.169" starttime="20170807 02:46:56.264"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 02:46:57.170" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt"&gt;/home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 02:46:57.170" starttime="20170807 02:46:57.170"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:57.170" starttime="20170807 02:46:57.169"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170807 02:46:57.171" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170807 02:46:57.171" starttime="20170807 02:46:57.171"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 02:46:57.172" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt"&gt;/home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 02:46:57.172" starttime="20170807 02:46:57.172"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:57.172" starttime="20170807 02:46:57.171"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 02:46:57.174" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt"&gt;/home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 02:46:57.174" starttime="20170807 02:46:57.173"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:57.174" starttime="20170807 02:46:57.173"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:57.174" starttime="20170807 02:46:57.171"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 02:46:57.175" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt"&gt;/home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 02:46:57.175" starttime="20170807 02:46:57.175"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:57.175" starttime="20170807 02:46:57.174"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 02:46:57.177" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt"&gt;/home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 02:46:57.177" starttime="20170807 02:46:57.176"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:57.177" starttime="20170807 02:46:57.176"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:57.177" starttime="20170807 02:46:57.174"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 02:46:57.178" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt"&gt;/home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 02:46:57.178" starttime="20170807 02:46:57.178"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:57.178" starttime="20170807 02:46:57.177"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 02:46:57.180" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt"&gt;/home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 02:46:57.180" starttime="20170807 02:46:57.179"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:57.180" starttime="20170807 02:46:57.178"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:57.180" starttime="20170807 02:46:57.177"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:57.180" starttime="20170807 02:46:57.171"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 02:46:57.181" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt"&gt;/home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 02:46:57.181" starttime="20170807 02:46:57.181"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:57.181" starttime="20170807 02:46:57.180"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:57.181" starttime="20170807 02:46:56.250"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170807 02:46:57.187" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20170807 02:46:57.187" starttime="20170807 02:46:57.187"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170807 02:46:57.189" level="INFO">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('Core Files', 'SCP Coredump Files') | ('BMC Specific Files', 'BMC FFDC Files') | ('SEL Log', 'Collect ...</msg>
<status status="PASS" endtime="20170807 02:46:57.189" starttime="20170807 02:46:57.188"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:46:57.190" starttime="20170807 02:46:57.190"></status>
</kw>
<msg timestamp="20170807 02:46:57.190" level="INFO">@{ffdc_function_list} = [ FFDC Generic Report | Get Request FFDC | Core Files | BMC Specific Files | SEL Log | OS FFDC ]</msg>
<status status="PASS" endtime="20170807 02:46:57.190" starttime="20170807 02:46:57.189"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:46:57.193" starttime="20170807 02:46:57.193"></status>
</kw>
<msg timestamp="20170807 02:46:57.193" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 02:46:57.193" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170807 02:46:57.194" starttime="20170807 02:46:57.192"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170807 02:46:57.194" starttime="20170807 02:46:57.194"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170807 02:46:57.209" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170807 02:46:57.209" starttime="20170807 02:46:57.209"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170807 02:46:57.211" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status status="PASS" endtime="20170807 02:46:57.211" starttime="20170807 02:46:57.210"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170807 02:46:57.217" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20170807 02:46:57.217" starttime="20170807 02:46:57.211"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 02:46:57.220" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt"&gt;/home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 02:46:57.220" starttime="20170807 02:46:57.220"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:57.220" starttime="20170807 02:46:57.219"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 02:46:57.221" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt"&gt;/home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 02:46:57.222" starttime="20170807 02:46:57.221"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:57.222" starttime="20170807 02:46:57.220"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 02:46:57.223" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt"&gt;/home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 02:46:57.223" starttime="20170807 02:46:57.222"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:57.223" starttime="20170807 02:46:57.222"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 02:46:57.224" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt"&gt;/home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 02:46:57.224" starttime="20170807 02:46:57.224"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:57.224" starttime="20170807 02:46:57.223"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:57.224" starttime="20170807 02:46:57.218"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:57.224" starttime="20170807 02:46:57.218"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170807 02:46:57.225" level="INFO">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status status="PASS" endtime="20170807 02:46:57.225" starttime="20170807 02:46:57.225"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170807 02:46:57.267" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170807 02:46:57.267" level="INFO">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg timestamp="20170807 02:46:58.670" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170807 02:46:58.670" starttime="20170807 02:46:57.243"></status>
</kw>
<msg timestamp="20170807 02:46:58.670" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 02:46:58.671" level="INFO">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState....</msg>
<status status="PASS" endtime="20170807 02:46:58.671" starttime="20170807 02:46:57.226"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170807 02:46:58.672" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170807 02:46:58.672" starttime="20170807 02:46:58.671"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170807 02:46:58.673" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170807 02:46:58.673" starttime="20170807 02:46:58.672"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 02:46:58.690" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt"&gt;/home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 02:46:58.690" starttime="20170807 02:46:58.690"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:58.690" starttime="20170807 02:46:58.689"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:58.690" starttime="20170807 02:46:58.673"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:58.691" starttime="20170807 02:46:57.217"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:58.691" starttime="20170807 02:46:57.217"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:58.691" starttime="20170807 02:46:57.217"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:58.691" starttime="20170807 02:46:57.210"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:58.691" starttime="20170807 02:46:57.210"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170807 02:46:58.692" level="INFO">@{cmd_list} = [ ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" endtime="20170807 02:46:58.692" starttime="20170807 02:46:58.692"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170807 02:46:58.693" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20170807 02:46:58.693" starttime="20170807 02:46:58.692"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 02:46:58.696" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt"&gt;/home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 02:46:58.696" starttime="20170807 02:46:58.696"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:58.696" starttime="20170807 02:46:58.695"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 02:46:58.697" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt"&gt;/home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 02:46:58.697" starttime="20170807 02:46:58.697"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:58.698" starttime="20170807 02:46:58.696"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 02:46:58.699" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt"&gt;/home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 02:46:58.699" starttime="20170807 02:46:58.698"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:58.699" starttime="20170807 02:46:58.698"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 02:46:58.700" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt"&gt;/home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 02:46:58.700" starttime="20170807 02:46:58.700"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:58.700" starttime="20170807 02:46:58.699"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:58.700" starttime="20170807 02:46:58.694"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:58.700" starttime="20170807 02:46:58.694"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170807 02:46:58.701" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status status="PASS" endtime="20170807 02:46:58.701" starttime="20170807 02:46:58.701"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170807 02:46:58.743" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170807 02:46:58.744" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170807 02:46:58.811" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170807 02:46:58.811" starttime="20170807 02:46:58.720"></status>
</kw>
<msg timestamp="20170807 02:46:58.811" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 02:46:58.811" level="INFO">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.8-187"\nVERSION_ID="v1.99.8-187-g1fe306e"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC...</msg>
<status status="PASS" endtime="20170807 02:46:58.811" starttime="20170807 02:46:58.702"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170807 02:46:58.812" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.8-187"
VERSION_ID="v1.99.8-187-g1fe306e"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Projec...</msg>
<status status="PASS" endtime="20170807 02:46:58.812" starttime="20170807 02:46:58.811"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170807 02:46:58.812" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170807 02:46:58.812" starttime="20170807 02:46:58.812"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 02:46:58.820" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt"&gt;/home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 02:46:58.820" starttime="20170807 02:46:58.820"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:58.820" starttime="20170807 02:46:58.819"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:58.820" starttime="20170807 02:46:58.813"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:58.821" starttime="20170807 02:46:58.693"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:58.821" starttime="20170807 02:46:58.693"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:58.821" starttime="20170807 02:46:58.693"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:58.821" starttime="20170807 02:46:58.691"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:58.821" starttime="20170807 02:46:58.691"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170807 02:46:58.822" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" endtime="20170807 02:46:58.822" starttime="20170807 02:46:58.822"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170807 02:46:58.823" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20170807 02:46:58.823" starttime="20170807 02:46:58.822"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 02:46:58.826" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt"&gt;/home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 02:46:58.826" starttime="20170807 02:46:58.826"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:58.826" starttime="20170807 02:46:58.825"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 02:46:58.828" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt"&gt;/home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 02:46:58.828" starttime="20170807 02:46:58.827"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:58.828" starttime="20170807 02:46:58.827"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 02:46:58.829" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt"&gt;/home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 02:46:58.829" starttime="20170807 02:46:58.829"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:58.829" starttime="20170807 02:46:58.828"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 02:46:58.830" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt"&gt;/home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 02:46:58.830" starttime="20170807 02:46:58.830"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:58.831" starttime="20170807 02:46:58.829"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:58.831" starttime="20170807 02:46:58.825"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:58.831" starttime="20170807 02:46:58.824"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170807 02:46:58.831" level="INFO">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status status="PASS" endtime="20170807 02:46:58.832" starttime="20170807 02:46:58.831"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170807 02:46:58.873" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170807 02:46:58.873" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170807 02:46:58.930" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170807 02:46:58.930" starttime="20170807 02:46:58.850"></status>
</kw>
<msg timestamp="20170807 02:46:58.930" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 02:46:58.930" level="INFO">${ret_values} = (u' 02:47:04 up 3 min,  load average: 2.55, 2.86, 1.30', u'', 0)</msg>
<status status="PASS" endtime="20170807 02:46:58.930" starttime="20170807 02:46:58.832"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170807 02:46:58.931" level="INFO">${stdout} =  02:47:04 up 3 min,  load average: 2.55, 2.86, 1.30</msg>
<status status="PASS" endtime="20170807 02:46:58.931" starttime="20170807 02:46:58.931"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170807 02:46:58.932" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170807 02:46:58.932" starttime="20170807 02:46:58.931"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 02:46:58.939" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt"&gt;/home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 02:46:58.940" starttime="20170807 02:46:58.939"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:58.940" starttime="20170807 02:46:58.938"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:58.940" starttime="20170807 02:46:58.932"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:58.940" starttime="20170807 02:46:58.823"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:58.940" starttime="20170807 02:46:58.823"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 02:46:58.943" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt"&gt;/home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 02:46:58.943" starttime="20170807 02:46:58.943"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:58.943" starttime="20170807 02:46:58.942"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 02:46:58.944" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt"&gt;/home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 02:46:58.945" starttime="20170807 02:46:58.944"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:58.945" starttime="20170807 02:46:58.943"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 02:46:58.946" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt"&gt;/home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 02:46:58.946" starttime="20170807 02:46:58.946"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:58.946" starttime="20170807 02:46:58.945"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 02:46:58.947" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt"&gt;/home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 02:46:58.947" starttime="20170807 02:46:58.947"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:58.947" starttime="20170807 02:46:58.946"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:58.947" starttime="20170807 02:46:58.942"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:58.948" starttime="20170807 02:46:58.941"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170807 02:46:58.948" level="INFO">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status status="PASS" endtime="20170807 02:46:58.948" starttime="20170807 02:46:58.948"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170807 02:46:58.991" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170807 02:46:58.991" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170807 02:46:59.068" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170807 02:46:59.069" starttime="20170807 02:46:58.967"></status>
</kw>
<msg timestamp="20170807 02:46:59.069" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 02:46:59.069" level="INFO">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\ndev                  devtmpfs      210.2M         0    210.2M   0% /dev\ntmpfs                tmpfs         211.1M    ...</msg>
<status status="PASS" endtime="20170807 02:46:59.069" starttime="20170807 02:46:58.949"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170807 02:46:59.070" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     74.0...</msg>
<status status="PASS" endtime="20170807 02:46:59.070" starttime="20170807 02:46:59.069"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170807 02:46:59.070" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170807 02:46:59.070" starttime="20170807 02:46:59.070"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 02:46:59.078" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt"&gt;/home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 02:46:59.078" starttime="20170807 02:46:59.077"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:59.078" starttime="20170807 02:46:59.076"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:59.078" starttime="20170807 02:46:59.071"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:59.078" starttime="20170807 02:46:58.940"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:59.078" starttime="20170807 02:46:58.940"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 02:46:59.081" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt"&gt;/home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 02:46:59.082" starttime="20170807 02:46:59.081"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:59.082" starttime="20170807 02:46:59.080"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 02:46:59.083" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt"&gt;/home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 02:46:59.083" starttime="20170807 02:46:59.083"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:59.083" starttime="20170807 02:46:59.082"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 02:46:59.084" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt"&gt;/home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 02:46:59.084" starttime="20170807 02:46:59.084"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:59.084" starttime="20170807 02:46:59.083"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 02:46:59.086" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt"&gt;/home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 02:46:59.086" starttime="20170807 02:46:59.085"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:59.086" starttime="20170807 02:46:59.085"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:59.086" starttime="20170807 02:46:59.080"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:59.086" starttime="20170807 02:46:59.079"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170807 02:46:59.087" level="INFO">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status status="PASS" endtime="20170807 02:46:59.087" starttime="20170807 02:46:59.086"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170807 02:46:59.129" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170807 02:46:59.129" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170807 02:46:59.197" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170807 02:46:59.197" starttime="20170807 02:46:59.105"></status>
</kw>
<msg timestamp="20170807 02:46:59.197" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 02:46:59.197" level="INFO">${ret_values} = (u'Linux witherspoon 4.10.17-03afe5775baf06c3037d62cc2a15628079af38c9 #1 Mon Aug 7 01:59:37 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status status="PASS" endtime="20170807 02:46:59.197" starttime="20170807 02:46:59.087"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170807 02:46:59.198" level="INFO">${stdout} = Linux witherspoon 4.10.17-03afe5775baf06c3037d62cc2a15628079af38c9 #1 Mon Aug 7 01:59:37 UTC 2017 armv6l GNU/Linux</msg>
<status status="PASS" endtime="20170807 02:46:59.198" starttime="20170807 02:46:59.198"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170807 02:46:59.199" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170807 02:46:59.199" starttime="20170807 02:46:59.198"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 02:46:59.206" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt"&gt;/home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 02:46:59.206" starttime="20170807 02:46:59.205"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:59.206" starttime="20170807 02:46:59.205"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:59.206" starttime="20170807 02:46:59.199"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:59.206" starttime="20170807 02:46:59.078"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:59.206" starttime="20170807 02:46:59.078"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:59.206" starttime="20170807 02:46:58.823"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:59.206" starttime="20170807 02:46:58.821"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:59.206" starttime="20170807 02:46:58.821"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:59.206" starttime="20170807 02:46:57.209"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:59.207" starttime="20170807 02:46:57.209"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:59.207" starttime="20170807 02:46:57.195"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:59.207" starttime="20170807 02:46:57.191"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:59.207" starttime="20170807 02:46:57.191"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:46:59.209" starttime="20170807 02:46:59.209"></status>
</kw>
<msg timestamp="20170807 02:46:59.209" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 02:46:59.210" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170807 02:46:59.210" starttime="20170807 02:46:59.208"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170807 02:46:59.210" starttime="20170807 02:46:59.210"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170807 02:46:59.226" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20170807 02:46:59.226" starttime="20170807 02:46:59.226"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170807 02:46:59.227" level="INFO">@{cmd_list} = [ ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate') | ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_led', '/o...</msg>
<status status="PASS" endtime="20170807 02:46:59.227" starttime="20170807 02:46:59.227"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170807 02:46:59.228" level="INFO">${logpath} = /home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_elog.txt</msg>
<status status="PASS" endtime="20170807 02:46:59.229" starttime="20170807 02:46:59.228"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170807 02:46:59.231" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 02:46:59.232" starttime="20170807 02:46:59.231"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 02:46:59.232" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 02:46:59.232" starttime="20170807 02:46:59.232"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170807 02:46:59.233" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 02:46:59.233" starttime="20170807 02:46:59.233"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170807 02:46:59.234" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 02:46:59.234" starttime="20170807 02:46:59.233"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170807 02:46:59.426" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 02:46:59.426" starttime="20170807 02:46:59.235"></status>
</kw>
<msg timestamp="20170807 02:46:59.426" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 02:46:59.426" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 02:46:59.426" starttime="20170807 02:46:59.234"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170807 02:46:59.427" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 02:46:59.427" starttime="20170807 02:46:59.426"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 02:46:59.428" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 02:46:59.428" starttime="20170807 02:46:59.427"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:59.428" starttime="20170807 02:46:59.230"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:59.428" starttime="20170807 02:46:59.230"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:59.428" starttime="20170807 02:46:59.229"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170807 02:46:59.429" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" endtime="20170807 02:46:59.429" starttime="20170807 02:46:59.428"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:46:59.429" starttime="20170807 02:46:59.429"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170807 02:46:59.557" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170807 02:46:59.557" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 02:46:59.557" starttime="20170807 02:46:59.430"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:46:59.558" starttime="20170807 02:46:59.558"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170807 02:46:59.559" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 02:46:59.559" starttime="20170807 02:46:59.558"></status>
</kw>
<msg timestamp="20170807 02:46:59.559" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 02:46:59.559" starttime="20170807 02:46:59.229"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 02:46:59.560" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 02:46:59.560" starttime="20170807 02:46:59.560"></status>
</kw>
<msg timestamp="20170807 02:46:59.560" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170807 02:46:59.560" starttime="20170807 02:46:59.559"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170807 02:46:59.561" starttime="20170807 02:46:59.561"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170807 02:46:59.562" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/1": {
      "AdditionalData": [], 
      "Id": 1, 
      "Message": "xyz.openbmc_project.Common.Error.InternalFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502073902349, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170807 02:46:59.562" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170807 02:46:59.562" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/logging/entry/1": {
            "AdditionalData": [],
            "Id": 1,
            "Message": "xyz.openbmc_project.Common.Error.InternalFailure",
    ...</msg>
<status status="PASS" endtime="20170807 02:46:59.562" starttime="20170807 02:46:59.561"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 02:46:59.564" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_elog.txt"&gt;/home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_elog.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 02:46:59.564" starttime="20170807 02:46:59.563"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:59.564" starttime="20170807 02:46:59.562"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:59.564" starttime="20170807 02:46:59.227"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170807 02:46:59.565" level="INFO">${logpath} = /home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_sensor_list.txt</msg>
<status status="PASS" endtime="20170807 02:46:59.565" starttime="20170807 02:46:59.564"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170807 02:46:59.568" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 02:46:59.568" starttime="20170807 02:46:59.567"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 02:46:59.569" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 02:46:59.569" starttime="20170807 02:46:59.568"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170807 02:46:59.569" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 02:46:59.569" starttime="20170807 02:46:59.569"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170807 02:46:59.570" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 02:46:59.570" starttime="20170807 02:46:59.570"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170807 02:46:59.748" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 02:46:59.748" starttime="20170807 02:46:59.571"></status>
</kw>
<msg timestamp="20170807 02:46:59.748" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 02:46:59.748" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 02:46:59.748" starttime="20170807 02:46:59.570"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170807 02:46:59.749" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 02:46:59.749" starttime="20170807 02:46:59.749"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 02:46:59.750" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 02:46:59.750" starttime="20170807 02:46:59.750"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:59.750" starttime="20170807 02:46:59.567"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:59.750" starttime="20170807 02:46:59.566"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:59.750" starttime="20170807 02:46:59.566"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170807 02:46:59.751" level="INFO">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status status="PASS" endtime="20170807 02:46:59.751" starttime="20170807 02:46:59.751"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:46:59.752" starttime="20170807 02:46:59.751"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170807 02:46:59.975" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170807 02:46:59.975" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 02:46:59.975" starttime="20170807 02:46:59.752"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:46:59.976" starttime="20170807 02:46:59.976"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170807 02:46:59.977" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 02:46:59.977" starttime="20170807 02:46:59.977"></status>
</kw>
<msg timestamp="20170807 02:46:59.977" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 02:46:59.978" starttime="20170807 02:46:59.565"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 02:46:59.979" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 02:46:59.979" starttime="20170807 02:46:59.978"></status>
</kw>
<msg timestamp="20170807 02:46:59.979" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170807 02:46:59.979" starttime="20170807 02:46:59.978"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170807 02:46:59.979" starttime="20170807 02:46:59.979"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170807 02:46:59.980" level="INFO">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 3
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170807 02:46:59.980" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170807 02:46:59.981" level="INFO">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 3
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status status="PASS" endtime="20170807 02:46:59.981" starttime="20170807 02:46:59.980"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 02:46:59.982" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_sensor_list.txt"&gt;/home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 02:46:59.982" starttime="20170807 02:46:59.981"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:59.982" starttime="20170807 02:46:59.981"></status>
</kw>
<status status="PASS" endtime="20170807 02:46:59.982" starttime="20170807 02:46:59.564"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170807 02:46:59.983" level="INFO">${logpath} = /home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_inventory.txt</msg>
<status status="PASS" endtime="20170807 02:46:59.983" starttime="20170807 02:46:59.983"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170807 02:46:59.986" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 02:46:59.987" starttime="20170807 02:46:59.986"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 02:46:59.987" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 02:46:59.987" starttime="20170807 02:46:59.987"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170807 02:46:59.988" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 02:46:59.988" starttime="20170807 02:46:59.987"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170807 02:46:59.988" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 02:46:59.989" starttime="20170807 02:46:59.988"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170807 02:47:00.178" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 02:47:00.178" starttime="20170807 02:46:59.989"></status>
</kw>
<msg timestamp="20170807 02:47:00.178" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 02:47:00.178" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 02:47:00.178" starttime="20170807 02:46:59.989"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170807 02:47:00.179" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 02:47:00.179" starttime="20170807 02:47:00.179"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 02:47:00.180" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 02:47:00.180" starttime="20170807 02:47:00.179"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:00.180" starttime="20170807 02:46:59.985"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:00.180" starttime="20170807 02:46:59.985"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:00.180" starttime="20170807 02:46:59.984"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170807 02:47:00.181" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" endtime="20170807 02:47:00.181" starttime="20170807 02:47:00.181"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:47:00.182" starttime="20170807 02:47:00.181"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170807 02:47:00.415" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170807 02:47:00.415" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 02:47:00.415" starttime="20170807 02:47:00.182"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:47:00.416" starttime="20170807 02:47:00.416"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170807 02:47:00.417" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 02:47:00.417" starttime="20170807 02:47:00.416"></status>
</kw>
<msg timestamp="20170807 02:47:00.417" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 02:47:00.417" starttime="20170807 02:46:59.983"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 02:47:00.418" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 02:47:00.418" starttime="20170807 02:47:00.418"></status>
</kw>
<msg timestamp="20170807 02:47:00.418" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170807 02:47:00.418" starttime="20170807 02:47:00.417"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170807 02:47:00.419" starttime="20170807 02:47:00.419"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170807 02:47:00.420" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 0
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170807 02:47:00.420" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170807 02:47:00.420" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system/chassis": {
            "AirCooled": 1,
            "WaterCooled": 0
        },
        "/xyz/openbmc_project/inventory/system/chassis/mo...</msg>
<status status="PASS" endtime="20170807 02:47:00.420" starttime="20170807 02:47:00.419"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 02:47:00.421" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_inventory.txt"&gt;/home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 02:47:00.422" starttime="20170807 02:47:00.421"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:00.422" starttime="20170807 02:47:00.420"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:00.422" starttime="20170807 02:46:59.982"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170807 02:47:00.423" level="INFO">${logpath} = /home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_led.txt</msg>
<status status="PASS" endtime="20170807 02:47:00.423" starttime="20170807 02:47:00.422"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170807 02:47:00.425" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 02:47:00.426" starttime="20170807 02:47:00.425"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 02:47:00.426" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 02:47:00.427" starttime="20170807 02:47:00.426"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170807 02:47:00.428" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 02:47:00.428" starttime="20170807 02:47:00.427"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170807 02:47:00.428" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 02:47:00.428" starttime="20170807 02:47:00.428"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170807 02:47:00.607" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 02:47:00.607" starttime="20170807 02:47:00.429"></status>
</kw>
<msg timestamp="20170807 02:47:00.607" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 02:47:00.607" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 02:47:00.607" starttime="20170807 02:47:00.429"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170807 02:47:00.608" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 02:47:00.608" starttime="20170807 02:47:00.608"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 02:47:00.609" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 02:47:00.609" starttime="20170807 02:47:00.608"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:00.609" starttime="20170807 02:47:00.425"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:00.609" starttime="20170807 02:47:00.424"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:00.609" starttime="20170807 02:47:00.423"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170807 02:47:00.610" level="INFO">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status status="PASS" endtime="20170807 02:47:00.610" starttime="20170807 02:47:00.610"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:47:00.611" starttime="20170807 02:47:00.610"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170807 02:47:00.665" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg timestamp="20170807 02:47:00.665" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170807 02:47:00.665" starttime="20170807 02:47:00.611"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:47:00.666" starttime="20170807 02:47:00.665"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170807 02:47:00.666" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 02:47:00.666" starttime="20170807 02:47:00.666"></status>
</kw>
<msg timestamp="20170807 02:47:00.666" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170807 02:47:00.666" starttime="20170807 02:47:00.423"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 02:47:00.668" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170807 02:47:00.668" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170807 02:47:00.668" starttime="20170807 02:47:00.667"></status>
</kw>
<msg timestamp="20170807 02:47:00.668" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170807 02:47:00.668" starttime="20170807 02:47:00.667"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170807 02:47:00.669" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170807 02:47:00.669" starttime="20170807 02:47:00.669"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:00.669" starttime="20170807 02:47:00.668"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:00.669" starttime="20170807 02:47:00.422"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170807 02:47:00.670" level="INFO">${logpath} = /home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_record_log.txt</msg>
<status status="PASS" endtime="20170807 02:47:00.670" starttime="20170807 02:47:00.670"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170807 02:47:00.673" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 02:47:00.674" starttime="20170807 02:47:00.673"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 02:47:00.674" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 02:47:00.674" starttime="20170807 02:47:00.674"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170807 02:47:00.675" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 02:47:00.675" starttime="20170807 02:47:00.674"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170807 02:47:00.676" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 02:47:00.676" starttime="20170807 02:47:00.675"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170807 02:47:00.866" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 02:47:00.866" starttime="20170807 02:47:00.676"></status>
</kw>
<msg timestamp="20170807 02:47:00.866" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 02:47:00.866" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 02:47:00.866" starttime="20170807 02:47:00.676"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170807 02:47:00.867" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 02:47:00.867" starttime="20170807 02:47:00.867"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 02:47:00.868" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 02:47:00.868" starttime="20170807 02:47:00.867"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:00.868" starttime="20170807 02:47:00.672"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:00.868" starttime="20170807 02:47:00.672"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:00.868" starttime="20170807 02:47:00.671"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170807 02:47:00.869" level="INFO">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status status="PASS" endtime="20170807 02:47:00.869" starttime="20170807 02:47:00.869"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:47:00.870" starttime="20170807 02:47:00.869"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170807 02:47:00.914" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170807 02:47:00.914" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170807 02:47:00.914" starttime="20170807 02:47:00.870"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:47:00.915" starttime="20170807 02:47:00.914"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170807 02:47:00.915" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 02:47:00.915" starttime="20170807 02:47:00.915"></status>
</kw>
<msg timestamp="20170807 02:47:00.916" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170807 02:47:00.916" starttime="20170807 02:47:00.670"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 02:47:00.917" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170807 02:47:00.917" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170807 02:47:00.917" starttime="20170807 02:47:00.916"></status>
</kw>
<msg timestamp="20170807 02:47:00.917" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170807 02:47:00.917" starttime="20170807 02:47:00.916"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170807 02:47:00.918" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170807 02:47:00.918" starttime="20170807 02:47:00.918"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:00.918" starttime="20170807 02:47:00.918"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:00.918" starttime="20170807 02:47:00.669"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:00.919" starttime="20170807 02:46:59.227"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:00.919" starttime="20170807 02:46:59.226"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:00.919" starttime="20170807 02:46:59.226"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:00.919" starttime="20170807 02:46:59.226"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:00.919" starttime="20170807 02:46:59.225"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:00.919" starttime="20170807 02:46:59.211"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:00.919" starttime="20170807 02:46:59.207"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:00.919" starttime="20170807 02:46:59.207"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:47:00.921" starttime="20170807 02:47:00.921"></status>
</kw>
<msg timestamp="20170807 02:47:00.921" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 02:47:00.921" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170807 02:47:00.921" starttime="20170807 02:47:00.920"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170807 02:47:00.922" starttime="20170807 02:47:00.922"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170807 02:47:00.957" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170807 02:47:00.957" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170807 02:47:01.054" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170807 02:47:01.065" level="INFO">${core_files} = None</msg>
<msg timestamp="20170807 02:47:01.065" level="INFO">${stderr} = None</msg>
<msg timestamp="20170807 02:47:01.065" level="INFO">${rc} = None</msg>
<msg timestamp="20170807 02:47:01.065" level="FAIL">#(UTC) 2017/08/07 02:47:01.064128 -    3.900642 - **ERROR** The prior SSH command returned a non-zero return code:
rc:                                               0x00000001
ls: /tmp/core_*: No such file or directory
: 1 != 0</msg>
<status status="FAIL" endtime="20170807 02:47:01.065" starttime="20170807 02:47:00.937"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170807 02:47:01.066" level="INFO">@{core_list} = [ ]</msg>
<msg timestamp="20170807 02:47:01.066" level="FAIL">AttributeError: 'NoneType' object has no attribute 'split'</msg>
<status status="FAIL" endtime="20170807 02:47:01.066" starttime="20170807 02:47:01.066"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170807 02:47:01.077" starttime="20170807 02:47:01.075"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:47:01.721" starttime="20170807 02:47:01.078"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:01.721" starttime="20170807 02:47:01.077"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:01.721" starttime="20170807 02:47:01.074"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:01.721" starttime="20170807 02:47:01.067"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status status="PASS" endtime="20170807 02:47:01.721" starttime="20170807 02:47:01.721"></status>
</kw>
<status status="FAIL" endtime="20170807 02:47:01.721" starttime="20170807 02:47:00.937"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:01.722" starttime="20170807 02:47:00.922"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:01.722" starttime="20170807 02:47:00.919"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:01.722" starttime="20170807 02:47:00.919"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:47:01.724" starttime="20170807 02:47:01.724"></status>
</kw>
<msg timestamp="20170807 02:47:01.724" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 02:47:01.724" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170807 02:47:01.724" starttime="20170807 02:47:01.723"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170807 02:47:01.725" starttime="20170807 02:47:01.724"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170807 02:47:01.739" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20170807 02:47:01.739" starttime="20170807 02:47:01.739"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170807 02:47:01.741" level="INFO">@{cmd_list} = [ ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_proc_list', 'top -n 1 -b') | ('BMC_dmesg', 'dmesg') | ('BMC_j...</msg>
<status status="PASS" endtime="20170807 02:47:01.741" starttime="20170807 02:47:01.740"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170807 02:47:01.742" level="INFO">${logpath} = /home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_proc_fd_active_list.txt</msg>
<status status="PASS" endtime="20170807 02:47:01.742" starttime="20170807 02:47:01.741"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:47:01.743" starttime="20170807 02:47:01.743"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170807 02:47:01.744" level="INFO">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status status="PASS" endtime="20170807 02:47:01.744" starttime="20170807 02:47:01.743"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170807 02:47:01.785" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170807 02:47:01.786" level="INFO">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg timestamp="20170807 02:47:02.357" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170807 02:47:02.357" starttime="20170807 02:47:01.762"></status>
</kw>
<msg timestamp="20170807 02:47:02.358" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 02:47:02.359" level="INFO">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Aug  7 02:47 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Aug  7 02:47 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status status="PASS" endtime="20170807 02:47:02.359" starttime="20170807 02:47:01.744"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170807 02:47:02.360" level="INFO">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Aug  7 02:47 0 -&gt; /dev/null
lrwx------    1 root     root            64 Aug  7 02:47 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status status="PASS" endtime="20170807 02:47:02.360" starttime="20170807 02:47:02.359"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170807 02:47:02.360" level="INFO">${stderr} = ls: /proc/1305/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status status="PASS" endtime="20170807 02:47:02.360" starttime="20170807 02:47:02.360"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 02:47:02.369" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_proc_fd_active_list.txt"&gt;/home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 02:47:02.369" starttime="20170807 02:47:02.368"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:02.369" starttime="20170807 02:47:02.367"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:02.369" starttime="20170807 02:47:02.361"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:02.369" starttime="20170807 02:47:01.742"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:02.369" starttime="20170807 02:47:01.741"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170807 02:47:02.370" level="INFO">${logpath} = /home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_procinfo.txt</msg>
<status status="PASS" endtime="20170807 02:47:02.370" starttime="20170807 02:47:02.369"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:47:02.371" starttime="20170807 02:47:02.371"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170807 02:47:02.372" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status status="PASS" endtime="20170807 02:47:02.372" starttime="20170807 02:47:02.371"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170807 02:47:02.414" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170807 02:47:02.414" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170807 02:47:02.471" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170807 02:47:02.471" starttime="20170807 02:47:02.390"></status>
</kw>
<msg timestamp="20170807 02:47:02.471" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 02:47:02.471" level="INFO">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status status="PASS" endtime="20170807 02:47:02.471" starttime="20170807 02:47:02.372"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170807 02:47:02.472" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status status="PASS" endtime="20170807 02:47:02.472" starttime="20170807 02:47:02.472"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170807 02:47:02.472" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170807 02:47:02.472" starttime="20170807 02:47:02.472"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 02:47:02.480" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_procinfo.txt"&gt;/home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 02:47:02.480" starttime="20170807 02:47:02.479"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:02.480" starttime="20170807 02:47:02.478"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:02.480" starttime="20170807 02:47:02.473"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:02.480" starttime="20170807 02:47:02.370"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:02.480" starttime="20170807 02:47:02.369"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170807 02:47:02.481" level="INFO">${logpath} = /home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_meminfo.txt</msg>
<status status="PASS" endtime="20170807 02:47:02.481" starttime="20170807 02:47:02.480"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:47:02.482" starttime="20170807 02:47:02.482"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170807 02:47:02.483" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status status="PASS" endtime="20170807 02:47:02.483" starttime="20170807 02:47:02.483"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170807 02:47:02.527" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170807 02:47:02.527" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170807 02:47:02.584" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170807 02:47:02.584" starttime="20170807 02:47:02.501"></status>
</kw>
<msg timestamp="20170807 02:47:02.584" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 02:47:02.584" level="INFO">${ret_values} = (u'MemTotal:         432268 kB\nMemFree:          177500 kB\nMemAvailable:     225360 kB\nBuffers:           11560 kB\nCached:           151732 kB\nSwapCached:            0 kB\nActive:           14647...</msg>
<status status="PASS" endtime="20170807 02:47:02.584" starttime="20170807 02:47:02.483"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170807 02:47:02.585" level="INFO">${stdout} = MemTotal:         432268 kB
MemFree:          177500 kB
MemAvailable:     225360 kB
Buffers:           11560 kB
Cached:           151732 kB
SwapCached:            0 kB
Active:           146476 kB
Inac...</msg>
<status status="PASS" endtime="20170807 02:47:02.585" starttime="20170807 02:47:02.585"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170807 02:47:02.586" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170807 02:47:02.586" starttime="20170807 02:47:02.585"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 02:47:02.593" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_meminfo.txt"&gt;/home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 02:47:02.593" starttime="20170807 02:47:02.592"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:02.593" starttime="20170807 02:47:02.592"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:02.593" starttime="20170807 02:47:02.586"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:02.593" starttime="20170807 02:47:02.481"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:02.593" starttime="20170807 02:47:02.480"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170807 02:47:02.594" level="INFO">${logpath} = /home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_proc_list.txt</msg>
<status status="PASS" endtime="20170807 02:47:02.594" starttime="20170807 02:47:02.593"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:47:02.595" starttime="20170807 02:47:02.595"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170807 02:47:02.596" level="INFO">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status status="PASS" endtime="20170807 02:47:02.596" starttime="20170807 02:47:02.596"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170807 02:47:02.637" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170807 02:47:02.638" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170807 02:47:02.967" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170807 02:47:02.967" starttime="20170807 02:47:02.614"></status>
</kw>
<msg timestamp="20170807 02:47:02.967" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 02:47:02.967" level="INFO">${ret_values} = (u'Mem: 254768K used, 177500K free, 113140K shrd, 11560K buff, 151736K cached\nCPU:   0% usr  23% sys   0% nic  76% idle   0% io   0% irq   0% sirq\nLoad average: 2.43 2.83 1.30 1/157 1308\n  PID  PPI...</msg>
<status status="PASS" endtime="20170807 02:47:02.967" starttime="20170807 02:47:02.596"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170807 02:47:02.968" level="INFO">${stdout} = Mem: 254768K used, 177500K free, 113140K shrd, 11560K buff, 151736K cached
CPU:   0% usr  23% sys   0% nic  76% idle   0% io   0% irq   0% sirq
Load average: 2.43 2.83 1.30 1/157 1308
  PID  PPID USER...</msg>
<status status="PASS" endtime="20170807 02:47:02.968" starttime="20170807 02:47:02.968"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170807 02:47:02.969" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170807 02:47:02.969" starttime="20170807 02:47:02.969"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 02:47:02.976" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_proc_list.txt"&gt;/home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 02:47:02.976" starttime="20170807 02:47:02.976"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:02.976" starttime="20170807 02:47:02.975"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:02.976" starttime="20170807 02:47:02.969"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:02.977" starttime="20170807 02:47:02.594"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:02.977" starttime="20170807 02:47:02.593"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170807 02:47:02.977" level="INFO">${logpath} = /home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_dmesg.txt</msg>
<status status="PASS" endtime="20170807 02:47:02.977" starttime="20170807 02:47:02.977"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:47:02.979" starttime="20170807 02:47:02.978"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170807 02:47:02.979" level="INFO">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status status="PASS" endtime="20170807 02:47:02.980" starttime="20170807 02:47:02.979"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170807 02:47:03.028" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170807 02:47:03.028" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170807 02:47:03.083" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170807 02:47:03.083" starttime="20170807 02:47:03.002"></status>
</kw>
<msg timestamp="20170807 02:47:03.084" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 02:47:03.084" level="INFO">${ret_values} = (u'[    0.000000] Booting Linux on physical CPU 0x0\n[    0.000000] Linux version 4.10.17-03afe5775baf06c3037d62cc2a15628079af38c9 (jenkins@openbmc-builder1) (gcc version 6.2.0 (GCC) ) #1 Mon Aug 7 01...</msg>
<status status="PASS" endtime="20170807 02:47:03.084" starttime="20170807 02:47:02.980"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170807 02:47:03.085" level="INFO">${stdout} = [    0.000000] Booting Linux on physical CPU 0x0
[    0.000000] Linux version 4.10.17-03afe5775baf06c3037d62cc2a15628079af38c9 (jenkins@openbmc-builder1) (gcc version 6.2.0 (GCC) ) #1 Mon Aug 7 01:59:...</msg>
<status status="PASS" endtime="20170807 02:47:03.085" starttime="20170807 02:47:03.085"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170807 02:47:03.086" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170807 02:47:03.086" starttime="20170807 02:47:03.086"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 02:47:03.096" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_dmesg.txt"&gt;/home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 02:47:03.096" starttime="20170807 02:47:03.096"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:03.097" starttime="20170807 02:47:03.095"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:03.097" starttime="20170807 02:47:03.087"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:03.097" starttime="20170807 02:47:02.978"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:03.097" starttime="20170807 02:47:02.977"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170807 02:47:03.098" level="INFO">${logpath} = /home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_journalctl.txt</msg>
<status status="PASS" endtime="20170807 02:47:03.098" starttime="20170807 02:47:03.097"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:47:03.099" starttime="20170807 02:47:03.099"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170807 02:47:03.100" level="INFO">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status status="PASS" endtime="20170807 02:47:03.100" starttime="20170807 02:47:03.099"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170807 02:47:03.142" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170807 02:47:03.143" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170807 02:47:03.948" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170807 02:47:03.949" starttime="20170807 02:47:03.119"></status>
</kw>
<msg timestamp="20170807 02:47:03.949" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 02:47:03.950" level="INFO">${ret_values} = (u'-- Logs begin at Mon 2017-08-07 02:43:52 UTC, end at Mon 2017-08-07 02:47:06 UTC. --\nAug 07 02:43:52 witherspoon kernel: Booting Linux on physical CPU 0x0\nAug 07 02:43:52 witherspoon kernel: Linu...</msg>
<status status="PASS" endtime="20170807 02:47:03.950" starttime="20170807 02:47:03.100"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170807 02:47:03.951" level="INFO">${stdout} = -- Logs begin at Mon 2017-08-07 02:43:52 UTC, end at Mon 2017-08-07 02:47:06 UTC. --
Aug 07 02:43:52 witherspoon kernel: Booting Linux on physical CPU 0x0
Aug 07 02:43:52 witherspoon kernel: Linux ver...</msg>
<status status="PASS" endtime="20170807 02:47:03.951" starttime="20170807 02:47:03.951"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170807 02:47:03.952" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170807 02:47:03.952" starttime="20170807 02:47:03.952"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 02:47:03.961" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_journalctl.txt"&gt;/home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 02:47:03.961" starttime="20170807 02:47:03.959"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:03.961" starttime="20170807 02:47:03.958"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:03.961" starttime="20170807 02:47:03.952"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:03.961" starttime="20170807 02:47:03.098"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:03.961" starttime="20170807 02:47:03.097"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:03.961" starttime="20170807 02:47:01.741"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:03.962" starttime="20170807 02:47:01.740"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:03.962" starttime="20170807 02:47:01.739"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:03.962" starttime="20170807 02:47:01.739"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:03.962" starttime="20170807 02:47:01.738"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:03.962" starttime="20170807 02:47:01.725"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:03.962" starttime="20170807 02:47:01.722"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:03.962" starttime="20170807 02:47:01.722"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:47:03.964" starttime="20170807 02:47:03.964"></status>
</kw>
<msg timestamp="20170807 02:47:03.964" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 02:47:03.964" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170807 02:47:03.964" starttime="20170807 02:47:03.963"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170807 02:47:03.965" starttime="20170807 02:47:03.965"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170807 02:47:03.982" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 02:47:03.983" starttime="20170807 02:47:03.982"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 02:47:03.983" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 02:47:03.983" starttime="20170807 02:47:03.983"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170807 02:47:03.984" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 02:47:03.984" starttime="20170807 02:47:03.984"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170807 02:47:03.985" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 02:47:03.985" starttime="20170807 02:47:03.984"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170807 02:47:04.207" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 02:47:04.208" starttime="20170807 02:47:03.985"></status>
</kw>
<msg timestamp="20170807 02:47:04.208" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 02:47:04.208" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 02:47:04.208" starttime="20170807 02:47:03.985"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170807 02:47:04.208" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 02:47:04.209" starttime="20170807 02:47:04.208"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 02:47:04.209" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 02:47:04.209" starttime="20170807 02:47:04.209"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:04.209" starttime="20170807 02:47:03.981"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:04.209" starttime="20170807 02:47:03.980"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:04.210" starttime="20170807 02:47:03.980"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170807 02:47:04.210" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" endtime="20170807 02:47:04.210" starttime="20170807 02:47:04.210"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:47:04.211" starttime="20170807 02:47:04.211"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170807 02:47:04.350" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170807 02:47:04.350" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 02:47:04.350" starttime="20170807 02:47:04.211"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:47:04.351" starttime="20170807 02:47:04.350"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170807 02:47:04.351" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 02:47:04.351" starttime="20170807 02:47:04.351"></status>
</kw>
<msg timestamp="20170807 02:47:04.352" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 02:47:04.352" starttime="20170807 02:47:03.979"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 02:47:04.353" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 02:47:04.353" starttime="20170807 02:47:04.352"></status>
</kw>
<msg timestamp="20170807 02:47:04.353" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170807 02:47:04.353" starttime="20170807 02:47:04.352"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<status status="PASS" endtime="20170807 02:47:04.354" starttime="20170807 02:47:04.353"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170807 02:47:04.354" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/1": {
      "AdditionalData": [], 
      "Id": 1, 
      "Message": "xyz.openbmc_project.Common.Error.InternalFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502073902349, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170807 02:47:04.354" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170807 02:47:04.354" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'/xyz/openbmc_project/logging/entry/1': {u'Resolved': 0, u'AdditionalData': [], u'Severity': u'xyz.openbmc_project.Logging.Entry.Level.Error', u'Ti...</msg>
<status status="PASS" endtime="20170807 02:47:04.354" starttime="20170807 02:47:04.354"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${content['data']}</arg>
</arguments>
<assign>
<var>${esel_list}</var>
</assign>
<msg timestamp="20170807 02:47:04.355" level="INFO">${esel_list} = [u'/xyz/openbmc_project/logging/entry/1']</msg>
<status status="PASS" endtime="20170807 02:47:04.355" starttime="20170807 02:47:04.355"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>esel</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170807 02:47:04.356" level="INFO">${logpath} = /home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_esel</msg>
<status status="PASS" endtime="20170807 02:47:04.356" starttime="20170807 02:47:04.355"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${logpath}</arg>
</arguments>
<msg timestamp="20170807 02:47:04.356" html="yes" level="INFO">Created file '&lt;a href="file:///home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_esel"&gt;/home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/20170807024656186558_esel&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 02:47:04.357" starttime="20170807 02:47:04.356"></status>
</kw>
<kw type="for" name="${entry_path} IN [ @{esel_list} ]">
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/1">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" endtime="20170807 02:47:04.358" starttime="20170807 02:47:04.357"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170807 02:47:04.362" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 02:47:04.362" starttime="20170807 02:47:04.361"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 02:47:04.363" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 02:47:04.363" starttime="20170807 02:47:04.362"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170807 02:47:04.363" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 02:47:04.363" starttime="20170807 02:47:04.363"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170807 02:47:04.364" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 02:47:04.364" starttime="20170807 02:47:04.364"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170807 02:47:04.558" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 02:47:04.558" starttime="20170807 02:47:04.365"></status>
</kw>
<msg timestamp="20170807 02:47:04.558" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 02:47:04.558" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 02:47:04.558" starttime="20170807 02:47:04.364"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170807 02:47:04.559" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 02:47:04.559" starttime="20170807 02:47:04.559"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 02:47:04.560" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 02:47:04.560" starttime="20170807 02:47:04.559"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:04.560" starttime="20170807 02:47:04.361"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:04.560" starttime="20170807 02:47:04.360"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:04.560" starttime="20170807 02:47:04.359"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170807 02:47:04.561" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/1/attr/AdditionalData</msg>
<status status="PASS" endtime="20170807 02:47:04.561" starttime="20170807 02:47:04.561"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:47:04.562" starttime="20170807 02:47:04.561"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170807 02:47:04.644" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/1/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170807 02:47:04.644" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 02:47:04.644" starttime="20170807 02:47:04.562"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:47:04.645" starttime="20170807 02:47:04.644"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170807 02:47:04.645" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 02:47:04.645" starttime="20170807 02:47:04.645"></status>
</kw>
<msg timestamp="20170807 02:47:04.646" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 02:47:04.646" starttime="20170807 02:47:04.358"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 02:47:04.646" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 02:47:04.646" starttime="20170807 02:47:04.646"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170807 02:47:04.647" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170807 02:47:04.647" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170807 02:47:04.647" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': []}</msg>
<status status="PASS" endtime="20170807 02:47:04.647" starttime="20170807 02:47:04.647"></status>
</kw>
<msg timestamp="20170807 02:47:04.647" level="INFO">${esel_data} = []</msg>
<status status="PASS" endtime="20170807 02:47:04.647" starttime="20170807 02:47:04.358"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170807 02:47:04.648" level="INFO">Length is 0</msg>
<msg timestamp="20170807 02:47:04.648" level="INFO">${length} = 0</msg>
<status status="PASS" endtime="20170807 02:47:04.648" starttime="20170807 02:47:04.648"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170807 02:47:04.649" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170807 02:47:04.649" starttime="20170807 02:47:04.649"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:04.649" starttime="20170807 02:47:04.357"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:04.649" starttime="20170807 02:47:04.357"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>which eSEL.pl</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20170807 02:47:04.653" level="INFO">Running command 'which eSEL.pl 2&gt;&amp;1'.</msg>
<msg timestamp="20170807 02:47:04.656" level="INFO">${out} = </msg>
<status status="PASS" endtime="20170807 02:47:04.656" starttime="20170807 02:47:04.650"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<msg timestamp="20170807 02:47:04.661" level="FAIL">'' does not contain 'eSEL.pl'</msg>
<status status="FAIL" endtime="20170807 02:47:04.661" starttime="20170807 02:47:04.660"></status>
</kw>
<msg timestamp="20170807 02:47:04.661" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170807 02:47:04.661" starttime="20170807 02:47:04.659"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170807 02:47:04.662" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170807 02:47:04.662" starttime="20170807 02:47:04.661"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:04.662" starttime="20170807 02:47:03.979"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:04.662" starttime="20170807 02:47:03.965"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:04.662" starttime="20170807 02:47:03.962"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:04.662" starttime="20170807 02:47:03.962"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:47:04.666" starttime="20170807 02:47:04.665"></status>
</kw>
<msg timestamp="20170807 02:47:04.666" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 02:47:04.666" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170807 02:47:04.666" starttime="20170807 02:47:04.664"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170807 02:47:04.667" starttime="20170807 02:47:04.666"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170807 02:47:04.684" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170807 02:47:04.684" starttime="20170807 02:47:04.684"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:04.684" starttime="20170807 02:47:04.683"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:04.684" starttime="20170807 02:47:04.667"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:04.684" starttime="20170807 02:47:04.663"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:04.684" starttime="20170807 02:47:04.663"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:04.685" starttime="20170807 02:46:57.190"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:04.685" starttime="20170807 02:46:57.188"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:04.685" starttime="20170807 02:46:57.187"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:04.685" starttime="20170807 02:46:57.187"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170807 02:47:04.723" starttime="20170807 02:47:04.691"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:04.724" starttime="20170807 02:47:04.685"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:04.724" starttime="20170807 02:46:57.186"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:04.725" starttime="20170807 02:46:53.130"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:04.725" starttime="20170807 02:46:53.129"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" endtime="20170807 02:47:04.726" starttime="20170807 02:47:04.725"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170807 02:47:04.727" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status status="PASS" endtime="20170807 02:47:04.727" starttime="20170807 02:47:04.726"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170807 02:47:04.727" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170807024656186558_UpdateBmc/20170807024656186558_InitiateCodeUpdateBMC/</msg>
<status status="PASS" endtime="20170807 02:47:04.727" starttime="20170807 02:47:04.727"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20170807 02:47:04.728" starttime="20170807 02:47:04.728"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170807 02:47:04.729" starttime="20170807 02:47:04.728"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170807 02:47:04.730" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld/logs"&gt;/home/fspcibld/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20170807 02:47:04.730" starttime="20170807 02:47:04.729"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170807 02:47:04.731" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170807 02:47:04.731" starttime="20170807 02:47:04.731"></status>
</kw>
<msg timestamp="20170807 02:47:04.731" level="INFO">${exist} = True</msg>
<status status="PASS" endtime="20170807 02:47:04.731" starttime="20170807 02:47:04.730"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" endtime="20170807 02:47:04.732" starttime="20170807 02:47:04.732"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170807 02:47:04.733" starttime="20170807 02:47:04.732"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170807 02:47:04.735" level="INFO">${cur_time} = 2017-08-07 02:47:04:734157</msg>
<status status="PASS" endtime="20170807 02:47:04.735" starttime="20170807 02:47:04.734"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170807 02:47:04.735" level="INFO">${cur_time} = 20170807024704734157</msg>
<status status="PASS" endtime="20170807 02:47:04.736" starttime="20170807 02:47:04.735"></status>
</kw>
<msg timestamp="20170807 02:47:04.736" level="INFO">${cur_time} = 20170807024704734157</msg>
<status status="PASS" endtime="20170807 02:47:04.736" starttime="20170807 02:47:04.733"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170807 02:47:04.737" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 02:47:04.738" starttime="20170807 02:47:04.736"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:04.738" starttime="20170807 02:47:04.726"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:04.738" starttime="20170807 02:46:52.818"></status>
</kw>
<status status="PASS" endtime="20170807 02:47:04.738" starttime="20170807 02:46:52.811"></status>
</kw>
<doc>Initiate a code update on the BMC.</doc>
<tags>
<tag>Initiate_Code_Update_BMC</tag>
</tags>
<status status="FAIL" endtime="20170807 02:47:04.738" critical="yes" starttime="20170807 02:42:42.135">'Verify error: update: --no-flash --ignore-mount --no-save-files --no-restore-files --no-clean-saved-files
ERROR: Image image-bmc too big for mtd0.
' does not contain 'to apply'</status>
</test>
<doc>Trigger code update to a target BMC.
Execution Method :
python -m robot -v OPENBMC_HOST:&lt;hostname&gt;
-v FILE_PATH:&lt;path/*all.tar&gt; update_bmc.robot

Code update method BMC using REST
Update work flow sequence:
- User input BMC File existence check
- Ping Test and REST authentication
- Set Host Power host setting Policy to RESTORE_LAST_STATE
On reboot this policy would ensure the BMC comes
online and stays at HOST_POWERED_OFF state.
- Issue poweroff
- Prune archived journal logs
- Prepare for Update
- Wait for BMC to come online clean
- Wait for BMC_READY state
- Apply preserve BMC Network setting
- SCP image to BMC
- Activate the flash image
- Warm Reset BMC to activate code
- Wait for BMC to come online time out 30 minutes
- Version check post update
- Identify REST url post update</doc>
<status status="FAIL" endtime="20170807 02:47:04.741" starttime="20170807 02:42:41.108"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">Initiate_Code_Update_BMC</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Update Bmc" pass="0">Update Bmc</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20170807 02:43:44.042" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff8a49f910&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=20.0)')': /login</msg>
<msg timestamp="20170807 02:44:04.265" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff8a49f390&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=20.0)')': /login</msg>
</errors>
</robot>
