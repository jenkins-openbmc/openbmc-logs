<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170810 04:26:12.788" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite name="Tests" source="/tmp/fspcibld/12278/obmc-robot/tests" id="s1">
<kw name="System Driver Data" type="setup">
<doc>System driver information.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170810 04:26:13.218" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status endtime="20170810 04:26:13.218" starttime="20170810 04:26:13.218" status="FAIL"></status>
</kw>
<msg timestamp="20170810 04:26:13.219" level="INFO">${has_host} = False</msg>
<status endtime="20170810 04:26:13.219" starttime="20170810 04:26:13.218" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170810 04:26:13.220" starttime="20170810 04:26:13.219" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:13.220" starttime="20170810 04:26:13.219" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170810 04:26:13.221" level="INFO">${port_num} = 22</msg>
<status endtime="20170810 04:26:13.221" starttime="20170810 04:26:13.221" status="PASS"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170810 04:26:13.222" level="INFO">${SSH_PORT} = 22</msg>
<status endtime="20170810 04:26:13.222" starttime="20170810 04:26:13.221" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170810 04:26:13.222" level="INFO">${https_num} = 443</msg>
<status endtime="20170810 04:26:13.222" starttime="20170810 04:26:13.222" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170810 04:26:13.223" level="INFO">${AUTH_URI} = https://9.3.86.161:443</msg>
<status endtime="20170810 04:26:13.223" starttime="20170810 04:26:13.222" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:13.223" starttime="20170810 04:26:13.220" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:13.223" starttime="20170810 04:26:13.220" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170810 04:26:13.224" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status endtime="20170810 04:26:13.224" starttime="20170810 04:26:13.224" status="FAIL"></status>
</kw>
<msg timestamp="20170810 04:26:13.224" level="INFO">${has_port} = False</msg>
<status endtime="20170810 04:26:13.224" starttime="20170810 04:26:13.223" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170810 04:26:13.226" starttime="20170810 04:26:13.225" status="PASS"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170810 04:26:13.226" starttime="20170810 04:26:13.226" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:13.226" starttime="20170810 04:26:13.225" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:13.226" starttime="20170810 04:26:13.224" status="PASS"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170810 04:26:13.227" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170810 04:26:14.915" level="INFO">Read output: root@witherspoon:~#</msg>
<status endtime="20170810 04:26:14.916" starttime="20170810 04:26:13.227" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:14.916" starttime="20170810 04:26:13.217" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 04:26:14.918" level="INFO">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg timestamp="20170810 04:26:14.995" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170810 04:26:14.995" level="INFO">${output} = VERSION_ID="v1.99.8-210-gcdcb10f"</msg>
<msg timestamp="20170810 04:26:14.995" level="INFO">${stderr} = </msg>
<status endtime="20170810 04:26:14.995" starttime="20170810 04:26:14.917" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170810 04:26:14.995" level="INFO">Length is 0</msg>
<status endtime="20170810 04:26:14.996" starttime="20170810 04:26:14.995" status="PASS"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20170810 04:26:14.996" level="INFO">VERSION_ID="v1.99.8-210-gcdcb10f"</msg>
<status endtime="20170810 04:26:14.996" starttime="20170810 04:26:14.996" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:14.996" starttime="20170810 04:26:14.917" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:14.996" starttime="20170810 04:26:14.916" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>${PNOR_CMD}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 04:26:14.998" level="INFO">Executing command '/usr/sbin/pflash -r /tmp/out.txt -P VERSION; cat /tmp/out.txt'.</msg>
<msg timestamp="20170810 04:26:15.128" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170810 04:26:15.128" level="INFO">${stdout} = FFS: Flash header not found. Code: 100</msg>
<msg timestamp="20170810 04:26:15.128" level="INFO">${stderr} = Error 100 opening ffs !
cat: can't open '/tmp/out.txt': No such file or directory</msg>
<status endtime="20170810 04:26:15.128" starttime="20170810 04:26:14.997" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170810 04:26:15.129" level="INFO">Length is 81</msg>
<msg timestamp="20170810 04:26:15.129" level="FAIL">'Error 100 opening ffs !
cat: can't open '/tmp/out.txt': No such file or directory' should be empty.</msg>
<status endtime="20170810 04:26:15.129" starttime="20170810 04:26:15.128" status="FAIL"></status>
</kw>
<status endtime="20170810 04:26:15.129" starttime="20170810 04:26:14.997" status="FAIL"></status>
</kw>
<status endtime="20170810 04:26:15.129" starttime="20170810 04:26:14.997" status="FAIL"></status>
</kw>
<status endtime="20170810 04:26:15.129" starttime="20170810 04:26:14.997" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170810 04:26:15.317" level="INFO">width=80
path_separator=/
height=24
port=22
prompt=# 
alias=bmc_connection
index=1
encoding=UTF-8
host=9.3.86.161
newline=

timeout=25 seconds
term_type=vt100</msg>
<msg timestamp="20170810 04:26:15.318" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170810 04:26:16.042" level="INFO">Read output: root@witherspoon:~#</msg>
<msg timestamp="20170810 04:26:16.042" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170810 04:26:16.120" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170810 04:26:16.128" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170810 04:26:16.128" level="INFO">${stderr} = </msg>
<msg timestamp="20170810 04:26:16.128" level="INFO">${rc} = 0</msg>
<status endtime="20170810 04:26:16.128" starttime="20170810 04:26:15.130" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170810 04:26:16.129" level="INFO">Length is 0</msg>
<status endtime="20170810 04:26:16.129" starttime="20170810 04:26:16.128" status="PASS"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170810 04:26:16.129" level="INFO">Length is 11</msg>
<status endtime="20170810 04:26:16.129" starttime="20170810 04:26:16.129" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:26:16.130" level="INFO">${bmc_model} = Witherspoon</msg>
<status endtime="20170810 04:26:16.130" starttime="20170810 04:26:15.130" status="PASS"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg timestamp="20170810 04:26:16.130" level="INFO">BMC Model=Witherspoon</msg>
<status endtime="20170810 04:26:16.130" starttime="20170810 04:26:16.130" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:16.131" starttime="20170810 04:26:15.130" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:16.131" starttime="20170810 04:26:15.129" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw name="Enable Core Dump On BMC" library="utils">
<doc>Enable core dump collection.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170810 04:26:16.134" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status endtime="20170810 04:26:16.134" starttime="20170810 04:26:16.133" status="FAIL"></status>
</kw>
<msg timestamp="20170810 04:26:16.134" level="INFO">${has_host} = False</msg>
<status endtime="20170810 04:26:16.134" starttime="20170810 04:26:16.133" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170810 04:26:16.136" starttime="20170810 04:26:16.136" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:16.136" starttime="20170810 04:26:16.135" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170810 04:26:16.138" level="INFO">${port_num} = 22</msg>
<status endtime="20170810 04:26:16.138" starttime="20170810 04:26:16.137" status="PASS"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170810 04:26:16.138" level="INFO">${SSH_PORT} = 22</msg>
<status endtime="20170810 04:26:16.138" starttime="20170810 04:26:16.138" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170810 04:26:16.139" level="INFO">${https_num} = 443</msg>
<status endtime="20170810 04:26:16.139" starttime="20170810 04:26:16.138" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170810 04:26:16.139" level="INFO">${AUTH_URI} = https://9.3.86.161:443</msg>
<status endtime="20170810 04:26:16.139" starttime="20170810 04:26:16.139" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:16.140" starttime="20170810 04:26:16.137" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:16.140" starttime="20170810 04:26:16.136" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170810 04:26:16.140" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status endtime="20170810 04:26:16.141" starttime="20170810 04:26:16.140" status="FAIL"></status>
</kw>
<msg timestamp="20170810 04:26:16.141" level="INFO">${has_port} = False</msg>
<status endtime="20170810 04:26:16.141" starttime="20170810 04:26:16.140" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170810 04:26:16.142" starttime="20170810 04:26:16.142" status="PASS"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170810 04:26:16.143" starttime="20170810 04:26:16.143" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:16.143" starttime="20170810 04:26:16.142" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:16.143" starttime="20170810 04:26:16.141" status="PASS"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170810 04:26:16.143" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170810 04:26:17.857" level="INFO">Read output: root@witherspoon:~#</msg>
<status endtime="20170810 04:26:17.857" starttime="20170810 04:26:16.143" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:17.857" starttime="20170810 04:26:16.132" status="PASS"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 04:26:17.858" level="INFO">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg timestamp="20170810 04:26:17.935" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170810 04:26:17.935" level="INFO">${stdout} = /tmp/core_%e.%p</msg>
<msg timestamp="20170810 04:26:17.935" level="INFO">${stderr} = </msg>
<status endtime="20170810 04:26:17.935" starttime="20170810 04:26:17.858" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170810 04:26:17.936" level="INFO">Length is 0</msg>
<status endtime="20170810 04:26:17.936" starttime="20170810 04:26:17.936" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:26:17.937" level="INFO">${core_pattern} = /tmp/core_%e.%p</msg>
<status endtime="20170810 04:26:17.937" starttime="20170810 04:26:17.858" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status endtime="20170810 04:26:17.937" starttime="20170810 04:26:17.937" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:17.937" starttime="20170810 04:26:16.131" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:17.937" starttime="20170810 04:26:16.131" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${DEBUG_TARBALL_PATH}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Install Debug Tarball On BMC</arg>
<arg>${DEBUG_TARBALL_PATH}</arg>
</arguments>
<status endtime="20170810 04:26:17.938" starttime="20170810 04:26:17.938" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:17.938" starttime="20170810 04:26:13.216" status="PASS"></status>
</kw>
<suite name="Security" source="/tmp/fspcibld/12278/obmc-robot/tests/security" id="s1-s1">
<suite name="Test Ssl" source="/tmp/fspcibld/12278/obmc-robot/tests/security/test_ssl.robot" id="s1-s1-s1">
<test name="Test SSL Connection" id="s1-s1-s1-t1">
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:26:18.020" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:26:18.021" starttime="20170810 04:26:18.020" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:26:18.022" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:26:18.022" starttime="20170810 04:26:18.021" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:26:18.022" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:26:18.022" starttime="20170810 04:26:18.022" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:26:18.023" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:26:18.023" starttime="20170810 04:26:18.022" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:26:18.206" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:26:18.206" starttime="20170810 04:26:18.024" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:26:18.206" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:26:18.206" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:26:18.206" starttime="20170810 04:26:18.023" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:26:18.207" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:26:18.207" starttime="20170810 04:26:18.206" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:26:18.207" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:26:18.207" starttime="20170810 04:26:18.207" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:18.208" starttime="20170810 04:26:18.019" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:18.208" starttime="20170810 04:26:18.019" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:18.208" starttime="20170810 04:26:18.019" status="PASS"></status>
</kw>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc" type="teardown">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:26:18.212" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:26:18.213" starttime="20170810 04:26:18.212" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:26:18.213" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:26:18.213" starttime="20170810 04:26:18.213" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:26:18.214" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:26:18.214" starttime="20170810 04:26:18.214" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:26:18.215" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:26:18.215" starttime="20170810 04:26:18.214" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:26:18.426" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:26:18.426" starttime="20170810 04:26:18.216" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:26:18.426" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:26:18.426" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:26:18.426" starttime="20170810 04:26:18.215" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:26:18.427" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:26:18.427" starttime="20170810 04:26:18.426" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:26:18.427" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:26:18.428" starttime="20170810 04:26:18.427" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:18.428" starttime="20170810 04:26:18.212" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:18.428" starttime="20170810 04:26:18.211" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:18.428" starttime="20170810 04:26:18.211" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:26:18.428" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:26:18.428" starttime="20170810 04:26:18.428" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:26:18.430" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:26:18.431" starttime="20170810 04:26:18.430" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:26:18.431" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:26:18.432" starttime="20170810 04:26:18.431" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:18.432" starttime="20170810 04:26:18.431" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:18.432" starttime="20170810 04:26:18.429" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:18.432" starttime="20170810 04:26:18.429" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:26:18.521" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:26:18.521" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:26:18.521" starttime="20170810 04:26:18.432" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:26:18.523" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:26:18.523" starttime="20170810 04:26:18.522" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:26:18.523" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:26:18.524" starttime="20170810 04:26:18.523" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:18.524" starttime="20170810 04:26:18.523" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:18.524" starttime="20170810 04:26:18.522" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:18.524" starttime="20170810 04:26:18.521" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:26:18.524" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:26:18.524" starttime="20170810 04:26:18.524" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:26:18.525" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:26:18.525" starttime="20170810 04:26:18.210" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:26:18.525" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:26:18.525" starttime="20170810 04:26:18.525" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:26:18.526" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:26:18.526" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:26:18.526" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status endtime="20170810 04:26:18.526" starttime="20170810 04:26:18.526" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:26:18.526" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170810 04:26:18.526" starttime="20170810 04:26:18.209" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:26:18.527" level="INFO">${host_state} = Off</msg>
<status endtime="20170810 04:26:18.527" starttime="20170810 04:26:18.209" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170810 04:26:18.528" level="FAIL">Off != Quiesced</msg>
<status endtime="20170810 04:26:18.528" starttime="20170810 04:26:18.527" status="FAIL"></status>
</kw>
<msg timestamp="20170810 04:26:18.528" level="INFO">${status} = False</msg>
<status endtime="20170810 04:26:18.528" starttime="20170810 04:26:18.527" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:26:18.528" level="INFO">${status} = False</msg>
<status endtime="20170810 04:26:18.528" starttime="20170810 04:26:18.208" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status endtime="20170810 04:26:18.529" starttime="20170810 04:26:18.529" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status endtime="20170810 04:26:18.529" starttime="20170810 04:26:18.529" status="PASS"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170810 04:26:18.543" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status endtime="20170810 04:26:18.543" starttime="20170810 04:26:18.530" status="PASS"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170810 04:26:18.557" level="INFO">${FFDC_DIR_PATH} = </msg>
<status endtime="20170810 04:26:18.557" starttime="20170810 04:26:18.544" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<kw name="Set Ffdc Defaults" library="openbmc_ffdc">
<doc>Set a default value for ffdc_dir_path and ffdc_prefix if they don't</doc>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170810 04:26:18.561" level="INFO">${cur_time} = 2017-08-10 04:26:18:560677</msg>
<status endtime="20170810 04:26:18.561" starttime="20170810 04:26:18.560" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170810 04:26:18.562" level="INFO">${cur_time} = 20170810042618560677</msg>
<status endtime="20170810 04:26:18.562" starttime="20170810 04:26:18.561" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:18.562" starttime="20170810 04:26:18.559" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:26:18.569" level="INFO">${FFDC_TIME} = 20170810042618560677</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170810 04:26:18.570" level="INFO">${suite_name} = TestsSecurityTestSsl</msg>
<status endtime="20170810 04:26:18.570" starttime="20170810 04:26:18.570" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170810 04:26:18.571" level="INFO">${suite_name} = 20170810042618560677_TestsSecurityTestSsl</msg>
<status endtime="20170810 04:26:18.571" starttime="20170810 04:26:18.571" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170810 04:26:18.572" level="INFO">${test_name} = TestSSLConnection</msg>
<status endtime="20170810 04:26:18.572" starttime="20170810 04:26:18.571" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170810 04:26:18.572" level="INFO">${test_name} = 20170810042618560677_TestSSLConnection</msg>
<status endtime="20170810 04:26:18.572" starttime="20170810 04:26:18.572" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:18.572" starttime="20170810 04:26:18.570" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:26:18.573" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/12278/obmc-robot/logs/20170810042618560677_TestsSecurityTestSsl/20170810042618560677_TestSSLConnection/</msg>
<msg timestamp="20170810 04:26:18.577" level="INFO">${FFDC_PREFIX} = 20170810042618560677_</msg>
<status endtime="20170810 04:26:18.577" starttime="20170810 04:26:18.559" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:18.577" starttime="20170810 04:26:18.558" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status endtime="20170810 04:26:18.578" starttime="20170810 04:26:18.578" status="PASS"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:26:18.579" level="INFO">Created directory '&lt;a href="file:///tmp/fspcibld/12278/obmc-robot/logs"&gt;/tmp/fspcibld/12278/obmc-robot/logs&lt;/a&gt;'.</msg>
<status endtime="20170810 04:26:18.579" starttime="20170810 04:26:18.578" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170810 04:26:18.580" level="FAIL">File '/tmp/fspcibld/12278/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status endtime="20170810 04:26:18.580" starttime="20170810 04:26:18.579" status="FAIL"></status>
</kw>
<msg timestamp="20170810 04:26:18.580" level="INFO">${exist} = False</msg>
<status endtime="20170810 04:26:18.580" starttime="20170810 04:26:18.579" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:26:18.581" level="INFO">Created file '&lt;a href="file:///tmp/fspcibld/12278/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/12278/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:26:18.581" starttime="20170810 04:26:18.581" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:18.581" starttime="20170810 04:26:18.580" status="PASS"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status endtime="20170810 04:26:18.582" starttime="20170810 04:26:18.581" status="PASS"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170810 04:26:18.583" level="INFO">${cur_time} = 2017-08-10 04:26:18:582580</msg>
<status endtime="20170810 04:26:18.583" starttime="20170810 04:26:18.582" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170810 04:26:18.584" level="INFO">${cur_time} = 20170810042618582580</msg>
<status endtime="20170810 04:26:18.584" starttime="20170810 04:26:18.583" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:26:18.584" level="INFO">${cur_time} = 20170810042618582580</msg>
<status endtime="20170810 04:26:18.584" starttime="20170810 04:26:18.582" status="PASS"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:26:18.585" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/12278/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/12278/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:26:18.585" starttime="20170810 04:26:18.584" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:18.585" starttime="20170810 04:26:18.530" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:18.585" starttime="20170810 04:26:18.208" status="PASS"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status endtime="20170810 04:26:18.585" starttime="20170810 04:26:18.018" critical="yes" status="PASS"></status>
</test>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords" type="teardown">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:26:18.586" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:26:18.586" starttime="20170810 04:26:18.586" status="PASS"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status endtime="20170810 04:26:18.586" starttime="20170810 04:26:17.940" status="PASS"></status>
</suite>
<status endtime="20170810 04:26:18.587" starttime="20170810 04:26:17.938" status="PASS"></status>
</suite>
<suite name="Test Basic Poweron" source="/tmp/fspcibld/12278/obmc-robot/tests/test_basic_poweron.robot" id="s1-s2">
<test name="Power On Test" id="s1-s2-t1">
<kw name="Start SOL Console Logging" library="utils" type="setup">
<doc>Start system console log to file.</doc>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170810 04:26:18.626" level="INFO">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170810 04:26:18.626" starttime="20170810 04:26:18.625" status="PASS"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170810 04:26:18.626" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170810 04:26:18.626" starttime="20170810 04:26:18.626" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:26:18.627" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170810 04:26:18.627" starttime="20170810 04:26:18.624" status="PASS"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>return_data=${return_data}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170810 04:26:18.628" level="INFO">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170810 04:26:18.628" starttime="20170810 04:26:18.628" status="PASS"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170810 04:26:18.629" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170810 04:26:18.629" starttime="20170810 04:26:18.629" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:26:18.629" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170810 04:26:18.629" starttime="20170810 04:26:18.628" status="PASS"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 04:26:18.630" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170810 04:26:18.630" starttime="20170810 04:26:18.630" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170810 04:26:18.631" starttime="20170810 04:26:18.630" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170810 04:26:18.636" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170810 04:26:18.639" level="INFO">${rc} = 0</msg>
<msg timestamp="20170810 04:26:18.639" level="INFO">${output} = /tmp/fspcibld/12278/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170810 04:26:18.639" starttime="20170810 04:26:18.631" status="PASS"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170810 04:26:18.642" starttime="20170810 04:26:18.641" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170810 04:26:18.643" starttime="20170810 04:26:18.642" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 04:26:18.643" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20170810 04:26:18.643" starttime="20170810 04:26:18.643" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:26:18.644" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20170810 04:26:18.644" starttime="20170810 04:26:18.630" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 04:26:18.644" level="INFO">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status endtime="20170810 04:26:18.645" starttime="20170810 04:26:18.644" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170810 04:26:18.645" starttime="20170810 04:26:18.645" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20170810 04:26:18.649" level="INFO">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20170810 04:26:18.658" level="INFO">${rc} = 0</msg>
<msg timestamp="20170810 04:26:18.658" level="INFO">${os_con_pid} = </msg>
<status endtime="20170810 04:26:18.658" starttime="20170810 04:26:18.645" status="PASS"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status endtime="20170810 04:26:18.661" starttime="20170810 04:26:18.660" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 04:26:18.661" level="INFO">${cmd_buf} = kill -9 </msg>
<status endtime="20170810 04:26:18.661" starttime="20170810 04:26:18.661" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170810 04:26:18.662" starttime="20170810 04:26:18.662" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170810 04:26:18.663" level="INFO">${rc} = None</msg>
<msg timestamp="20170810 04:26:18.663" level="INFO">${output} = None</msg>
<status endtime="20170810 04:26:18.663" starttime="20170810 04:26:18.663" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170810 04:26:18.664" starttime="20170810 04:26:18.664" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg timestamp="20170810 04:26:18.667" level="FAIL">Source file '/tmp/9.3.86.161_os_console' does not exist.</msg>
<status endtime="20170810 04:26:18.667" starttime="20170810 04:26:18.665" status="FAIL"></status>
</kw>
<status endtime="20170810 04:26:18.667" starttime="20170810 04:26:18.665" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:18.667" starttime="20170810 04:26:18.664" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20170810 04:26:18.668" level="INFO">${output} = </msg>
<status endtime="20170810 04:26:18.668" starttime="20170810 04:26:18.668" status="PASS"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg timestamp="20170810 04:26:18.669" level="INFO">${loc_quiet} = 1</msg>
<status endtime="20170810 04:26:18.669" starttime="20170810 04:26:18.668" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Cmd Fnc" library="gen_cmd">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status endtime="20170810 04:26:18.713" starttime="20170810 04:26:18.670" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:26:18.714" level="INFO">${rc} = 1</msg>
<msg timestamp="20170810 04:26:18.714" level="INFO">${output} = cat: /tmp/9.3.86.161_os_console: No such file or directory
</msg>
<status endtime="20170810 04:26:18.714" starttime="20170810 04:26:18.669" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:26:18.715" level="INFO">${log_output} = cat: /tmp/9.3.86.161_os_console: No such file or directory
</msg>
<status endtime="20170810 04:26:18.715" starttime="20170810 04:26:18.627" status="PASS"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:26:18.717" level="INFO">Created file '&lt;a href="file:///tmp/9.3.86.161_os_console"&gt;/tmp/9.3.86.161_os_console&lt;/a&gt;'.</msg>
<status endtime="20170810 04:26:18.717" starttime="20170810 04:26:18.716" status="PASS"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 04:26:18.718" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170810 04:26:18.718" starttime="20170810 04:26:18.718" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170810 04:26:18.719" starttime="20170810 04:26:18.718" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170810 04:26:18.722" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170810 04:26:18.725" level="INFO">${rc} = 0</msg>
<msg timestamp="20170810 04:26:18.725" level="INFO">${output} = /tmp/fspcibld/12278/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170810 04:26:18.725" starttime="20170810 04:26:18.719" status="PASS"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170810 04:26:18.728" starttime="20170810 04:26:18.727" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170810 04:26:18.729" starttime="20170810 04:26:18.728" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 04:26:18.730" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20170810 04:26:18.730" starttime="20170810 04:26:18.729" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:26:18.730" level="INFO">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20170810 04:26:18.730" starttime="20170810 04:26:18.717" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 04:26:18.731" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console 2&gt;&amp;1 &amp;</msg>
<status endtime="20170810 04:26:18.731" starttime="20170810 04:26:18.731" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170810 04:26:18.731" starttime="20170810 04:26:18.731" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170810 04:26:18.735" level="INFO">Running command 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console 2&gt;&amp;1 &amp;'.</msg>
<msg timestamp="20170810 04:26:18.738" level="INFO">${rc} = 0</msg>
<msg timestamp="20170810 04:26:18.738" level="INFO">${output} = </msg>
<status endtime="20170810 04:26:18.739" starttime="20170810 04:26:18.732" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20170810 04:26:18.742" starttime="20170810 04:26:18.741" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:18.742" starttime="20170810 04:26:18.624" status="PASS"></status>
</kw>
<kw name="Repeat Keyword" library="BuiltIn">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg timestamp="20170810 04:26:18.743" level="INFO">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170810 04:26:18.747" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status endtime="20170810 04:26:18.747" starttime="20170810 04:26:18.745" status="PASS"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:26:18.748" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20170810 04:26:18.748" starttime="20170810 04:26:18.748" status="PASS"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:26:18.752" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:26:18.753" starttime="20170810 04:26:18.752" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:26:18.754" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:26:18.754" starttime="20170810 04:26:18.754" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:26:18.755" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:26:18.755" starttime="20170810 04:26:18.754" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:26:18.755" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:26:18.755" starttime="20170810 04:26:18.755" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:26:19.184" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:26:19.184" starttime="20170810 04:26:18.756" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:26:19.185" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:26:19.185" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:26:19.185" starttime="20170810 04:26:18.756" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:26:19.185" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:26:19.185" starttime="20170810 04:26:19.185" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:26:19.186" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:26:19.186" starttime="20170810 04:26:19.186" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:19.186" starttime="20170810 04:26:18.751" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:19.186" starttime="20170810 04:26:18.750" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:19.186" starttime="20170810 04:26:18.749" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:26:19.187" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20170810 04:26:19.187" starttime="20170810 04:26:19.187" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:26:19.188" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:26:19.188" starttime="20170810 04:26:19.187" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20170810 04:26:19.188" starttime="20170810 04:26:19.188" status="PASS"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:26:19.190" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-...</msg>
<status endtime="20170810 04:26:19.190" starttime="20170810 04:26:19.189" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:26:19.191" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20170810 04:26:19.191" starttime="20170810 04:26:19.191" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:19.192" starttime="20170810 04:26:19.190" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:19.192" starttime="20170810 04:26:19.188" status="PASS"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:26:19.932" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170810 04:26:19.933" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:26:19.933" starttime="20170810 04:26:19.192" status="PASS"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:26:19.934" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:26:19.934" starttime="20170810 04:26:19.933" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:26:19.935" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:26:19.935" starttime="20170810 04:26:19.935" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:19.935" starttime="20170810 04:26:19.934" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:19.935" starttime="20170810 04:26:19.933" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:26:19.936" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:26:19.936" starttime="20170810 04:26:19.935" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:26:19.936" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:26:19.936" starttime="20170810 04:26:18.748" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:26:19.936" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:26:19.937" starttime="20170810 04:26:19.936" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170810 04:26:19.937" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:26:19.937" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:26:19.937" level="INFO">${json} = {u'message': u'200 OK', u'status': u'ok', u'data': None}</msg>
<status endtime="20170810 04:26:19.937" starttime="20170810 04:26:19.937" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:19.937" starttime="20170810 04:26:18.747" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170810 04:26:19.938" starttime="20170810 04:26:19.938" status="PASS"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:26:19.943" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:26:19.943" starttime="20170810 04:26:19.942" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:26:19.944" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:26:19.944" starttime="20170810 04:26:19.943" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:26:19.944" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:26:19.944" starttime="20170810 04:26:19.944" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:26:19.945" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:26:19.945" starttime="20170810 04:26:19.944" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:26:21.254" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:26:21.254" starttime="20170810 04:26:19.946" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:26:21.254" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:26:21.254" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:26:21.254" starttime="20170810 04:26:19.945" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:26:21.255" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:26:21.255" starttime="20170810 04:26:21.255" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:26:21.256" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:26:21.256" starttime="20170810 04:26:21.256" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:21.256" starttime="20170810 04:26:19.942" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:21.256" starttime="20170810 04:26:19.941" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:21.256" starttime="20170810 04:26:19.941" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:26:21.257" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:26:21.257" starttime="20170810 04:26:21.257" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:26:21.259" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:26:21.259" starttime="20170810 04:26:21.258" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:26:21.260" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:26:21.260" starttime="20170810 04:26:21.260" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:21.260" starttime="20170810 04:26:21.259" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:21.260" starttime="20170810 04:26:21.258" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:21.260" starttime="20170810 04:26:21.257" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:26:25.333" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:26:25.334" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:26:25.334" starttime="20170810 04:26:21.261" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:26:25.336" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:26:25.336" starttime="20170810 04:26:25.335" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:26:25.337" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:26:25.337" starttime="20170810 04:26:25.336" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:25.337" starttime="20170810 04:26:25.336" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:25.337" starttime="20170810 04:26:25.335" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:25.337" starttime="20170810 04:26:25.334" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:26:25.338" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:26:25.338" starttime="20170810 04:26:25.337" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:26:25.338" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:26:25.338" starttime="20170810 04:26:19.940" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:26:25.338" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:26:25.339" starttime="20170810 04:26:25.338" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:26:25.339" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:26:25.339" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:26:25.339" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170810 04:26:25.339" starttime="20170810 04:26:25.339" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:26:25.340" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170810 04:26:25.340" starttime="20170810 04:26:19.940" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:26:25.340" level="INFO">${power_state} = Off</msg>
<status endtime="20170810 04:26:25.340" starttime="20170810 04:26:19.939" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:26:25.340" starttime="20170810 04:26:25.340" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:25.341" starttime="20170810 04:26:19.939" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:26:25.345" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:26:25.345" starttime="20170810 04:26:25.344" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:26:25.346" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:26:25.346" starttime="20170810 04:26:25.345" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:26:25.346" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:26:25.346" starttime="20170810 04:26:25.346" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:26:25.347" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:26:25.347" starttime="20170810 04:26:25.346" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:26:26.444" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:26:26.444" starttime="20170810 04:26:25.348" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:26:26.444" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:26:26.444" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:26:26.444" starttime="20170810 04:26:25.347" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:26:26.445" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:26:26.445" starttime="20170810 04:26:26.444" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:26:26.446" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:26:26.446" starttime="20170810 04:26:26.445" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:26.446" starttime="20170810 04:26:25.344" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:26.446" starttime="20170810 04:26:25.343" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:26.446" starttime="20170810 04:26:25.342" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:26:26.447" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:26:26.447" starttime="20170810 04:26:26.446" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:26:26.449" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:26:26.449" starttime="20170810 04:26:26.448" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:26:26.450" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:26:26.450" starttime="20170810 04:26:26.450" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:26.450" starttime="20170810 04:26:26.449" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:26.450" starttime="20170810 04:26:26.448" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:26.450" starttime="20170810 04:26:26.447" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:26:26.541" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:26:26.541" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:26:26.541" starttime="20170810 04:26:26.451" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:26:26.543" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:26:26.543" starttime="20170810 04:26:26.543" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:26:26.544" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:26:26.544" starttime="20170810 04:26:26.544" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:26.545" starttime="20170810 04:26:26.543" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:26.545" starttime="20170810 04:26:26.542" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:26.545" starttime="20170810 04:26:26.542" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:26:26.545" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:26:26.545" starttime="20170810 04:26:26.545" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:26:26.545" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:26:26.545" starttime="20170810 04:26:25.342" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:26:26.546" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:26:26.546" starttime="20170810 04:26:26.546" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:26:26.547" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:26:26.547" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:26:26.547" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status endtime="20170810 04:26:26.547" starttime="20170810 04:26:26.546" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:26:26.547" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170810 04:26:26.547" starttime="20170810 04:26:25.341" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:26:26.548" level="INFO">${host_state} = Off</msg>
<status endtime="20170810 04:26:26.548" starttime="20170810 04:26:25.341" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:26:26.548" starttime="20170810 04:26:26.548" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:26.548" starttime="20170810 04:26:19.939" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:26.548" starttime="20170810 04:26:19.938" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:26.548" starttime="20170810 04:26:18.744" status="PASS"></status>
</kw>
<kw name="Initiate Host Boot" library="state_manager">
<doc>Initiate host power on.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170810 04:26:26.549" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status endtime="20170810 04:26:26.549" starttime="20170810 04:26:26.549" status="PASS"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:26:26.551" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20170810 04:26:26.551" starttime="20170810 04:26:26.550" status="PASS"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:26:26.553" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:26:26.553" starttime="20170810 04:26:26.553" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:26:26.554" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:26:26.554" starttime="20170810 04:26:26.554" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:26:26.555" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:26:26.555" starttime="20170810 04:26:26.554" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:26:26.555" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:26:26.556" starttime="20170810 04:26:26.555" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:26:26.733" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:26:26.733" starttime="20170810 04:26:26.557" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:26:26.733" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:26:26.733" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:26:26.733" starttime="20170810 04:26:26.556" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:26:26.734" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:26:26.734" starttime="20170810 04:26:26.734" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:26:26.735" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:26:26.735" starttime="20170810 04:26:26.734" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:26.735" starttime="20170810 04:26:26.552" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:26.735" starttime="20170810 04:26:26.552" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:26.735" starttime="20170810 04:26:26.551" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:26:26.736" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20170810 04:26:26.737" starttime="20170810 04:26:26.736" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:26:26.737" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:26:26.737" starttime="20170810 04:26:26.737" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20170810 04:26:26.738" starttime="20170810 04:26:26.738" status="PASS"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:26:26.741" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-T...</msg>
<status endtime="20170810 04:26:26.741" starttime="20170810 04:26:26.740" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:26:26.742" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20170810 04:26:26.743" starttime="20170810 04:26:26.742" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:26.743" starttime="20170810 04:26:26.741" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:26.743" starttime="20170810 04:26:26.738" status="PASS"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:26:27.118" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170810 04:26:27.118" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:26:27.118" starttime="20170810 04:26:26.743" status="PASS"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:26:27.120" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:26:27.120" starttime="20170810 04:26:27.119" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:26:27.121" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:26:27.121" starttime="20170810 04:26:27.120" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:27.121" starttime="20170810 04:26:27.120" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:27.121" starttime="20170810 04:26:27.119" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:26:27.121" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:26:27.121" starttime="20170810 04:26:27.121" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:26:27.122" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:26:27.122" starttime="20170810 04:26:26.551" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:26:27.122" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:26:27.122" starttime="20170810 04:26:27.122" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170810 04:26:27.123" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:26:27.123" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:26:27.123" level="INFO">${json} = {u'message': u'200 OK', u'status': u'ok', u'data': None}</msg>
<status endtime="20170810 04:26:27.123" starttime="20170810 04:26:27.123" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:27.123" starttime="20170810 04:26:26.550" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170810 04:26:27.124" starttime="20170810 04:26:27.124" status="PASS"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is Host Running</arg>
</arguments>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:26:27.129" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:26:27.129" starttime="20170810 04:26:27.128" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:26:27.130" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:26:27.130" starttime="20170810 04:26:27.130" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:26:27.131" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:26:27.131" starttime="20170810 04:26:27.130" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:26:27.131" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:26:27.131" starttime="20170810 04:26:27.131" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:26:28.285" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:26:28.285" starttime="20170810 04:26:27.132" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:26:28.285" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:26:28.285" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:26:28.285" starttime="20170810 04:26:27.132" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:26:28.286" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:26:28.286" starttime="20170810 04:26:28.286" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:26:28.287" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:26:28.287" starttime="20170810 04:26:28.286" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:28.287" starttime="20170810 04:26:27.128" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:28.287" starttime="20170810 04:26:27.128" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:28.287" starttime="20170810 04:26:27.127" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:26:28.288" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:26:28.288" starttime="20170810 04:26:28.287" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:26:28.290" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:26:28.290" starttime="20170810 04:26:28.289" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:26:28.291" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:26:28.291" starttime="20170810 04:26:28.291" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:28.292" starttime="20170810 04:26:28.290" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:28.292" starttime="20170810 04:26:28.288" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:28.292" starttime="20170810 04:26:28.288" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:26:32.206" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:26:32.206" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:26:32.206" starttime="20170810 04:26:28.292" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:26:32.209" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:26:32.209" starttime="20170810 04:26:32.208" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:26:32.210" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:26:32.210" starttime="20170810 04:26:32.209" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:32.210" starttime="20170810 04:26:32.209" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:32.210" starttime="20170810 04:26:32.208" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:32.210" starttime="20170810 04:26:32.207" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:26:32.210" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:26:32.210" starttime="20170810 04:26:32.210" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:26:32.211" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:26:32.211" starttime="20170810 04:26:27.126" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:26:32.211" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:26:32.211" starttime="20170810 04:26:32.211" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:26:32.212" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:26:32.212" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:26:32.212" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170810 04:26:32.212" starttime="20170810 04:26:32.212" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:26:32.212" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170810 04:26:32.212" starttime="20170810 04:26:27.126" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:26:32.213" level="INFO">${power_state} = Off</msg>
<status endtime="20170810 04:26:32.213" starttime="20170810 04:26:27.125" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170810 04:26:32.213" level="FAIL">On != Off</msg>
<status endtime="20170810 04:26:32.213" starttime="20170810 04:26:32.213" status="FAIL"></status>
</kw>
<status endtime="20170810 04:26:32.214" starttime="20170810 04:26:27.125" status="FAIL"></status>
</kw>
<status endtime="20170810 04:26:32.214" starttime="20170810 04:26:27.125" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:26:42.220" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:26:42.220" starttime="20170810 04:26:42.219" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:26:42.221" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:26:42.221" starttime="20170810 04:26:42.220" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:26:42.221" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:26:42.221" starttime="20170810 04:26:42.221" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:26:42.222" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:26:42.222" starttime="20170810 04:26:42.222" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:26:42.777" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:26:42.777" starttime="20170810 04:26:42.223" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:26:42.777" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:26:42.777" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:26:42.777" starttime="20170810 04:26:42.222" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:26:42.777" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:26:42.778" starttime="20170810 04:26:42.777" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:26:42.778" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:26:42.778" starttime="20170810 04:26:42.778" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:42.778" starttime="20170810 04:26:42.219" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:42.778" starttime="20170810 04:26:42.218" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:42.779" starttime="20170810 04:26:42.218" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:26:42.779" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:26:42.779" starttime="20170810 04:26:42.779" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:26:42.781" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:26:42.781" starttime="20170810 04:26:42.780" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:26:42.782" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:26:42.782" starttime="20170810 04:26:42.782" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:42.783" starttime="20170810 04:26:42.782" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:42.783" starttime="20170810 04:26:42.780" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:42.783" starttime="20170810 04:26:42.779" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:26:43.237" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:26:43.237" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:26:43.237" starttime="20170810 04:26:42.783" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:26:43.239" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:26:43.239" starttime="20170810 04:26:43.239" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:26:43.240" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:26:43.240" starttime="20170810 04:26:43.240" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:43.240" starttime="20170810 04:26:43.239" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:43.241" starttime="20170810 04:26:43.238" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:43.241" starttime="20170810 04:26:43.238" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:26:43.241" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:26:43.241" starttime="20170810 04:26:43.241" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:26:43.241" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:26:43.241" starttime="20170810 04:26:42.217" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:26:43.242" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:26:43.242" starttime="20170810 04:26:43.242" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:26:43.243" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:26:43.243" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:26:43.243" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:26:43.243" starttime="20170810 04:26:43.242" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:26:43.243" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:26:43.243" starttime="20170810 04:26:42.216" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:26:43.243" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:26:43.243" starttime="20170810 04:26:42.216" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:26:43.244" starttime="20170810 04:26:43.244" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:43.244" starttime="20170810 04:26:42.215" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:26:43.248" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:26:43.248" starttime="20170810 04:26:43.247" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:26:43.248" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:26:43.249" starttime="20170810 04:26:43.248" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:26:43.249" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:26:43.249" starttime="20170810 04:26:43.249" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:26:43.250" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:26:43.250" starttime="20170810 04:26:43.249" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:26:43.587" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:26:43.587" starttime="20170810 04:26:43.250" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:26:43.587" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:26:43.587" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:26:43.587" starttime="20170810 04:26:43.250" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:26:43.588" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:26:43.588" starttime="20170810 04:26:43.587" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:26:43.589" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:26:43.589" starttime="20170810 04:26:43.588" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:43.589" starttime="20170810 04:26:43.247" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:43.589" starttime="20170810 04:26:43.246" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:43.589" starttime="20170810 04:26:43.246" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:26:43.590" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:26:43.590" starttime="20170810 04:26:43.589" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:26:43.592" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:26:43.592" starttime="20170810 04:26:43.591" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:26:43.593" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:26:43.593" starttime="20170810 04:26:43.592" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:43.593" starttime="20170810 04:26:43.592" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:43.593" starttime="20170810 04:26:43.590" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:43.593" starttime="20170810 04:26:43.590" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:26:44.247" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:26:44.247" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:26:44.248" starttime="20170810 04:26:43.593" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:26:44.249" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:26:44.249" starttime="20170810 04:26:44.249" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:26:44.250" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:26:44.250" starttime="20170810 04:26:44.250" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:44.251" starttime="20170810 04:26:44.250" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:44.251" starttime="20170810 04:26:44.248" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:44.251" starttime="20170810 04:26:44.248" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:26:44.251" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:26:44.251" starttime="20170810 04:26:44.251" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:26:44.251" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:26:44.251" starttime="20170810 04:26:43.245" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:26:44.252" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:26:44.252" starttime="20170810 04:26:44.252" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:26:44.253" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:26:44.253" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:26:44.253" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:26:44.253" starttime="20170810 04:26:44.252" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:26:44.253" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:26:44.253" starttime="20170810 04:26:43.245" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:26:44.253" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:26:44.253" starttime="20170810 04:26:43.244" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:26:44.254" starttime="20170810 04:26:44.254" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:26:44.261" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:26:44.261" starttime="20170810 04:26:44.260" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:26:44.262" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:26:44.262" starttime="20170810 04:26:44.261" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:26:44.263" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:26:44.263" starttime="20170810 04:26:44.262" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:26:44.263" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:26:44.263" starttime="20170810 04:26:44.263" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:26:44.647" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:26:44.647" starttime="20170810 04:26:44.264" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:26:44.647" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:26:44.647" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:26:44.647" starttime="20170810 04:26:44.264" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:26:44.648" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:26:44.648" starttime="20170810 04:26:44.647" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:26:44.648" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:26:44.648" starttime="20170810 04:26:44.648" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:44.649" starttime="20170810 04:26:44.257" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:44.649" starttime="20170810 04:26:44.257" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:44.649" starttime="20170810 04:26:44.256" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:26:44.649" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:26:44.649" starttime="20170810 04:26:44.649" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:26:44.651" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:26:44.651" starttime="20170810 04:26:44.651" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:26:44.652" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:26:44.652" starttime="20170810 04:26:44.652" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:44.652" starttime="20170810 04:26:44.651" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:44.653" starttime="20170810 04:26:44.650" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:44.653" starttime="20170810 04:26:44.650" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:26:44.719" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:26:44.719" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:26:44.719" starttime="20170810 04:26:44.653" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:26:44.721" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:26:44.721" starttime="20170810 04:26:44.721" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:26:44.722" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:26:44.722" starttime="20170810 04:26:44.722" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:44.723" starttime="20170810 04:26:44.721" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:44.723" starttime="20170810 04:26:44.720" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:44.723" starttime="20170810 04:26:44.720" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:26:44.723" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:26:44.723" starttime="20170810 04:26:44.723" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:26:44.723" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:26:44.723" starttime="20170810 04:26:44.256" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:26:44.724" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:26:44.724" starttime="20170810 04:26:44.724" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:26:44.725" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:26:44.725" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:26:44.725" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170810 04:26:44.725" starttime="20170810 04:26:44.724" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:26:44.725" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:26:44.725" starttime="20170810 04:26:44.255" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:26:44.725" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:26:44.725" starttime="20170810 04:26:44.255" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:26:44.726" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:26:44.726" starttime="20170810 04:26:44.726" status="FAIL"></status>
</kw>
<status endtime="20170810 04:26:44.726" starttime="20170810 04:26:44.254" status="FAIL"></status>
</kw>
<status endtime="20170810 04:26:44.726" starttime="20170810 04:26:42.214" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:26:54.734" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:26:54.735" starttime="20170810 04:26:54.734" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:26:54.735" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:26:54.735" starttime="20170810 04:26:54.735" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:26:54.736" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:26:54.736" starttime="20170810 04:26:54.735" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:26:54.737" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:26:54.737" starttime="20170810 04:26:54.736" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:26:55.243" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:26:55.243" starttime="20170810 04:26:54.737" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:26:55.243" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:26:55.243" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:26:55.243" starttime="20170810 04:26:54.737" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:26:55.244" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:26:55.244" starttime="20170810 04:26:55.244" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:26:55.245" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:26:55.245" starttime="20170810 04:26:55.245" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:55.245" starttime="20170810 04:26:54.733" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:55.245" starttime="20170810 04:26:54.733" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:55.245" starttime="20170810 04:26:54.732" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:26:55.246" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:26:55.246" starttime="20170810 04:26:55.246" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:26:55.248" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:26:55.248" starttime="20170810 04:26:55.247" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:26:55.250" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:26:55.251" starttime="20170810 04:26:55.249" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:55.251" starttime="20170810 04:26:55.248" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:55.252" starttime="20170810 04:26:55.247" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:55.252" starttime="20170810 04:26:55.246" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:26:55.328" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:26:55.329" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:26:55.329" starttime="20170810 04:26:55.253" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:26:55.331" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:26:55.331" starttime="20170810 04:26:55.330" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:26:55.332" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:26:55.332" starttime="20170810 04:26:55.331" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:55.332" starttime="20170810 04:26:55.331" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:55.332" starttime="20170810 04:26:55.330" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:55.332" starttime="20170810 04:26:55.329" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:26:55.332" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:26:55.333" starttime="20170810 04:26:55.332" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:26:55.333" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:26:55.333" starttime="20170810 04:26:54.731" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:26:55.333" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:26:55.333" starttime="20170810 04:26:55.333" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:26:55.334" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:26:55.334" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:26:55.334" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:26:55.334" starttime="20170810 04:26:55.334" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:26:55.334" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:26:55.334" starttime="20170810 04:26:54.730" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:26:55.335" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:26:55.335" starttime="20170810 04:26:54.730" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:26:55.335" starttime="20170810 04:26:55.335" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:55.335" starttime="20170810 04:26:54.730" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:26:55.339" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:26:55.340" starttime="20170810 04:26:55.339" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:26:55.341" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:26:55.341" starttime="20170810 04:26:55.340" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:26:55.341" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:26:55.341" starttime="20170810 04:26:55.341" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:26:55.342" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:26:55.342" starttime="20170810 04:26:55.342" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:26:55.802" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:26:55.802" starttime="20170810 04:26:55.343" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:26:55.802" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:26:55.802" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:26:55.802" starttime="20170810 04:26:55.342" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:26:55.803" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:26:55.803" starttime="20170810 04:26:55.803" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:26:55.804" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:26:55.804" starttime="20170810 04:26:55.803" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:55.804" starttime="20170810 04:26:55.338" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:55.804" starttime="20170810 04:26:55.338" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:55.804" starttime="20170810 04:26:55.337" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:26:55.805" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:26:55.805" starttime="20170810 04:26:55.804" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:26:55.807" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:26:55.807" starttime="20170810 04:26:55.806" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:26:55.808" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:26:55.808" starttime="20170810 04:26:55.808" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:55.808" starttime="20170810 04:26:55.807" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:55.808" starttime="20170810 04:26:55.806" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:55.808" starttime="20170810 04:26:55.805" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:26:56.040" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:26:56.040" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:26:56.040" starttime="20170810 04:26:55.808" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:26:56.042" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:26:56.042" starttime="20170810 04:26:56.041" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:26:56.043" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:26:56.043" starttime="20170810 04:26:56.043" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:56.043" starttime="20170810 04:26:56.042" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:56.043" starttime="20170810 04:26:56.041" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:56.043" starttime="20170810 04:26:56.040" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:26:56.044" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:26:56.044" starttime="20170810 04:26:56.044" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:26:56.044" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:26:56.044" starttime="20170810 04:26:55.337" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:26:56.045" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:26:56.045" starttime="20170810 04:26:56.044" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:26:56.045" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:26:56.045" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:26:56.045" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:26:56.045" starttime="20170810 04:26:56.045" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:26:56.046" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:26:56.046" starttime="20170810 04:26:55.336" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:26:56.046" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:26:56.046" starttime="20170810 04:26:55.336" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:26:56.047" starttime="20170810 04:26:56.046" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:26:56.051" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:26:56.051" starttime="20170810 04:26:56.050" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:26:56.052" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:26:56.052" starttime="20170810 04:26:56.051" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:26:56.052" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:26:56.052" starttime="20170810 04:26:56.052" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:26:56.053" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:26:56.053" starttime="20170810 04:26:56.053" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:26:56.303" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:26:56.304" starttime="20170810 04:26:56.054" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:26:56.304" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:26:56.304" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:26:56.304" starttime="20170810 04:26:56.053" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:26:56.305" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:26:56.305" starttime="20170810 04:26:56.304" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:26:56.305" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:26:56.306" starttime="20170810 04:26:56.305" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:56.306" starttime="20170810 04:26:56.050" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:56.306" starttime="20170810 04:26:56.049" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:56.306" starttime="20170810 04:26:56.049" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:26:56.306" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:26:56.307" starttime="20170810 04:26:56.306" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:26:56.309" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:26:56.309" starttime="20170810 04:26:56.308" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:26:56.310" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:26:56.310" starttime="20170810 04:26:56.309" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:56.310" starttime="20170810 04:26:56.309" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:56.310" starttime="20170810 04:26:56.307" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:56.310" starttime="20170810 04:26:56.307" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:26:56.649" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:26:56.649" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:26:56.649" starttime="20170810 04:26:56.310" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:26:56.651" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:26:56.651" starttime="20170810 04:26:56.651" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:26:56.652" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:26:56.652" starttime="20170810 04:26:56.652" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:56.652" starttime="20170810 04:26:56.651" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:56.652" starttime="20170810 04:26:56.650" status="PASS"></status>
</kw>
<status endtime="20170810 04:26:56.653" starttime="20170810 04:26:56.650" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:26:56.653" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:26:56.653" starttime="20170810 04:26:56.653" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:26:56.653" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:26:56.653" starttime="20170810 04:26:56.048" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:26:56.654" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:26:56.654" starttime="20170810 04:26:56.654" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:26:56.655" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:26:56.655" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:26:56.655" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170810 04:26:56.655" starttime="20170810 04:26:56.654" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:26:56.655" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:26:56.655" starttime="20170810 04:26:56.047" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:26:56.655" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:26:56.655" starttime="20170810 04:26:56.047" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:26:56.656" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:26:56.656" starttime="20170810 04:26:56.656" status="FAIL"></status>
</kw>
<status endtime="20170810 04:26:56.656" starttime="20170810 04:26:56.047" status="FAIL"></status>
</kw>
<status endtime="20170810 04:26:56.657" starttime="20170810 04:26:54.729" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:27:06.662" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:27:06.663" starttime="20170810 04:27:06.662" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:27:06.663" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:27:06.663" starttime="20170810 04:27:06.663" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:27:06.664" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:27:06.664" starttime="20170810 04:27:06.664" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:27:06.665" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:27:06.665" starttime="20170810 04:27:06.664" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:27:07.071" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:27:07.071" starttime="20170810 04:27:06.665" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:27:07.071" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:27:07.071" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:27:07.071" starttime="20170810 04:27:06.665" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:27:07.072" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:27:07.072" starttime="20170810 04:27:07.072" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:27:07.073" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:27:07.073" starttime="20170810 04:27:07.073" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:07.073" starttime="20170810 04:27:06.661" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:07.073" starttime="20170810 04:27:06.661" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:07.073" starttime="20170810 04:27:06.660" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:27:07.074" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:27:07.074" starttime="20170810 04:27:07.074" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:27:07.076" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:27:07.076" starttime="20170810 04:27:07.075" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:27:07.077" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:27:07.077" starttime="20170810 04:27:07.077" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:07.077" starttime="20170810 04:27:07.076" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:07.077" starttime="20170810 04:27:07.075" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:07.077" starttime="20170810 04:27:07.074" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:27:07.441" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:27:07.442" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:27:07.442" starttime="20170810 04:27:07.078" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:27:07.444" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:27:07.444" starttime="20170810 04:27:07.443" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:27:07.444" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:27:07.445" starttime="20170810 04:27:07.444" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:07.445" starttime="20170810 04:27:07.444" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:07.445" starttime="20170810 04:27:07.443" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:07.445" starttime="20170810 04:27:07.442" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:27:07.445" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:27:07.445" starttime="20170810 04:27:07.445" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:27:07.446" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:27:07.446" starttime="20170810 04:27:06.660" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:27:07.446" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:27:07.446" starttime="20170810 04:27:07.446" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:27:07.447" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:27:07.447" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:27:07.447" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:27:07.447" starttime="20170810 04:27:07.447" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:27:07.447" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:27:07.447" starttime="20170810 04:27:06.659" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:27:07.448" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:27:07.448" starttime="20170810 04:27:06.659" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:27:07.448" starttime="20170810 04:27:07.448" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:07.448" starttime="20170810 04:27:06.658" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:27:07.452" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:27:07.453" starttime="20170810 04:27:07.451" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:27:07.453" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:27:07.453" starttime="20170810 04:27:07.453" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:27:07.454" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:27:07.454" starttime="20170810 04:27:07.453" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:27:07.454" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:27:07.454" starttime="20170810 04:27:07.454" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:27:08.104" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:27:08.104" starttime="20170810 04:27:07.455" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:27:08.104" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:27:08.105" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:27:08.105" starttime="20170810 04:27:07.455" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:27:08.105" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:27:08.105" starttime="20170810 04:27:08.105" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:27:08.106" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:27:08.106" starttime="20170810 04:27:08.106" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:08.106" starttime="20170810 04:27:07.451" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:08.106" starttime="20170810 04:27:07.451" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:08.106" starttime="20170810 04:27:07.450" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:27:08.107" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:27:08.107" starttime="20170810 04:27:08.107" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:27:08.109" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:27:08.109" starttime="20170810 04:27:08.108" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:27:08.110" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:27:08.110" starttime="20170810 04:27:08.110" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:08.110" starttime="20170810 04:27:08.109" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:08.110" starttime="20170810 04:27:08.108" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:08.110" starttime="20170810 04:27:08.107" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:27:08.587" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:27:08.587" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:27:08.587" starttime="20170810 04:27:08.111" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:27:08.589" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:27:08.589" starttime="20170810 04:27:08.588" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:27:08.590" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:27:08.590" starttime="20170810 04:27:08.589" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:08.590" starttime="20170810 04:27:08.589" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:08.590" starttime="20170810 04:27:08.588" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:08.590" starttime="20170810 04:27:08.587" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:27:08.590" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:27:08.590" starttime="20170810 04:27:08.590" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:27:08.591" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:27:08.591" starttime="20170810 04:27:07.449" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:27:08.591" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:27:08.591" starttime="20170810 04:27:08.591" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:27:08.592" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:27:08.592" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:27:08.592" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:27:08.592" starttime="20170810 04:27:08.592" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:27:08.592" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:27:08.592" starttime="20170810 04:27:07.449" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:27:08.593" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:27:08.593" starttime="20170810 04:27:07.448" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:27:08.593" starttime="20170810 04:27:08.593" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:27:08.597" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:27:08.598" starttime="20170810 04:27:08.597" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:27:08.598" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:27:08.598" starttime="20170810 04:27:08.598" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:27:08.599" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:27:08.599" starttime="20170810 04:27:08.599" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:27:08.600" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:27:08.600" starttime="20170810 04:27:08.599" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:27:09.059" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:27:09.059" starttime="20170810 04:27:08.601" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:27:09.059" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:27:09.059" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:27:09.059" starttime="20170810 04:27:08.600" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:27:09.060" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:27:09.060" starttime="20170810 04:27:09.059" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:27:09.061" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:27:09.061" starttime="20170810 04:27:09.060" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:09.061" starttime="20170810 04:27:08.597" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:09.061" starttime="20170810 04:27:08.596" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:09.061" starttime="20170810 04:27:08.596" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:27:09.061" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:27:09.062" starttime="20170810 04:27:09.061" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:27:09.064" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:27:09.064" starttime="20170810 04:27:09.063" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:27:09.065" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:27:09.065" starttime="20170810 04:27:09.064" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:09.065" starttime="20170810 04:27:09.064" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:09.065" starttime="20170810 04:27:09.062" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:09.065" starttime="20170810 04:27:09.062" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:27:09.757" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:27:09.757" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:27:09.757" starttime="20170810 04:27:09.065" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:27:09.759" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:27:09.759" starttime="20170810 04:27:09.759" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:27:09.760" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:27:09.760" starttime="20170810 04:27:09.760" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:09.760" starttime="20170810 04:27:09.759" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:09.760" starttime="20170810 04:27:09.758" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:09.760" starttime="20170810 04:27:09.758" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:27:09.761" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:27:09.761" starttime="20170810 04:27:09.761" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:27:09.761" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:27:09.761" starttime="20170810 04:27:08.595" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:27:09.762" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:27:09.762" starttime="20170810 04:27:09.761" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:27:09.762" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:27:09.763" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:27:09.763" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170810 04:27:09.763" starttime="20170810 04:27:09.762" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:27:09.763" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:27:09.763" starttime="20170810 04:27:08.594" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:27:09.763" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:27:09.763" starttime="20170810 04:27:08.594" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:27:09.764" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:27:09.764" starttime="20170810 04:27:09.763" status="FAIL"></status>
</kw>
<status endtime="20170810 04:27:09.764" starttime="20170810 04:27:08.593" status="FAIL"></status>
</kw>
<status endtime="20170810 04:27:09.764" starttime="20170810 04:27:06.657" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:27:19.770" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:27:19.770" starttime="20170810 04:27:19.769" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:27:19.771" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:27:19.771" starttime="20170810 04:27:19.770" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:27:19.771" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:27:19.772" starttime="20170810 04:27:19.771" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:27:19.772" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:27:19.772" starttime="20170810 04:27:19.772" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:27:20.096" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:27:20.096" starttime="20170810 04:27:19.773" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:27:20.097" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:27:20.097" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:27:20.097" starttime="20170810 04:27:19.772" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:27:20.097" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:27:20.097" starttime="20170810 04:27:20.097" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:27:20.098" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:27:20.098" starttime="20170810 04:27:20.098" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:20.098" starttime="20170810 04:27:19.769" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:20.098" starttime="20170810 04:27:19.768" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:20.098" starttime="20170810 04:27:19.768" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:27:20.099" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:27:20.099" starttime="20170810 04:27:20.099" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:27:20.101" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:27:20.101" starttime="20170810 04:27:20.100" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:27:20.102" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:27:20.102" starttime="20170810 04:27:20.102" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:20.102" starttime="20170810 04:27:20.101" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:20.102" starttime="20170810 04:27:20.100" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:20.102" starttime="20170810 04:27:20.099" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:27:20.621" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:27:20.621" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:27:20.621" starttime="20170810 04:27:20.103" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:27:20.623" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:27:20.623" starttime="20170810 04:27:20.622" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:27:20.624" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:27:20.624" starttime="20170810 04:27:20.624" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:20.624" starttime="20170810 04:27:20.623" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:20.624" starttime="20170810 04:27:20.622" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:20.624" starttime="20170810 04:27:20.621" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:27:20.625" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:27:20.625" starttime="20170810 04:27:20.624" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:27:20.625" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:27:20.625" starttime="20170810 04:27:19.767" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:27:20.626" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:27:20.626" starttime="20170810 04:27:20.625" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:27:20.626" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:27:20.626" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:27:20.626" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:27:20.626" starttime="20170810 04:27:20.626" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:27:20.627" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:27:20.627" starttime="20170810 04:27:19.767" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:27:20.627" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:27:20.627" starttime="20170810 04:27:19.766" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:27:20.628" starttime="20170810 04:27:20.627" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:20.628" starttime="20170810 04:27:19.766" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:27:20.631" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:27:20.632" starttime="20170810 04:27:20.631" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:27:20.633" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:27:20.633" starttime="20170810 04:27:20.632" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:27:20.633" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:27:20.633" starttime="20170810 04:27:20.633" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:27:20.634" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:27:20.634" starttime="20170810 04:27:20.633" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:27:21.103" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:27:21.104" starttime="20170810 04:27:20.634" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:27:21.104" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:27:21.104" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:27:21.104" starttime="20170810 04:27:20.634" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:27:21.104" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:27:21.105" starttime="20170810 04:27:21.104" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:27:21.105" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:27:21.105" starttime="20170810 04:27:21.105" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:21.105" starttime="20170810 04:27:20.630" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:21.105" starttime="20170810 04:27:20.630" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:21.106" starttime="20170810 04:27:20.629" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:27:21.106" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:27:21.106" starttime="20170810 04:27:21.106" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:27:21.108" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:27:21.109" starttime="20170810 04:27:21.108" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:27:21.109" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:27:21.110" starttime="20170810 04:27:21.109" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:21.110" starttime="20170810 04:27:21.109" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:21.110" starttime="20170810 04:27:21.107" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:21.110" starttime="20170810 04:27:21.107" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:27:21.769" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:27:21.769" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:27:21.769" starttime="20170810 04:27:21.110" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:27:21.771" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:27:21.771" starttime="20170810 04:27:21.770" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:27:21.772" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:27:21.772" starttime="20170810 04:27:21.772" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:21.772" starttime="20170810 04:27:21.771" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:21.772" starttime="20170810 04:27:21.770" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:21.772" starttime="20170810 04:27:21.769" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:27:21.773" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:27:21.773" starttime="20170810 04:27:21.772" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:27:21.773" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:27:21.773" starttime="20170810 04:27:20.629" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:27:21.773" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:27:21.774" starttime="20170810 04:27:21.773" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:27:21.774" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:27:21.774" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:27:21.774" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:27:21.774" starttime="20170810 04:27:21.774" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:27:21.775" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:27:21.775" starttime="20170810 04:27:20.628" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:27:21.775" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:27:21.775" starttime="20170810 04:27:20.628" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:27:21.775" starttime="20170810 04:27:21.775" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:27:21.782" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:27:21.783" starttime="20170810 04:27:21.782" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:27:21.783" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:27:21.783" starttime="20170810 04:27:21.783" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:27:21.784" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:27:21.784" starttime="20170810 04:27:21.784" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:27:21.785" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:27:21.785" starttime="20170810 04:27:21.784" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:27:22.329" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:27:22.329" starttime="20170810 04:27:21.785" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:27:22.329" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:27:22.329" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:27:22.329" starttime="20170810 04:27:21.785" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:27:22.330" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:27:22.330" starttime="20170810 04:27:22.329" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:27:22.330" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:27:22.330" starttime="20170810 04:27:22.330" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:22.331" starttime="20170810 04:27:21.781" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:22.331" starttime="20170810 04:27:21.781" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:22.331" starttime="20170810 04:27:21.780" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:27:22.331" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:27:22.331" starttime="20170810 04:27:22.331" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:27:22.333" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:27:22.333" starttime="20170810 04:27:22.333" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:27:22.334" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:27:22.364" starttime="20170810 04:27:22.334" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:22.364" starttime="20170810 04:27:22.334" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:22.364" starttime="20170810 04:27:22.332" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:22.364" starttime="20170810 04:27:22.332" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:27:22.746" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:27:22.747" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:27:22.747" starttime="20170810 04:27:22.365" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:27:22.748" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:27:22.748" starttime="20170810 04:27:22.748" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:27:22.749" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:27:22.749" starttime="20170810 04:27:22.749" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:22.749" starttime="20170810 04:27:22.749" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:22.750" starttime="20170810 04:27:22.747" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:22.750" starttime="20170810 04:27:22.747" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:27:22.750" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:27:22.750" starttime="20170810 04:27:22.750" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:27:22.750" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:27:22.750" starttime="20170810 04:27:21.780" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:27:22.751" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:27:22.751" starttime="20170810 04:27:22.751" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:27:22.752" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:27:22.752" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:27:22.752" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170810 04:27:22.752" starttime="20170810 04:27:22.751" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:27:22.752" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:27:22.752" starttime="20170810 04:27:21.776" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:27:22.752" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:27:22.752" starttime="20170810 04:27:21.776" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:27:22.753" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:27:22.753" starttime="20170810 04:27:22.753" status="FAIL"></status>
</kw>
<status endtime="20170810 04:27:22.753" starttime="20170810 04:27:21.776" status="FAIL"></status>
</kw>
<status endtime="20170810 04:27:22.753" starttime="20170810 04:27:19.765" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:27:32.759" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:27:32.760" starttime="20170810 04:27:32.759" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:27:32.761" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:27:32.761" starttime="20170810 04:27:32.760" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:27:32.761" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:27:32.761" starttime="20170810 04:27:32.761" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:27:32.762" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:27:32.762" starttime="20170810 04:27:32.762" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:27:33.236" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:27:33.236" starttime="20170810 04:27:32.763" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:27:33.236" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:27:33.236" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:27:33.236" starttime="20170810 04:27:32.762" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:27:33.237" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:27:33.237" starttime="20170810 04:27:33.236" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:27:33.237" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:27:33.238" starttime="20170810 04:27:33.237" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:33.238" starttime="20170810 04:27:32.758" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:33.238" starttime="20170810 04:27:32.758" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:33.238" starttime="20170810 04:27:32.757" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:27:33.239" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:27:33.239" starttime="20170810 04:27:33.238" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:27:33.241" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:27:33.241" starttime="20170810 04:27:33.240" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:27:33.242" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:27:33.242" starttime="20170810 04:27:33.241" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:33.242" starttime="20170810 04:27:33.241" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:33.242" starttime="20170810 04:27:33.239" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:33.242" starttime="20170810 04:27:33.239" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:27:33.888" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:27:33.888" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:27:33.888" starttime="20170810 04:27:33.242" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:27:33.890" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:27:33.890" starttime="20170810 04:27:33.890" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:27:33.891" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:27:33.891" starttime="20170810 04:27:33.891" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:33.892" starttime="20170810 04:27:33.891" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:33.892" starttime="20170810 04:27:33.889" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:33.892" starttime="20170810 04:27:33.889" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:27:33.892" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:27:33.892" starttime="20170810 04:27:33.892" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:27:33.892" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:27:33.892" starttime="20170810 04:27:32.757" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:27:33.893" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:27:33.893" starttime="20170810 04:27:33.893" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:27:33.894" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:27:33.894" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:27:33.894" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:27:33.894" starttime="20170810 04:27:33.893" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:27:33.894" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:27:33.894" starttime="20170810 04:27:32.756" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:27:33.894" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:27:33.894" starttime="20170810 04:27:32.755" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:27:33.895" starttime="20170810 04:27:33.895" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:33.895" starttime="20170810 04:27:32.755" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:27:33.899" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:27:33.899" starttime="20170810 04:27:33.899" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:27:33.900" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:27:33.900" starttime="20170810 04:27:33.900" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:27:33.901" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:27:33.901" starttime="20170810 04:27:33.900" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:27:33.901" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:27:33.901" starttime="20170810 04:27:33.901" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:27:34.238" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:27:34.238" starttime="20170810 04:27:33.902" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:27:34.239" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:27:34.239" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:27:34.239" starttime="20170810 04:27:33.902" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:27:34.239" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:27:34.239" starttime="20170810 04:27:34.239" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:27:34.240" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:27:34.240" starttime="20170810 04:27:34.240" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:34.240" starttime="20170810 04:27:33.898" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:34.240" starttime="20170810 04:27:33.898" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:34.240" starttime="20170810 04:27:33.897" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:27:34.241" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:27:34.241" starttime="20170810 04:27:34.241" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:27:34.243" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:27:34.243" starttime="20170810 04:27:34.242" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:27:34.244" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:27:34.244" starttime="20170810 04:27:34.244" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:34.244" starttime="20170810 04:27:34.243" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:34.244" starttime="20170810 04:27:34.242" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:34.244" starttime="20170810 04:27:34.241" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:27:34.977" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:27:34.977" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:27:34.977" starttime="20170810 04:27:34.245" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:27:34.979" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:27:34.979" starttime="20170810 04:27:34.978" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:27:34.980" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:27:34.980" starttime="20170810 04:27:34.980" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:34.980" starttime="20170810 04:27:34.979" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:34.980" starttime="20170810 04:27:34.978" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:34.980" starttime="20170810 04:27:34.977" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:27:34.981" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:27:34.981" starttime="20170810 04:27:34.980" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:27:34.981" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:27:34.981" starttime="20170810 04:27:33.896" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:27:34.982" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:27:34.982" starttime="20170810 04:27:34.981" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:27:34.983" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:27:34.983" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:27:34.983" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:27:34.983" starttime="20170810 04:27:34.982" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:27:34.983" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:27:34.983" starttime="20170810 04:27:33.896" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:27:34.984" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:27:34.984" starttime="20170810 04:27:33.895" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:27:34.985" starttime="20170810 04:27:34.984" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:27:34.990" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:27:34.991" starttime="20170810 04:27:34.990" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:27:34.992" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:27:34.992" starttime="20170810 04:27:34.991" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:27:34.992" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:27:34.992" starttime="20170810 04:27:34.992" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:27:34.993" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:27:34.993" starttime="20170810 04:27:34.992" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:27:35.413" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:27:35.413" starttime="20170810 04:27:34.994" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:27:35.413" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:27:35.413" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:27:35.413" starttime="20170810 04:27:34.993" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:27:35.414" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:27:35.414" starttime="20170810 04:27:35.414" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:27:35.415" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:27:35.415" starttime="20170810 04:27:35.414" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:35.415" starttime="20170810 04:27:34.989" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:35.415" starttime="20170810 04:27:34.988" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:35.415" starttime="20170810 04:27:34.988" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:27:35.416" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:27:35.416" starttime="20170810 04:27:35.416" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:27:35.418" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:27:35.418" starttime="20170810 04:27:35.417" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:27:35.419" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:27:35.419" starttime="20170810 04:27:35.419" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:35.419" starttime="20170810 04:27:35.418" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:35.419" starttime="20170810 04:27:35.417" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:35.419" starttime="20170810 04:27:35.416" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:27:35.825" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:27:35.825" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:27:35.825" starttime="20170810 04:27:35.420" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:27:35.827" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:27:35.827" starttime="20170810 04:27:35.827" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:27:35.828" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:27:35.828" starttime="20170810 04:27:35.828" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:35.828" starttime="20170810 04:27:35.827" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:35.828" starttime="20170810 04:27:35.826" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:35.828" starttime="20170810 04:27:35.825" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:27:35.829" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:27:35.829" starttime="20170810 04:27:35.829" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:27:35.829" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:27:35.829" starttime="20170810 04:27:34.987" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:27:35.830" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:27:35.830" starttime="20170810 04:27:35.829" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:27:35.830" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:27:35.830" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:27:35.830" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170810 04:27:35.831" starttime="20170810 04:27:35.830" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:27:35.831" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:27:35.831" starttime="20170810 04:27:34.986" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:27:35.831" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:27:35.831" starttime="20170810 04:27:34.985" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:27:35.832" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:27:35.832" starttime="20170810 04:27:35.831" status="FAIL"></status>
</kw>
<status endtime="20170810 04:27:35.832" starttime="20170810 04:27:34.985" status="FAIL"></status>
</kw>
<status endtime="20170810 04:27:35.832" starttime="20170810 04:27:32.754" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:27:45.838" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:27:45.839" starttime="20170810 04:27:45.838" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:27:45.839" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:27:45.839" starttime="20170810 04:27:45.839" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:27:45.840" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:27:45.840" starttime="20170810 04:27:45.840" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:27:45.841" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:27:45.841" starttime="20170810 04:27:45.840" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:27:46.464" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:27:46.464" starttime="20170810 04:27:45.841" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:27:46.464" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:27:46.465" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:27:46.465" starttime="20170810 04:27:45.841" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:27:46.465" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:27:46.465" starttime="20170810 04:27:46.465" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:27:46.466" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:27:46.466" starttime="20170810 04:27:46.466" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:46.466" starttime="20170810 04:27:45.838" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:46.466" starttime="20170810 04:27:45.837" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:46.466" starttime="20170810 04:27:45.836" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:27:46.467" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:27:46.467" starttime="20170810 04:27:46.467" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:27:46.469" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:27:46.469" starttime="20170810 04:27:46.468" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:27:46.470" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:27:46.470" starttime="20170810 04:27:46.470" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:46.470" starttime="20170810 04:27:46.469" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:46.470" starttime="20170810 04:27:46.468" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:46.470" starttime="20170810 04:27:46.467" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:27:47.073" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:27:47.074" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:27:47.074" starttime="20170810 04:27:46.471" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:27:47.076" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:27:47.076" starttime="20170810 04:27:47.075" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:27:47.077" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:27:47.077" starttime="20170810 04:27:47.077" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:47.077" starttime="20170810 04:27:47.076" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:47.077" starttime="20170810 04:27:47.074" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:47.077" starttime="20170810 04:27:47.074" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:27:47.078" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:27:47.078" starttime="20170810 04:27:47.077" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:27:47.078" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:27:47.078" starttime="20170810 04:27:45.835" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:27:47.078" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:27:47.079" starttime="20170810 04:27:47.078" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:27:47.079" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:27:47.079" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:27:47.079" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:27:47.079" starttime="20170810 04:27:47.079" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:27:47.080" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:27:47.080" starttime="20170810 04:27:45.835" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:27:47.080" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:27:47.080" starttime="20170810 04:27:45.834" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:27:47.080" starttime="20170810 04:27:47.080" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:47.081" starttime="20170810 04:27:45.834" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:27:47.084" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:27:47.084" starttime="20170810 04:27:47.084" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:27:47.085" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:27:47.085" starttime="20170810 04:27:47.085" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:27:47.086" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:27:47.086" starttime="20170810 04:27:47.085" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:27:47.086" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:27:47.086" starttime="20170810 04:27:47.086" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:27:47.533" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:27:47.533" starttime="20170810 04:27:47.087" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:27:47.533" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:27:47.533" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:27:47.534" starttime="20170810 04:27:47.087" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:27:47.534" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:27:47.534" starttime="20170810 04:27:47.534" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:27:47.535" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:27:47.535" starttime="20170810 04:27:47.535" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:47.535" starttime="20170810 04:27:47.083" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:47.535" starttime="20170810 04:27:47.083" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:47.535" starttime="20170810 04:27:47.082" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:27:47.536" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:27:47.536" starttime="20170810 04:27:47.536" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:27:47.539" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:27:47.539" starttime="20170810 04:27:47.537" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:27:47.539" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:27:47.540" starttime="20170810 04:27:47.539" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:47.540" starttime="20170810 04:27:47.539" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:47.540" starttime="20170810 04:27:47.537" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:47.540" starttime="20170810 04:27:47.536" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:27:48.124" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:27:48.124" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:27:48.124" starttime="20170810 04:27:47.541" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:27:48.126" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:27:48.126" starttime="20170810 04:27:48.126" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:27:48.127" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:27:48.127" starttime="20170810 04:27:48.127" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:48.127" starttime="20170810 04:27:48.126" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:48.127" starttime="20170810 04:27:48.125" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:48.127" starttime="20170810 04:27:48.124" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:27:48.128" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:27:48.128" starttime="20170810 04:27:48.128" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:27:48.128" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:27:48.128" starttime="20170810 04:27:47.082" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:27:48.129" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:27:48.129" starttime="20170810 04:27:48.128" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:27:48.129" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:27:48.129" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:27:48.130" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:27:48.130" starttime="20170810 04:27:48.129" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:27:48.130" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:27:48.130" starttime="20170810 04:27:47.081" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:27:48.130" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:27:48.130" starttime="20170810 04:27:47.081" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:27:48.131" starttime="20170810 04:27:48.131" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:27:48.135" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:27:48.135" starttime="20170810 04:27:48.134" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:27:48.135" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:27:48.136" starttime="20170810 04:27:48.135" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:27:48.136" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:27:48.136" starttime="20170810 04:27:48.136" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:27:48.138" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:27:48.138" starttime="20170810 04:27:48.137" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:27:48.545" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:27:48.545" starttime="20170810 04:27:48.138" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:27:48.545" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:27:48.545" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:27:48.545" starttime="20170810 04:27:48.138" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:27:48.546" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:27:48.546" starttime="20170810 04:27:48.546" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:27:48.547" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:27:48.547" starttime="20170810 04:27:48.546" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:48.547" starttime="20170810 04:27:48.134" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:48.547" starttime="20170810 04:27:48.133" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:48.547" starttime="20170810 04:27:48.133" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:27:48.548" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:27:48.548" starttime="20170810 04:27:48.547" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:27:48.550" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:27:48.550" starttime="20170810 04:27:48.549" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:27:48.551" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:27:48.551" starttime="20170810 04:27:48.551" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:48.551" starttime="20170810 04:27:48.550" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:48.551" starttime="20170810 04:27:48.549" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:48.551" starttime="20170810 04:27:48.548" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:27:49.225" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:27:49.225" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:27:49.225" starttime="20170810 04:27:48.552" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:27:49.227" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:27:49.227" starttime="20170810 04:27:49.227" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:27:49.228" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:27:49.228" starttime="20170810 04:27:49.228" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:49.228" starttime="20170810 04:27:49.227" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:49.229" starttime="20170810 04:27:49.226" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:49.229" starttime="20170810 04:27:49.226" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:27:49.229" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:27:49.229" starttime="20170810 04:27:49.229" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:27:49.229" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:27:49.229" starttime="20170810 04:27:48.132" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:27:49.230" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:27:49.230" starttime="20170810 04:27:49.230" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:27:49.230" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:27:49.231" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:27:49.231" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170810 04:27:49.231" starttime="20170810 04:27:49.230" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:27:49.231" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:27:49.231" starttime="20170810 04:27:48.132" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:27:49.231" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:27:49.231" starttime="20170810 04:27:48.131" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:27:49.232" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:27:49.232" starttime="20170810 04:27:49.231" status="FAIL"></status>
</kw>
<status endtime="20170810 04:27:49.232" starttime="20170810 04:27:48.131" status="FAIL"></status>
</kw>
<status endtime="20170810 04:27:49.232" starttime="20170810 04:27:45.833" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:27:59.239" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:27:59.239" starttime="20170810 04:27:59.238" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:27:59.240" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:27:59.240" starttime="20170810 04:27:59.240" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:27:59.240" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:27:59.240" starttime="20170810 04:27:59.240" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:27:59.241" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:27:59.241" starttime="20170810 04:27:59.241" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:27:59.509" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:27:59.509" starttime="20170810 04:27:59.242" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:27:59.509" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:27:59.510" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:27:59.510" starttime="20170810 04:27:59.242" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:27:59.510" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:27:59.510" starttime="20170810 04:27:59.510" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:27:59.511" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:27:59.511" starttime="20170810 04:27:59.511" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:59.511" starttime="20170810 04:27:59.238" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:59.511" starttime="20170810 04:27:59.237" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:59.511" starttime="20170810 04:27:59.237" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:27:59.512" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:27:59.512" starttime="20170810 04:27:59.512" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:27:59.514" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:27:59.514" starttime="20170810 04:27:59.513" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:27:59.515" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:27:59.515" starttime="20170810 04:27:59.515" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:59.515" starttime="20170810 04:27:59.514" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:59.515" starttime="20170810 04:27:59.513" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:59.515" starttime="20170810 04:27:59.512" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:27:59.598" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:27:59.598" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:27:59.598" starttime="20170810 04:27:59.516" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:27:59.600" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:27:59.600" starttime="20170810 04:27:59.600" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:27:59.601" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:27:59.601" starttime="20170810 04:27:59.601" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:59.601" starttime="20170810 04:27:59.600" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:59.601" starttime="20170810 04:27:59.599" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:59.601" starttime="20170810 04:27:59.599" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:27:59.602" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:27:59.602" starttime="20170810 04:27:59.602" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:27:59.602" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:27:59.602" starttime="20170810 04:27:59.235" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:27:59.603" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:27:59.603" starttime="20170810 04:27:59.602" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:27:59.603" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:27:59.603" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:27:59.603" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:27:59.604" starttime="20170810 04:27:59.603" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:27:59.604" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:27:59.604" starttime="20170810 04:27:59.235" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:27:59.604" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:27:59.604" starttime="20170810 04:27:59.234" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:27:59.605" starttime="20170810 04:27:59.604" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:59.605" starttime="20170810 04:27:59.234" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:27:59.609" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:27:59.609" starttime="20170810 04:27:59.609" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:27:59.610" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:27:59.610" starttime="20170810 04:27:59.609" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:27:59.610" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:27:59.610" starttime="20170810 04:27:59.610" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:27:59.611" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:27:59.611" starttime="20170810 04:27:59.611" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:27:59.892" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:27:59.892" starttime="20170810 04:27:59.612" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:27:59.893" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:27:59.893" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:27:59.893" starttime="20170810 04:27:59.611" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:27:59.893" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:27:59.893" starttime="20170810 04:27:59.893" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:27:59.894" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:27:59.894" starttime="20170810 04:27:59.894" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:59.894" starttime="20170810 04:27:59.608" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:59.894" starttime="20170810 04:27:59.608" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:59.894" starttime="20170810 04:27:59.606" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:27:59.895" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:27:59.895" starttime="20170810 04:27:59.895" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:27:59.897" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:27:59.897" starttime="20170810 04:27:59.896" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:27:59.898" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:27:59.898" starttime="20170810 04:27:59.898" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:59.898" starttime="20170810 04:27:59.897" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:59.898" starttime="20170810 04:27:59.896" status="PASS"></status>
</kw>
<status endtime="20170810 04:27:59.899" starttime="20170810 04:27:59.895" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:28:00.157" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:28:00.157" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:28:00.157" starttime="20170810 04:27:59.899" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:28:00.159" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:28:00.159" starttime="20170810 04:28:00.158" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:28:00.160" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:28:00.160" starttime="20170810 04:28:00.160" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:00.160" starttime="20170810 04:28:00.159" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:00.160" starttime="20170810 04:28:00.158" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:00.160" starttime="20170810 04:28:00.157" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:28:00.161" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:28:00.161" starttime="20170810 04:28:00.160" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:28:00.161" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:28:00.161" starttime="20170810 04:27:59.606" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:28:00.161" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:28:00.162" starttime="20170810 04:28:00.161" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:28:00.162" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:28:00.162" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:28:00.162" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:28:00.162" starttime="20170810 04:28:00.162" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:28:00.163" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:28:00.163" starttime="20170810 04:27:59.605" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:28:00.163" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:28:00.163" starttime="20170810 04:27:59.605" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:28:00.164" starttime="20170810 04:28:00.163" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:28:00.171" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:28:00.171" starttime="20170810 04:28:00.170" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:28:00.172" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:28:00.172" starttime="20170810 04:28:00.172" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:28:00.173" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:28:00.173" starttime="20170810 04:28:00.173" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:28:00.174" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:28:00.174" starttime="20170810 04:28:00.174" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:28:00.625" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:28:00.625" starttime="20170810 04:28:00.175" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:28:00.626" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:28:00.626" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:28:00.626" starttime="20170810 04:28:00.174" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:28:00.627" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:28:00.627" starttime="20170810 04:28:00.626" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:28:00.628" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:28:00.628" starttime="20170810 04:28:00.627" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:00.628" starttime="20170810 04:28:00.167" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:00.629" starttime="20170810 04:28:00.166" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:00.629" starttime="20170810 04:28:00.166" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:28:00.630" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:28:00.630" starttime="20170810 04:28:00.629" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:28:00.632" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:28:00.632" starttime="20170810 04:28:00.631" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:28:00.633" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:28:00.633" starttime="20170810 04:28:00.633" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:00.633" starttime="20170810 04:28:00.632" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:00.633" starttime="20170810 04:28:00.631" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:00.633" starttime="20170810 04:28:00.630" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:28:00.759" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:28:00.759" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:28:00.759" starttime="20170810 04:28:00.634" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:28:00.761" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:28:00.761" starttime="20170810 04:28:00.761" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:28:00.762" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:28:00.762" starttime="20170810 04:28:00.762" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:00.763" starttime="20170810 04:28:00.761" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:00.763" starttime="20170810 04:28:00.760" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:00.763" starttime="20170810 04:28:00.760" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:28:00.763" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:28:00.763" starttime="20170810 04:28:00.763" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:28:00.763" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:28:00.763" starttime="20170810 04:28:00.165" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:28:00.764" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:28:00.764" starttime="20170810 04:28:00.764" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:28:00.765" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:28:00.765" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:28:00.765" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170810 04:28:00.765" starttime="20170810 04:28:00.764" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:28:00.765" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:28:00.765" starttime="20170810 04:28:00.164" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:28:00.765" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:28:00.765" starttime="20170810 04:28:00.164" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:28:00.766" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:28:00.766" starttime="20170810 04:28:00.766" status="FAIL"></status>
</kw>
<status endtime="20170810 04:28:00.766" starttime="20170810 04:28:00.164" status="FAIL"></status>
</kw>
<status endtime="20170810 04:28:00.767" starttime="20170810 04:27:59.233" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:28:10.772" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:28:10.773" starttime="20170810 04:28:10.772" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:28:10.773" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:28:10.773" starttime="20170810 04:28:10.773" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:28:10.774" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:28:10.774" starttime="20170810 04:28:10.773" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:28:10.774" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:28:10.774" starttime="20170810 04:28:10.774" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:28:11.008" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:28:11.008" starttime="20170810 04:28:10.775" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:28:11.008" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:28:11.009" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:28:11.009" starttime="20170810 04:28:10.775" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:28:11.009" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:28:11.009" starttime="20170810 04:28:11.009" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:28:11.010" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:28:11.010" starttime="20170810 04:28:11.010" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:11.010" starttime="20170810 04:28:10.771" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:11.010" starttime="20170810 04:28:10.771" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:11.010" starttime="20170810 04:28:10.770" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:28:11.011" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:28:11.011" starttime="20170810 04:28:11.011" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:28:11.013" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:28:11.013" starttime="20170810 04:28:11.012" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:28:11.014" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:28:11.014" starttime="20170810 04:28:11.014" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:11.014" starttime="20170810 04:28:11.013" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:11.014" starttime="20170810 04:28:11.012" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:11.014" starttime="20170810 04:28:11.011" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:28:11.820" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:28:11.821" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:28:11.821" starttime="20170810 04:28:11.015" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:28:11.823" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:28:11.823" starttime="20170810 04:28:11.822" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:28:11.823" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:28:11.824" starttime="20170810 04:28:11.823" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:11.824" starttime="20170810 04:28:11.823" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:11.824" starttime="20170810 04:28:11.822" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:11.824" starttime="20170810 04:28:11.821" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:28:11.824" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:28:11.824" starttime="20170810 04:28:11.824" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:28:11.825" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:28:11.825" starttime="20170810 04:28:10.769" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:28:11.825" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:28:11.825" starttime="20170810 04:28:11.825" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:28:11.826" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:28:11.826" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:28:11.826" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:28:11.826" starttime="20170810 04:28:11.825" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:28:11.826" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:28:11.826" starttime="20170810 04:28:10.769" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:28:11.827" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:28:11.827" starttime="20170810 04:28:10.768" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:28:11.827" starttime="20170810 04:28:11.827" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:11.827" starttime="20170810 04:28:10.768" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:28:11.831" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:28:11.832" starttime="20170810 04:28:11.830" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:28:11.832" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:28:11.832" starttime="20170810 04:28:11.832" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:28:11.833" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:28:11.833" starttime="20170810 04:28:11.832" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:28:11.833" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:28:11.834" starttime="20170810 04:28:11.833" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:28:12.562" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:28:12.562" starttime="20170810 04:28:11.834" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:28:12.562" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:28:12.562" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:28:12.562" starttime="20170810 04:28:11.834" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:28:12.563" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:28:12.563" starttime="20170810 04:28:12.562" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:28:12.564" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:28:12.564" starttime="20170810 04:28:12.563" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:12.564" starttime="20170810 04:28:11.830" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:12.564" starttime="20170810 04:28:11.830" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:12.564" starttime="20170810 04:28:11.829" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:28:12.565" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:28:12.565" starttime="20170810 04:28:12.564" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:28:12.567" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:28:12.567" starttime="20170810 04:28:12.566" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:28:12.568" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:28:12.568" starttime="20170810 04:28:12.567" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:12.568" starttime="20170810 04:28:12.567" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:12.568" starttime="20170810 04:28:12.565" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:12.568" starttime="20170810 04:28:12.565" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:28:13.619" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:28:13.619" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:28:13.619" starttime="20170810 04:28:12.568" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:28:13.621" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:28:13.621" starttime="20170810 04:28:13.620" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:28:13.622" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:28:13.622" starttime="20170810 04:28:13.621" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:13.622" starttime="20170810 04:28:13.621" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:13.622" starttime="20170810 04:28:13.620" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:13.622" starttime="20170810 04:28:13.619" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:28:13.623" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:28:13.623" starttime="20170810 04:28:13.622" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:28:13.623" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:28:13.623" starttime="20170810 04:28:11.828" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:28:13.623" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:28:13.624" starttime="20170810 04:28:13.623" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:28:13.624" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:28:13.624" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:28:13.624" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:28:13.624" starttime="20170810 04:28:13.624" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:28:13.625" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:28:13.625" starttime="20170810 04:28:11.828" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:28:13.625" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:28:13.625" starttime="20170810 04:28:11.827" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:28:13.625" starttime="20170810 04:28:13.625" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:28:13.630" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:28:13.630" starttime="20170810 04:28:13.629" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:28:13.631" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:28:13.631" starttime="20170810 04:28:13.630" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:28:13.631" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:28:13.631" starttime="20170810 04:28:13.631" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:28:13.632" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:28:13.632" starttime="20170810 04:28:13.631" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:28:14.035" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:28:14.035" starttime="20170810 04:28:13.633" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:28:14.035" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:28:14.035" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:28:14.035" starttime="20170810 04:28:13.632" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:28:14.036" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:28:14.036" starttime="20170810 04:28:14.036" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:28:14.037" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:28:14.037" starttime="20170810 04:28:14.036" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:14.037" starttime="20170810 04:28:13.629" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:14.037" starttime="20170810 04:28:13.628" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:14.037" starttime="20170810 04:28:13.628" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:28:14.038" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:28:14.038" starttime="20170810 04:28:14.037" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:28:14.040" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:28:14.040" starttime="20170810 04:28:14.039" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:28:14.041" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:28:14.041" starttime="20170810 04:28:14.041" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:14.041" starttime="20170810 04:28:14.040" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:14.041" starttime="20170810 04:28:14.039" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:14.041" starttime="20170810 04:28:14.038" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:28:14.622" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:28:14.622" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:28:14.622" starttime="20170810 04:28:14.042" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:28:14.624" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:28:14.624" starttime="20170810 04:28:14.623" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:28:14.625" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:28:14.625" starttime="20170810 04:28:14.624" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:14.625" starttime="20170810 04:28:14.624" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:14.625" starttime="20170810 04:28:14.623" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:14.625" starttime="20170810 04:28:14.622" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:28:14.625" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:28:14.626" starttime="20170810 04:28:14.625" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:28:14.626" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:28:14.626" starttime="20170810 04:28:13.627" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:28:14.626" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:28:14.626" starttime="20170810 04:28:14.626" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:28:14.627" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:28:14.627" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:28:14.627" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170810 04:28:14.627" starttime="20170810 04:28:14.627" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:28:14.627" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:28:14.628" starttime="20170810 04:28:13.626" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:28:14.628" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:28:14.628" starttime="20170810 04:28:13.626" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:28:14.628" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:28:14.628" starttime="20170810 04:28:14.628" status="FAIL"></status>
</kw>
<status endtime="20170810 04:28:14.629" starttime="20170810 04:28:13.626" status="FAIL"></status>
</kw>
<status endtime="20170810 04:28:14.629" starttime="20170810 04:28:10.767" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:28:24.638" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:28:24.638" starttime="20170810 04:28:24.638" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:28:24.639" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:28:24.639" starttime="20170810 04:28:24.639" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:28:24.640" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:28:24.640" starttime="20170810 04:28:24.639" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:28:24.640" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:28:24.640" starttime="20170810 04:28:24.640" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:28:25.074" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:28:25.074" starttime="20170810 04:28:24.641" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:28:25.074" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:28:25.074" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:28:25.074" starttime="20170810 04:28:24.641" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:28:25.075" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:28:25.075" starttime="20170810 04:28:25.075" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:28:25.076" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:28:25.076" starttime="20170810 04:28:25.075" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:25.076" starttime="20170810 04:28:24.637" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:25.076" starttime="20170810 04:28:24.636" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:25.076" starttime="20170810 04:28:24.635" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:28:25.077" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:28:25.077" starttime="20170810 04:28:25.076" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:28:25.079" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:28:25.079" starttime="20170810 04:28:25.078" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:28:25.080" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:28:25.080" starttime="20170810 04:28:25.080" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:25.080" starttime="20170810 04:28:25.079" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:25.080" starttime="20170810 04:28:25.078" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:25.080" starttime="20170810 04:28:25.077" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:28:25.334" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:28:25.334" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:28:25.334" starttime="20170810 04:28:25.081" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:28:25.336" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:28:25.336" starttime="20170810 04:28:25.335" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:28:25.337" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:28:25.337" starttime="20170810 04:28:25.337" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:25.337" starttime="20170810 04:28:25.336" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:25.337" starttime="20170810 04:28:25.335" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:25.337" starttime="20170810 04:28:25.334" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:28:25.338" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:28:25.338" starttime="20170810 04:28:25.337" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:28:25.338" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:28:25.338" starttime="20170810 04:28:24.634" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:28:25.338" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:28:25.339" starttime="20170810 04:28:25.338" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:28:25.339" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:28:25.339" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:28:25.339" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:28:25.339" starttime="20170810 04:28:25.339" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:28:25.340" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:28:25.340" starttime="20170810 04:28:24.634" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:28:25.340" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:28:25.340" starttime="20170810 04:28:24.633" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:28:25.340" starttime="20170810 04:28:25.340" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:25.341" starttime="20170810 04:28:24.633" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:28:25.344" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:28:25.345" starttime="20170810 04:28:25.344" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:28:25.345" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:28:25.345" starttime="20170810 04:28:25.345" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:28:25.346" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:28:25.346" starttime="20170810 04:28:25.346" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:28:25.347" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:28:25.347" starttime="20170810 04:28:25.346" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:28:25.595" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:28:25.595" starttime="20170810 04:28:25.348" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:28:25.595" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:28:25.595" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:28:25.595" starttime="20170810 04:28:25.347" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:28:25.596" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:28:25.596" starttime="20170810 04:28:25.595" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:28:25.597" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:28:25.597" starttime="20170810 04:28:25.596" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:25.597" starttime="20170810 04:28:25.343" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:25.597" starttime="20170810 04:28:25.343" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:25.597" starttime="20170810 04:28:25.342" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:28:25.598" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:28:25.598" starttime="20170810 04:28:25.597" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:28:25.600" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:28:25.600" starttime="20170810 04:28:25.599" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:28:25.601" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:28:25.601" starttime="20170810 04:28:25.600" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:25.601" starttime="20170810 04:28:25.600" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:25.601" starttime="20170810 04:28:25.598" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:25.601" starttime="20170810 04:28:25.598" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:28:25.722" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:28:25.722" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:28:25.722" starttime="20170810 04:28:25.601" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:28:25.724" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:28:25.724" starttime="20170810 04:28:25.723" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:28:25.725" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:28:25.725" starttime="20170810 04:28:25.724" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:25.725" starttime="20170810 04:28:25.724" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:25.725" starttime="20170810 04:28:25.723" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:25.725" starttime="20170810 04:28:25.722" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:28:25.725" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:28:25.726" starttime="20170810 04:28:25.725" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:28:25.726" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:28:25.726" starttime="20170810 04:28:25.342" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:28:25.726" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:28:25.726" starttime="20170810 04:28:25.726" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:28:25.727" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:28:25.727" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:28:25.727" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:28:25.727" starttime="20170810 04:28:25.727" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:28:25.727" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:28:25.728" starttime="20170810 04:28:25.341" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:28:25.728" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:28:25.728" starttime="20170810 04:28:25.341" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:28:25.728" starttime="20170810 04:28:25.728" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:28:25.733" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:28:25.733" starttime="20170810 04:28:25.732" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:28:25.733" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:28:25.734" starttime="20170810 04:28:25.733" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:28:25.734" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:28:25.734" starttime="20170810 04:28:25.734" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:28:25.735" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:28:25.735" starttime="20170810 04:28:25.734" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:28:25.969" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:28:25.969" starttime="20170810 04:28:25.735" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:28:25.969" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:28:25.969" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:28:25.969" starttime="20170810 04:28:25.735" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:28:25.970" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:28:25.970" starttime="20170810 04:28:25.969" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:28:25.970" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:28:25.971" starttime="20170810 04:28:25.970" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:25.971" starttime="20170810 04:28:25.732" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:25.971" starttime="20170810 04:28:25.731" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:25.971" starttime="20170810 04:28:25.731" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:28:25.971" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:28:25.971" starttime="20170810 04:28:25.971" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:28:25.974" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:28:25.974" starttime="20170810 04:28:25.973" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:28:25.974" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:28:25.975" starttime="20170810 04:28:25.974" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:25.975" starttime="20170810 04:28:25.974" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:25.975" starttime="20170810 04:28:25.972" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:25.975" starttime="20170810 04:28:25.972" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:28:26.042" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:28:26.042" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:28:26.042" starttime="20170810 04:28:25.975" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:28:26.044" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:28:26.044" starttime="20170810 04:28:26.043" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:28:26.046" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:28:26.046" starttime="20170810 04:28:26.045" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:26.046" starttime="20170810 04:28:26.044" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:26.046" starttime="20170810 04:28:26.043" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:26.046" starttime="20170810 04:28:26.043" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:28:26.047" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:28:26.047" starttime="20170810 04:28:26.046" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:28:26.047" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:28:26.047" starttime="20170810 04:28:25.730" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:28:26.048" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:28:26.048" starttime="20170810 04:28:26.047" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:28:26.048" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:28:26.048" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:28:26.048" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170810 04:28:26.048" starttime="20170810 04:28:26.048" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:28:26.049" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:28:26.049" starttime="20170810 04:28:25.729" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:28:26.049" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:28:26.049" starttime="20170810 04:28:25.729" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:28:26.049" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:28:26.050" starttime="20170810 04:28:26.049" status="FAIL"></status>
</kw>
<status endtime="20170810 04:28:26.050" starttime="20170810 04:28:25.729" status="FAIL"></status>
</kw>
<status endtime="20170810 04:28:26.050" starttime="20170810 04:28:24.630" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:28:36.055" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:28:36.056" starttime="20170810 04:28:36.055" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:28:36.056" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:28:36.056" starttime="20170810 04:28:36.056" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:28:36.057" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:28:36.057" starttime="20170810 04:28:36.056" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:28:36.057" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:28:36.057" starttime="20170810 04:28:36.057" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:28:36.265" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:28:36.265" starttime="20170810 04:28:36.058" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:28:36.266" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:28:36.266" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:28:36.266" starttime="20170810 04:28:36.058" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:28:36.266" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:28:36.266" starttime="20170810 04:28:36.266" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:28:36.267" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:28:36.267" starttime="20170810 04:28:36.267" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:36.267" starttime="20170810 04:28:36.054" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:36.267" starttime="20170810 04:28:36.054" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:36.267" starttime="20170810 04:28:36.053" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:28:36.268" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:28:36.268" starttime="20170810 04:28:36.268" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:28:36.270" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:28:36.270" starttime="20170810 04:28:36.269" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:28:36.271" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:28:36.271" starttime="20170810 04:28:36.271" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:36.271" starttime="20170810 04:28:36.270" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:36.271" starttime="20170810 04:28:36.269" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:36.271" starttime="20170810 04:28:36.268" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:28:36.362" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:28:36.362" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:28:36.362" starttime="20170810 04:28:36.272" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:28:36.364" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:28:36.364" starttime="20170810 04:28:36.363" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:28:36.365" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:28:36.365" starttime="20170810 04:28:36.364" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:36.365" starttime="20170810 04:28:36.364" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:36.365" starttime="20170810 04:28:36.363" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:36.365" starttime="20170810 04:28:36.362" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:28:36.365" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:28:36.366" starttime="20170810 04:28:36.365" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:28:36.366" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:28:36.366" starttime="20170810 04:28:36.053" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:28:36.366" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:28:36.366" starttime="20170810 04:28:36.366" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:28:36.367" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:28:36.367" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:28:36.367" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:28:36.367" starttime="20170810 04:28:36.367" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:28:36.368" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:28:36.368" starttime="20170810 04:28:36.052" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:28:36.368" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:28:36.368" starttime="20170810 04:28:36.052" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:28:36.369" starttime="20170810 04:28:36.368" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:36.369" starttime="20170810 04:28:36.051" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:28:36.372" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:28:36.373" starttime="20170810 04:28:36.372" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:28:36.373" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:28:36.374" starttime="20170810 04:28:36.373" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:28:36.374" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:28:36.374" starttime="20170810 04:28:36.374" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:28:36.375" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:28:36.375" starttime="20170810 04:28:36.374" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:28:36.572" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:28:36.572" starttime="20170810 04:28:36.376" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:28:36.572" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:28:36.572" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:28:36.572" starttime="20170810 04:28:36.375" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:28:36.573" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:28:36.573" starttime="20170810 04:28:36.572" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:28:36.573" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:28:36.573" starttime="20170810 04:28:36.573" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:36.574" starttime="20170810 04:28:36.371" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:36.574" starttime="20170810 04:28:36.371" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:36.574" starttime="20170810 04:28:36.370" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:28:36.574" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:28:36.574" starttime="20170810 04:28:36.574" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:28:36.577" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:28:36.577" starttime="20170810 04:28:36.576" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:28:36.578" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:28:36.578" starttime="20170810 04:28:36.578" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:36.578" starttime="20170810 04:28:36.577" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:36.578" starttime="20170810 04:28:36.575" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:36.578" starttime="20170810 04:28:36.575" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:28:36.758" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:28:36.758" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:28:36.758" starttime="20170810 04:28:36.579" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:28:36.760" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:28:36.760" starttime="20170810 04:28:36.760" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:28:36.761" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:28:36.761" starttime="20170810 04:28:36.761" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:36.761" starttime="20170810 04:28:36.760" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:36.761" starttime="20170810 04:28:36.759" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:36.761" starttime="20170810 04:28:36.759" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:28:36.762" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:28:36.762" starttime="20170810 04:28:36.762" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:28:36.762" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:28:36.762" starttime="20170810 04:28:36.370" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:28:36.763" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:28:36.763" starttime="20170810 04:28:36.762" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:28:36.763" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:28:36.763" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:28:36.763" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:28:36.763" starttime="20170810 04:28:36.763" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:28:36.764" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:28:36.764" starttime="20170810 04:28:36.369" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:28:36.764" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:28:36.764" starttime="20170810 04:28:36.369" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:28:36.765" starttime="20170810 04:28:36.764" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:28:36.772" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:28:36.772" starttime="20170810 04:28:36.771" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:28:36.773" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:28:36.773" starttime="20170810 04:28:36.772" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:28:36.773" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:28:36.773" starttime="20170810 04:28:36.773" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:28:36.774" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:28:36.774" starttime="20170810 04:28:36.774" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:28:37.126" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:28:37.127" starttime="20170810 04:28:36.775" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:28:37.127" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:28:37.127" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:28:37.127" starttime="20170810 04:28:36.774" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:28:37.128" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:28:37.128" starttime="20170810 04:28:37.127" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:28:37.128" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:28:37.128" starttime="20170810 04:28:37.128" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:37.128" starttime="20170810 04:28:36.771" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:37.129" starttime="20170810 04:28:36.770" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:37.129" starttime="20170810 04:28:36.770" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:28:37.129" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:28:37.129" starttime="20170810 04:28:37.129" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:28:37.131" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:28:37.131" starttime="20170810 04:28:37.131" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:28:37.133" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:28:37.133" starttime="20170810 04:28:37.132" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:37.133" starttime="20170810 04:28:37.131" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:37.133" starttime="20170810 04:28:37.130" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:37.133" starttime="20170810 04:28:37.130" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:28:37.200" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:28:37.201" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:28:37.201" starttime="20170810 04:28:37.133" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:28:37.202" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:28:37.202" starttime="20170810 04:28:37.202" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:28:37.203" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:28:37.203" starttime="20170810 04:28:37.203" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:37.203" starttime="20170810 04:28:37.202" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:37.204" starttime="20170810 04:28:37.201" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:37.204" starttime="20170810 04:28:37.201" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:28:37.204" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:28:37.204" starttime="20170810 04:28:37.204" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:28:37.204" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:28:37.204" starttime="20170810 04:28:36.769" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:28:37.205" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:28:37.205" starttime="20170810 04:28:37.205" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:28:37.206" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:28:37.206" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:28:37.206" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170810 04:28:37.206" starttime="20170810 04:28:37.205" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:28:37.206" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:28:37.206" starttime="20170810 04:28:36.768" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:28:37.206" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:28:37.206" starttime="20170810 04:28:36.765" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:28:37.207" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:28:37.207" starttime="20170810 04:28:37.207" status="FAIL"></status>
</kw>
<status endtime="20170810 04:28:37.207" starttime="20170810 04:28:36.765" status="FAIL"></status>
</kw>
<status endtime="20170810 04:28:37.207" starttime="20170810 04:28:36.050" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:28:47.212" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:28:47.213" starttime="20170810 04:28:47.212" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:28:47.214" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:28:47.214" starttime="20170810 04:28:47.213" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:28:47.214" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:28:47.214" starttime="20170810 04:28:47.214" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:28:47.215" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:28:47.215" starttime="20170810 04:28:47.214" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:28:47.418" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:28:47.418" starttime="20170810 04:28:47.216" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:28:47.418" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:28:47.418" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:28:47.418" starttime="20170810 04:28:47.215" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:28:47.419" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:28:47.419" starttime="20170810 04:28:47.418" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:28:47.419" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:28:47.420" starttime="20170810 04:28:47.419" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:47.420" starttime="20170810 04:28:47.212" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:47.420" starttime="20170810 04:28:47.211" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:47.420" starttime="20170810 04:28:47.211" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:28:47.420" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:28:47.420" starttime="20170810 04:28:47.420" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:28:47.422" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:28:47.423" starttime="20170810 04:28:47.422" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:28:47.424" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:28:47.424" starttime="20170810 04:28:47.423" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:47.424" starttime="20170810 04:28:47.423" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:47.424" starttime="20170810 04:28:47.421" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:47.424" starttime="20170810 04:28:47.421" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:28:47.487" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:28:47.487" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:28:47.487" starttime="20170810 04:28:47.424" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:28:47.489" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:28:47.489" starttime="20170810 04:28:47.488" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:28:47.490" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:28:47.490" starttime="20170810 04:28:47.489" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:47.490" starttime="20170810 04:28:47.489" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:47.490" starttime="20170810 04:28:47.488" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:47.490" starttime="20170810 04:28:47.487" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:28:47.490" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:28:47.491" starttime="20170810 04:28:47.490" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:28:47.491" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:28:47.491" starttime="20170810 04:28:47.210" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:28:47.491" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:28:47.491" starttime="20170810 04:28:47.491" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:28:47.492" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:28:47.492" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:28:47.492" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:28:47.492" starttime="20170810 04:28:47.492" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:28:47.492" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:28:47.493" starttime="20170810 04:28:47.209" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:28:47.493" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:28:47.493" starttime="20170810 04:28:47.209" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:28:47.493" starttime="20170810 04:28:47.493" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:47.493" starttime="20170810 04:28:47.208" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:28:47.499" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:28:47.499" starttime="20170810 04:28:47.498" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:28:47.500" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:28:47.500" starttime="20170810 04:28:47.499" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:28:47.501" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:28:47.501" starttime="20170810 04:28:47.500" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:28:47.502" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:28:47.502" starttime="20170810 04:28:47.501" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:28:47.680" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:28:47.680" starttime="20170810 04:28:47.502" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:28:47.680" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:28:47.680" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:28:47.681" starttime="20170810 04:28:47.502" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:28:47.681" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:28:47.681" starttime="20170810 04:28:47.681" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:28:47.682" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:28:47.682" starttime="20170810 04:28:47.682" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:47.682" starttime="20170810 04:28:47.497" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:47.682" starttime="20170810 04:28:47.496" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:47.682" starttime="20170810 04:28:47.496" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:28:47.683" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:28:47.683" starttime="20170810 04:28:47.683" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:28:47.685" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:28:47.685" starttime="20170810 04:28:47.684" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:28:47.686" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:28:47.686" starttime="20170810 04:28:47.686" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:47.686" starttime="20170810 04:28:47.685" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:47.686" starttime="20170810 04:28:47.684" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:47.686" starttime="20170810 04:28:47.683" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:28:47.797" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:28:47.797" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:28:47.797" starttime="20170810 04:28:47.687" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:28:47.799" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:28:47.799" starttime="20170810 04:28:47.799" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:28:47.800" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:28:47.800" starttime="20170810 04:28:47.800" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:47.800" starttime="20170810 04:28:47.799" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:47.800" starttime="20170810 04:28:47.798" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:47.800" starttime="20170810 04:28:47.798" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:28:47.801" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:28:47.801" starttime="20170810 04:28:47.801" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:28:47.801" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:28:47.801" starttime="20170810 04:28:47.495" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:28:47.802" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:28:47.802" starttime="20170810 04:28:47.802" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:28:47.803" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:28:47.803" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:28:47.803" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:28:47.803" starttime="20170810 04:28:47.802" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:28:47.803" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:28:47.803" starttime="20170810 04:28:47.494" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:28:47.803" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:28:47.803" starttime="20170810 04:28:47.494" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:28:47.804" starttime="20170810 04:28:47.804" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:28:47.808" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:28:47.808" starttime="20170810 04:28:47.808" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:28:47.809" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:28:47.809" starttime="20170810 04:28:47.809" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:28:47.810" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:28:47.810" starttime="20170810 04:28:47.809" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:28:47.810" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:28:47.810" starttime="20170810 04:28:47.810" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:28:48.062" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:28:48.062" starttime="20170810 04:28:47.811" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:28:48.062" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:28:48.062" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:28:48.062" starttime="20170810 04:28:47.810" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:28:48.063" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:28:48.063" starttime="20170810 04:28:48.062" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:28:48.063" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:28:48.064" starttime="20170810 04:28:48.063" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:48.064" starttime="20170810 04:28:47.807" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:48.064" starttime="20170810 04:28:47.807" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:48.064" starttime="20170810 04:28:47.806" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:28:48.064" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:28:48.065" starttime="20170810 04:28:48.064" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:28:48.067" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:28:48.067" starttime="20170810 04:28:48.066" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:28:48.068" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:28:48.068" starttime="20170810 04:28:48.068" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:48.068" starttime="20170810 04:28:48.067" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:48.068" starttime="20170810 04:28:48.065" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:48.068" starttime="20170810 04:28:48.065" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:28:48.151" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:28:48.151" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:28:48.151" starttime="20170810 04:28:48.069" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:28:48.153" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:28:48.153" starttime="20170810 04:28:48.152" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:28:48.154" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:28:48.154" starttime="20170810 04:28:48.153" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:48.154" starttime="20170810 04:28:48.153" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:48.154" starttime="20170810 04:28:48.152" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:48.154" starttime="20170810 04:28:48.151" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:28:48.154" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:28:48.154" starttime="20170810 04:28:48.154" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:28:48.155" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:28:48.155" starttime="20170810 04:28:47.806" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:28:48.155" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:28:48.155" starttime="20170810 04:28:48.155" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:28:48.156" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:28:48.156" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:28:48.156" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170810 04:28:48.156" starttime="20170810 04:28:48.156" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:28:48.156" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:28:48.156" starttime="20170810 04:28:47.805" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:28:48.157" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:28:48.157" starttime="20170810 04:28:47.804" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:28:48.157" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:28:48.157" starttime="20170810 04:28:48.157" status="FAIL"></status>
</kw>
<status endtime="20170810 04:28:48.157" starttime="20170810 04:28:47.804" status="FAIL"></status>
</kw>
<status endtime="20170810 04:28:48.158" starttime="20170810 04:28:47.208" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:28:58.163" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:28:58.163" starttime="20170810 04:28:58.162" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:28:58.164" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:28:58.164" starttime="20170810 04:28:58.163" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:28:58.164" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:28:58.164" starttime="20170810 04:28:58.164" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:28:58.165" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:28:58.165" starttime="20170810 04:28:58.165" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:28:58.378" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:28:58.378" starttime="20170810 04:28:58.166" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:28:58.378" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:28:58.378" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:28:58.378" starttime="20170810 04:28:58.165" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:28:58.379" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:28:58.379" starttime="20170810 04:28:58.379" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:28:58.380" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:28:58.380" starttime="20170810 04:28:58.379" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:58.380" starttime="20170810 04:28:58.162" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:58.380" starttime="20170810 04:28:58.161" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:58.380" starttime="20170810 04:28:58.161" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:28:58.381" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:28:58.381" starttime="20170810 04:28:58.380" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:28:58.383" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:28:58.383" starttime="20170810 04:28:58.382" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:28:58.384" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:28:58.384" starttime="20170810 04:28:58.383" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:58.384" starttime="20170810 04:28:58.383" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:58.384" starttime="20170810 04:28:58.381" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:58.384" starttime="20170810 04:28:58.381" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:28:58.463" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:28:58.463" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:28:58.463" starttime="20170810 04:28:58.384" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:28:58.465" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:28:58.465" starttime="20170810 04:28:58.464" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:28:58.465" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:28:58.466" starttime="20170810 04:28:58.465" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:58.466" starttime="20170810 04:28:58.465" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:58.466" starttime="20170810 04:28:58.464" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:58.466" starttime="20170810 04:28:58.463" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:28:58.466" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:28:58.466" starttime="20170810 04:28:58.466" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:28:58.467" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:28:58.467" starttime="20170810 04:28:58.160" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:28:58.467" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:28:58.467" starttime="20170810 04:28:58.467" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:28:58.468" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:28:58.468" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:28:58.468" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:28:58.468" starttime="20170810 04:28:58.468" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:28:58.468" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:28:58.468" starttime="20170810 04:28:58.159" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:28:58.469" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:28:58.469" starttime="20170810 04:28:58.159" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:28:58.469" starttime="20170810 04:28:58.469" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:58.469" starttime="20170810 04:28:58.159" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:28:58.473" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:28:58.474" starttime="20170810 04:28:58.473" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:28:58.474" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:28:58.474" starttime="20170810 04:28:58.474" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:28:58.475" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:28:58.475" starttime="20170810 04:28:58.474" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:28:58.475" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:28:58.475" starttime="20170810 04:28:58.475" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:28:58.680" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:28:58.680" starttime="20170810 04:28:58.476" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:28:58.681" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:28:58.681" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:28:58.681" starttime="20170810 04:28:58.476" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:28:58.681" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:28:58.681" starttime="20170810 04:28:58.681" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:28:58.682" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:28:58.682" starttime="20170810 04:28:58.682" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:58.682" starttime="20170810 04:28:58.472" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:58.682" starttime="20170810 04:28:58.472" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:58.683" starttime="20170810 04:28:58.471" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:28:58.683" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:28:58.683" starttime="20170810 04:28:58.683" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:28:58.685" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:28:58.685" starttime="20170810 04:28:58.685" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:28:58.686" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:28:58.686" starttime="20170810 04:28:58.686" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:58.686" starttime="20170810 04:28:58.685" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:58.686" starttime="20170810 04:28:58.684" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:58.687" starttime="20170810 04:28:58.683" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:28:58.793" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:28:58.793" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:28:58.793" starttime="20170810 04:28:58.687" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:28:58.795" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:28:58.795" starttime="20170810 04:28:58.795" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:28:58.796" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:28:58.796" starttime="20170810 04:28:58.796" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:58.796" starttime="20170810 04:28:58.795" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:58.796" starttime="20170810 04:28:58.794" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:58.796" starttime="20170810 04:28:58.794" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:28:58.797" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:28:58.797" starttime="20170810 04:28:58.797" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:28:58.797" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:28:58.797" starttime="20170810 04:28:58.470" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:28:58.798" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:28:58.798" starttime="20170810 04:28:58.797" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:28:58.798" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:28:58.798" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:28:58.799" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:28:58.799" starttime="20170810 04:28:58.798" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:28:58.799" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:28:58.799" starttime="20170810 04:28:58.470" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:28:58.799" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:28:58.799" starttime="20170810 04:28:58.470" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:28:58.800" starttime="20170810 04:28:58.799" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:28:58.804" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:28:58.804" starttime="20170810 04:28:58.804" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:28:58.805" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:28:58.805" starttime="20170810 04:28:58.805" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:28:58.805" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:28:58.806" starttime="20170810 04:28:58.805" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:28:58.806" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:28:58.806" starttime="20170810 04:28:58.806" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:28:58.998" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:28:58.998" starttime="20170810 04:28:58.807" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:28:58.998" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:28:58.998" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:28:58.998" starttime="20170810 04:28:58.806" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:28:58.999" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:28:58.999" starttime="20170810 04:28:58.999" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:28:59.000" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:28:59.000" starttime="20170810 04:28:58.999" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:59.000" starttime="20170810 04:28:58.803" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:59.000" starttime="20170810 04:28:58.803" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:59.000" starttime="20170810 04:28:58.802" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:28:59.001" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:28:59.001" starttime="20170810 04:28:59.000" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:28:59.003" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:28:59.003" starttime="20170810 04:28:59.002" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:28:59.004" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:28:59.004" starttime="20170810 04:28:59.004" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:59.004" starttime="20170810 04:28:59.003" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:59.004" starttime="20170810 04:28:59.001" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:59.004" starttime="20170810 04:28:59.001" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:28:59.115" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:28:59.115" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:28:59.115" starttime="20170810 04:28:59.005" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:28:59.118" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:28:59.118" starttime="20170810 04:28:59.117" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:28:59.119" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:28:59.119" starttime="20170810 04:28:59.118" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:59.119" starttime="20170810 04:28:59.118" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:59.119" starttime="20170810 04:28:59.116" status="PASS"></status>
</kw>
<status endtime="20170810 04:28:59.119" starttime="20170810 04:28:59.115" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:28:59.119" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:28:59.119" starttime="20170810 04:28:59.119" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:28:59.120" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:28:59.120" starttime="20170810 04:28:58.801" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:28:59.120" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:28:59.120" starttime="20170810 04:28:59.120" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:28:59.121" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:28:59.121" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:28:59.121" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170810 04:28:59.121" starttime="20170810 04:28:59.121" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:28:59.121" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:28:59.121" starttime="20170810 04:28:58.801" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:28:59.122" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:28:59.122" starttime="20170810 04:28:58.800" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:28:59.122" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:28:59.122" starttime="20170810 04:28:59.122" status="FAIL"></status>
</kw>
<status endtime="20170810 04:28:59.122" starttime="20170810 04:28:58.800" status="FAIL"></status>
</kw>
<status endtime="20170810 04:28:59.123" starttime="20170810 04:28:58.158" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:29:09.128" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:29:09.128" starttime="20170810 04:29:09.127" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:29:09.129" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:29:09.129" starttime="20170810 04:29:09.128" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:29:09.129" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:29:09.129" starttime="20170810 04:29:09.129" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:29:09.130" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:29:09.130" starttime="20170810 04:29:09.130" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:29:09.508" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:29:09.508" starttime="20170810 04:29:09.131" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:29:09.508" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:29:09.508" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:29:09.508" starttime="20170810 04:29:09.130" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:29:09.509" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:29:09.509" starttime="20170810 04:29:09.509" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:29:09.510" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:29:09.510" starttime="20170810 04:29:09.510" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:09.510" starttime="20170810 04:29:09.127" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:09.510" starttime="20170810 04:29:09.126" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:09.510" starttime="20170810 04:29:09.126" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:29:09.511" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:29:09.511" starttime="20170810 04:29:09.511" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:29:09.513" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:29:09.513" starttime="20170810 04:29:09.512" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:29:09.514" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:29:09.514" starttime="20170810 04:29:09.514" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:09.514" starttime="20170810 04:29:09.513" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:09.514" starttime="20170810 04:29:09.512" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:09.514" starttime="20170810 04:29:09.511" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:29:09.587" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:29:09.587" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:29:09.587" starttime="20170810 04:29:09.515" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:29:09.589" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:29:09.589" starttime="20170810 04:29:09.588" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:29:09.590" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:29:09.590" starttime="20170810 04:29:09.590" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:09.590" starttime="20170810 04:29:09.589" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:09.590" starttime="20170810 04:29:09.588" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:09.590" starttime="20170810 04:29:09.588" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:29:09.591" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:29:09.591" starttime="20170810 04:29:09.590" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:29:09.591" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:29:09.591" starttime="20170810 04:29:09.125" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:29:09.592" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:29:09.592" starttime="20170810 04:29:09.591" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:29:09.592" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:29:09.592" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:29:09.592" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:29:09.592" starttime="20170810 04:29:09.592" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:29:09.593" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:29:09.593" starttime="20170810 04:29:09.124" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:29:09.593" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:29:09.593" starttime="20170810 04:29:09.124" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:29:09.593" starttime="20170810 04:29:09.593" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:09.594" starttime="20170810 04:29:09.124" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:29:09.598" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:29:09.598" starttime="20170810 04:29:09.597" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:29:09.598" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:29:09.598" starttime="20170810 04:29:09.598" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:29:09.599" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:29:09.599" starttime="20170810 04:29:09.599" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:29:09.600" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:29:09.600" starttime="20170810 04:29:09.599" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:29:09.803" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:29:09.803" starttime="20170810 04:29:09.600" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:29:09.804" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:29:09.804" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:29:09.804" starttime="20170810 04:29:09.600" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:29:09.804" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:29:09.804" starttime="20170810 04:29:09.804" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:29:09.805" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:29:09.805" starttime="20170810 04:29:09.805" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:09.805" starttime="20170810 04:29:09.596" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:09.805" starttime="20170810 04:29:09.596" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:09.805" starttime="20170810 04:29:09.595" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:29:09.806" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:29:09.806" starttime="20170810 04:29:09.806" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:29:09.808" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:29:09.808" starttime="20170810 04:29:09.807" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:29:09.809" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:29:09.809" starttime="20170810 04:29:09.809" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:09.809" starttime="20170810 04:29:09.808" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:09.809" starttime="20170810 04:29:09.807" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:09.809" starttime="20170810 04:29:09.806" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:29:09.935" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:29:09.935" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:29:09.935" starttime="20170810 04:29:09.810" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:29:09.937" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:29:09.937" starttime="20170810 04:29:09.936" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:29:09.938" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:29:09.938" starttime="20170810 04:29:09.937" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:09.938" starttime="20170810 04:29:09.937" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:09.938" starttime="20170810 04:29:09.936" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:09.938" starttime="20170810 04:29:09.935" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:29:09.939" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:29:09.939" starttime="20170810 04:29:09.938" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:29:09.939" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:29:09.939" starttime="20170810 04:29:09.595" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:29:09.939" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:29:09.940" starttime="20170810 04:29:09.939" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:29:09.940" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:29:09.940" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:29:09.940" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:29:09.940" starttime="20170810 04:29:09.940" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:29:09.941" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:29:09.941" starttime="20170810 04:29:09.594" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:29:09.941" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:29:09.941" starttime="20170810 04:29:09.594" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:29:09.941" starttime="20170810 04:29:09.941" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:29:09.948" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:29:09.949" starttime="20170810 04:29:09.948" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:29:09.949" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:29:09.949" starttime="20170810 04:29:09.949" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:29:09.950" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:29:09.950" starttime="20170810 04:29:09.950" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:29:09.951" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:29:09.951" starttime="20170810 04:29:09.950" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:29:10.205" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:29:10.205" starttime="20170810 04:29:09.951" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:29:10.205" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:29:10.205" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:29:10.205" starttime="20170810 04:29:09.951" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:29:10.206" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:29:10.206" starttime="20170810 04:29:10.206" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:29:10.207" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:29:10.207" starttime="20170810 04:29:10.206" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:10.207" starttime="20170810 04:29:09.948" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:10.207" starttime="20170810 04:29:09.947" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:10.207" starttime="20170810 04:29:09.946" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:29:10.208" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:29:10.208" starttime="20170810 04:29:10.207" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:29:10.210" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:29:10.210" starttime="20170810 04:29:10.209" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:29:10.211" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:29:10.211" starttime="20170810 04:29:10.211" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:10.211" starttime="20170810 04:29:10.210" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:10.211" starttime="20170810 04:29:10.208" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:10.211" starttime="20170810 04:29:10.208" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:29:10.328" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:29:10.328" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:29:10.328" starttime="20170810 04:29:10.212" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:29:10.330" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:29:10.330" starttime="20170810 04:29:10.329" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:29:10.331" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:29:10.331" starttime="20170810 04:29:10.330" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:10.331" starttime="20170810 04:29:10.330" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:10.331" starttime="20170810 04:29:10.329" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:10.331" starttime="20170810 04:29:10.328" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:29:10.331" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:29:10.331" starttime="20170810 04:29:10.331" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:29:10.332" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:29:10.332" starttime="20170810 04:29:09.946" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:29:10.332" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:29:10.332" starttime="20170810 04:29:10.332" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:29:10.333" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:29:10.333" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:29:10.333" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170810 04:29:10.333" starttime="20170810 04:29:10.333" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:29:10.333" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:29:10.333" starttime="20170810 04:29:09.945" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:29:10.334" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:29:10.334" starttime="20170810 04:29:09.945" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:29:10.335" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:29:10.335" starttime="20170810 04:29:10.334" status="FAIL"></status>
</kw>
<status endtime="20170810 04:29:10.335" starttime="20170810 04:29:09.942" status="FAIL"></status>
</kw>
<status endtime="20170810 04:29:10.335" starttime="20170810 04:29:09.123" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:29:20.340" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:29:20.341" starttime="20170810 04:29:20.340" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:29:20.342" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:29:20.342" starttime="20170810 04:29:20.341" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:29:20.342" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:29:20.342" starttime="20170810 04:29:20.342" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:29:20.343" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:29:20.343" starttime="20170810 04:29:20.343" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:29:20.527" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:29:20.527" starttime="20170810 04:29:20.344" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:29:20.527" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:29:20.527" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:29:20.527" starttime="20170810 04:29:20.343" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:29:20.528" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:29:20.528" starttime="20170810 04:29:20.528" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:29:20.529" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:29:20.529" starttime="20170810 04:29:20.528" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:20.529" starttime="20170810 04:29:20.339" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:20.529" starttime="20170810 04:29:20.339" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:20.529" starttime="20170810 04:29:20.338" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:29:20.530" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:29:20.530" starttime="20170810 04:29:20.529" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:29:20.532" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:29:20.532" starttime="20170810 04:29:20.531" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:29:20.533" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:29:20.533" starttime="20170810 04:29:20.533" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:20.533" starttime="20170810 04:29:20.532" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:20.533" starttime="20170810 04:29:20.531" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:20.533" starttime="20170810 04:29:20.530" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:29:20.599" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:29:20.599" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:29:20.599" starttime="20170810 04:29:20.533" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:29:20.601" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:29:20.601" starttime="20170810 04:29:20.600" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:29:20.601" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:29:20.602" starttime="20170810 04:29:20.601" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:20.602" starttime="20170810 04:29:20.601" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:20.602" starttime="20170810 04:29:20.600" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:20.602" starttime="20170810 04:29:20.599" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:29:20.602" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:29:20.602" starttime="20170810 04:29:20.602" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:29:20.603" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:29:20.603" starttime="20170810 04:29:20.337" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:29:20.603" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:29:20.603" starttime="20170810 04:29:20.603" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:29:20.604" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:29:20.604" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:29:20.604" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:29:20.604" starttime="20170810 04:29:20.603" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:29:20.604" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:29:20.604" starttime="20170810 04:29:20.337" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:29:20.604" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:29:20.605" starttime="20170810 04:29:20.336" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:29:20.605" starttime="20170810 04:29:20.605" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:20.605" starttime="20170810 04:29:20.336" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:29:20.609" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:29:20.609" starttime="20170810 04:29:20.609" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:29:20.610" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:29:20.610" starttime="20170810 04:29:20.610" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:29:20.611" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:29:20.611" starttime="20170810 04:29:20.610" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:29:20.611" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:29:20.611" starttime="20170810 04:29:20.611" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:29:20.796" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:29:20.797" starttime="20170810 04:29:20.612" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:29:20.797" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:29:20.797" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:29:20.797" starttime="20170810 04:29:20.612" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:29:20.797" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:29:20.798" starttime="20170810 04:29:20.797" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:29:20.798" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:29:20.798" starttime="20170810 04:29:20.798" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:20.798" starttime="20170810 04:29:20.608" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:20.798" starttime="20170810 04:29:20.607" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:20.799" starttime="20170810 04:29:20.607" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:29:20.799" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:29:20.799" starttime="20170810 04:29:20.799" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:29:20.801" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:29:20.801" starttime="20170810 04:29:20.801" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:29:20.802" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:29:20.802" starttime="20170810 04:29:20.802" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:20.802" starttime="20170810 04:29:20.801" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:20.802" starttime="20170810 04:29:20.800" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:20.803" starttime="20170810 04:29:20.799" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:29:20.922" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:29:20.922" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:29:20.922" starttime="20170810 04:29:20.803" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:29:20.924" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:29:20.924" starttime="20170810 04:29:20.923" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:29:20.925" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:29:20.925" starttime="20170810 04:29:20.924" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:20.925" starttime="20170810 04:29:20.924" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:20.925" starttime="20170810 04:29:20.923" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:20.925" starttime="20170810 04:29:20.922" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:29:20.925" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:29:20.926" starttime="20170810 04:29:20.925" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:29:20.926" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:29:20.926" starttime="20170810 04:29:20.606" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:29:20.926" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:29:20.927" starttime="20170810 04:29:20.926" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:29:20.927" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:29:20.927" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:29:20.927" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:29:20.927" starttime="20170810 04:29:20.927" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:29:20.928" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:29:20.928" starttime="20170810 04:29:20.606" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:29:20.928" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:29:20.928" starttime="20170810 04:29:20.605" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:29:20.929" starttime="20170810 04:29:20.928" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:29:20.933" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:29:20.933" starttime="20170810 04:29:20.932" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:29:20.934" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:29:20.934" starttime="20170810 04:29:20.933" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:29:20.934" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:29:20.934" starttime="20170810 04:29:20.934" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:29:20.935" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:29:20.935" starttime="20170810 04:29:20.935" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:29:21.160" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:29:21.160" starttime="20170810 04:29:20.936" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:29:21.160" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:29:21.160" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:29:21.160" starttime="20170810 04:29:20.935" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:29:21.161" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:29:21.161" starttime="20170810 04:29:21.160" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:29:21.161" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:29:21.162" starttime="20170810 04:29:21.161" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:21.162" starttime="20170810 04:29:20.932" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:21.162" starttime="20170810 04:29:20.931" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:21.162" starttime="20170810 04:29:20.931" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:29:21.162" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:29:21.162" starttime="20170810 04:29:21.162" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:29:21.165" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:29:21.165" starttime="20170810 04:29:21.164" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:29:21.166" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:29:21.166" starttime="20170810 04:29:21.166" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:21.166" starttime="20170810 04:29:21.165" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:21.166" starttime="20170810 04:29:21.163" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:21.166" starttime="20170810 04:29:21.163" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:29:21.248" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:29:21.248" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:29:21.248" starttime="20170810 04:29:21.166" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:29:21.250" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:29:21.250" starttime="20170810 04:29:21.249" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:29:21.250" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:29:21.251" starttime="20170810 04:29:21.250" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:21.251" starttime="20170810 04:29:21.250" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:21.251" starttime="20170810 04:29:21.248" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:21.251" starttime="20170810 04:29:21.248" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:29:21.251" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:29:21.251" starttime="20170810 04:29:21.251" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:29:21.252" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:29:21.252" starttime="20170810 04:29:20.930" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:29:21.252" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:29:21.252" starttime="20170810 04:29:21.252" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:29:21.253" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:29:21.253" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:29:21.253" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170810 04:29:21.253" starttime="20170810 04:29:21.253" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:29:21.253" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:29:21.254" starttime="20170810 04:29:20.930" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:29:21.254" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:29:21.254" starttime="20170810 04:29:20.929" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:29:21.255" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:29:21.255" starttime="20170810 04:29:21.254" status="FAIL"></status>
</kw>
<status endtime="20170810 04:29:21.255" starttime="20170810 04:29:20.929" status="FAIL"></status>
</kw>
<status endtime="20170810 04:29:21.255" starttime="20170810 04:29:20.335" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:29:31.260" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:29:31.261" starttime="20170810 04:29:31.260" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:29:31.261" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:29:31.261" starttime="20170810 04:29:31.261" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:29:31.262" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:29:31.262" starttime="20170810 04:29:31.262" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:29:31.263" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:29:31.263" starttime="20170810 04:29:31.262" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:29:31.479" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:29:31.479" starttime="20170810 04:29:31.263" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:29:31.479" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:29:31.479" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:29:31.479" starttime="20170810 04:29:31.263" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:29:31.480" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:29:31.480" starttime="20170810 04:29:31.480" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:29:31.481" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:29:31.481" starttime="20170810 04:29:31.480" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:31.481" starttime="20170810 04:29:31.259" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:31.481" starttime="20170810 04:29:31.259" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:31.481" starttime="20170810 04:29:31.258" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:29:31.482" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:29:31.482" starttime="20170810 04:29:31.481" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:29:31.484" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:29:31.484" starttime="20170810 04:29:31.483" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:29:31.485" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:29:31.485" starttime="20170810 04:29:31.484" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:31.485" starttime="20170810 04:29:31.484" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:31.485" starttime="20170810 04:29:31.482" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:31.485" starttime="20170810 04:29:31.482" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:29:31.553" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:29:31.553" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:29:31.553" starttime="20170810 04:29:31.485" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:29:31.555" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:29:31.555" starttime="20170810 04:29:31.554" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:29:31.556" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:29:31.556" starttime="20170810 04:29:31.555" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:31.556" starttime="20170810 04:29:31.555" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:31.556" starttime="20170810 04:29:31.554" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:31.556" starttime="20170810 04:29:31.553" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:29:31.556" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:29:31.557" starttime="20170810 04:29:31.556" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:29:31.557" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:29:31.557" starttime="20170810 04:29:31.258" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:29:31.557" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:29:31.558" starttime="20170810 04:29:31.557" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:29:31.558" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:29:31.558" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:29:31.558" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:29:31.558" starttime="20170810 04:29:31.558" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:29:31.559" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:29:31.559" starttime="20170810 04:29:31.257" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:29:31.559" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:29:31.559" starttime="20170810 04:29:31.257" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:29:31.559" starttime="20170810 04:29:31.559" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:31.560" starttime="20170810 04:29:31.256" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:29:31.563" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:29:31.564" starttime="20170810 04:29:31.563" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:29:31.564" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:29:31.564" starttime="20170810 04:29:31.564" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:29:31.565" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:29:31.565" starttime="20170810 04:29:31.565" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:29:31.566" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:29:31.566" starttime="20170810 04:29:31.565" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:29:31.783" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:29:31.784" starttime="20170810 04:29:31.566" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:29:31.784" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:29:31.784" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:29:31.784" starttime="20170810 04:29:31.566" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:29:31.784" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:29:31.784" starttime="20170810 04:29:31.784" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:29:31.785" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:29:31.785" starttime="20170810 04:29:31.785" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:31.785" starttime="20170810 04:29:31.562" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:31.785" starttime="20170810 04:29:31.562" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:31.785" starttime="20170810 04:29:31.561" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:29:31.786" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:29:31.786" starttime="20170810 04:29:31.786" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:29:31.788" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:29:31.788" starttime="20170810 04:29:31.788" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:29:31.789" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:29:31.789" starttime="20170810 04:29:31.789" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:31.789" starttime="20170810 04:29:31.788" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:31.790" starttime="20170810 04:29:31.787" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:31.790" starttime="20170810 04:29:31.786" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:29:31.915" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:29:31.915" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:29:31.915" starttime="20170810 04:29:31.790" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:29:31.917" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:29:31.917" starttime="20170810 04:29:31.917" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:29:31.918" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:29:31.918" starttime="20170810 04:29:31.918" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:31.918" starttime="20170810 04:29:31.917" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:31.919" starttime="20170810 04:29:31.916" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:31.919" starttime="20170810 04:29:31.916" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:29:31.919" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:29:31.919" starttime="20170810 04:29:31.919" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:29:31.919" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:29:31.919" starttime="20170810 04:29:31.561" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:29:31.920" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:29:31.920" starttime="20170810 04:29:31.920" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:29:31.920" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:29:31.921" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:29:31.921" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:29:31.921" starttime="20170810 04:29:31.920" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:29:31.921" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:29:31.921" starttime="20170810 04:29:31.560" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:29:31.921" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:29:31.921" starttime="20170810 04:29:31.560" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:29:31.922" starttime="20170810 04:29:31.922" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:29:31.926" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:29:31.927" starttime="20170810 04:29:31.926" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:29:31.927" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:29:31.927" starttime="20170810 04:29:31.927" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:29:31.928" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:29:31.928" starttime="20170810 04:29:31.928" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:29:31.929" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:29:31.929" starttime="20170810 04:29:31.928" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:29:32.190" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:29:32.190" starttime="20170810 04:29:31.929" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:29:32.191" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:29:32.191" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:29:32.191" starttime="20170810 04:29:31.929" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:29:32.191" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:29:32.191" starttime="20170810 04:29:32.191" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:29:32.192" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:29:32.192" starttime="20170810 04:29:32.192" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:32.192" starttime="20170810 04:29:31.925" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:32.192" starttime="20170810 04:29:31.925" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:32.192" starttime="20170810 04:29:31.924" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:29:32.193" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:29:32.193" starttime="20170810 04:29:32.193" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:29:32.197" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:29:32.197" starttime="20170810 04:29:32.195" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:29:32.198" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:29:32.198" starttime="20170810 04:29:32.198" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:32.198" starttime="20170810 04:29:32.197" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:32.199" starttime="20170810 04:29:32.194" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:32.199" starttime="20170810 04:29:32.194" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:29:32.272" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:29:32.272" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:29:32.272" starttime="20170810 04:29:32.199" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:29:32.274" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:29:32.274" starttime="20170810 04:29:32.273" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:29:32.275" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:29:32.275" starttime="20170810 04:29:32.274" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:32.275" starttime="20170810 04:29:32.274" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:32.275" starttime="20170810 04:29:32.273" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:32.275" starttime="20170810 04:29:32.272" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:29:32.276" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:29:32.276" starttime="20170810 04:29:32.275" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:29:32.276" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:29:32.276" starttime="20170810 04:29:31.923" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:29:32.276" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:29:32.277" starttime="20170810 04:29:32.276" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:29:32.277" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:29:32.277" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:29:32.277" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170810 04:29:32.277" starttime="20170810 04:29:32.277" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:29:32.278" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:29:32.278" starttime="20170810 04:29:31.923" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:29:32.278" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:29:32.278" starttime="20170810 04:29:31.922" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:29:32.278" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:29:32.279" starttime="20170810 04:29:32.278" status="FAIL"></status>
</kw>
<status endtime="20170810 04:29:32.279" starttime="20170810 04:29:31.922" status="FAIL"></status>
</kw>
<status endtime="20170810 04:29:32.279" starttime="20170810 04:29:31.256" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:29:42.284" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:29:42.284" starttime="20170810 04:29:42.283" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:29:42.285" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:29:42.285" starttime="20170810 04:29:42.285" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:29:42.286" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:29:42.286" starttime="20170810 04:29:42.286" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:29:42.287" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:29:42.287" starttime="20170810 04:29:42.287" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:29:42.474" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:29:42.474" starttime="20170810 04:29:42.288" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:29:42.475" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:29:42.475" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:29:42.475" starttime="20170810 04:29:42.288" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:29:42.475" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:29:42.475" starttime="20170810 04:29:42.475" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:29:42.476" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:29:42.476" starttime="20170810 04:29:42.476" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:42.476" starttime="20170810 04:29:42.283" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:42.476" starttime="20170810 04:29:42.282" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:42.476" starttime="20170810 04:29:42.282" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:29:42.477" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:29:42.477" starttime="20170810 04:29:42.477" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:29:42.479" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:29:42.479" starttime="20170810 04:29:42.479" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:29:42.480" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:29:42.480" starttime="20170810 04:29:42.480" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:42.480" starttime="20170810 04:29:42.479" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:42.481" starttime="20170810 04:29:42.478" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:42.481" starttime="20170810 04:29:42.477" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:29:42.564" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:29:42.564" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:29:42.564" starttime="20170810 04:29:42.481" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:29:42.566" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:29:42.566" starttime="20170810 04:29:42.565" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:29:42.567" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:29:42.567" starttime="20170810 04:29:42.567" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:42.567" starttime="20170810 04:29:42.566" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:42.567" starttime="20170810 04:29:42.565" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:42.567" starttime="20170810 04:29:42.565" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:29:42.568" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:29:42.568" starttime="20170810 04:29:42.568" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:29:42.568" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:29:42.568" starttime="20170810 04:29:42.281" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:29:42.569" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:29:42.569" starttime="20170810 04:29:42.568" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:29:42.569" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:29:42.569" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:29:42.569" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:29:42.569" starttime="20170810 04:29:42.569" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:29:42.570" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:29:42.570" starttime="20170810 04:29:42.281" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:29:42.570" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:29:42.570" starttime="20170810 04:29:42.280" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:29:42.571" starttime="20170810 04:29:42.570" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:42.571" starttime="20170810 04:29:42.280" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:29:42.575" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:29:42.575" starttime="20170810 04:29:42.574" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:29:42.575" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:29:42.576" starttime="20170810 04:29:42.575" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:29:42.576" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:29:42.576" starttime="20170810 04:29:42.576" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:29:42.577" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:29:42.577" starttime="20170810 04:29:42.576" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:29:42.864" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:29:42.864" starttime="20170810 04:29:42.578" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:29:42.864" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:29:42.864" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:29:42.864" starttime="20170810 04:29:42.577" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:29:42.865" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:29:42.865" starttime="20170810 04:29:42.865" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:29:42.866" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:29:42.866" starttime="20170810 04:29:42.865" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:42.866" starttime="20170810 04:29:42.573" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:42.866" starttime="20170810 04:29:42.573" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:42.866" starttime="20170810 04:29:42.572" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:29:42.867" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:29:42.867" starttime="20170810 04:29:42.866" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:29:42.869" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:29:42.869" starttime="20170810 04:29:42.868" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:29:42.870" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:29:42.870" starttime="20170810 04:29:42.869" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:42.870" starttime="20170810 04:29:42.869" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:42.870" starttime="20170810 04:29:42.867" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:42.870" starttime="20170810 04:29:42.867" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:29:42.967" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:29:42.967" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:29:42.967" starttime="20170810 04:29:42.870" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:29:42.969" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:29:42.969" starttime="20170810 04:29:42.968" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:29:42.970" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:29:42.970" starttime="20170810 04:29:42.970" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:42.970" starttime="20170810 04:29:42.969" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:42.970" starttime="20170810 04:29:42.968" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:42.970" starttime="20170810 04:29:42.967" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:29:42.971" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:29:42.971" starttime="20170810 04:29:42.971" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:29:42.971" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:29:42.971" starttime="20170810 04:29:42.572" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:29:42.972" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:29:42.972" starttime="20170810 04:29:42.971" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:29:42.972" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:29:42.972" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:29:42.972" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:29:42.972" starttime="20170810 04:29:42.972" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:29:42.973" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:29:42.973" starttime="20170810 04:29:42.571" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:29:42.973" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:29:42.973" starttime="20170810 04:29:42.571" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:29:42.974" starttime="20170810 04:29:42.973" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:29:42.981" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:29:42.981" starttime="20170810 04:29:42.981" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:29:42.982" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:29:42.982" starttime="20170810 04:29:42.982" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:29:42.983" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:29:42.983" starttime="20170810 04:29:42.982" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:29:42.983" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:29:42.983" starttime="20170810 04:29:42.983" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:29:43.210" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:29:43.210" starttime="20170810 04:29:42.984" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:29:43.210" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:29:43.210" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:29:43.210" starttime="20170810 04:29:42.984" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:29:43.211" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:29:43.211" starttime="20170810 04:29:43.210" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:29:43.211" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:29:43.212" starttime="20170810 04:29:43.211" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:43.212" starttime="20170810 04:29:42.980" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:43.212" starttime="20170810 04:29:42.980" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:43.212" starttime="20170810 04:29:42.979" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:29:43.213" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:29:43.213" starttime="20170810 04:29:43.212" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:29:43.216" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:29:43.216" starttime="20170810 04:29:43.215" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:29:43.217" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:29:43.218" starttime="20170810 04:29:43.217" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:43.218" starttime="20170810 04:29:43.216" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:43.218" starttime="20170810 04:29:43.214" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:43.218" starttime="20170810 04:29:43.213" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:29:43.291" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:29:43.291" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:29:43.291" starttime="20170810 04:29:43.218" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:29:43.293" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:29:43.294" starttime="20170810 04:29:43.293" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:29:43.295" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:29:43.295" starttime="20170810 04:29:43.294" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:43.295" starttime="20170810 04:29:43.294" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:43.295" starttime="20170810 04:29:43.292" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:43.295" starttime="20170810 04:29:43.291" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:29:43.296" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:29:43.296" starttime="20170810 04:29:43.295" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:29:43.296" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:29:43.296" starttime="20170810 04:29:42.978" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:29:43.296" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:29:43.297" starttime="20170810 04:29:43.296" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:29:43.297" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:29:43.297" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:29:43.297" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170810 04:29:43.297" starttime="20170810 04:29:43.297" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:29:43.298" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:29:43.298" starttime="20170810 04:29:42.977" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:29:43.298" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:29:43.298" starttime="20170810 04:29:42.977" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:29:43.299" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:29:43.299" starttime="20170810 04:29:43.298" status="FAIL"></status>
</kw>
<status endtime="20170810 04:29:43.299" starttime="20170810 04:29:42.974" status="FAIL"></status>
</kw>
<status endtime="20170810 04:29:43.299" starttime="20170810 04:29:42.279" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:29:53.304" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:29:53.304" starttime="20170810 04:29:53.304" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:29:53.305" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:29:53.305" starttime="20170810 04:29:53.305" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:29:53.306" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:29:53.306" starttime="20170810 04:29:53.305" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:29:53.306" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:29:53.306" starttime="20170810 04:29:53.306" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:29:53.607" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:29:53.607" starttime="20170810 04:29:53.307" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:29:53.608" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:29:53.608" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:29:53.608" starttime="20170810 04:29:53.306" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:29:53.608" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:29:53.608" starttime="20170810 04:29:53.608" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:29:53.609" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:29:53.609" starttime="20170810 04:29:53.609" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:53.610" starttime="20170810 04:29:53.303" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:53.610" starttime="20170810 04:29:53.303" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:53.610" starttime="20170810 04:29:53.302" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:29:53.611" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:29:53.611" starttime="20170810 04:29:53.610" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:29:53.614" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:29:53.614" starttime="20170810 04:29:53.613" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:29:53.615" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:29:53.615" starttime="20170810 04:29:53.615" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:53.615" starttime="20170810 04:29:53.614" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:53.616" starttime="20170810 04:29:53.612" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:53.616" starttime="20170810 04:29:53.611" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:29:53.684" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:29:53.684" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:29:53.684" starttime="20170810 04:29:53.616" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:29:53.686" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:29:53.686" starttime="20170810 04:29:53.686" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:29:53.687" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:29:53.687" starttime="20170810 04:29:53.687" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:53.687" starttime="20170810 04:29:53.686" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:53.687" starttime="20170810 04:29:53.685" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:53.687" starttime="20170810 04:29:53.685" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:29:53.688" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:29:53.688" starttime="20170810 04:29:53.688" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:29:53.688" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:29:53.688" starttime="20170810 04:29:53.301" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:29:53.689" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:29:53.689" starttime="20170810 04:29:53.688" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:29:53.689" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:29:53.689" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:29:53.690" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:29:53.690" starttime="20170810 04:29:53.689" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:29:53.690" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:29:53.690" starttime="20170810 04:29:53.301" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:29:53.690" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:29:53.690" starttime="20170810 04:29:53.300" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:29:53.691" starttime="20170810 04:29:53.690" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:53.691" starttime="20170810 04:29:53.300" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:29:53.695" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:29:53.695" starttime="20170810 04:29:53.694" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:29:53.696" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:29:53.696" starttime="20170810 04:29:53.695" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:29:53.696" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:29:53.696" starttime="20170810 04:29:53.696" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:29:53.697" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:29:53.697" starttime="20170810 04:29:53.696" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:29:53.895" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:29:53.895" starttime="20170810 04:29:53.698" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:29:53.895" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:29:53.895" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:29:53.895" starttime="20170810 04:29:53.697" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:29:53.896" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:29:53.896" starttime="20170810 04:29:53.896" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:29:53.897" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:29:53.897" starttime="20170810 04:29:53.896" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:53.897" starttime="20170810 04:29:53.693" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:53.897" starttime="20170810 04:29:53.693" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:53.897" starttime="20170810 04:29:53.692" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:29:53.898" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:29:53.898" starttime="20170810 04:29:53.897" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:29:53.900" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:29:53.900" starttime="20170810 04:29:53.899" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:29:53.901" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:29:53.902" starttime="20170810 04:29:53.901" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:53.902" starttime="20170810 04:29:53.900" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:53.902" starttime="20170810 04:29:53.898" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:53.902" starttime="20170810 04:29:53.898" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:29:53.997" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:29:53.997" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:29:53.997" starttime="20170810 04:29:53.902" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:29:53.999" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:29:53.999" starttime="20170810 04:29:53.999" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:29:54.000" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:29:54.000" starttime="20170810 04:29:54.000" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:54.000" starttime="20170810 04:29:53.999" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:54.000" starttime="20170810 04:29:53.998" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:54.000" starttime="20170810 04:29:53.998" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:29:54.001" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:29:54.001" starttime="20170810 04:29:54.001" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:29:54.001" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:29:54.001" starttime="20170810 04:29:53.692" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:29:54.002" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:29:54.002" starttime="20170810 04:29:54.001" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:29:54.003" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:29:54.003" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:29:54.003" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:29:54.003" starttime="20170810 04:29:54.002" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:29:54.003" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:29:54.004" starttime="20170810 04:29:53.691" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:29:54.004" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:29:54.004" starttime="20170810 04:29:53.691" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:29:54.004" starttime="20170810 04:29:54.004" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:29:54.009" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:29:54.009" starttime="20170810 04:29:54.008" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:29:54.009" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:29:54.010" starttime="20170810 04:29:54.009" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:29:54.010" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:29:54.010" starttime="20170810 04:29:54.010" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:29:54.011" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:29:54.011" starttime="20170810 04:29:54.010" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:29:54.218" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:29:54.219" starttime="20170810 04:29:54.012" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:29:54.219" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:29:54.219" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:29:54.219" starttime="20170810 04:29:54.011" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:29:54.219" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:29:54.219" starttime="20170810 04:29:54.219" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:29:54.220" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:29:54.220" starttime="20170810 04:29:54.220" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:54.220" starttime="20170810 04:29:54.008" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:54.220" starttime="20170810 04:29:54.007" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:54.220" starttime="20170810 04:29:54.007" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:29:54.221" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:29:54.221" starttime="20170810 04:29:54.221" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:29:54.223" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:29:54.223" starttime="20170810 04:29:54.222" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:29:54.224" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:29:54.224" starttime="20170810 04:29:54.224" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:54.225" starttime="20170810 04:29:54.224" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:54.225" starttime="20170810 04:29:54.222" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:54.225" starttime="20170810 04:29:54.221" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:29:54.298" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:29:54.298" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:29:54.298" starttime="20170810 04:29:54.225" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:29:54.300" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:29:54.300" starttime="20170810 04:29:54.299" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:29:54.301" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:29:54.301" starttime="20170810 04:29:54.301" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:54.301" starttime="20170810 04:29:54.300" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:54.301" starttime="20170810 04:29:54.299" status="PASS"></status>
</kw>
<status endtime="20170810 04:29:54.301" starttime="20170810 04:29:54.299" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:29:54.302" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:29:54.302" starttime="20170810 04:29:54.302" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:29:54.302" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:29:54.302" starttime="20170810 04:29:54.006" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:29:54.303" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:29:54.303" starttime="20170810 04:29:54.302" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:29:54.303" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:29:54.303" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:29:54.303" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170810 04:29:54.303" starttime="20170810 04:29:54.303" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:29:54.304" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:29:54.304" starttime="20170810 04:29:54.006" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:29:54.304" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:29:54.304" starttime="20170810 04:29:54.005" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:29:54.305" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:29:54.305" starttime="20170810 04:29:54.304" status="FAIL"></status>
</kw>
<status endtime="20170810 04:29:54.305" starttime="20170810 04:29:54.005" status="FAIL"></status>
</kw>
<status endtime="20170810 04:29:54.305" starttime="20170810 04:29:53.299" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:30:04.311" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:30:04.311" starttime="20170810 04:30:04.311" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:30:04.312" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:30:04.312" starttime="20170810 04:30:04.312" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:30:04.313" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:30:04.313" starttime="20170810 04:30:04.312" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:30:04.313" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:30:04.313" starttime="20170810 04:30:04.313" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:30:04.546" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:30:04.546" starttime="20170810 04:30:04.314" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:30:04.546" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:30:04.547" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:30:04.547" starttime="20170810 04:30:04.314" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:30:04.547" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:30:04.547" starttime="20170810 04:30:04.547" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:30:04.548" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:30:04.548" starttime="20170810 04:30:04.548" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:04.548" starttime="20170810 04:30:04.310" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:04.548" starttime="20170810 04:30:04.310" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:04.548" starttime="20170810 04:30:04.309" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:30:04.549" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:30:04.549" starttime="20170810 04:30:04.549" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:30:04.551" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:30:04.551" starttime="20170810 04:30:04.550" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:30:04.552" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:30:04.552" starttime="20170810 04:30:04.552" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:04.552" starttime="20170810 04:30:04.551" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:04.552" starttime="20170810 04:30:04.550" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:04.552" starttime="20170810 04:30:04.549" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:30:04.718" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:30:04.718" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:30:04.718" starttime="20170810 04:30:04.553" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:30:04.721" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:30:04.721" starttime="20170810 04:30:04.720" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:30:04.722" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:30:04.722" starttime="20170810 04:30:04.722" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:04.723" starttime="20170810 04:30:04.721" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:04.723" starttime="20170810 04:30:04.719" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:04.723" starttime="20170810 04:30:04.719" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:30:04.723" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:30:04.723" starttime="20170810 04:30:04.723" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:30:04.723" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:30:04.723" starttime="20170810 04:30:04.308" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:30:04.724" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:30:04.724" starttime="20170810 04:30:04.724" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:30:04.725" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:30:04.725" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:30:04.725" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:30:04.725" starttime="20170810 04:30:04.724" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:30:04.725" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:30:04.725" starttime="20170810 04:30:04.308" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:30:04.726" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:30:04.726" starttime="20170810 04:30:04.307" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:30:04.726" starttime="20170810 04:30:04.726" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:04.726" starttime="20170810 04:30:04.307" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:30:04.730" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:30:04.731" starttime="20170810 04:30:04.729" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:30:04.732" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:30:04.732" starttime="20170810 04:30:04.731" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:30:04.733" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:30:04.733" starttime="20170810 04:30:04.732" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:30:04.734" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:30:04.734" starttime="20170810 04:30:04.733" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:30:04.956" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:30:04.956" starttime="20170810 04:30:04.735" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:30:04.956" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:30:04.956" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:30:04.956" starttime="20170810 04:30:04.734" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:30:04.957" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:30:04.957" starttime="20170810 04:30:04.957" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:30:04.958" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:30:04.958" starttime="20170810 04:30:04.957" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:04.958" starttime="20170810 04:30:04.729" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:04.958" starttime="20170810 04:30:04.729" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:04.958" starttime="20170810 04:30:04.728" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:30:04.959" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:30:04.959" starttime="20170810 04:30:04.958" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:30:04.961" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:30:04.961" starttime="20170810 04:30:04.960" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:30:04.962" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:30:04.962" starttime="20170810 04:30:04.962" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:04.962" starttime="20170810 04:30:04.961" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:04.962" starttime="20170810 04:30:04.960" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:04.962" starttime="20170810 04:30:04.959" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:30:05.055" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:30:05.055" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:30:05.055" starttime="20170810 04:30:04.963" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:30:05.057" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:30:05.057" starttime="20170810 04:30:05.056" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:30:05.058" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:30:05.058" starttime="20170810 04:30:05.057" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:05.058" starttime="20170810 04:30:05.057" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:05.058" starttime="20170810 04:30:05.056" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:05.058" starttime="20170810 04:30:05.055" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:30:05.059" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:30:05.059" starttime="20170810 04:30:05.058" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:30:05.059" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:30:05.059" starttime="20170810 04:30:04.727" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:30:05.059" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:30:05.060" starttime="20170810 04:30:05.059" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:30:05.060" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:30:05.060" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:30:05.060" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:30:05.060" starttime="20170810 04:30:05.060" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:30:05.061" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:30:05.061" starttime="20170810 04:30:04.727" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:30:05.061" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:30:05.061" starttime="20170810 04:30:04.726" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:30:05.061" starttime="20170810 04:30:05.061" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:30:05.066" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:30:05.066" starttime="20170810 04:30:05.065" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:30:05.066" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:30:05.066" starttime="20170810 04:30:05.066" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:30:05.067" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:30:05.067" starttime="20170810 04:30:05.067" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:30:05.068" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:30:05.068" starttime="20170810 04:30:05.067" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:30:05.255" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:30:05.255" starttime="20170810 04:30:05.069" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:30:05.255" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:30:05.255" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:30:05.255" starttime="20170810 04:30:05.068" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:30:05.256" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:30:05.256" starttime="20170810 04:30:05.255" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:30:05.256" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:30:05.256" starttime="20170810 04:30:05.256" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:05.256" starttime="20170810 04:30:05.065" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:05.256" starttime="20170810 04:30:05.064" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:05.257" starttime="20170810 04:30:05.064" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:30:05.257" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:30:05.257" starttime="20170810 04:30:05.257" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:30:05.260" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:30:05.260" starttime="20170810 04:30:05.259" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:30:05.261" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:30:05.261" starttime="20170810 04:30:05.260" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:05.261" starttime="20170810 04:30:05.260" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:05.261" starttime="20170810 04:30:05.258" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:05.261" starttime="20170810 04:30:05.257" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:30:05.331" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:30:05.331" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:30:05.331" starttime="20170810 04:30:05.261" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:30:05.333" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:30:05.333" starttime="20170810 04:30:05.332" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:30:05.334" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:30:05.334" starttime="20170810 04:30:05.333" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:05.334" starttime="20170810 04:30:05.333" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:05.334" starttime="20170810 04:30:05.332" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:05.334" starttime="20170810 04:30:05.331" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:30:05.334" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:30:05.335" starttime="20170810 04:30:05.334" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:30:05.335" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:30:05.335" starttime="20170810 04:30:05.063" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:30:05.335" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:30:05.336" starttime="20170810 04:30:05.335" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:30:05.336" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:30:05.336" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:30:05.336" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170810 04:30:05.336" starttime="20170810 04:30:05.336" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:30:05.337" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:30:05.337" starttime="20170810 04:30:05.063" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:30:05.337" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:30:05.337" starttime="20170810 04:30:05.062" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:30:05.338" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:30:05.338" starttime="20170810 04:30:05.337" status="FAIL"></status>
</kw>
<status endtime="20170810 04:30:05.338" starttime="20170810 04:30:05.062" status="FAIL"></status>
</kw>
<status endtime="20170810 04:30:05.339" starttime="20170810 04:30:04.306" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:30:15.344" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:30:15.344" starttime="20170810 04:30:15.343" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:30:15.345" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:30:15.345" starttime="20170810 04:30:15.344" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:30:15.345" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:30:15.345" starttime="20170810 04:30:15.345" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:30:15.346" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:30:15.346" starttime="20170810 04:30:15.346" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:30:15.614" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:30:15.614" starttime="20170810 04:30:15.347" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:30:15.614" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:30:15.614" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:30:15.615" starttime="20170810 04:30:15.346" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:30:15.615" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:30:15.615" starttime="20170810 04:30:15.615" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:30:15.616" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:30:15.616" starttime="20170810 04:30:15.615" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:15.616" starttime="20170810 04:30:15.343" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:15.616" starttime="20170810 04:30:15.342" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:15.616" starttime="20170810 04:30:15.342" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:30:15.617" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:30:15.617" starttime="20170810 04:30:15.616" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:30:15.619" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:30:15.619" starttime="20170810 04:30:15.618" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:30:15.620" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:30:15.620" starttime="20170810 04:30:15.620" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:15.620" starttime="20170810 04:30:15.619" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:15.620" starttime="20170810 04:30:15.618" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:15.620" starttime="20170810 04:30:15.617" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:30:15.687" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:30:15.687" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:30:15.687" starttime="20170810 04:30:15.621" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:30:15.689" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:30:15.689" starttime="20170810 04:30:15.688" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:30:15.690" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:30:15.690" starttime="20170810 04:30:15.690" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:15.690" starttime="20170810 04:30:15.689" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:15.690" starttime="20170810 04:30:15.688" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:15.690" starttime="20170810 04:30:15.687" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:30:15.691" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:30:15.691" starttime="20170810 04:30:15.691" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:30:15.691" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:30:15.691" starttime="20170810 04:30:15.341" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:30:15.692" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:30:15.692" starttime="20170810 04:30:15.691" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:30:15.692" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:30:15.692" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:30:15.692" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:30:15.692" starttime="20170810 04:30:15.692" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:30:15.693" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:30:15.693" starttime="20170810 04:30:15.341" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:30:15.693" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:30:15.693" starttime="20170810 04:30:15.340" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:30:15.694" starttime="20170810 04:30:15.693" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:15.694" starttime="20170810 04:30:15.340" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:30:15.698" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:30:15.698" starttime="20170810 04:30:15.697" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:30:15.699" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:30:15.699" starttime="20170810 04:30:15.698" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:30:15.699" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:30:15.699" starttime="20170810 04:30:15.699" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:30:15.700" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:30:15.700" starttime="20170810 04:30:15.699" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:30:15.889" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:30:15.890" starttime="20170810 04:30:15.701" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:30:15.890" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:30:15.890" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:30:15.890" starttime="20170810 04:30:15.700" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:30:15.890" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:30:15.890" starttime="20170810 04:30:15.890" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:30:15.891" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:30:15.891" starttime="20170810 04:30:15.891" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:15.891" starttime="20170810 04:30:15.696" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:15.891" starttime="20170810 04:30:15.696" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:15.891" starttime="20170810 04:30:15.695" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:30:15.892" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:30:15.892" starttime="20170810 04:30:15.892" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:30:15.894" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:30:15.894" starttime="20170810 04:30:15.894" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:30:15.895" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:30:15.895" starttime="20170810 04:30:15.895" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:15.895" starttime="20170810 04:30:15.894" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:15.896" starttime="20170810 04:30:15.893" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:15.896" starttime="20170810 04:30:15.893" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:30:15.998" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:30:15.999" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:30:15.999" starttime="20170810 04:30:15.896" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:30:16.000" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:30:16.001" starttime="20170810 04:30:16.000" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:30:16.001" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:30:16.002" starttime="20170810 04:30:16.001" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:16.002" starttime="20170810 04:30:16.001" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:16.002" starttime="20170810 04:30:15.999" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:16.002" starttime="20170810 04:30:15.999" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:30:16.002" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:30:16.002" starttime="20170810 04:30:16.002" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:30:16.003" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:30:16.003" starttime="20170810 04:30:15.695" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:30:16.003" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:30:16.003" starttime="20170810 04:30:16.003" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:30:16.004" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:30:16.004" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:30:16.004" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:30:16.004" starttime="20170810 04:30:16.003" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:30:16.004" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:30:16.004" starttime="20170810 04:30:15.694" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:30:16.005" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:30:16.005" starttime="20170810 04:30:15.694" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:30:16.005" starttime="20170810 04:30:16.005" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:30:16.012" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:30:16.013" starttime="20170810 04:30:16.012" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:30:16.013" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:30:16.014" starttime="20170810 04:30:16.013" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:30:16.014" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:30:16.014" starttime="20170810 04:30:16.014" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:30:16.015" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:30:16.015" starttime="20170810 04:30:16.014" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:30:16.271" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:30:16.271" starttime="20170810 04:30:16.016" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:30:16.271" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:30:16.271" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:30:16.271" starttime="20170810 04:30:16.015" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:30:16.272" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:30:16.272" starttime="20170810 04:30:16.272" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:30:16.273" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:30:16.273" starttime="20170810 04:30:16.272" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:16.273" starttime="20170810 04:30:16.011" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:16.273" starttime="20170810 04:30:16.011" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:16.273" starttime="20170810 04:30:16.010" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:30:16.274" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:30:16.274" starttime="20170810 04:30:16.273" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:30:16.277" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:30:16.277" starttime="20170810 04:30:16.275" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:30:16.278" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:30:16.278" starttime="20170810 04:30:16.278" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:16.278" starttime="20170810 04:30:16.277" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:16.278" starttime="20170810 04:30:16.275" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:16.278" starttime="20170810 04:30:16.274" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:30:16.348" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:30:16.348" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:30:16.348" starttime="20170810 04:30:16.278" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:30:16.350" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:30:16.350" starttime="20170810 04:30:16.349" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:30:16.351" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:30:16.351" starttime="20170810 04:30:16.351" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:16.351" starttime="20170810 04:30:16.350" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:16.351" starttime="20170810 04:30:16.349" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:16.351" starttime="20170810 04:30:16.348" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:30:16.352" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:30:16.352" starttime="20170810 04:30:16.352" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:30:16.352" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:30:16.352" starttime="20170810 04:30:16.010" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:30:16.353" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:30:16.353" starttime="20170810 04:30:16.352" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:30:16.354" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:30:16.354" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:30:16.354" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170810 04:30:16.354" starttime="20170810 04:30:16.353" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:30:16.354" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:30:16.354" starttime="20170810 04:30:16.009" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:30:16.355" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:30:16.355" starttime="20170810 04:30:16.006" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:30:16.355" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:30:16.356" starttime="20170810 04:30:16.355" status="FAIL"></status>
</kw>
<status endtime="20170810 04:30:16.356" starttime="20170810 04:30:16.005" status="FAIL"></status>
</kw>
<status endtime="20170810 04:30:16.356" starttime="20170810 04:30:15.339" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:30:26.361" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:30:26.362" starttime="20170810 04:30:26.361" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:30:26.362" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:30:26.362" starttime="20170810 04:30:26.362" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:30:26.363" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:30:26.363" starttime="20170810 04:30:26.363" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:30:26.364" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:30:26.364" starttime="20170810 04:30:26.363" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:30:26.558" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:30:26.558" starttime="20170810 04:30:26.364" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:30:26.559" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:30:26.559" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:30:26.559" starttime="20170810 04:30:26.364" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:30:26.559" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:30:26.559" starttime="20170810 04:30:26.559" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:30:26.560" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:30:26.560" starttime="20170810 04:30:26.560" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:26.560" starttime="20170810 04:30:26.360" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:26.560" starttime="20170810 04:30:26.360" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:26.561" starttime="20170810 04:30:26.359" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:30:26.561" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:30:26.561" starttime="20170810 04:30:26.561" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:30:26.563" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:30:26.563" starttime="20170810 04:30:26.562" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:30:26.564" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:30:26.564" starttime="20170810 04:30:26.564" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:26.564" starttime="20170810 04:30:26.563" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:26.564" starttime="20170810 04:30:26.562" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:26.565" starttime="20170810 04:30:26.561" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:30:26.656" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:30:26.656" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:30:26.656" starttime="20170810 04:30:26.565" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:30:26.658" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:30:26.658" starttime="20170810 04:30:26.657" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:30:26.659" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:30:26.659" starttime="20170810 04:30:26.658" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:26.659" starttime="20170810 04:30:26.658" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:26.659" starttime="20170810 04:30:26.657" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:26.659" starttime="20170810 04:30:26.656" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:30:26.659" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:30:26.659" starttime="20170810 04:30:26.659" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:30:26.660" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:30:26.660" starttime="20170810 04:30:26.359" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:30:26.660" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:30:26.660" starttime="20170810 04:30:26.660" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:30:26.661" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:30:26.661" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:30:26.661" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:30:26.661" starttime="20170810 04:30:26.661" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:30:26.661" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:30:26.661" starttime="20170810 04:30:26.358" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:30:26.662" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:30:26.662" starttime="20170810 04:30:26.358" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:30:26.662" starttime="20170810 04:30:26.662" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:26.662" starttime="20170810 04:30:26.357" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:30:26.666" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:30:26.667" starttime="20170810 04:30:26.665" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:30:26.667" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:30:26.667" starttime="20170810 04:30:26.667" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:30:26.668" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:30:26.668" starttime="20170810 04:30:26.667" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:30:26.669" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:30:26.669" starttime="20170810 04:30:26.668" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:30:26.860" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:30:26.860" starttime="20170810 04:30:26.669" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:30:26.860" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:30:26.860" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:30:26.861" starttime="20170810 04:30:26.669" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:30:26.861" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:30:26.861" starttime="20170810 04:30:26.861" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:30:26.862" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:30:26.862" starttime="20170810 04:30:26.862" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:26.862" starttime="20170810 04:30:26.665" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:26.862" starttime="20170810 04:30:26.665" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:26.862" starttime="20170810 04:30:26.664" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:30:26.863" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:30:26.863" starttime="20170810 04:30:26.863" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:30:26.865" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:30:26.865" starttime="20170810 04:30:26.864" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:30:26.866" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:30:26.866" starttime="20170810 04:30:26.866" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:26.866" starttime="20170810 04:30:26.865" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:26.866" starttime="20170810 04:30:26.864" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:26.866" starttime="20170810 04:30:26.863" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:30:26.960" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:30:26.960" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:30:26.960" starttime="20170810 04:30:26.867" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:30:26.962" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:30:26.962" starttime="20170810 04:30:26.961" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:30:26.963" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:30:26.963" starttime="20170810 04:30:26.962" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:26.963" starttime="20170810 04:30:26.962" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:26.963" starttime="20170810 04:30:26.961" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:26.963" starttime="20170810 04:30:26.960" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:30:26.963" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:30:26.964" starttime="20170810 04:30:26.963" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:30:26.964" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:30:26.964" starttime="20170810 04:30:26.663" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:30:26.964" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:30:26.964" starttime="20170810 04:30:26.964" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:30:26.965" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:30:26.965" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:30:26.965" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:30:26.965" starttime="20170810 04:30:26.965" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:30:26.965" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:30:26.966" starttime="20170810 04:30:26.663" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:30:26.966" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:30:26.966" starttime="20170810 04:30:26.662" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:30:26.966" starttime="20170810 04:30:26.966" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:30:26.971" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:30:26.972" starttime="20170810 04:30:26.971" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:30:26.972" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:30:26.973" starttime="20170810 04:30:26.972" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:30:26.973" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:30:26.974" starttime="20170810 04:30:26.973" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:30:26.974" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:30:26.974" starttime="20170810 04:30:26.974" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:30:27.156" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:30:27.156" starttime="20170810 04:30:26.975" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:30:27.156" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:30:27.156" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:30:27.156" starttime="20170810 04:30:26.975" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:30:27.157" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:30:27.157" starttime="20170810 04:30:27.156" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:30:27.157" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:30:27.157" starttime="20170810 04:30:27.157" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:27.158" starttime="20170810 04:30:26.970" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:27.158" starttime="20170810 04:30:26.969" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:27.158" starttime="20170810 04:30:26.969" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:30:27.158" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:30:27.158" starttime="20170810 04:30:27.158" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:30:27.161" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:30:27.161" starttime="20170810 04:30:27.160" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:30:27.162" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:30:27.162" starttime="20170810 04:30:27.161" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:27.162" starttime="20170810 04:30:27.161" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:27.162" starttime="20170810 04:30:27.159" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:27.162" starttime="20170810 04:30:27.159" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:30:27.253" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:30:27.253" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:30:27.253" starttime="20170810 04:30:27.162" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:30:27.255" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:30:27.255" starttime="20170810 04:30:27.254" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:30:27.256" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:30:27.256" starttime="20170810 04:30:27.255" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:27.256" starttime="20170810 04:30:27.255" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:27.256" starttime="20170810 04:30:27.254" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:27.256" starttime="20170810 04:30:27.253" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:30:27.256" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:30:27.257" starttime="20170810 04:30:27.256" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:30:27.257" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:30:27.257" starttime="20170810 04:30:26.968" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:30:27.257" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:30:27.257" starttime="20170810 04:30:27.257" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:30:27.258" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:30:27.258" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:30:27.258" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170810 04:30:27.258" starttime="20170810 04:30:27.258" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:30:27.259" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:30:27.259" starttime="20170810 04:30:26.968" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:30:27.259" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:30:27.259" starttime="20170810 04:30:26.967" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:30:27.259" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:30:27.259" starttime="20170810 04:30:27.259" status="FAIL"></status>
</kw>
<status endtime="20170810 04:30:27.260" starttime="20170810 04:30:26.966" status="FAIL"></status>
</kw>
<status endtime="20170810 04:30:27.260" starttime="20170810 04:30:26.357" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:30:37.265" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:30:37.266" starttime="20170810 04:30:37.265" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:30:37.267" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:30:37.267" starttime="20170810 04:30:37.266" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:30:37.268" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:30:37.268" starttime="20170810 04:30:37.267" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:30:37.269" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:30:37.269" starttime="20170810 04:30:37.268" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:30:37.467" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:30:37.467" starttime="20170810 04:30:37.270" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:30:37.467" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:30:37.467" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:30:37.467" starttime="20170810 04:30:37.269" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:30:37.468" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:30:37.468" starttime="20170810 04:30:37.468" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:30:37.469" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:30:37.469" starttime="20170810 04:30:37.468" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:37.469" starttime="20170810 04:30:37.264" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:37.469" starttime="20170810 04:30:37.263" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:37.469" starttime="20170810 04:30:37.263" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:30:37.470" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:30:37.470" starttime="20170810 04:30:37.469" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:30:37.472" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:30:37.472" starttime="20170810 04:30:37.471" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:30:37.473" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:30:37.474" starttime="20170810 04:30:37.473" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:37.474" starttime="20170810 04:30:37.472" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:37.474" starttime="20170810 04:30:37.470" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:37.474" starttime="20170810 04:30:37.470" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:30:37.540" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:30:37.540" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:30:37.540" starttime="20170810 04:30:37.474" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:30:37.542" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:30:37.542" starttime="20170810 04:30:37.541" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:30:37.543" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:30:37.543" starttime="20170810 04:30:37.542" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:37.543" starttime="20170810 04:30:37.542" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:37.543" starttime="20170810 04:30:37.541" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:37.543" starttime="20170810 04:30:37.540" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:30:37.543" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:30:37.543" starttime="20170810 04:30:37.543" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:30:37.544" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:30:37.544" starttime="20170810 04:30:37.262" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:30:37.544" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:30:37.544" starttime="20170810 04:30:37.544" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:30:37.545" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:30:37.545" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:30:37.545" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:30:37.545" starttime="20170810 04:30:37.545" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:30:37.545" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:30:37.545" starttime="20170810 04:30:37.262" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:30:37.546" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:30:37.546" starttime="20170810 04:30:37.261" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:30:37.546" starttime="20170810 04:30:37.546" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:37.546" starttime="20170810 04:30:37.261" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:30:37.551" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:30:37.551" starttime="20170810 04:30:37.550" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:30:37.551" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:30:37.551" starttime="20170810 04:30:37.551" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:30:37.552" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:30:37.552" starttime="20170810 04:30:37.552" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:30:37.553" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:30:37.553" starttime="20170810 04:30:37.552" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:30:37.751" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:30:37.752" starttime="20170810 04:30:37.553" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:30:37.752" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:30:37.752" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:30:37.752" starttime="20170810 04:30:37.553" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:30:37.752" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:30:37.752" starttime="20170810 04:30:37.752" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:30:37.753" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:30:37.753" starttime="20170810 04:30:37.753" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:37.753" starttime="20170810 04:30:37.549" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:37.753" starttime="20170810 04:30:37.549" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:37.753" starttime="20170810 04:30:37.548" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:30:37.754" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:30:37.754" starttime="20170810 04:30:37.754" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:30:37.756" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:30:37.756" starttime="20170810 04:30:37.755" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:30:37.757" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:30:37.757" starttime="20170810 04:30:37.757" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:37.757" starttime="20170810 04:30:37.756" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:37.757" starttime="20170810 04:30:37.755" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:37.757" starttime="20170810 04:30:37.754" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:30:37.943" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:30:37.944" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:30:37.944" starttime="20170810 04:30:37.758" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:30:37.945" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:30:37.945" starttime="20170810 04:30:37.945" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:30:37.946" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:30:37.946" starttime="20170810 04:30:37.946" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:37.946" starttime="20170810 04:30:37.945" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:37.947" starttime="20170810 04:30:37.944" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:37.947" starttime="20170810 04:30:37.944" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:30:37.947" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:30:37.947" starttime="20170810 04:30:37.947" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:30:37.947" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:30:37.947" starttime="20170810 04:30:37.547" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:30:37.948" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:30:37.948" starttime="20170810 04:30:37.948" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:30:37.948" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:30:37.949" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:30:37.949" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:30:37.949" starttime="20170810 04:30:37.948" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:30:37.949" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:30:37.949" starttime="20170810 04:30:37.547" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:30:37.949" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:30:37.949" starttime="20170810 04:30:37.547" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:30:37.950" starttime="20170810 04:30:37.950" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:30:37.954" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:30:37.954" starttime="20170810 04:30:37.954" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:30:37.955" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:30:37.955" starttime="20170810 04:30:37.954" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:30:37.955" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:30:37.955" starttime="20170810 04:30:37.955" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:30:37.956" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:30:37.956" starttime="20170810 04:30:37.956" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:30:38.163" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:30:38.164" starttime="20170810 04:30:37.957" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:30:38.164" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:30:38.164" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:30:38.164" starttime="20170810 04:30:37.956" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:30:38.164" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:30:38.164" starttime="20170810 04:30:38.164" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:30:38.165" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:30:38.165" starttime="20170810 04:30:38.165" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:38.165" starttime="20170810 04:30:37.953" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:38.165" starttime="20170810 04:30:37.953" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:38.165" starttime="20170810 04:30:37.952" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:30:38.166" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:30:38.166" starttime="20170810 04:30:38.166" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:30:38.168" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:30:38.168" starttime="20170810 04:30:38.167" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:30:38.169" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:30:38.169" starttime="20170810 04:30:38.169" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:38.169" starttime="20170810 04:30:38.168" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:38.170" starttime="20170810 04:30:38.167" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:38.170" starttime="20170810 04:30:38.166" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:30:38.241" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:30:38.241" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:30:38.241" starttime="20170810 04:30:38.170" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:30:38.243" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:30:38.243" starttime="20170810 04:30:38.242" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:30:38.244" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:30:38.244" starttime="20170810 04:30:38.244" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:38.244" starttime="20170810 04:30:38.243" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:38.244" starttime="20170810 04:30:38.242" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:38.244" starttime="20170810 04:30:38.242" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:30:38.245" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:30:38.245" starttime="20170810 04:30:38.244" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:30:38.245" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:30:38.245" starttime="20170810 04:30:37.951" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:30:38.245" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:30:38.246" starttime="20170810 04:30:38.245" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:30:38.246" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:30:38.246" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:30:38.246" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170810 04:30:38.246" starttime="20170810 04:30:38.246" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:30:38.247" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:30:38.247" starttime="20170810 04:30:37.951" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:30:38.247" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:30:38.247" starttime="20170810 04:30:37.950" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:30:38.248" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:30:38.248" starttime="20170810 04:30:38.247" status="FAIL"></status>
</kw>
<status endtime="20170810 04:30:38.248" starttime="20170810 04:30:37.950" status="FAIL"></status>
</kw>
<status endtime="20170810 04:30:38.248" starttime="20170810 04:30:37.260" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:30:48.253" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:30:48.253" starttime="20170810 04:30:48.253" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:30:48.254" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:30:48.254" starttime="20170810 04:30:48.254" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:30:48.255" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:30:48.255" starttime="20170810 04:30:48.254" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:30:48.255" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:30:48.255" starttime="20170810 04:30:48.255" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:30:48.467" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:30:48.467" starttime="20170810 04:30:48.256" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:30:48.467" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:30:48.467" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:30:48.467" starttime="20170810 04:30:48.256" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:30:48.468" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:30:48.468" starttime="20170810 04:30:48.468" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:30:48.469" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:30:48.469" starttime="20170810 04:30:48.468" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:48.469" starttime="20170810 04:30:48.252" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:48.469" starttime="20170810 04:30:48.252" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:48.469" starttime="20170810 04:30:48.251" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:30:48.470" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:30:48.470" starttime="20170810 04:30:48.469" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:30:48.472" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:30:48.472" starttime="20170810 04:30:48.471" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:30:48.473" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:30:48.473" starttime="20170810 04:30:48.473" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:48.473" starttime="20170810 04:30:48.472" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:48.473" starttime="20170810 04:30:48.470" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:48.473" starttime="20170810 04:30:48.470" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:30:48.556" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:30:48.556" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:30:48.556" starttime="20170810 04:30:48.474" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:30:48.558" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:30:48.558" starttime="20170810 04:30:48.557" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:30:48.559" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:30:48.559" starttime="20170810 04:30:48.559" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:48.559" starttime="20170810 04:30:48.558" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:48.559" starttime="20170810 04:30:48.557" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:48.559" starttime="20170810 04:30:48.557" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:30:48.560" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:30:48.560" starttime="20170810 04:30:48.560" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:30:48.560" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:30:48.560" starttime="20170810 04:30:48.250" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:30:48.561" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:30:48.561" starttime="20170810 04:30:48.560" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:30:48.561" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:30:48.561" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:30:48.561" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:30:48.561" starttime="20170810 04:30:48.561" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:30:48.562" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:30:48.562" starttime="20170810 04:30:48.250" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:30:48.562" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:30:48.562" starttime="20170810 04:30:48.250" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:30:48.563" starttime="20170810 04:30:48.562" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:48.563" starttime="20170810 04:30:48.249" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:30:48.566" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:30:48.567" starttime="20170810 04:30:48.566" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:30:48.567" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:30:48.567" starttime="20170810 04:30:48.567" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:30:48.568" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:30:48.568" starttime="20170810 04:30:48.568" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:30:48.569" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:30:48.569" starttime="20170810 04:30:48.568" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:30:48.756" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:30:48.756" starttime="20170810 04:30:48.569" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:30:48.756" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:30:48.756" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:30:48.756" starttime="20170810 04:30:48.569" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:30:48.757" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:30:48.757" starttime="20170810 04:30:48.756" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:30:48.758" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:30:48.758" starttime="20170810 04:30:48.757" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:48.758" starttime="20170810 04:30:48.565" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:48.758" starttime="20170810 04:30:48.565" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:48.758" starttime="20170810 04:30:48.564" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:30:48.759" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:30:48.759" starttime="20170810 04:30:48.758" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:30:48.761" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:30:48.761" starttime="20170810 04:30:48.760" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:30:48.762" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:30:48.762" starttime="20170810 04:30:48.761" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:48.762" starttime="20170810 04:30:48.761" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:48.762" starttime="20170810 04:30:48.759" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:48.762" starttime="20170810 04:30:48.759" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:30:48.855" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:30:48.856" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:30:48.856" starttime="20170810 04:30:48.762" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:30:48.857" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:30:48.857" starttime="20170810 04:30:48.857" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:30:48.858" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:30:48.858" starttime="20170810 04:30:48.858" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:48.859" starttime="20170810 04:30:48.858" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:48.859" starttime="20170810 04:30:48.856" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:48.859" starttime="20170810 04:30:48.856" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:30:48.859" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:30:48.859" starttime="20170810 04:30:48.859" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:30:48.859" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:30:48.860" starttime="20170810 04:30:48.564" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:30:48.860" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:30:48.860" starttime="20170810 04:30:48.860" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:30:48.861" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:30:48.861" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:30:48.861" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:30:48.861" starttime="20170810 04:30:48.861" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:30:48.861" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:30:48.861" starttime="20170810 04:30:48.563" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:30:48.862" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:30:48.862" starttime="20170810 04:30:48.563" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:30:48.862" starttime="20170810 04:30:48.862" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:30:48.869" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:30:48.870" starttime="20170810 04:30:48.869" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:30:48.870" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:30:48.870" starttime="20170810 04:30:48.870" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:30:48.871" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:30:48.871" starttime="20170810 04:30:48.871" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:30:48.872" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:30:48.872" starttime="20170810 04:30:48.871" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:30:49.093" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:30:49.093" starttime="20170810 04:30:48.872" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:30:49.093" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:30:49.093" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:30:49.093" starttime="20170810 04:30:48.872" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:30:49.094" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:30:49.094" starttime="20170810 04:30:49.094" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:30:49.095" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:30:49.095" starttime="20170810 04:30:49.094" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:49.095" starttime="20170810 04:30:48.868" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:49.095" starttime="20170810 04:30:48.868" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:49.095" starttime="20170810 04:30:48.867" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:30:49.096" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:30:49.096" starttime="20170810 04:30:49.095" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:30:49.098" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:30:49.098" starttime="20170810 04:30:49.097" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:30:49.099" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:30:49.099" starttime="20170810 04:30:49.099" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:49.099" starttime="20170810 04:30:49.098" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:49.100" starttime="20170810 04:30:49.097" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:49.100" starttime="20170810 04:30:49.096" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:30:49.217" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:30:49.217" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:30:49.217" starttime="20170810 04:30:49.100" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:30:49.219" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:30:49.219" starttime="20170810 04:30:49.218" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:30:49.220" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:30:49.220" starttime="20170810 04:30:49.219" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:49.220" starttime="20170810 04:30:49.219" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:49.220" starttime="20170810 04:30:49.218" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:49.220" starttime="20170810 04:30:49.217" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:30:49.220" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:30:49.220" starttime="20170810 04:30:49.220" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:30:49.221" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:30:49.221" starttime="20170810 04:30:48.867" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:30:49.221" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:30:49.221" starttime="20170810 04:30:49.221" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:30:49.222" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:30:49.222" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:30:49.222" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170810 04:30:49.222" starttime="20170810 04:30:49.222" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:30:49.222" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:30:49.222" starttime="20170810 04:30:48.866" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:30:49.223" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:30:49.223" starttime="20170810 04:30:48.863" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:30:49.223" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:30:49.223" starttime="20170810 04:30:49.223" status="FAIL"></status>
</kw>
<status endtime="20170810 04:30:49.223" starttime="20170810 04:30:48.862" status="FAIL"></status>
</kw>
<status endtime="20170810 04:30:49.224" starttime="20170810 04:30:48.249" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:30:59.229" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:30:59.229" starttime="20170810 04:30:59.228" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:30:59.230" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:30:59.230" starttime="20170810 04:30:59.229" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:30:59.230" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:30:59.230" starttime="20170810 04:30:59.230" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:30:59.231" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:30:59.231" starttime="20170810 04:30:59.231" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:30:59.417" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:30:59.417" starttime="20170810 04:30:59.232" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:30:59.417" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:30:59.417" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:30:59.417" starttime="20170810 04:30:59.231" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:30:59.418" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:30:59.418" starttime="20170810 04:30:59.417" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:30:59.418" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:30:59.418" starttime="20170810 04:30:59.418" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:59.419" starttime="20170810 04:30:59.228" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:59.419" starttime="20170810 04:30:59.227" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:59.419" starttime="20170810 04:30:59.227" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:30:59.420" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:30:59.420" starttime="20170810 04:30:59.419" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:30:59.423" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:30:59.423" starttime="20170810 04:30:59.422" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:30:59.424" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:30:59.424" starttime="20170810 04:30:59.424" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:59.424" starttime="20170810 04:30:59.423" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:59.425" starttime="20170810 04:30:59.421" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:59.425" starttime="20170810 04:30:59.420" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:30:59.494" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:30:59.495" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:30:59.495" starttime="20170810 04:30:59.425" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:30:59.496" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:30:59.496" starttime="20170810 04:30:59.496" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:30:59.497" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:30:59.498" starttime="20170810 04:30:59.497" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:59.498" starttime="20170810 04:30:59.497" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:59.498" starttime="20170810 04:30:59.495" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:59.498" starttime="20170810 04:30:59.495" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:30:59.498" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:30:59.498" starttime="20170810 04:30:59.498" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:30:59.499" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:30:59.499" starttime="20170810 04:30:59.226" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:30:59.499" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:30:59.499" starttime="20170810 04:30:59.499" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:30:59.500" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:30:59.500" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:30:59.500" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:30:59.500" starttime="20170810 04:30:59.499" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:30:59.500" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:30:59.500" starttime="20170810 04:30:59.225" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:30:59.501" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:30:59.501" starttime="20170810 04:30:59.225" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:30:59.501" starttime="20170810 04:30:59.501" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:59.501" starttime="20170810 04:30:59.225" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:30:59.507" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:30:59.507" starttime="20170810 04:30:59.506" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:30:59.508" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:30:59.508" starttime="20170810 04:30:59.508" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:30:59.509" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:30:59.509" starttime="20170810 04:30:59.509" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:30:59.510" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:30:59.510" starttime="20170810 04:30:59.509" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:30:59.725" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:30:59.725" starttime="20170810 04:30:59.511" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:30:59.725" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:30:59.725" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:30:59.725" starttime="20170810 04:30:59.510" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:30:59.726" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:30:59.726" starttime="20170810 04:30:59.726" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:30:59.727" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:30:59.727" starttime="20170810 04:30:59.727" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:59.728" starttime="20170810 04:30:59.505" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:59.728" starttime="20170810 04:30:59.505" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:59.728" starttime="20170810 04:30:59.504" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:30:59.729" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:30:59.729" starttime="20170810 04:30:59.728" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:30:59.731" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:30:59.731" starttime="20170810 04:30:59.730" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:30:59.732" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:30:59.732" starttime="20170810 04:30:59.731" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:59.732" starttime="20170810 04:30:59.731" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:59.732" starttime="20170810 04:30:59.729" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:59.732" starttime="20170810 04:30:59.729" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:30:59.837" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:30:59.837" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:30:59.837" starttime="20170810 04:30:59.732" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:30:59.839" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:30:59.839" starttime="20170810 04:30:59.838" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:30:59.840" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:30:59.840" starttime="20170810 04:30:59.839" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:59.840" starttime="20170810 04:30:59.839" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:59.840" starttime="20170810 04:30:59.838" status="PASS"></status>
</kw>
<status endtime="20170810 04:30:59.840" starttime="20170810 04:30:59.837" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:30:59.840" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:30:59.841" starttime="20170810 04:30:59.840" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:30:59.841" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:30:59.841" starttime="20170810 04:30:59.503" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:30:59.841" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:30:59.841" starttime="20170810 04:30:59.841" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:30:59.842" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:30:59.842" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:30:59.842" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:30:59.842" starttime="20170810 04:30:59.842" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:30:59.842" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:30:59.842" starttime="20170810 04:30:59.502" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:30:59.843" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:30:59.843" starttime="20170810 04:30:59.501" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:30:59.843" starttime="20170810 04:30:59.843" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:30:59.847" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:30:59.848" starttime="20170810 04:30:59.847" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:30:59.848" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:30:59.848" starttime="20170810 04:30:59.848" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:30:59.849" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:30:59.849" starttime="20170810 04:30:59.849" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:30:59.850" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:30:59.850" starttime="20170810 04:30:59.849" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:31:00.064" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:31:00.065" starttime="20170810 04:30:59.850" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:31:00.065" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:31:00.065" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:31:00.065" starttime="20170810 04:30:59.850" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:31:00.065" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:31:00.065" starttime="20170810 04:31:00.065" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:31:00.066" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:31:00.066" starttime="20170810 04:31:00.066" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:00.066" starttime="20170810 04:30:59.847" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:00.066" starttime="20170810 04:30:59.846" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:00.066" starttime="20170810 04:30:59.846" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:31:00.067" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:31:00.067" starttime="20170810 04:31:00.067" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:31:00.070" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:31:00.070" starttime="20170810 04:31:00.069" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:31:00.070" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:31:00.071" starttime="20170810 04:31:00.070" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:00.071" starttime="20170810 04:31:00.070" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:00.071" starttime="20170810 04:31:00.068" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:00.071" starttime="20170810 04:31:00.067" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:31:00.226" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:31:00.226" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:31:00.226" starttime="20170810 04:31:00.071" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:31:00.228" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:31:00.228" starttime="20170810 04:31:00.227" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:31:00.229" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:31:00.229" starttime="20170810 04:31:00.229" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:00.229" starttime="20170810 04:31:00.228" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:00.229" starttime="20170810 04:31:00.227" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:00.229" starttime="20170810 04:31:00.227" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:31:00.230" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:31:00.230" starttime="20170810 04:31:00.230" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:31:00.230" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:31:00.230" starttime="20170810 04:30:59.845" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:31:00.231" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:31:00.231" starttime="20170810 04:31:00.230" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:31:00.231" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:31:00.231" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:31:00.232" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170810 04:31:00.232" starttime="20170810 04:31:00.231" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:31:00.232" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:31:00.232" starttime="20170810 04:30:59.844" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:31:00.232" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:31:00.232" starttime="20170810 04:30:59.844" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:31:00.233" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:31:00.233" starttime="20170810 04:31:00.232" status="FAIL"></status>
</kw>
<status endtime="20170810 04:31:00.233" starttime="20170810 04:30:59.843" status="FAIL"></status>
</kw>
<status endtime="20170810 04:31:00.233" starttime="20170810 04:30:59.224" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:31:10.238" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:31:10.238" starttime="20170810 04:31:10.237" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:31:10.239" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:31:10.239" starttime="20170810 04:31:10.239" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:31:10.240" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:31:10.240" starttime="20170810 04:31:10.240" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:31:10.241" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:31:10.241" starttime="20170810 04:31:10.241" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:31:10.444" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:31:10.444" starttime="20170810 04:31:10.242" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:31:10.444" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:31:10.444" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:31:10.444" starttime="20170810 04:31:10.242" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:31:10.445" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:31:10.445" starttime="20170810 04:31:10.445" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:31:10.446" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:31:10.446" starttime="20170810 04:31:10.446" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:10.446" starttime="20170810 04:31:10.237" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:10.446" starttime="20170810 04:31:10.237" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:10.446" starttime="20170810 04:31:10.236" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:31:10.447" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:31:10.447" starttime="20170810 04:31:10.447" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:31:10.449" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:31:10.449" starttime="20170810 04:31:10.448" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:31:10.450" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:31:10.450" starttime="20170810 04:31:10.450" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:10.450" starttime="20170810 04:31:10.449" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:10.450" starttime="20170810 04:31:10.448" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:10.450" starttime="20170810 04:31:10.447" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:31:10.517" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:31:10.517" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:31:10.517" starttime="20170810 04:31:10.451" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:31:10.519" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:31:10.519" starttime="20170810 04:31:10.518" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:31:10.519" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:31:10.520" starttime="20170810 04:31:10.519" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:10.520" starttime="20170810 04:31:10.519" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:10.520" starttime="20170810 04:31:10.518" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:10.520" starttime="20170810 04:31:10.517" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:31:10.520" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:31:10.520" starttime="20170810 04:31:10.520" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:31:10.521" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:31:10.521" starttime="20170810 04:31:10.235" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:31:10.521" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:31:10.521" starttime="20170810 04:31:10.521" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:31:10.522" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:31:10.522" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:31:10.522" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:31:10.522" starttime="20170810 04:31:10.521" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:31:10.522" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:31:10.522" starttime="20170810 04:31:10.235" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:31:10.523" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:31:10.523" starttime="20170810 04:31:10.234" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:31:10.523" starttime="20170810 04:31:10.523" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:10.523" starttime="20170810 04:31:10.234" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:31:10.528" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:31:10.529" starttime="20170810 04:31:10.527" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:31:10.529" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:31:10.529" starttime="20170810 04:31:10.529" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:31:10.530" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:31:10.530" starttime="20170810 04:31:10.530" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:31:10.531" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:31:10.531" starttime="20170810 04:31:10.531" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:31:10.726" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:31:10.726" starttime="20170810 04:31:10.532" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:31:10.726" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:31:10.726" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:31:10.726" starttime="20170810 04:31:10.532" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:31:10.727" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:31:10.727" starttime="20170810 04:31:10.726" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:31:10.727" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:31:10.727" starttime="20170810 04:31:10.727" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:10.727" starttime="20170810 04:31:10.526" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:10.727" starttime="20170810 04:31:10.526" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:10.728" starttime="20170810 04:31:10.525" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:31:10.728" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:31:10.728" starttime="20170810 04:31:10.728" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:31:10.730" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:31:10.730" starttime="20170810 04:31:10.730" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:31:10.731" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:31:10.732" starttime="20170810 04:31:10.731" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:10.733" starttime="20170810 04:31:10.731" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:10.733" starttime="20170810 04:31:10.729" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:10.733" starttime="20170810 04:31:10.729" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:31:10.828" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:31:10.828" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:31:10.828" starttime="20170810 04:31:10.733" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:31:10.830" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:31:10.830" starttime="20170810 04:31:10.830" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:31:10.831" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:31:10.831" starttime="20170810 04:31:10.831" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:10.831" starttime="20170810 04:31:10.830" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:10.831" starttime="20170810 04:31:10.829" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:10.831" starttime="20170810 04:31:10.829" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:31:10.832" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:31:10.832" starttime="20170810 04:31:10.832" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:31:10.832" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:31:10.832" starttime="20170810 04:31:10.524" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:31:10.833" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:31:10.833" starttime="20170810 04:31:10.832" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:31:10.833" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:31:10.833" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:31:10.833" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:31:10.833" starttime="20170810 04:31:10.833" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:31:10.834" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:31:10.834" starttime="20170810 04:31:10.524" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:31:10.834" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:31:10.834" starttime="20170810 04:31:10.523" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:31:10.835" starttime="20170810 04:31:10.835" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:31:10.841" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:31:10.842" starttime="20170810 04:31:10.841" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:31:10.842" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:31:10.842" starttime="20170810 04:31:10.842" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:31:10.843" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:31:10.843" starttime="20170810 04:31:10.843" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:31:10.844" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:31:10.844" starttime="20170810 04:31:10.844" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:31:11.079" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:31:11.079" starttime="20170810 04:31:10.845" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:31:11.079" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:31:11.079" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:31:11.079" starttime="20170810 04:31:10.845" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:31:11.080" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:31:11.080" starttime="20170810 04:31:11.080" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:31:11.081" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:31:11.081" starttime="20170810 04:31:11.080" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:11.081" starttime="20170810 04:31:10.840" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:11.081" starttime="20170810 04:31:10.839" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:11.081" starttime="20170810 04:31:10.838" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:31:11.082" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:31:11.082" starttime="20170810 04:31:11.081" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:31:11.084" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:31:11.084" starttime="20170810 04:31:11.083" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:31:11.085" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:31:11.085" starttime="20170810 04:31:11.085" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:11.085" starttime="20170810 04:31:11.084" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:11.085" starttime="20170810 04:31:11.082" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:11.085" starttime="20170810 04:31:11.082" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:31:11.174" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:31:11.174" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:31:11.174" starttime="20170810 04:31:11.086" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:31:11.176" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:31:11.176" starttime="20170810 04:31:11.176" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:31:11.177" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:31:11.177" starttime="20170810 04:31:11.177" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:11.177" starttime="20170810 04:31:11.176" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:11.177" starttime="20170810 04:31:11.175" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:11.177" starttime="20170810 04:31:11.175" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:31:11.178" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:31:11.178" starttime="20170810 04:31:11.178" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:31:11.178" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:31:11.178" starttime="20170810 04:31:10.837" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:31:11.179" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:31:11.179" starttime="20170810 04:31:11.178" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:31:11.179" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:31:11.179" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:31:11.179" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170810 04:31:11.179" starttime="20170810 04:31:11.179" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:31:11.180" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:31:11.180" starttime="20170810 04:31:10.837" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:31:11.180" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:31:11.180" starttime="20170810 04:31:10.836" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:31:11.181" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:31:11.181" starttime="20170810 04:31:11.180" status="FAIL"></status>
</kw>
<status endtime="20170810 04:31:11.181" starttime="20170810 04:31:10.835" status="FAIL"></status>
</kw>
<status endtime="20170810 04:31:11.181" starttime="20170810 04:31:10.233" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:31:21.186" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:31:21.186" starttime="20170810 04:31:21.186" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:31:21.187" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:31:21.187" starttime="20170810 04:31:21.187" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:31:21.188" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:31:21.188" starttime="20170810 04:31:21.187" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:31:21.188" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:31:21.188" starttime="20170810 04:31:21.188" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:31:21.406" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:31:21.406" starttime="20170810 04:31:21.189" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:31:21.406" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:31:21.406" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:31:21.406" starttime="20170810 04:31:21.189" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:31:21.407" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:31:21.407" starttime="20170810 04:31:21.407" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:31:21.408" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:31:21.408" starttime="20170810 04:31:21.408" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:21.408" starttime="20170810 04:31:21.185" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:21.408" starttime="20170810 04:31:21.185" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:21.408" starttime="20170810 04:31:21.184" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:31:21.409" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:31:21.409" starttime="20170810 04:31:21.409" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:31:21.411" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:31:21.411" starttime="20170810 04:31:21.410" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:31:21.412" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:31:21.412" starttime="20170810 04:31:21.412" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:21.412" starttime="20170810 04:31:21.411" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:21.412" starttime="20170810 04:31:21.410" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:21.412" starttime="20170810 04:31:21.409" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:31:21.495" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:31:21.495" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:31:21.495" starttime="20170810 04:31:21.413" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:31:21.497" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:31:21.497" starttime="20170810 04:31:21.496" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:31:21.498" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:31:21.498" starttime="20170810 04:31:21.497" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:21.498" starttime="20170810 04:31:21.497" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:21.498" starttime="20170810 04:31:21.496" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:21.498" starttime="20170810 04:31:21.495" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:31:21.498" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:31:21.499" starttime="20170810 04:31:21.498" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:31:21.499" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:31:21.499" starttime="20170810 04:31:21.183" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:31:21.499" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:31:21.499" starttime="20170810 04:31:21.499" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:31:21.500" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:31:21.500" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:31:21.500" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:31:21.500" starttime="20170810 04:31:21.500" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:31:21.500" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:31:21.500" starttime="20170810 04:31:21.183" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:31:21.501" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:31:21.501" starttime="20170810 04:31:21.182" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:31:21.501" starttime="20170810 04:31:21.501" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:21.501" starttime="20170810 04:31:21.182" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:31:21.505" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:31:21.506" starttime="20170810 04:31:21.505" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:31:21.506" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:31:21.506" starttime="20170810 04:31:21.506" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:31:21.507" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:31:21.507" starttime="20170810 04:31:21.506" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:31:21.507" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:31:21.507" starttime="20170810 04:31:21.507" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:31:21.715" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:31:21.715" starttime="20170810 04:31:21.508" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:31:21.715" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:31:21.715" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:31:21.715" starttime="20170810 04:31:21.508" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:31:21.716" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:31:21.716" starttime="20170810 04:31:21.716" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:31:21.717" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:31:21.717" starttime="20170810 04:31:21.716" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:21.717" starttime="20170810 04:31:21.504" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:21.717" starttime="20170810 04:31:21.504" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:21.717" starttime="20170810 04:31:21.503" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:31:21.718" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:31:21.718" starttime="20170810 04:31:21.717" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:31:21.720" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:31:21.720" starttime="20170810 04:31:21.719" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:31:21.721" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:31:21.721" starttime="20170810 04:31:21.721" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:21.721" starttime="20170810 04:31:21.720" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:21.721" starttime="20170810 04:31:21.719" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:21.721" starttime="20170810 04:31:21.718" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:31:21.815" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:31:21.815" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:31:21.815" starttime="20170810 04:31:21.722" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:31:21.817" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:31:21.817" starttime="20170810 04:31:21.816" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:31:21.818" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:31:21.818" starttime="20170810 04:31:21.818" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:21.818" starttime="20170810 04:31:21.817" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:21.818" starttime="20170810 04:31:21.816" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:21.818" starttime="20170810 04:31:21.815" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:31:21.819" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:31:21.819" starttime="20170810 04:31:21.818" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:31:21.819" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:31:21.819" starttime="20170810 04:31:21.502" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:31:21.820" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:31:21.820" starttime="20170810 04:31:21.819" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:31:21.820" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:31:21.820" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:31:21.820" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:31:21.820" starttime="20170810 04:31:21.820" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:31:21.821" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:31:21.821" starttime="20170810 04:31:21.502" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:31:21.821" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:31:21.821" starttime="20170810 04:31:21.502" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:31:21.822" starttime="20170810 04:31:21.821" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:31:21.829" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:31:21.829" starttime="20170810 04:31:21.828" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:31:21.830" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:31:21.830" starttime="20170810 04:31:21.829" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:31:21.830" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:31:21.830" starttime="20170810 04:31:21.830" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:31:21.831" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:31:21.831" starttime="20170810 04:31:21.831" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:31:22.063" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:31:22.063" starttime="20170810 04:31:21.832" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:31:22.063" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:31:22.063" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:31:22.063" starttime="20170810 04:31:21.831" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:31:22.064" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:31:22.064" starttime="20170810 04:31:22.064" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:31:22.065" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:31:22.065" starttime="20170810 04:31:22.064" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:22.065" starttime="20170810 04:31:21.828" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:22.065" starttime="20170810 04:31:21.827" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:22.065" starttime="20170810 04:31:21.826" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:31:22.066" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:31:22.066" starttime="20170810 04:31:22.065" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:31:22.068" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:31:22.068" starttime="20170810 04:31:22.067" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:31:22.069" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:31:22.069" starttime="20170810 04:31:22.069" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:22.069" starttime="20170810 04:31:22.068" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:22.069" starttime="20170810 04:31:22.066" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:22.069" starttime="20170810 04:31:22.066" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:31:22.169" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:31:22.169" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:31:22.169" starttime="20170810 04:31:22.070" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:31:22.171" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:31:22.171" starttime="20170810 04:31:22.170" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:31:22.171" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:31:22.172" starttime="20170810 04:31:22.171" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:22.172" starttime="20170810 04:31:22.171" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:22.172" starttime="20170810 04:31:22.170" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:22.172" starttime="20170810 04:31:22.169" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:31:22.172" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:31:22.172" starttime="20170810 04:31:22.172" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:31:22.172" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:31:22.173" starttime="20170810 04:31:21.826" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:31:22.173" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:31:22.173" starttime="20170810 04:31:22.173" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:31:22.174" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:31:22.174" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:31:22.174" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170810 04:31:22.174" starttime="20170810 04:31:22.173" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:31:22.174" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:31:22.174" starttime="20170810 04:31:21.825" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:31:22.174" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:31:22.174" starttime="20170810 04:31:21.822" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:31:22.175" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:31:22.175" starttime="20170810 04:31:22.175" status="FAIL"></status>
</kw>
<status endtime="20170810 04:31:22.175" starttime="20170810 04:31:21.822" status="FAIL"></status>
</kw>
<status endtime="20170810 04:31:22.175" starttime="20170810 04:31:21.181" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:31:32.181" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:31:32.181" starttime="20170810 04:31:32.180" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:31:32.182" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:31:32.182" starttime="20170810 04:31:32.181" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:31:32.183" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:31:32.183" starttime="20170810 04:31:32.182" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:31:32.183" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:31:32.183" starttime="20170810 04:31:32.183" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:31:32.366" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:31:32.366" starttime="20170810 04:31:32.184" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:31:32.366" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:31:32.366" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:31:32.367" starttime="20170810 04:31:32.184" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:31:32.367" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:31:32.367" starttime="20170810 04:31:32.367" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:31:32.368" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:31:32.368" starttime="20170810 04:31:32.368" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:32.368" starttime="20170810 04:31:32.180" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:32.368" starttime="20170810 04:31:32.180" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:32.368" starttime="20170810 04:31:32.179" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:31:32.369" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:31:32.369" starttime="20170810 04:31:32.369" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:31:32.371" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:31:32.371" starttime="20170810 04:31:32.371" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:31:32.372" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:31:32.372" starttime="20170810 04:31:32.372" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:32.373" starttime="20170810 04:31:32.371" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:32.373" starttime="20170810 04:31:32.370" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:32.373" starttime="20170810 04:31:32.369" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:31:32.440" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:31:32.440" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:31:32.441" starttime="20170810 04:31:32.373" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:31:32.442" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:31:32.442" starttime="20170810 04:31:32.442" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:31:32.443" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:31:32.443" starttime="20170810 04:31:32.443" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:32.443" starttime="20170810 04:31:32.442" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:32.444" starttime="20170810 04:31:32.441" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:32.444" starttime="20170810 04:31:32.441" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:31:32.444" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:31:32.444" starttime="20170810 04:31:32.444" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:31:32.444" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:31:32.444" starttime="20170810 04:31:32.178" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:31:32.445" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:31:32.445" starttime="20170810 04:31:32.445" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:31:32.446" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:31:32.446" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:31:32.446" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:31:32.446" starttime="20170810 04:31:32.445" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:31:32.446" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:31:32.446" starttime="20170810 04:31:32.177" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:31:32.446" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:31:32.446" starttime="20170810 04:31:32.177" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:31:32.447" starttime="20170810 04:31:32.447" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:32.447" starttime="20170810 04:31:32.177" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:31:32.451" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:31:32.451" starttime="20170810 04:31:32.450" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:31:32.452" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:31:32.452" starttime="20170810 04:31:32.452" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:31:32.452" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:31:32.453" starttime="20170810 04:31:32.452" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:31:32.453" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:31:32.453" starttime="20170810 04:31:32.453" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:31:32.633" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:31:32.633" starttime="20170810 04:31:32.454" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:31:32.633" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:31:32.633" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:31:32.633" starttime="20170810 04:31:32.453" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:31:32.634" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:31:32.634" starttime="20170810 04:31:32.634" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:31:32.635" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:31:32.635" starttime="20170810 04:31:32.634" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:32.635" starttime="20170810 04:31:32.450" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:32.635" starttime="20170810 04:31:32.449" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:32.635" starttime="20170810 04:31:32.449" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:31:32.636" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:31:32.636" starttime="20170810 04:31:32.635" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:31:32.638" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:31:32.638" starttime="20170810 04:31:32.637" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:31:32.639" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:31:32.639" starttime="20170810 04:31:32.639" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:32.639" starttime="20170810 04:31:32.638" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:32.639" starttime="20170810 04:31:32.637" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:32.639" starttime="20170810 04:31:32.636" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:31:32.732" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:31:32.732" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:31:32.733" starttime="20170810 04:31:32.640" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:31:32.734" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:31:32.734" starttime="20170810 04:31:32.734" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:31:32.735" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:31:32.735" starttime="20170810 04:31:32.735" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:32.735" starttime="20170810 04:31:32.734" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:32.736" starttime="20170810 04:31:32.733" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:32.736" starttime="20170810 04:31:32.733" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:31:32.736" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:31:32.736" starttime="20170810 04:31:32.736" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:31:32.736" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:31:32.736" starttime="20170810 04:31:32.448" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:31:32.737" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:31:32.737" starttime="20170810 04:31:32.737" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:31:32.738" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:31:32.738" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:31:32.738" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:31:32.738" starttime="20170810 04:31:32.737" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:31:32.738" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:31:32.738" starttime="20170810 04:31:32.448" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:31:32.738" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:31:32.738" starttime="20170810 04:31:32.447" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:31:32.739" starttime="20170810 04:31:32.739" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:31:32.743" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:31:32.743" starttime="20170810 04:31:32.743" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:31:32.744" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:31:32.744" starttime="20170810 04:31:32.744" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:31:32.745" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:31:32.745" starttime="20170810 04:31:32.744" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:31:32.745" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:31:32.745" starttime="20170810 04:31:32.745" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:31:32.990" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:31:32.990" starttime="20170810 04:31:32.746" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:31:32.990" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:31:32.991" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:31:32.991" starttime="20170810 04:31:32.746" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:31:32.991" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:31:32.991" starttime="20170810 04:31:32.991" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:31:32.992" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:31:32.992" starttime="20170810 04:31:32.992" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:32.992" starttime="20170810 04:31:32.742" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:32.992" starttime="20170810 04:31:32.742" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:32.992" starttime="20170810 04:31:32.741" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:31:32.993" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:31:32.993" starttime="20170810 04:31:32.993" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:31:32.995" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:31:32.995" starttime="20170810 04:31:32.994" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:31:32.996" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:31:32.996" starttime="20170810 04:31:32.996" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:32.996" starttime="20170810 04:31:32.996" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:32.997" starttime="20170810 04:31:32.994" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:32.997" starttime="20170810 04:31:32.993" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:31:33.082" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:31:33.082" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:31:33.083" starttime="20170810 04:31:32.997" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:31:33.084" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:31:33.085" starttime="20170810 04:31:33.084" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:31:33.086" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:31:33.086" starttime="20170810 04:31:33.086" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:33.086" starttime="20170810 04:31:33.085" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:33.087" starttime="20170810 04:31:33.083" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:33.087" starttime="20170810 04:31:33.083" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:31:33.087" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:31:33.087" starttime="20170810 04:31:33.087" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:31:33.087" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:31:33.087" starttime="20170810 04:31:32.741" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:31:33.088" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:31:33.088" starttime="20170810 04:31:33.088" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:31:33.089" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:31:33.089" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:31:33.089" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170810 04:31:33.089" starttime="20170810 04:31:33.088" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:31:33.089" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:31:33.089" starttime="20170810 04:31:32.740" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:31:33.089" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:31:33.090" starttime="20170810 04:31:32.739" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:31:33.090" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:31:33.090" starttime="20170810 04:31:33.090" status="FAIL"></status>
</kw>
<status endtime="20170810 04:31:33.090" starttime="20170810 04:31:32.739" status="FAIL"></status>
</kw>
<status endtime="20170810 04:31:33.091" starttime="20170810 04:31:32.176" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:31:43.100" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:31:43.100" starttime="20170810 04:31:43.099" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:31:43.102" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:31:43.102" starttime="20170810 04:31:43.101" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:31:43.103" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:31:43.103" starttime="20170810 04:31:43.102" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:31:43.104" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:31:43.104" starttime="20170810 04:31:43.103" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:31:43.329" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:31:43.329" starttime="20170810 04:31:43.105" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:31:43.330" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:31:43.330" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:31:43.330" starttime="20170810 04:31:43.105" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:31:43.331" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:31:43.331" starttime="20170810 04:31:43.330" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:31:43.332" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:31:43.332" starttime="20170810 04:31:43.331" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:43.332" starttime="20170810 04:31:43.098" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:43.332" starttime="20170810 04:31:43.097" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:43.332" starttime="20170810 04:31:43.096" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:31:43.333" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:31:43.333" starttime="20170810 04:31:43.333" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:31:43.336" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:31:43.336" starttime="20170810 04:31:43.335" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:31:43.337" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:31:43.338" starttime="20170810 04:31:43.337" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:43.338" starttime="20170810 04:31:43.336" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:43.338" starttime="20170810 04:31:43.334" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:43.338" starttime="20170810 04:31:43.334" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:31:43.422" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:31:43.422" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:31:43.422" starttime="20170810 04:31:43.338" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:31:43.425" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:31:43.425" starttime="20170810 04:31:43.424" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:31:43.426" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:31:43.426" starttime="20170810 04:31:43.426" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:43.427" starttime="20170810 04:31:43.425" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:43.427" starttime="20170810 04:31:43.424" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:43.427" starttime="20170810 04:31:43.423" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:31:43.427" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:31:43.428" starttime="20170810 04:31:43.427" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:31:43.428" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:31:43.428" starttime="20170810 04:31:43.095" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:31:43.429" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:31:43.429" starttime="20170810 04:31:43.428" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:31:43.430" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:31:43.430" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:31:43.430" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:31:43.430" starttime="20170810 04:31:43.429" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:31:43.430" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:31:43.430" starttime="20170810 04:31:43.094" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:31:43.431" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:31:43.431" starttime="20170810 04:31:43.093" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:31:43.431" starttime="20170810 04:31:43.431" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:43.432" starttime="20170810 04:31:43.092" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:31:43.437" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:31:43.438" starttime="20170810 04:31:43.436" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:31:43.438" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:31:43.439" starttime="20170810 04:31:43.438" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:31:43.439" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:31:43.439" starttime="20170810 04:31:43.439" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:31:43.440" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:31:43.440" starttime="20170810 04:31:43.440" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:31:43.636" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:31:43.636" starttime="20170810 04:31:43.441" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:31:43.636" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:31:43.636" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:31:43.636" starttime="20170810 04:31:43.441" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:31:43.637" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:31:43.637" starttime="20170810 04:31:43.637" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:31:43.638" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:31:43.638" starttime="20170810 04:31:43.638" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:43.638" starttime="20170810 04:31:43.435" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:43.639" starttime="20170810 04:31:43.435" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:43.639" starttime="20170810 04:31:43.434" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:31:43.640" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:31:43.640" starttime="20170810 04:31:43.639" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:31:43.642" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:31:43.643" starttime="20170810 04:31:43.642" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:31:43.644" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:31:43.644" starttime="20170810 04:31:43.643" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:43.644" starttime="20170810 04:31:43.643" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:43.644" starttime="20170810 04:31:43.641" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:43.644" starttime="20170810 04:31:43.640" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:31:43.739" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:31:43.739" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:31:43.740" starttime="20170810 04:31:43.645" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:31:43.742" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:31:43.742" starttime="20170810 04:31:43.742" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:31:43.744" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:31:43.744" starttime="20170810 04:31:43.743" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:43.744" starttime="20170810 04:31:43.743" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:43.744" starttime="20170810 04:31:43.741" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:43.744" starttime="20170810 04:31:43.740" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:31:43.745" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:31:43.745" starttime="20170810 04:31:43.745" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:31:43.745" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:31:43.745" starttime="20170810 04:31:43.433" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:31:43.746" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:31:43.746" starttime="20170810 04:31:43.746" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:31:43.747" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:31:43.747" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:31:43.747" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:31:43.747" starttime="20170810 04:31:43.746" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:31:43.748" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:31:43.748" starttime="20170810 04:31:43.432" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:31:43.748" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:31:43.748" starttime="20170810 04:31:43.432" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:31:43.749" starttime="20170810 04:31:43.748" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:31:43.755" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:31:43.755" starttime="20170810 04:31:43.754" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:31:43.756" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:31:43.756" starttime="20170810 04:31:43.755" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:31:43.757" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:31:43.757" starttime="20170810 04:31:43.756" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:31:43.758" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:31:43.758" starttime="20170810 04:31:43.757" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:31:43.967" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:31:43.967" starttime="20170810 04:31:43.759" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:31:43.967" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:31:43.968" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:31:43.968" starttime="20170810 04:31:43.758" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:31:43.969" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:31:43.969" starttime="20170810 04:31:43.968" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:31:43.970" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:31:43.970" starttime="20170810 04:31:43.969" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:43.970" starttime="20170810 04:31:43.753" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:43.970" starttime="20170810 04:31:43.753" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:43.970" starttime="20170810 04:31:43.752" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:31:43.971" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:31:43.971" starttime="20170810 04:31:43.971" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:31:43.974" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:31:43.975" starttime="20170810 04:31:43.973" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:31:43.976" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:31:43.976" starttime="20170810 04:31:43.975" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:43.976" starttime="20170810 04:31:43.975" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:43.976" starttime="20170810 04:31:43.972" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:43.976" starttime="20170810 04:31:43.972" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:31:44.061" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:31:44.062" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:31:44.062" starttime="20170810 04:31:43.977" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:31:44.064" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:31:44.064" starttime="20170810 04:31:44.064" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:31:44.066" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:31:44.066" starttime="20170810 04:31:44.065" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:44.066" starttime="20170810 04:31:44.065" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:44.066" starttime="20170810 04:31:44.063" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:44.066" starttime="20170810 04:31:44.062" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:31:44.067" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:31:44.067" starttime="20170810 04:31:44.067" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:31:44.067" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:31:44.067" starttime="20170810 04:31:43.751" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:31:44.068" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:31:44.068" starttime="20170810 04:31:44.068" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:31:44.069" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:31:44.069" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:31:44.069" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170810 04:31:44.069" starttime="20170810 04:31:44.068" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:31:44.069" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:31:44.070" starttime="20170810 04:31:43.750" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:31:44.070" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:31:44.070" starttime="20170810 04:31:43.749" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:31:44.071" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:31:44.071" starttime="20170810 04:31:44.070" status="FAIL"></status>
</kw>
<status endtime="20170810 04:31:44.071" starttime="20170810 04:31:43.749" status="FAIL"></status>
</kw>
<status endtime="20170810 04:31:44.071" starttime="20170810 04:31:43.091" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:31:54.077" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:31:54.077" starttime="20170810 04:31:54.076" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:31:54.078" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:31:54.078" starttime="20170810 04:31:54.078" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:31:54.078" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:31:54.078" starttime="20170810 04:31:54.078" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:31:54.079" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:31:54.079" starttime="20170810 04:31:54.079" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:31:54.266" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:31:54.266" starttime="20170810 04:31:54.080" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:31:54.267" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:31:54.267" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:31:54.267" starttime="20170810 04:31:54.079" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:31:54.267" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:31:54.267" starttime="20170810 04:31:54.267" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:31:54.268" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:31:54.268" starttime="20170810 04:31:54.268" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:54.268" starttime="20170810 04:31:54.076" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:54.268" starttime="20170810 04:31:54.075" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:54.269" starttime="20170810 04:31:54.075" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:31:54.269" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:31:54.269" starttime="20170810 04:31:54.269" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:31:54.271" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:31:54.271" starttime="20170810 04:31:54.271" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:31:54.272" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:31:54.272" starttime="20170810 04:31:54.272" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:54.272" starttime="20170810 04:31:54.271" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:54.272" starttime="20170810 04:31:54.270" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:54.273" starttime="20170810 04:31:54.269" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:31:54.339" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:31:54.340" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:31:54.340" starttime="20170810 04:31:54.273" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:31:54.341" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:31:54.341" starttime="20170810 04:31:54.341" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:31:54.342" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:31:54.342" starttime="20170810 04:31:54.342" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:54.343" starttime="20170810 04:31:54.342" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:54.343" starttime="20170810 04:31:54.340" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:54.343" starttime="20170810 04:31:54.340" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:31:54.343" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:31:54.343" starttime="20170810 04:31:54.343" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:31:54.343" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:31:54.343" starttime="20170810 04:31:54.074" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:31:54.344" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:31:54.344" starttime="20170810 04:31:54.344" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:31:54.345" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:31:54.345" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:31:54.345" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:31:54.345" starttime="20170810 04:31:54.344" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:31:54.345" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:31:54.345" starttime="20170810 04:31:54.073" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:31:54.345" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:31:54.345" starttime="20170810 04:31:54.073" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:31:54.346" starttime="20170810 04:31:54.346" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:54.346" starttime="20170810 04:31:54.073" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:31:54.350" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:31:54.351" starttime="20170810 04:31:54.350" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:31:54.351" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:31:54.351" starttime="20170810 04:31:54.351" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:31:54.352" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:31:54.352" starttime="20170810 04:31:54.352" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:31:54.353" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:31:54.353" starttime="20170810 04:31:54.352" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:31:54.543" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:31:54.543" starttime="20170810 04:31:54.354" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:31:54.543" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:31:54.543" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:31:54.544" starttime="20170810 04:31:54.353" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:31:54.544" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:31:54.544" starttime="20170810 04:31:54.544" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:31:54.545" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:31:54.545" starttime="20170810 04:31:54.544" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:54.545" starttime="20170810 04:31:54.349" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:54.545" starttime="20170810 04:31:54.349" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:54.545" starttime="20170810 04:31:54.348" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:31:54.546" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:31:54.546" starttime="20170810 04:31:54.545" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:31:54.548" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:31:54.548" starttime="20170810 04:31:54.547" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:31:54.549" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:31:54.549" starttime="20170810 04:31:54.549" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:54.549" starttime="20170810 04:31:54.548" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:54.549" starttime="20170810 04:31:54.547" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:54.549" starttime="20170810 04:31:54.546" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:31:54.659" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:31:54.659" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:31:54.659" starttime="20170810 04:31:54.550" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:31:54.660" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:31:54.660" starttime="20170810 04:31:54.660" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:31:54.661" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:31:54.661" starttime="20170810 04:31:54.661" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:54.661" starttime="20170810 04:31:54.661" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:54.662" starttime="20170810 04:31:54.659" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:54.662" starttime="20170810 04:31:54.659" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:31:54.662" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:31:54.662" starttime="20170810 04:31:54.662" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:31:54.662" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:31:54.662" starttime="20170810 04:31:54.348" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:31:54.663" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:31:54.663" starttime="20170810 04:31:54.663" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:31:54.664" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:31:54.664" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:31:54.664" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:31:54.664" starttime="20170810 04:31:54.663" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:31:54.664" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:31:54.664" starttime="20170810 04:31:54.347" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:31:54.664" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:31:54.664" starttime="20170810 04:31:54.346" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:31:54.665" starttime="20170810 04:31:54.665" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:31:54.672" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:31:54.672" starttime="20170810 04:31:54.671" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:31:54.672" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:31:54.672" starttime="20170810 04:31:54.672" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:31:54.673" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:31:54.673" starttime="20170810 04:31:54.673" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:31:54.674" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:31:54.674" starttime="20170810 04:31:54.673" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:31:55.006" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:31:55.006" starttime="20170810 04:31:54.675" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:31:55.006" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:31:55.006" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:31:55.006" starttime="20170810 04:31:54.674" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:31:55.007" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:31:55.007" starttime="20170810 04:31:55.006" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:31:55.007" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:31:55.007" starttime="20170810 04:31:55.007" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:55.008" starttime="20170810 04:31:54.671" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:55.008" starttime="20170810 04:31:54.670" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:55.008" starttime="20170810 04:31:54.670" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:31:55.008" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:31:55.008" starttime="20170810 04:31:55.008" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:31:55.011" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:31:55.011" starttime="20170810 04:31:55.010" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:31:55.012" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:31:55.012" starttime="20170810 04:31:55.011" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:55.012" starttime="20170810 04:31:55.011" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:55.012" starttime="20170810 04:31:55.009" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:55.012" starttime="20170810 04:31:55.009" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:31:55.081" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:31:55.081" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:31:55.081" starttime="20170810 04:31:55.012" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:31:55.083" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:31:55.083" starttime="20170810 04:31:55.082" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:31:55.084" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:31:55.084" starttime="20170810 04:31:55.083" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:55.084" starttime="20170810 04:31:55.083" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:55.084" starttime="20170810 04:31:55.082" status="PASS"></status>
</kw>
<status endtime="20170810 04:31:55.084" starttime="20170810 04:31:55.081" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:31:55.084" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:31:55.085" starttime="20170810 04:31:55.084" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:31:55.085" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:31:55.085" starttime="20170810 04:31:54.669" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:31:55.085" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:31:55.085" starttime="20170810 04:31:55.085" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:31:55.086" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:31:55.086" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:31:55.086" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170810 04:31:55.086" starttime="20170810 04:31:55.086" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:31:55.087" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:31:55.087" starttime="20170810 04:31:54.668" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:31:55.087" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:31:55.087" starttime="20170810 04:31:54.665" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:31:55.089" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:31:55.089" starttime="20170810 04:31:55.088" status="FAIL"></status>
</kw>
<status endtime="20170810 04:31:55.089" starttime="20170810 04:31:54.665" status="FAIL"></status>
</kw>
<status endtime="20170810 04:31:55.089" starttime="20170810 04:31:54.072" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:32:05.094" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:32:05.095" starttime="20170810 04:32:05.094" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:32:05.095" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:32:05.095" starttime="20170810 04:32:05.095" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:32:05.096" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:32:05.096" starttime="20170810 04:32:05.096" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:32:05.097" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:32:05.097" starttime="20170810 04:32:05.096" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:32:05.313" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:32:05.314" starttime="20170810 04:32:05.098" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:32:05.314" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:32:05.314" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:32:05.314" starttime="20170810 04:32:05.097" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:32:05.314" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:32:05.314" starttime="20170810 04:32:05.314" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:32:05.315" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:32:05.315" starttime="20170810 04:32:05.315" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:05.315" starttime="20170810 04:32:05.093" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:05.315" starttime="20170810 04:32:05.093" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:05.315" starttime="20170810 04:32:05.092" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:32:05.316" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:32:05.316" starttime="20170810 04:32:05.316" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:32:05.318" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:32:05.318" starttime="20170810 04:32:05.317" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:32:05.319" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:32:05.319" starttime="20170810 04:32:05.319" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:05.319" starttime="20170810 04:32:05.318" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:05.319" starttime="20170810 04:32:05.317" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:05.319" starttime="20170810 04:32:05.316" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:32:05.395" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:32:05.395" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:32:05.395" starttime="20170810 04:32:05.320" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:32:05.397" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:32:05.397" starttime="20170810 04:32:05.396" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:32:05.397" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:32:05.398" starttime="20170810 04:32:05.397" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:05.398" starttime="20170810 04:32:05.397" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:05.398" starttime="20170810 04:32:05.396" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:05.398" starttime="20170810 04:32:05.395" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:32:05.398" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:32:05.398" starttime="20170810 04:32:05.398" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:32:05.398" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:32:05.399" starttime="20170810 04:32:05.092" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:32:05.399" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:32:05.399" starttime="20170810 04:32:05.399" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:32:05.400" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:32:05.400" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:32:05.400" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:32:05.400" starttime="20170810 04:32:05.399" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:32:05.400" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:32:05.400" starttime="20170810 04:32:05.091" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:32:05.401" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:32:05.401" starttime="20170810 04:32:05.091" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:32:05.401" starttime="20170810 04:32:05.401" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:05.401" starttime="20170810 04:32:05.090" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:32:05.405" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:32:05.405" starttime="20170810 04:32:05.404" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:32:05.406" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:32:05.406" starttime="20170810 04:32:05.406" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:32:05.407" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:32:05.407" starttime="20170810 04:32:05.406" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:32:05.407" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:32:05.407" starttime="20170810 04:32:05.407" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:32:05.601" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:32:05.601" starttime="20170810 04:32:05.408" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:32:05.601" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:32:05.601" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:32:05.601" starttime="20170810 04:32:05.407" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:32:05.601" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:32:05.602" starttime="20170810 04:32:05.601" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:32:05.602" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:32:05.602" starttime="20170810 04:32:05.602" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:05.602" starttime="20170810 04:32:05.404" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:05.602" starttime="20170810 04:32:05.403" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:05.602" starttime="20170810 04:32:05.403" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:32:05.603" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:32:05.603" starttime="20170810 04:32:05.603" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:32:05.605" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:32:05.605" starttime="20170810 04:32:05.604" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:32:05.606" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:32:05.606" starttime="20170810 04:32:05.606" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:05.606" starttime="20170810 04:32:05.605" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:05.606" starttime="20170810 04:32:05.604" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:05.607" starttime="20170810 04:32:05.603" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:32:05.701" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:32:05.701" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:32:05.701" starttime="20170810 04:32:05.607" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:32:05.703" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:32:05.703" starttime="20170810 04:32:05.702" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:32:05.703" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:32:05.704" starttime="20170810 04:32:05.703" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:05.704" starttime="20170810 04:32:05.703" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:05.704" starttime="20170810 04:32:05.702" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:05.704" starttime="20170810 04:32:05.701" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:32:05.704" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:32:05.704" starttime="20170810 04:32:05.704" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:32:05.705" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:32:05.705" starttime="20170810 04:32:05.402" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:32:05.705" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:32:05.705" starttime="20170810 04:32:05.705" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:32:05.706" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:32:05.706" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:32:05.706" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:32:05.706" starttime="20170810 04:32:05.705" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:32:05.706" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:32:05.706" starttime="20170810 04:32:05.402" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:32:05.706" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:32:05.707" starttime="20170810 04:32:05.401" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:32:05.707" starttime="20170810 04:32:05.707" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:32:05.711" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:32:05.711" starttime="20170810 04:32:05.711" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:32:05.712" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:32:05.712" starttime="20170810 04:32:05.712" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:32:05.713" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:32:05.713" starttime="20170810 04:32:05.712" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:32:05.713" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:32:05.713" starttime="20170810 04:32:05.713" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:32:05.973" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:32:05.973" starttime="20170810 04:32:05.714" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:32:05.973" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:32:05.973" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:32:05.973" starttime="20170810 04:32:05.714" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:32:05.974" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:32:05.974" starttime="20170810 04:32:05.974" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:32:05.975" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:32:05.975" starttime="20170810 04:32:05.974" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:05.975" starttime="20170810 04:32:05.710" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:05.975" starttime="20170810 04:32:05.710" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:05.975" starttime="20170810 04:32:05.709" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:32:05.976" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:32:05.976" starttime="20170810 04:32:05.975" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:32:05.978" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:32:05.978" starttime="20170810 04:32:05.977" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:32:05.979" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:32:05.979" starttime="20170810 04:32:05.979" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:05.979" starttime="20170810 04:32:05.978" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:05.979" starttime="20170810 04:32:05.976" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:05.979" starttime="20170810 04:32:05.976" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:32:06.079" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:32:06.080" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:32:06.080" starttime="20170810 04:32:05.979" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:32:06.082" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:32:06.082" starttime="20170810 04:32:06.081" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:32:06.082" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:32:06.083" starttime="20170810 04:32:06.082" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:06.083" starttime="20170810 04:32:06.082" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:06.083" starttime="20170810 04:32:06.080" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:06.083" starttime="20170810 04:32:06.080" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:32:06.083" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:32:06.084" starttime="20170810 04:32:06.083" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:32:06.084" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:32:06.084" starttime="20170810 04:32:05.709" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:32:06.084" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:32:06.085" starttime="20170810 04:32:06.084" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:32:06.085" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:32:06.085" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:32:06.085" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170810 04:32:06.085" starttime="20170810 04:32:06.085" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:32:06.086" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:32:06.086" starttime="20170810 04:32:05.708" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:32:06.086" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:32:06.086" starttime="20170810 04:32:05.707" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:32:06.086" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:32:06.086" starttime="20170810 04:32:06.086" status="FAIL"></status>
</kw>
<status endtime="20170810 04:32:06.087" starttime="20170810 04:32:05.707" status="FAIL"></status>
</kw>
<status endtime="20170810 04:32:06.087" starttime="20170810 04:32:05.090" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:32:16.092" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:32:16.093" starttime="20170810 04:32:16.092" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:32:16.093" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:32:16.093" starttime="20170810 04:32:16.093" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:32:16.094" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:32:16.094" starttime="20170810 04:32:16.094" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:32:16.095" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:32:16.095" starttime="20170810 04:32:16.094" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:32:16.286" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:32:16.286" starttime="20170810 04:32:16.095" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:32:16.286" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:32:16.286" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:32:16.286" starttime="20170810 04:32:16.095" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:32:16.287" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:32:16.287" starttime="20170810 04:32:16.287" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:32:16.288" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:32:16.288" starttime="20170810 04:32:16.287" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:16.288" starttime="20170810 04:32:16.092" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:16.288" starttime="20170810 04:32:16.091" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:16.288" starttime="20170810 04:32:16.090" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:32:16.289" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:32:16.289" starttime="20170810 04:32:16.288" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:32:16.291" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:32:16.291" starttime="20170810 04:32:16.290" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:32:16.292" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:32:16.292" starttime="20170810 04:32:16.292" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:16.292" starttime="20170810 04:32:16.291" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:16.292" starttime="20170810 04:32:16.290" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:16.292" starttime="20170810 04:32:16.289" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:32:16.369" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:32:16.369" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:32:16.369" starttime="20170810 04:32:16.293" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:32:16.371" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:32:16.371" starttime="20170810 04:32:16.370" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:32:16.371" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:32:16.372" starttime="20170810 04:32:16.371" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:16.372" starttime="20170810 04:32:16.371" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:16.372" starttime="20170810 04:32:16.370" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:16.372" starttime="20170810 04:32:16.369" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:32:16.372" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:32:16.372" starttime="20170810 04:32:16.372" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:32:16.373" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:32:16.373" starttime="20170810 04:32:16.090" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:32:16.373" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:32:16.373" starttime="20170810 04:32:16.373" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:32:16.374" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:32:16.374" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:32:16.374" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:32:16.374" starttime="20170810 04:32:16.374" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:32:16.374" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:32:16.374" starttime="20170810 04:32:16.089" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:32:16.375" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:32:16.375" starttime="20170810 04:32:16.089" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:32:16.375" starttime="20170810 04:32:16.375" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:16.375" starttime="20170810 04:32:16.088" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:32:16.379" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:32:16.380" starttime="20170810 04:32:16.378" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:32:16.380" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:32:16.380" starttime="20170810 04:32:16.380" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:32:16.381" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:32:16.381" starttime="20170810 04:32:16.380" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:32:16.381" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:32:16.381" starttime="20170810 04:32:16.381" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:32:16.595" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:32:16.595" starttime="20170810 04:32:16.382" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:32:16.595" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:32:16.595" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:32:16.595" starttime="20170810 04:32:16.382" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:32:16.596" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:32:16.596" starttime="20170810 04:32:16.595" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:32:16.597" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:32:16.597" starttime="20170810 04:32:16.596" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:16.597" starttime="20170810 04:32:16.378" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:16.597" starttime="20170810 04:32:16.377" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:16.597" starttime="20170810 04:32:16.377" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:32:16.598" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:32:16.598" starttime="20170810 04:32:16.597" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:32:16.600" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:32:16.600" starttime="20170810 04:32:16.599" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:32:16.602" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:32:16.602" starttime="20170810 04:32:16.601" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:16.602" starttime="20170810 04:32:16.601" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:16.602" starttime="20170810 04:32:16.599" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:16.602" starttime="20170810 04:32:16.598" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:32:16.769" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:32:16.770" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:32:16.770" starttime="20170810 04:32:16.603" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:32:16.772" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:32:16.772" starttime="20170810 04:32:16.771" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:32:16.772" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:32:16.773" starttime="20170810 04:32:16.772" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:16.773" starttime="20170810 04:32:16.772" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:16.773" starttime="20170810 04:32:16.771" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:16.773" starttime="20170810 04:32:16.770" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:32:16.773" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:32:16.773" starttime="20170810 04:32:16.773" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:32:16.774" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:32:16.774" starttime="20170810 04:32:16.376" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:32:16.774" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:32:16.774" starttime="20170810 04:32:16.774" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:32:16.775" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:32:16.775" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:32:16.775" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:32:16.775" starttime="20170810 04:32:16.775" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:32:16.775" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:32:16.775" starttime="20170810 04:32:16.376" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:32:16.776" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:32:16.776" starttime="20170810 04:32:16.375" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:32:16.776" starttime="20170810 04:32:16.776" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:32:16.780" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:32:16.781" starttime="20170810 04:32:16.780" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:32:16.781" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:32:16.781" starttime="20170810 04:32:16.781" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:32:16.782" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:32:16.782" starttime="20170810 04:32:16.782" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:32:16.783" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:32:16.783" starttime="20170810 04:32:16.782" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:32:17.031" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:32:17.031" starttime="20170810 04:32:16.783" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:32:17.031" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:32:17.031" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:32:17.031" starttime="20170810 04:32:16.783" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:32:17.032" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:32:17.032" starttime="20170810 04:32:17.031" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:32:17.032" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:32:17.032" starttime="20170810 04:32:17.032" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:17.033" starttime="20170810 04:32:16.780" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:17.033" starttime="20170810 04:32:16.779" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:17.033" starttime="20170810 04:32:16.779" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:32:17.033" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:32:17.033" starttime="20170810 04:32:17.033" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:32:17.036" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:32:17.036" starttime="20170810 04:32:17.035" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:32:17.037" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:32:17.037" starttime="20170810 04:32:17.036" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:17.037" starttime="20170810 04:32:17.036" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:17.037" starttime="20170810 04:32:17.034" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:17.037" starttime="20170810 04:32:17.034" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:32:17.107" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:32:17.107" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:32:17.107" starttime="20170810 04:32:17.037" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:32:17.109" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:32:17.109" starttime="20170810 04:32:17.108" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:32:17.110" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:32:17.110" starttime="20170810 04:32:17.109" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:17.110" starttime="20170810 04:32:17.109" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:17.110" starttime="20170810 04:32:17.108" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:17.110" starttime="20170810 04:32:17.107" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:32:17.110" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:32:17.111" starttime="20170810 04:32:17.110" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:32:17.111" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:32:17.111" starttime="20170810 04:32:16.778" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:32:17.111" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:32:17.111" starttime="20170810 04:32:17.111" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:32:17.112" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:32:17.112" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:32:17.112" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170810 04:32:17.112" starttime="20170810 04:32:17.112" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:32:17.112" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:32:17.112" starttime="20170810 04:32:16.777" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:32:17.113" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:32:17.113" starttime="20170810 04:32:16.777" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:32:17.113" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:32:17.113" starttime="20170810 04:32:17.113" status="FAIL"></status>
</kw>
<status endtime="20170810 04:32:17.114" starttime="20170810 04:32:16.776" status="FAIL"></status>
</kw>
<status endtime="20170810 04:32:17.114" starttime="20170810 04:32:16.088" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:32:27.119" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:32:27.119" starttime="20170810 04:32:27.119" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:32:27.120" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:32:27.120" starttime="20170810 04:32:27.120" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:32:27.121" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:32:27.121" starttime="20170810 04:32:27.120" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:32:27.121" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:32:27.121" starttime="20170810 04:32:27.121" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:32:27.304" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:32:27.304" starttime="20170810 04:32:27.122" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:32:27.304" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:32:27.305" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:32:27.305" starttime="20170810 04:32:27.122" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:32:27.305" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:32:27.305" starttime="20170810 04:32:27.305" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:32:27.306" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:32:27.306" starttime="20170810 04:32:27.306" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:27.306" starttime="20170810 04:32:27.118" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:27.306" starttime="20170810 04:32:27.118" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:27.306" starttime="20170810 04:32:27.117" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:32:27.307" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:32:27.307" starttime="20170810 04:32:27.307" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:32:27.309" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:32:27.309" starttime="20170810 04:32:27.308" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:32:27.310" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:32:27.310" starttime="20170810 04:32:27.310" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:27.310" starttime="20170810 04:32:27.309" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:27.310" starttime="20170810 04:32:27.308" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:27.310" starttime="20170810 04:32:27.307" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:32:27.391" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:32:27.392" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:32:27.392" starttime="20170810 04:32:27.311" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:32:27.393" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:32:27.394" starttime="20170810 04:32:27.393" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:32:27.394" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:32:27.395" starttime="20170810 04:32:27.394" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:27.395" starttime="20170810 04:32:27.394" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:27.395" starttime="20170810 04:32:27.392" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:27.395" starttime="20170810 04:32:27.392" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:32:27.395" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:32:27.395" starttime="20170810 04:32:27.395" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:32:27.395" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:32:27.396" starttime="20170810 04:32:27.116" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:32:27.396" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:32:27.396" starttime="20170810 04:32:27.396" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:32:27.397" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:32:27.397" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:32:27.397" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:32:27.397" starttime="20170810 04:32:27.396" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:32:27.397" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:32:27.397" starttime="20170810 04:32:27.116" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:32:27.398" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:32:27.398" starttime="20170810 04:32:27.115" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:32:27.398" starttime="20170810 04:32:27.398" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:27.398" starttime="20170810 04:32:27.115" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:32:27.402" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:32:27.403" starttime="20170810 04:32:27.402" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:32:27.403" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:32:27.403" starttime="20170810 04:32:27.403" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:32:27.404" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:32:27.404" starttime="20170810 04:32:27.403" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:32:27.404" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:32:27.405" starttime="20170810 04:32:27.404" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:32:27.670" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:32:27.670" starttime="20170810 04:32:27.405" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:32:27.670" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:32:27.670" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:32:27.670" starttime="20170810 04:32:27.405" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:32:27.671" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:32:27.671" starttime="20170810 04:32:27.671" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:32:27.672" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:32:27.672" starttime="20170810 04:32:27.671" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:27.672" starttime="20170810 04:32:27.401" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:27.672" starttime="20170810 04:32:27.401" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:27.672" starttime="20170810 04:32:27.400" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:32:27.673" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:32:27.673" starttime="20170810 04:32:27.672" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:32:27.675" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:32:27.675" starttime="20170810 04:32:27.674" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:32:27.676" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:32:27.676" starttime="20170810 04:32:27.675" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:27.676" starttime="20170810 04:32:27.675" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:27.676" starttime="20170810 04:32:27.673" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:27.676" starttime="20170810 04:32:27.673" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:32:27.778" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:32:27.778" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:32:27.778" starttime="20170810 04:32:27.676" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:32:27.780" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:32:27.780" starttime="20170810 04:32:27.779" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:32:27.781" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:32:27.781" starttime="20170810 04:32:27.780" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:27.781" starttime="20170810 04:32:27.780" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:27.781" starttime="20170810 04:32:27.779" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:27.781" starttime="20170810 04:32:27.778" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:32:27.781" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:32:27.781" starttime="20170810 04:32:27.781" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:32:27.782" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:32:27.782" starttime="20170810 04:32:27.399" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:32:27.782" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:32:27.782" starttime="20170810 04:32:27.782" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:32:27.783" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:32:27.783" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:32:27.783" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:32:27.783" starttime="20170810 04:32:27.783" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:32:27.783" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:32:27.783" starttime="20170810 04:32:27.399" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:32:27.784" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:32:27.784" starttime="20170810 04:32:27.398" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:32:27.784" starttime="20170810 04:32:27.784" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:32:27.792" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:32:27.792" starttime="20170810 04:32:27.792" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:32:27.793" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:32:27.793" starttime="20170810 04:32:27.793" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:32:27.794" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:32:27.794" starttime="20170810 04:32:27.793" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:32:27.794" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:32:27.794" starttime="20170810 04:32:27.794" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:32:28.024" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:32:28.024" starttime="20170810 04:32:27.795" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:32:28.024" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:32:28.024" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:32:28.024" starttime="20170810 04:32:27.795" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:32:28.025" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:32:28.025" starttime="20170810 04:32:28.025" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:32:28.026" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:32:28.026" starttime="20170810 04:32:28.025" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:28.026" starttime="20170810 04:32:27.791" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:28.026" starttime="20170810 04:32:27.791" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:28.026" starttime="20170810 04:32:27.790" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:32:28.027" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:32:28.027" starttime="20170810 04:32:28.026" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:32:28.029" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:32:28.029" starttime="20170810 04:32:28.028" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:32:28.030" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:32:28.030" starttime="20170810 04:32:28.030" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:28.030" starttime="20170810 04:32:28.029" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:28.030" starttime="20170810 04:32:28.027" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:28.030" starttime="20170810 04:32:28.027" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:32:28.153" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:32:28.153" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:32:28.153" starttime="20170810 04:32:28.031" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:32:28.155" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:32:28.155" starttime="20170810 04:32:28.155" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:32:28.156" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:32:28.156" starttime="20170810 04:32:28.156" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:28.156" starttime="20170810 04:32:28.156" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:28.157" starttime="20170810 04:32:28.154" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:28.157" starttime="20170810 04:32:28.154" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:32:28.157" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:32:28.157" starttime="20170810 04:32:28.157" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:32:28.157" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:32:28.157" starttime="20170810 04:32:27.789" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:32:28.158" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:32:28.158" starttime="20170810 04:32:28.158" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:32:28.158" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:32:28.159" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:32:28.159" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170810 04:32:28.159" starttime="20170810 04:32:28.158" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:32:28.159" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:32:28.159" starttime="20170810 04:32:27.788" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:32:28.159" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:32:28.159" starttime="20170810 04:32:27.785" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:32:28.160" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:32:28.160" starttime="20170810 04:32:28.160" status="FAIL"></status>
</kw>
<status endtime="20170810 04:32:28.160" starttime="20170810 04:32:27.784" status="FAIL"></status>
</kw>
<status endtime="20170810 04:32:28.160" starttime="20170810 04:32:27.114" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:32:38.165" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:32:38.166" starttime="20170810 04:32:38.165" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:32:38.166" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:32:38.166" starttime="20170810 04:32:38.166" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:32:38.167" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:32:38.167" starttime="20170810 04:32:38.167" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:32:38.168" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:32:38.168" starttime="20170810 04:32:38.167" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:32:38.375" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:32:38.375" starttime="20170810 04:32:38.168" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:32:38.376" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:32:38.376" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:32:38.376" starttime="20170810 04:32:38.168" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:32:38.376" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:32:38.376" starttime="20170810 04:32:38.376" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:32:38.377" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:32:38.377" starttime="20170810 04:32:38.377" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:38.377" starttime="20170810 04:32:38.164" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:38.377" starttime="20170810 04:32:38.164" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:38.377" starttime="20170810 04:32:38.163" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:32:38.378" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:32:38.378" starttime="20170810 04:32:38.378" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:32:38.380" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:32:38.380" starttime="20170810 04:32:38.379" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:32:38.382" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:32:38.382" starttime="20170810 04:32:38.381" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:38.382" starttime="20170810 04:32:38.381" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:38.382" starttime="20170810 04:32:38.379" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:38.382" starttime="20170810 04:32:38.378" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:32:38.476" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:32:38.476" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:32:38.476" starttime="20170810 04:32:38.382" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:32:38.478" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:32:38.478" starttime="20170810 04:32:38.478" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:32:38.479" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:32:38.479" starttime="20170810 04:32:38.479" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:38.479" starttime="20170810 04:32:38.478" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:38.479" starttime="20170810 04:32:38.477" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:38.480" starttime="20170810 04:32:38.477" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:32:38.480" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:32:38.480" starttime="20170810 04:32:38.480" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:32:38.480" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:32:38.480" starttime="20170810 04:32:38.163" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:32:38.481" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:32:38.481" starttime="20170810 04:32:38.480" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:32:38.481" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:32:38.481" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:32:38.482" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:32:38.482" starttime="20170810 04:32:38.481" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:32:38.482" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:32:38.482" starttime="20170810 04:32:38.162" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:32:38.482" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:32:38.482" starttime="20170810 04:32:38.162" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:32:38.483" starttime="20170810 04:32:38.483" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:38.483" starttime="20170810 04:32:38.161" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:32:38.489" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:32:38.489" starttime="20170810 04:32:38.488" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:32:38.490" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:32:38.490" starttime="20170810 04:32:38.489" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:32:38.491" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:32:38.491" starttime="20170810 04:32:38.491" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:32:38.492" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:32:38.492" starttime="20170810 04:32:38.492" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:32:38.744" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:32:38.744" starttime="20170810 04:32:38.493" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:32:38.745" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:32:38.745" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:32:38.745" starttime="20170810 04:32:38.493" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:32:38.745" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:32:38.745" starttime="20170810 04:32:38.745" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:32:38.746" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:32:38.746" starttime="20170810 04:32:38.746" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:38.746" starttime="20170810 04:32:38.487" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:38.746" starttime="20170810 04:32:38.486" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:38.746" starttime="20170810 04:32:38.485" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:32:38.747" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:32:38.747" starttime="20170810 04:32:38.747" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:32:38.749" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:32:38.749" starttime="20170810 04:32:38.748" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:32:38.750" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:32:38.750" starttime="20170810 04:32:38.750" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:38.750" starttime="20170810 04:32:38.749" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:38.750" starttime="20170810 04:32:38.748" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:38.751" starttime="20170810 04:32:38.747" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:32:38.843" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:32:38.844" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:32:38.844" starttime="20170810 04:32:38.751" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:32:38.845" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:32:38.845" starttime="20170810 04:32:38.845" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:32:38.846" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:32:38.846" starttime="20170810 04:32:38.846" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:38.846" starttime="20170810 04:32:38.846" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:38.847" starttime="20170810 04:32:38.844" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:38.847" starttime="20170810 04:32:38.844" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:32:38.847" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:32:38.847" starttime="20170810 04:32:38.847" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:32:38.847" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:32:38.847" starttime="20170810 04:32:38.484" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:32:38.848" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:32:38.848" starttime="20170810 04:32:38.848" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:32:38.849" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:32:38.849" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:32:38.849" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:32:38.849" starttime="20170810 04:32:38.848" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:32:38.849" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:32:38.849" starttime="20170810 04:32:38.484" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:32:38.849" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:32:38.849" starttime="20170810 04:32:38.483" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:32:38.850" starttime="20170810 04:32:38.850" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:32:38.854" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:32:38.854" starttime="20170810 04:32:38.854" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:32:38.855" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:32:38.855" starttime="20170810 04:32:38.855" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:32:38.856" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:32:38.856" starttime="20170810 04:32:38.855" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:32:38.856" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:32:38.856" starttime="20170810 04:32:38.856" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:32:39.036" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:32:39.036" starttime="20170810 04:32:38.857" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:32:39.036" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:32:39.036" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:32:39.036" starttime="20170810 04:32:38.857" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:32:39.037" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:32:39.037" starttime="20170810 04:32:39.036" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:32:39.037" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:32:39.038" starttime="20170810 04:32:39.037" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:39.038" starttime="20170810 04:32:38.853" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:39.038" starttime="20170810 04:32:38.853" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:39.038" starttime="20170810 04:32:38.852" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:32:39.038" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:32:39.038" starttime="20170810 04:32:39.038" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:32:39.041" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:32:39.041" starttime="20170810 04:32:39.040" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:32:39.042" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:32:39.042" starttime="20170810 04:32:39.042" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:39.042" starttime="20170810 04:32:39.041" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:39.042" starttime="20170810 04:32:39.039" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:39.042" starttime="20170810 04:32:39.039" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:32:39.112" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:32:39.113" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:32:39.113" starttime="20170810 04:32:39.042" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:32:39.114" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:32:39.114" starttime="20170810 04:32:39.114" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:32:39.115" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:32:39.115" starttime="20170810 04:32:39.115" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:39.116" starttime="20170810 04:32:39.115" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:39.116" starttime="20170810 04:32:39.113" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:39.116" starttime="20170810 04:32:39.113" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:32:39.116" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:32:39.116" starttime="20170810 04:32:39.116" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:32:39.116" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:32:39.116" starttime="20170810 04:32:38.852" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:32:39.117" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:32:39.117" starttime="20170810 04:32:39.117" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:32:39.118" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:32:39.118" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:32:39.118" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170810 04:32:39.118" starttime="20170810 04:32:39.117" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:32:39.118" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:32:39.118" starttime="20170810 04:32:38.851" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:32:39.118" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:32:39.118" starttime="20170810 04:32:38.850" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:32:39.119" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:32:39.119" starttime="20170810 04:32:39.119" status="FAIL"></status>
</kw>
<status endtime="20170810 04:32:39.119" starttime="20170810 04:32:38.850" status="FAIL"></status>
</kw>
<status endtime="20170810 04:32:39.120" starttime="20170810 04:32:38.161" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:32:49.124" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:32:49.125" starttime="20170810 04:32:49.124" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:32:49.125" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:32:49.125" starttime="20170810 04:32:49.125" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:32:49.126" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:32:49.126" starttime="20170810 04:32:49.126" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:32:49.127" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:32:49.127" starttime="20170810 04:32:49.126" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:32:49.355" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:32:49.355" starttime="20170810 04:32:49.127" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:32:49.355" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:32:49.355" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:32:49.355" starttime="20170810 04:32:49.127" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:32:49.356" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:32:49.356" starttime="20170810 04:32:49.356" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:32:49.357" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:32:49.357" starttime="20170810 04:32:49.356" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:49.357" starttime="20170810 04:32:49.123" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:49.357" starttime="20170810 04:32:49.123" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:49.357" starttime="20170810 04:32:49.122" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:32:49.358" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:32:49.358" starttime="20170810 04:32:49.357" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:32:49.360" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:32:49.360" starttime="20170810 04:32:49.359" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:32:49.361" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:32:49.361" starttime="20170810 04:32:49.361" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:49.361" starttime="20170810 04:32:49.360" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:49.361" starttime="20170810 04:32:49.359" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:49.361" starttime="20170810 04:32:49.358" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:32:49.512" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:32:49.513" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:32:49.513" starttime="20170810 04:32:49.362" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:32:49.514" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:32:49.514" starttime="20170810 04:32:49.514" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:32:49.515" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:32:49.515" starttime="20170810 04:32:49.515" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:49.516" starttime="20170810 04:32:49.515" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:49.516" starttime="20170810 04:32:49.513" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:49.516" starttime="20170810 04:32:49.513" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:32:49.516" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:32:49.516" starttime="20170810 04:32:49.516" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:32:49.516" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:32:49.516" starttime="20170810 04:32:49.122" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:32:49.517" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:32:49.517" starttime="20170810 04:32:49.517" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:32:49.518" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:32:49.518" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:32:49.518" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:32:49.518" starttime="20170810 04:32:49.517" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:32:49.518" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:32:49.518" starttime="20170810 04:32:49.121" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:32:49.518" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:32:49.518" starttime="20170810 04:32:49.121" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:32:49.519" starttime="20170810 04:32:49.519" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:49.519" starttime="20170810 04:32:49.120" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:32:49.523" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:32:49.523" starttime="20170810 04:32:49.522" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:32:49.524" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:32:49.524" starttime="20170810 04:32:49.524" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:32:49.525" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:32:49.525" starttime="20170810 04:32:49.524" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:32:49.525" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:32:49.525" starttime="20170810 04:32:49.525" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:32:49.720" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:32:49.720" starttime="20170810 04:32:49.526" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:32:49.720" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:32:49.720" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:32:49.720" starttime="20170810 04:32:49.526" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:32:49.721" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:32:49.721" starttime="20170810 04:32:49.720" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:32:49.721" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:32:49.722" starttime="20170810 04:32:49.721" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:49.722" starttime="20170810 04:32:49.522" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:49.722" starttime="20170810 04:32:49.521" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:49.722" starttime="20170810 04:32:49.521" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:32:49.722" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:32:49.723" starttime="20170810 04:32:49.722" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:32:49.725" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:32:49.725" starttime="20170810 04:32:49.724" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:32:49.725" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:32:49.726" starttime="20170810 04:32:49.725" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:49.726" starttime="20170810 04:32:49.725" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:49.726" starttime="20170810 04:32:49.723" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:49.726" starttime="20170810 04:32:49.723" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:32:49.820" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:32:49.821" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:32:49.821" starttime="20170810 04:32:49.726" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:32:49.822" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:32:49.822" starttime="20170810 04:32:49.822" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:32:49.823" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:32:49.823" starttime="20170810 04:32:49.823" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:49.823" starttime="20170810 04:32:49.823" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:49.824" starttime="20170810 04:32:49.821" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:49.824" starttime="20170810 04:32:49.821" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:32:49.824" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:32:49.824" starttime="20170810 04:32:49.824" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:32:49.824" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:32:49.825" starttime="20170810 04:32:49.520" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:32:49.825" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:32:49.825" starttime="20170810 04:32:49.825" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:32:49.826" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:32:49.826" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:32:49.826" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:32:49.826" starttime="20170810 04:32:49.825" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:32:49.826" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:32:49.826" starttime="20170810 04:32:49.520" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:32:49.827" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:32:49.827" starttime="20170810 04:32:49.519" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:32:49.827" starttime="20170810 04:32:49.827" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:32:49.831" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:32:49.832" starttime="20170810 04:32:49.831" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:32:49.832" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:32:49.832" starttime="20170810 04:32:49.832" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:32:49.833" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:32:49.833" starttime="20170810 04:32:49.833" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:32:49.834" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:32:49.834" starttime="20170810 04:32:49.833" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:32:50.056" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:32:50.056" starttime="20170810 04:32:49.834" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:32:50.056" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:32:50.057" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:32:50.057" starttime="20170810 04:32:49.834" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:32:50.057" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:32:50.057" starttime="20170810 04:32:50.057" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:32:50.058" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:32:50.058" starttime="20170810 04:32:50.058" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:50.058" starttime="20170810 04:32:49.831" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:50.058" starttime="20170810 04:32:49.830" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:50.058" starttime="20170810 04:32:49.829" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:32:50.059" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:32:50.059" starttime="20170810 04:32:50.059" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:32:50.061" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:32:50.061" starttime="20170810 04:32:50.060" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:32:50.062" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:32:50.062" starttime="20170810 04:32:50.062" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:50.063" starttime="20170810 04:32:50.062" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:50.063" starttime="20170810 04:32:50.060" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:50.063" starttime="20170810 04:32:50.059" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:32:50.133" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:32:50.133" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:32:50.133" starttime="20170810 04:32:50.063" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:32:50.135" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:32:50.135" starttime="20170810 04:32:50.134" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:32:50.136" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:32:50.136" starttime="20170810 04:32:50.135" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:50.136" starttime="20170810 04:32:50.135" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:50.136" starttime="20170810 04:32:50.134" status="PASS"></status>
</kw>
<status endtime="20170810 04:32:50.136" starttime="20170810 04:32:50.133" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:32:50.136" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:32:50.137" starttime="20170810 04:32:50.136" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:32:50.137" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:32:50.137" starttime="20170810 04:32:49.829" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:32:50.137" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:32:50.137" starttime="20170810 04:32:50.137" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:32:50.138" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:32:50.138" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:32:50.138" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170810 04:32:50.138" starttime="20170810 04:32:50.138" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:32:50.138" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:32:50.138" starttime="20170810 04:32:49.828" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:32:50.139" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:32:50.139" starttime="20170810 04:32:49.828" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:32:50.139" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:32:50.139" starttime="20170810 04:32:50.139" status="FAIL"></status>
</kw>
<status endtime="20170810 04:32:50.140" starttime="20170810 04:32:49.827" status="FAIL"></status>
</kw>
<status endtime="20170810 04:32:50.140" starttime="20170810 04:32:49.120" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:33:00.145" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:33:00.145" starttime="20170810 04:33:00.144" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:33:00.146" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:33:00.146" starttime="20170810 04:33:00.146" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:33:00.146" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:33:00.147" starttime="20170810 04:33:00.146" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:33:00.147" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:33:00.147" starttime="20170810 04:33:00.147" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:33:00.349" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:33:00.349" starttime="20170810 04:33:00.148" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:33:00.349" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:33:00.349" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:33:00.349" starttime="20170810 04:33:00.147" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:33:00.350" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:33:00.350" starttime="20170810 04:33:00.349" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:33:00.350" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:33:00.350" starttime="20170810 04:33:00.350" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:00.350" starttime="20170810 04:33:00.144" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:00.351" starttime="20170810 04:33:00.143" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:00.351" starttime="20170810 04:33:00.143" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:33:00.351" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:33:00.351" starttime="20170810 04:33:00.351" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:33:00.353" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:33:00.353" starttime="20170810 04:33:00.353" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:33:00.354" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:33:00.354" starttime="20170810 04:33:00.354" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:00.354" starttime="20170810 04:33:00.353" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:00.354" starttime="20170810 04:33:00.352" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:00.355" starttime="20170810 04:33:00.352" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:33:00.422" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:33:00.423" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:33:00.423" starttime="20170810 04:33:00.355" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:33:00.425" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:33:00.425" starttime="20170810 04:33:00.424" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:33:00.426" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:33:00.427" starttime="20170810 04:33:00.426" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:00.427" starttime="20170810 04:33:00.425" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:00.427" starttime="20170810 04:33:00.424" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:00.427" starttime="20170810 04:33:00.423" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:33:00.427" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:33:00.427" starttime="20170810 04:33:00.427" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:33:00.428" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:33:00.428" starttime="20170810 04:33:00.142" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:33:00.428" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:33:00.428" starttime="20170810 04:33:00.428" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:33:00.429" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:33:00.429" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:33:00.429" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:33:00.429" starttime="20170810 04:33:00.429" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:33:00.429" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:33:00.429" starttime="20170810 04:33:00.142" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:33:00.430" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:33:00.430" starttime="20170810 04:33:00.141" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:33:00.430" starttime="20170810 04:33:00.430" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:00.430" starttime="20170810 04:33:00.141" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:33:00.434" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:33:00.434" starttime="20170810 04:33:00.434" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:33:00.435" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:33:00.435" starttime="20170810 04:33:00.435" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:33:00.436" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:33:00.436" starttime="20170810 04:33:00.435" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:33:00.436" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:33:00.436" starttime="20170810 04:33:00.436" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:33:00.634" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:33:00.634" starttime="20170810 04:33:00.437" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:33:00.634" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:33:00.634" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:33:00.634" starttime="20170810 04:33:00.437" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:33:00.635" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:33:00.635" starttime="20170810 04:33:00.635" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:33:00.636" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:33:00.636" starttime="20170810 04:33:00.635" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:00.636" starttime="20170810 04:33:00.433" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:00.636" starttime="20170810 04:33:00.432" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:00.636" starttime="20170810 04:33:00.432" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:33:00.637" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:33:00.637" starttime="20170810 04:33:00.636" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:33:00.639" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:33:00.639" starttime="20170810 04:33:00.638" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:33:00.640" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:33:00.640" starttime="20170810 04:33:00.639" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:00.640" starttime="20170810 04:33:00.639" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:00.640" starttime="20170810 04:33:00.637" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:00.640" starttime="20170810 04:33:00.637" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:33:00.736" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:33:00.736" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:33:00.736" starttime="20170810 04:33:00.640" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:33:00.738" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:33:00.738" starttime="20170810 04:33:00.737" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:33:00.739" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:33:00.739" starttime="20170810 04:33:00.738" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:00.739" starttime="20170810 04:33:00.738" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:00.739" starttime="20170810 04:33:00.737" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:00.739" starttime="20170810 04:33:00.736" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:33:00.739" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:33:00.739" starttime="20170810 04:33:00.739" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:33:00.740" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:33:00.740" starttime="20170810 04:33:00.431" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:33:00.740" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:33:00.740" starttime="20170810 04:33:00.740" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:33:00.741" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:33:00.741" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:33:00.741" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:33:00.741" starttime="20170810 04:33:00.741" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:33:00.741" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:33:00.741" starttime="20170810 04:33:00.431" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:33:00.742" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:33:00.742" starttime="20170810 04:33:00.430" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:33:00.742" starttime="20170810 04:33:00.742" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:33:00.749" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:33:00.750" starttime="20170810 04:33:00.749" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:33:00.750" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:33:00.750" starttime="20170810 04:33:00.750" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:33:00.751" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:33:00.751" starttime="20170810 04:33:00.750" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:33:00.751" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:33:00.752" starttime="20170810 04:33:00.751" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:33:00.977" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:33:00.977" starttime="20170810 04:33:00.752" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:33:00.977" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:33:00.977" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:33:00.977" starttime="20170810 04:33:00.752" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:33:00.978" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:33:00.978" starttime="20170810 04:33:00.978" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:33:00.979" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:33:00.979" starttime="20170810 04:33:00.978" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:00.979" starttime="20170810 04:33:00.748" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:00.979" starttime="20170810 04:33:00.748" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:00.979" starttime="20170810 04:33:00.747" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:33:00.979" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:33:00.980" starttime="20170810 04:33:00.979" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:33:00.982" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:33:00.982" starttime="20170810 04:33:00.981" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:33:00.983" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:33:00.983" starttime="20170810 04:33:00.983" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:00.983" starttime="20170810 04:33:00.982" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:00.983" starttime="20170810 04:33:00.980" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:00.983" starttime="20170810 04:33:00.980" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:33:01.061" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:33:01.061" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:33:01.061" starttime="20170810 04:33:00.983" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:33:01.063" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:33:01.063" starttime="20170810 04:33:01.062" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:33:01.064" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:33:01.064" starttime="20170810 04:33:01.064" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:01.064" starttime="20170810 04:33:01.063" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:01.064" starttime="20170810 04:33:01.062" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:01.064" starttime="20170810 04:33:01.061" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:33:01.065" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:33:01.065" starttime="20170810 04:33:01.065" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:33:01.065" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:33:01.065" starttime="20170810 04:33:00.746" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:33:01.066" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:33:01.066" starttime="20170810 04:33:01.065" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:33:01.066" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:33:01.066" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:33:01.066" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170810 04:33:01.066" starttime="20170810 04:33:01.066" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:33:01.067" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:33:01.067" starttime="20170810 04:33:00.746" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:33:01.067" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:33:01.067" starttime="20170810 04:33:00.743" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:33:01.068" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:33:01.068" starttime="20170810 04:33:01.067" status="FAIL"></status>
</kw>
<status endtime="20170810 04:33:01.068" starttime="20170810 04:33:00.742" status="FAIL"></status>
</kw>
<status endtime="20170810 04:33:01.068" starttime="20170810 04:33:00.140" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:33:11.073" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:33:11.073" starttime="20170810 04:33:11.072" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:33:11.074" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:33:11.074" starttime="20170810 04:33:11.073" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:33:11.074" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:33:11.074" starttime="20170810 04:33:11.074" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:33:11.075" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:33:11.075" starttime="20170810 04:33:11.075" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:33:11.350" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:33:11.351" starttime="20170810 04:33:11.076" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:33:11.351" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:33:11.351" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:33:11.351" starttime="20170810 04:33:11.075" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:33:11.351" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:33:11.351" starttime="20170810 04:33:11.351" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:33:11.352" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:33:11.352" starttime="20170810 04:33:11.352" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:11.352" starttime="20170810 04:33:11.072" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:11.352" starttime="20170810 04:33:11.071" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:11.352" starttime="20170810 04:33:11.071" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:33:11.353" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:33:11.353" starttime="20170810 04:33:11.353" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:33:11.355" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:33:11.355" starttime="20170810 04:33:11.354" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:33:11.356" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:33:11.356" starttime="20170810 04:33:11.356" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:11.356" starttime="20170810 04:33:11.355" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:11.356" starttime="20170810 04:33:11.354" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:11.356" starttime="20170810 04:33:11.353" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:33:11.423" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:33:11.423" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:33:11.423" starttime="20170810 04:33:11.357" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:33:11.425" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:33:11.425" starttime="20170810 04:33:11.424" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:33:11.426" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:33:11.427" starttime="20170810 04:33:11.426" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:11.427" starttime="20170810 04:33:11.425" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:11.427" starttime="20170810 04:33:11.424" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:11.427" starttime="20170810 04:33:11.423" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:33:11.427" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:33:11.427" starttime="20170810 04:33:11.427" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:33:11.428" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:33:11.428" starttime="20170810 04:33:11.070" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:33:11.428" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:33:11.428" starttime="20170810 04:33:11.428" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:33:11.429" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:33:11.429" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:33:11.429" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:33:11.429" starttime="20170810 04:33:11.428" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:33:11.429" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:33:11.429" starttime="20170810 04:33:11.070" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:33:11.430" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:33:11.430" starttime="20170810 04:33:11.069" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:33:11.430" starttime="20170810 04:33:11.430" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:11.430" starttime="20170810 04:33:11.069" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:33:11.434" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:33:11.434" starttime="20170810 04:33:11.433" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:33:11.435" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:33:11.435" starttime="20170810 04:33:11.435" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:33:11.436" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:33:11.436" starttime="20170810 04:33:11.435" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:33:11.436" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:33:11.436" starttime="20170810 04:33:11.436" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:33:11.622" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:33:11.622" starttime="20170810 04:33:11.437" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:33:11.622" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:33:11.622" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:33:11.622" starttime="20170810 04:33:11.437" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:33:11.623" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:33:11.623" starttime="20170810 04:33:11.623" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:33:11.623" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:33:11.624" starttime="20170810 04:33:11.623" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:11.624" starttime="20170810 04:33:11.433" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:11.624" starttime="20170810 04:33:11.432" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:11.624" starttime="20170810 04:33:11.432" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:33:11.624" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:33:11.624" starttime="20170810 04:33:11.624" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:33:11.626" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:33:11.627" starttime="20170810 04:33:11.626" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:33:11.628" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:33:11.628" starttime="20170810 04:33:11.627" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:11.628" starttime="20170810 04:33:11.627" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:11.628" starttime="20170810 04:33:11.625" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:11.628" starttime="20170810 04:33:11.625" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:33:11.739" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:33:11.739" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:33:11.739" starttime="20170810 04:33:11.628" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:33:11.741" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:33:11.741" starttime="20170810 04:33:11.740" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:33:11.742" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:33:11.742" starttime="20170810 04:33:11.742" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:11.742" starttime="20170810 04:33:11.741" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:11.742" starttime="20170810 04:33:11.740" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:11.742" starttime="20170810 04:33:11.739" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:33:11.743" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:33:11.743" starttime="20170810 04:33:11.743" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:33:11.743" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:33:11.743" starttime="20170810 04:33:11.431" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:33:11.744" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:33:11.744" starttime="20170810 04:33:11.743" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:33:11.744" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:33:11.744" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:33:11.744" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:33:11.744" starttime="20170810 04:33:11.744" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:33:11.745" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:33:11.745" starttime="20170810 04:33:11.431" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:33:11.745" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:33:11.745" starttime="20170810 04:33:11.430" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:33:11.746" starttime="20170810 04:33:11.745" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:33:11.750" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:33:11.750" starttime="20170810 04:33:11.749" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:33:11.750" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:33:11.751" starttime="20170810 04:33:11.750" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:33:11.751" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:33:11.751" starttime="20170810 04:33:11.751" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:33:11.752" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:33:11.752" starttime="20170810 04:33:11.751" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:33:11.947" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:33:11.947" starttime="20170810 04:33:11.752" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:33:11.947" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:33:11.947" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:33:11.947" starttime="20170810 04:33:11.752" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:33:11.948" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:33:11.948" starttime="20170810 04:33:11.947" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:33:11.948" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:33:11.948" starttime="20170810 04:33:11.948" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:11.948" starttime="20170810 04:33:11.749" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:11.949" starttime="20170810 04:33:11.748" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:11.949" starttime="20170810 04:33:11.748" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:33:11.949" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:33:11.949" starttime="20170810 04:33:11.949" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:33:11.952" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:33:11.952" starttime="20170810 04:33:11.951" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:33:11.952" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:33:11.953" starttime="20170810 04:33:11.952" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:11.953" starttime="20170810 04:33:11.952" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:11.953" starttime="20170810 04:33:11.950" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:11.953" starttime="20170810 04:33:11.949" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:33:12.023" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:33:12.023" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:33:12.023" starttime="20170810 04:33:11.953" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:33:12.025" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:33:12.025" starttime="20170810 04:33:12.025" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:33:12.026" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:33:12.026" starttime="20170810 04:33:12.026" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:12.026" starttime="20170810 04:33:12.025" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:12.026" starttime="20170810 04:33:12.024" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:12.026" starttime="20170810 04:33:12.024" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:33:12.027" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:33:12.027" starttime="20170810 04:33:12.027" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:33:12.027" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:33:12.027" starttime="20170810 04:33:11.747" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:33:12.028" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:33:12.028" starttime="20170810 04:33:12.027" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:33:12.028" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:33:12.028" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:33:12.028" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170810 04:33:12.028" starttime="20170810 04:33:12.028" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:33:12.029" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:33:12.029" starttime="20170810 04:33:11.747" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:33:12.029" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:33:12.029" starttime="20170810 04:33:11.746" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:33:12.030" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:33:12.030" starttime="20170810 04:33:12.030" status="FAIL"></status>
</kw>
<status endtime="20170810 04:33:12.030" starttime="20170810 04:33:11.746" status="FAIL"></status>
</kw>
<status endtime="20170810 04:33:12.030" starttime="20170810 04:33:11.068" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:33:22.036" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:33:22.036" starttime="20170810 04:33:22.036" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:33:22.037" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:33:22.037" starttime="20170810 04:33:22.037" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:33:22.037" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:33:22.038" starttime="20170810 04:33:22.037" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:33:22.038" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:33:22.038" starttime="20170810 04:33:22.038" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:33:22.230" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:33:22.230" starttime="20170810 04:33:22.039" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:33:22.230" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:33:22.230" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:33:22.230" starttime="20170810 04:33:22.038" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:33:22.231" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:33:22.231" starttime="20170810 04:33:22.231" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:33:22.232" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:33:22.232" starttime="20170810 04:33:22.231" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:22.232" starttime="20170810 04:33:22.035" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:22.232" starttime="20170810 04:33:22.035" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:22.232" starttime="20170810 04:33:22.034" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:33:22.233" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:33:22.233" starttime="20170810 04:33:22.233" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:33:22.235" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:33:22.235" starttime="20170810 04:33:22.234" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:33:22.236" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:33:22.236" starttime="20170810 04:33:22.236" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:22.236" starttime="20170810 04:33:22.235" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:22.236" starttime="20170810 04:33:22.234" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:22.236" starttime="20170810 04:33:22.233" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:33:22.329" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:33:22.329" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:33:22.329" starttime="20170810 04:33:22.237" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:33:22.331" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:33:22.331" starttime="20170810 04:33:22.330" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:33:22.332" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:33:22.332" starttime="20170810 04:33:22.332" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:22.332" starttime="20170810 04:33:22.331" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:22.332" starttime="20170810 04:33:22.330" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:22.332" starttime="20170810 04:33:22.329" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:33:22.333" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:33:22.333" starttime="20170810 04:33:22.332" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:33:22.333" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:33:22.333" starttime="20170810 04:33:22.033" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:33:22.333" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:33:22.334" starttime="20170810 04:33:22.333" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:33:22.334" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:33:22.334" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:33:22.334" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:33:22.334" starttime="20170810 04:33:22.334" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:33:22.335" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:33:22.335" starttime="20170810 04:33:22.033" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:33:22.335" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:33:22.335" starttime="20170810 04:33:22.032" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:33:22.335" starttime="20170810 04:33:22.335" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:22.336" starttime="20170810 04:33:22.032" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:33:22.339" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:33:22.340" starttime="20170810 04:33:22.339" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:33:22.340" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:33:22.340" starttime="20170810 04:33:22.340" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:33:22.341" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:33:22.341" starttime="20170810 04:33:22.341" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:33:22.342" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:33:22.342" starttime="20170810 04:33:22.341" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:33:22.546" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:33:22.546" starttime="20170810 04:33:22.342" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:33:22.546" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:33:22.546" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:33:22.546" starttime="20170810 04:33:22.342" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:33:22.547" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:33:22.547" starttime="20170810 04:33:22.546" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:33:22.547" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:33:22.548" starttime="20170810 04:33:22.547" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:22.548" starttime="20170810 04:33:22.338" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:22.548" starttime="20170810 04:33:22.338" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:22.548" starttime="20170810 04:33:22.337" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:33:22.548" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:33:22.549" starttime="20170810 04:33:22.548" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:33:22.551" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:33:22.551" starttime="20170810 04:33:22.550" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:33:22.551" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:33:22.552" starttime="20170810 04:33:22.551" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:22.552" starttime="20170810 04:33:22.551" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:22.552" starttime="20170810 04:33:22.549" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:22.552" starttime="20170810 04:33:22.549" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:33:22.645" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:33:22.645" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:33:22.645" starttime="20170810 04:33:22.552" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:33:22.647" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:33:22.647" starttime="20170810 04:33:22.647" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:33:22.648" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:33:22.648" starttime="20170810 04:33:22.648" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:22.648" starttime="20170810 04:33:22.647" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:22.648" starttime="20170810 04:33:22.646" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:22.648" starttime="20170810 04:33:22.646" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:33:22.649" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:33:22.649" starttime="20170810 04:33:22.649" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:33:22.649" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:33:22.649" starttime="20170810 04:33:22.337" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:33:22.650" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:33:22.650" starttime="20170810 04:33:22.649" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:33:22.650" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:33:22.650" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:33:22.651" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:33:22.651" starttime="20170810 04:33:22.650" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:33:22.651" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:33:22.651" starttime="20170810 04:33:22.336" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:33:22.651" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:33:22.651" starttime="20170810 04:33:22.336" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:33:22.652" starttime="20170810 04:33:22.651" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:33:22.656" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:33:22.656" starttime="20170810 04:33:22.656" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:33:22.657" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:33:22.657" starttime="20170810 04:33:22.657" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:33:22.657" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:33:22.657" starttime="20170810 04:33:22.657" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:33:22.658" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:33:22.658" starttime="20170810 04:33:22.658" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:33:22.868" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:33:22.868" starttime="20170810 04:33:22.659" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:33:22.869" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:33:22.869" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:33:22.869" starttime="20170810 04:33:22.658" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:33:22.869" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:33:22.869" starttime="20170810 04:33:22.869" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:33:22.870" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:33:22.870" starttime="20170810 04:33:22.870" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:22.870" starttime="20170810 04:33:22.655" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:22.870" starttime="20170810 04:33:22.655" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:22.870" starttime="20170810 04:33:22.654" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:33:22.871" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:33:22.871" starttime="20170810 04:33:22.871" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:33:22.873" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:33:22.873" starttime="20170810 04:33:22.872" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:33:22.874" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:33:22.874" starttime="20170810 04:33:22.874" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:22.875" starttime="20170810 04:33:22.874" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:22.875" starttime="20170810 04:33:22.872" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:22.875" starttime="20170810 04:33:22.871" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:33:22.977" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:33:22.977" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:33:22.977" starttime="20170810 04:33:22.875" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:33:22.979" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:33:22.979" starttime="20170810 04:33:22.978" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:33:22.980" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:33:22.980" starttime="20170810 04:33:22.980" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:22.980" starttime="20170810 04:33:22.979" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:22.980" starttime="20170810 04:33:22.978" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:22.980" starttime="20170810 04:33:22.978" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:33:22.981" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:33:22.981" starttime="20170810 04:33:22.981" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:33:22.981" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:33:22.981" starttime="20170810 04:33:22.653" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:33:22.982" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:33:22.982" starttime="20170810 04:33:22.981" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:33:22.982" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:33:22.982" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:33:22.982" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170810 04:33:22.982" starttime="20170810 04:33:22.982" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:33:22.983" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:33:22.983" starttime="20170810 04:33:22.653" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:33:22.983" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:33:22.983" starttime="20170810 04:33:22.652" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:33:22.984" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:33:22.984" starttime="20170810 04:33:22.983" status="FAIL"></status>
</kw>
<status endtime="20170810 04:33:22.984" starttime="20170810 04:33:22.652" status="FAIL"></status>
</kw>
<status endtime="20170810 04:33:22.984" starttime="20170810 04:33:22.031" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:33:32.989" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:33:32.990" starttime="20170810 04:33:32.989" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:33:32.990" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:33:32.990" starttime="20170810 04:33:32.990" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:33:32.991" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:33:32.991" starttime="20170810 04:33:32.991" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:33:32.992" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:33:32.992" starttime="20170810 04:33:32.991" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:33:33.185" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:33:33.185" starttime="20170810 04:33:32.993" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:33:33.185" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:33:33.185" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:33:33.185" starttime="20170810 04:33:32.992" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:33:33.186" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:33:33.186" starttime="20170810 04:33:33.186" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:33:33.187" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:33:33.187" starttime="20170810 04:33:33.186" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:33.187" starttime="20170810 04:33:32.989" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:33.187" starttime="20170810 04:33:32.988" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:33.187" starttime="20170810 04:33:32.987" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:33:33.188" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:33:33.188" starttime="20170810 04:33:33.187" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:33:33.190" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:33:33.190" starttime="20170810 04:33:33.189" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:33:33.191" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:33:33.191" starttime="20170810 04:33:33.191" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:33.191" starttime="20170810 04:33:33.190" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:33.191" starttime="20170810 04:33:33.189" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:33.191" starttime="20170810 04:33:33.188" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:33:33.273" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:33:33.273" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:33:33.273" starttime="20170810 04:33:33.191" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:33:33.275" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:33:33.275" starttime="20170810 04:33:33.274" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:33:33.275" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:33:33.276" starttime="20170810 04:33:33.275" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:33.276" starttime="20170810 04:33:33.275" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:33.276" starttime="20170810 04:33:33.274" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:33.276" starttime="20170810 04:33:33.273" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:33:33.276" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:33:33.276" starttime="20170810 04:33:33.276" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:33:33.277" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:33:33.277" starttime="20170810 04:33:32.987" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:33:33.277" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:33:33.277" starttime="20170810 04:33:33.277" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:33:33.278" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:33:33.278" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:33:33.278" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:33:33.278" starttime="20170810 04:33:33.278" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:33:33.278" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:33:33.278" starttime="20170810 04:33:32.986" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:33:33.279" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:33:33.279" starttime="20170810 04:33:32.986" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:33:33.279" starttime="20170810 04:33:33.279" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:33.279" starttime="20170810 04:33:32.985" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:33:33.283" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:33:33.284" starttime="20170810 04:33:33.283" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:33:33.284" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:33:33.284" starttime="20170810 04:33:33.284" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:33:33.285" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:33:33.285" starttime="20170810 04:33:33.285" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:33:33.286" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:33:33.286" starttime="20170810 04:33:33.285" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:33:33.474" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:33:33.475" starttime="20170810 04:33:33.286" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:33:33.475" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:33:33.475" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:33:33.475" starttime="20170810 04:33:33.286" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:33:33.476" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:33:33.476" starttime="20170810 04:33:33.475" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:33:33.476" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:33:33.476" starttime="20170810 04:33:33.476" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:33.476" starttime="20170810 04:33:33.282" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:33.477" starttime="20170810 04:33:33.282" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:33.477" starttime="20170810 04:33:33.281" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:33:33.477" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:33:33.477" starttime="20170810 04:33:33.477" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:33:33.479" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:33:33.479" starttime="20170810 04:33:33.479" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:33:33.480" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:33:33.480" starttime="20170810 04:33:33.480" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:33.481" starttime="20170810 04:33:33.480" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:33.481" starttime="20170810 04:33:33.478" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:33.481" starttime="20170810 04:33:33.478" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:33:33.574" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:33:33.574" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:33:33.574" starttime="20170810 04:33:33.481" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:33:33.576" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:33:33.576" starttime="20170810 04:33:33.576" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:33:33.577" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:33:33.577" starttime="20170810 04:33:33.577" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:33.577" starttime="20170810 04:33:33.576" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:33.577" starttime="20170810 04:33:33.575" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:33.577" starttime="20170810 04:33:33.575" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:33:33.578" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:33:33.578" starttime="20170810 04:33:33.578" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:33:33.578" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:33:33.578" starttime="20170810 04:33:33.281" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:33:33.579" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:33:33.579" starttime="20170810 04:33:33.578" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:33:33.579" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:33:33.579" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:33:33.580" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:33:33.580" starttime="20170810 04:33:33.579" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:33:33.580" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:33:33.580" starttime="20170810 04:33:33.280" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:33:33.580" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:33:33.580" starttime="20170810 04:33:33.280" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:33:33.581" starttime="20170810 04:33:33.580" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:33:33.588" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:33:33.589" starttime="20170810 04:33:33.588" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:33:33.589" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:33:33.589" starttime="20170810 04:33:33.589" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:33:33.590" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:33:33.590" starttime="20170810 04:33:33.590" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:33:33.591" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:33:33.591" starttime="20170810 04:33:33.590" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:33:33.819" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:33:33.819" starttime="20170810 04:33:33.591" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:33:33.819" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:33:33.819" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:33:33.819" starttime="20170810 04:33:33.591" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:33:33.820" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:33:33.820" starttime="20170810 04:33:33.820" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:33:33.821" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:33:33.821" starttime="20170810 04:33:33.820" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:33.821" starttime="20170810 04:33:33.587" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:33.821" starttime="20170810 04:33:33.587" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:33.821" starttime="20170810 04:33:33.586" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:33:33.822" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:33:33.822" starttime="20170810 04:33:33.821" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:33:33.824" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:33:33.824" starttime="20170810 04:33:33.823" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:33:33.825" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:33:33.825" starttime="20170810 04:33:33.825" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:33.825" starttime="20170810 04:33:33.824" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:33.825" starttime="20170810 04:33:33.822" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:33.825" starttime="20170810 04:33:33.822" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:33:33.906" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:33:33.906" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:33:33.906" starttime="20170810 04:33:33.826" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:33:33.908" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:33:33.908" starttime="20170810 04:33:33.907" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:33:33.909" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:33:33.909" starttime="20170810 04:33:33.909" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:33.909" starttime="20170810 04:33:33.908" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:33.909" starttime="20170810 04:33:33.907" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:33.909" starttime="20170810 04:33:33.906" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:33:33.910" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:33:33.910" starttime="20170810 04:33:33.910" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:33:33.910" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:33:33.910" starttime="20170810 04:33:33.585" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:33:33.911" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:33:33.911" starttime="20170810 04:33:33.910" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:33:33.911" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:33:33.911" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:33:33.911" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170810 04:33:33.911" starttime="20170810 04:33:33.911" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:33:33.912" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:33:33.912" starttime="20170810 04:33:33.585" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:33:33.912" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:33:33.912" starttime="20170810 04:33:33.581" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:33:33.913" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:33:33.913" starttime="20170810 04:33:33.912" status="FAIL"></status>
</kw>
<status endtime="20170810 04:33:33.913" starttime="20170810 04:33:33.581" status="FAIL"></status>
</kw>
<status endtime="20170810 04:33:33.913" starttime="20170810 04:33:32.985" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:33:43.921" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:33:43.922" starttime="20170810 04:33:43.920" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:33:43.922" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:33:43.923" starttime="20170810 04:33:43.922" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:33:43.923" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:33:43.923" starttime="20170810 04:33:43.923" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:33:43.924" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:33:43.925" starttime="20170810 04:33:43.924" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:33:44.132" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:33:44.132" starttime="20170810 04:33:43.926" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:33:44.133" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:33:44.133" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:33:44.133" starttime="20170810 04:33:43.925" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:33:44.134" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:33:44.134" starttime="20170810 04:33:44.133" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:33:44.135" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:33:44.135" starttime="20170810 04:33:44.134" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:44.136" starttime="20170810 04:33:43.920" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:44.136" starttime="20170810 04:33:43.919" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:44.136" starttime="20170810 04:33:43.918" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:33:44.137" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:33:44.137" starttime="20170810 04:33:44.136" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:33:44.140" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:33:44.140" starttime="20170810 04:33:44.139" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:33:44.142" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:33:44.142" starttime="20170810 04:33:44.141" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:44.142" starttime="20170810 04:33:44.141" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:44.142" starttime="20170810 04:33:44.138" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:44.142" starttime="20170810 04:33:44.137" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:33:44.211" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:33:44.212" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:33:44.212" starttime="20170810 04:33:44.143" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:33:44.213" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:33:44.213" starttime="20170810 04:33:44.213" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:33:44.214" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:33:44.214" starttime="20170810 04:33:44.214" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:44.215" starttime="20170810 04:33:44.214" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:44.215" starttime="20170810 04:33:44.212" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:44.215" starttime="20170810 04:33:44.212" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:33:44.215" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:33:44.215" starttime="20170810 04:33:44.215" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:33:44.215" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:33:44.215" starttime="20170810 04:33:43.917" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:33:44.216" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:33:44.216" starttime="20170810 04:33:44.216" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:33:44.217" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:33:44.217" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:33:44.217" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:33:44.217" starttime="20170810 04:33:44.216" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:33:44.217" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:33:44.217" starttime="20170810 04:33:43.916" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:33:44.217" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:33:44.217" starttime="20170810 04:33:43.915" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:33:44.218" starttime="20170810 04:33:44.218" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:44.218" starttime="20170810 04:33:43.915" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:33:44.222" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:33:44.223" starttime="20170810 04:33:44.222" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:33:44.223" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:33:44.223" starttime="20170810 04:33:44.223" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:33:44.224" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:33:44.224" starttime="20170810 04:33:44.223" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:33:44.224" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:33:44.225" starttime="20170810 04:33:44.224" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:33:44.418" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:33:44.418" starttime="20170810 04:33:44.225" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:33:44.419" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:33:44.419" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:33:44.419" starttime="20170810 04:33:44.225" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:33:44.420" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:33:44.420" starttime="20170810 04:33:44.419" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:33:44.431" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:33:44.431" starttime="20170810 04:33:44.431" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:44.431" starttime="20170810 04:33:44.221" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:44.431" starttime="20170810 04:33:44.220" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:44.431" starttime="20170810 04:33:44.220" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:33:44.432" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:33:44.432" starttime="20170810 04:33:44.432" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:33:44.434" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:33:44.434" starttime="20170810 04:33:44.433" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:33:44.435" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:33:44.435" starttime="20170810 04:33:44.435" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:44.435" starttime="20170810 04:33:44.434" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:44.435" starttime="20170810 04:33:44.433" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:44.435" starttime="20170810 04:33:44.432" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:33:44.528" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:33:44.529" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:33:44.529" starttime="20170810 04:33:44.436" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:33:44.531" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:33:44.531" starttime="20170810 04:33:44.530" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:33:44.532" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:33:44.532" starttime="20170810 04:33:44.531" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:44.532" starttime="20170810 04:33:44.531" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:44.532" starttime="20170810 04:33:44.530" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:44.532" starttime="20170810 04:33:44.529" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:33:44.532" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:33:44.533" starttime="20170810 04:33:44.532" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:33:44.533" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:33:44.533" starttime="20170810 04:33:44.219" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:33:44.533" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:33:44.533" starttime="20170810 04:33:44.533" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:33:44.534" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:33:44.534" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:33:44.534" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:33:44.534" starttime="20170810 04:33:44.534" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:33:44.534" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:33:44.535" starttime="20170810 04:33:44.219" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:33:44.535" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:33:44.535" starttime="20170810 04:33:44.218" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:33:44.535" starttime="20170810 04:33:44.535" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:33:44.540" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:33:44.540" starttime="20170810 04:33:44.539" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:33:44.541" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:33:44.541" starttime="20170810 04:33:44.540" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:33:44.541" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:33:44.541" starttime="20170810 04:33:44.541" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:33:44.542" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:33:44.542" starttime="20170810 04:33:44.541" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:33:44.760" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:33:44.760" starttime="20170810 04:33:44.543" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:33:44.760" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:33:44.760" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:33:44.760" starttime="20170810 04:33:44.542" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:33:44.762" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:33:44.762" starttime="20170810 04:33:44.761" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:33:44.763" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:33:44.763" starttime="20170810 04:33:44.762" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:44.763" starttime="20170810 04:33:44.539" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:44.763" starttime="20170810 04:33:44.538" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:44.764" starttime="20170810 04:33:44.538" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:33:44.765" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:33:44.765" starttime="20170810 04:33:44.764" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:33:44.768" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:33:44.768" starttime="20170810 04:33:44.767" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:33:44.769" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:33:44.769" starttime="20170810 04:33:44.769" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:44.769" starttime="20170810 04:33:44.768" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:44.770" starttime="20170810 04:33:44.766" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:44.770" starttime="20170810 04:33:44.765" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:33:44.867" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:33:44.867" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:33:44.867" starttime="20170810 04:33:44.771" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:33:44.869" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:33:44.869" starttime="20170810 04:33:44.869" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:33:44.870" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:33:44.870" starttime="20170810 04:33:44.870" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:44.870" starttime="20170810 04:33:44.869" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:44.870" starttime="20170810 04:33:44.868" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:44.871" starttime="20170810 04:33:44.868" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:33:44.871" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:33:44.871" starttime="20170810 04:33:44.871" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:33:44.871" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:33:44.871" starttime="20170810 04:33:44.537" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:33:44.872" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:33:44.872" starttime="20170810 04:33:44.871" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:33:44.872" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:33:44.872" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:33:44.873" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170810 04:33:44.873" starttime="20170810 04:33:44.872" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:33:44.873" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:33:44.873" starttime="20170810 04:33:44.537" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:33:44.873" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:33:44.873" starttime="20170810 04:33:44.536" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:33:44.874" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:33:44.874" starttime="20170810 04:33:44.873" status="FAIL"></status>
</kw>
<status endtime="20170810 04:33:44.874" starttime="20170810 04:33:44.536" status="FAIL"></status>
</kw>
<status endtime="20170810 04:33:44.874" starttime="20170810 04:33:43.914" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:33:54.880" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:33:54.881" starttime="20170810 04:33:54.880" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:33:54.881" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:33:54.882" starttime="20170810 04:33:54.881" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:33:54.882" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:33:54.882" starttime="20170810 04:33:54.882" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:33:54.883" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:33:54.883" starttime="20170810 04:33:54.882" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:33:55.073" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:33:55.073" starttime="20170810 04:33:54.883" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:33:55.074" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:33:55.074" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:33:55.074" starttime="20170810 04:33:54.883" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:33:55.074" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:33:55.074" starttime="20170810 04:33:55.074" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:33:55.075" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:33:55.075" starttime="20170810 04:33:55.075" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:55.075" starttime="20170810 04:33:54.879" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:55.075" starttime="20170810 04:33:54.879" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:55.075" starttime="20170810 04:33:54.878" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:33:55.076" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:33:55.076" starttime="20170810 04:33:55.076" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:33:55.078" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:33:55.078" starttime="20170810 04:33:55.077" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:33:55.079" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:33:55.079" starttime="20170810 04:33:55.079" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:55.079" starttime="20170810 04:33:55.078" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:55.079" starttime="20170810 04:33:55.077" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:55.080" starttime="20170810 04:33:55.076" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:33:55.148" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:33:55.148" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:33:55.148" starttime="20170810 04:33:55.080" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:33:55.150" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:33:55.150" starttime="20170810 04:33:55.149" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:33:55.151" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:33:55.151" starttime="20170810 04:33:55.151" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:55.151" starttime="20170810 04:33:55.150" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:55.151" starttime="20170810 04:33:55.149" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:55.151" starttime="20170810 04:33:55.148" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:33:55.152" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:33:55.152" starttime="20170810 04:33:55.152" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:33:55.152" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:33:55.152" starttime="20170810 04:33:54.878" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:33:55.153" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:33:55.153" starttime="20170810 04:33:55.152" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:33:55.153" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:33:55.153" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:33:55.153" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:33:55.153" starttime="20170810 04:33:55.153" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:33:55.154" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:33:55.154" starttime="20170810 04:33:54.877" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:33:55.154" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:33:55.154" starttime="20170810 04:33:54.876" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:33:55.155" starttime="20170810 04:33:55.154" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:55.155" starttime="20170810 04:33:54.876" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:33:55.159" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:33:55.159" starttime="20170810 04:33:55.158" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:33:55.160" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:33:55.160" starttime="20170810 04:33:55.159" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:33:55.160" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:33:55.160" starttime="20170810 04:33:55.160" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:33:55.161" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:33:55.161" starttime="20170810 04:33:55.161" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:33:55.355" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:33:55.355" starttime="20170810 04:33:55.162" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:33:55.355" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:33:55.355" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:33:55.355" starttime="20170810 04:33:55.161" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:33:55.356" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:33:55.356" starttime="20170810 04:33:55.355" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:33:55.356" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:33:55.356" starttime="20170810 04:33:55.356" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:55.357" starttime="20170810 04:33:55.157" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:55.357" starttime="20170810 04:33:55.157" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:55.357" starttime="20170810 04:33:55.156" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:33:55.357" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:33:55.358" starttime="20170810 04:33:55.357" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:33:55.360" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:33:55.360" starttime="20170810 04:33:55.359" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:33:55.361" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:33:55.361" starttime="20170810 04:33:55.360" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:55.361" starttime="20170810 04:33:55.360" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:55.361" starttime="20170810 04:33:55.358" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:55.361" starttime="20170810 04:33:55.358" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:33:55.455" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:33:55.455" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:33:55.455" starttime="20170810 04:33:55.361" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:33:55.457" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:33:55.457" starttime="20170810 04:33:55.456" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:33:55.458" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:33:55.458" starttime="20170810 04:33:55.457" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:55.458" starttime="20170810 04:33:55.457" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:55.458" starttime="20170810 04:33:55.456" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:55.458" starttime="20170810 04:33:55.455" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:33:55.458" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:33:55.458" starttime="20170810 04:33:55.458" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:33:55.459" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:33:55.459" starttime="20170810 04:33:55.156" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:33:55.459" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:33:55.459" starttime="20170810 04:33:55.459" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:33:55.460" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:33:55.460" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:33:55.460" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:33:55.460" starttime="20170810 04:33:55.460" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:33:55.460" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:33:55.460" starttime="20170810 04:33:55.155" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:33:55.461" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:33:55.461" starttime="20170810 04:33:55.155" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:33:55.461" starttime="20170810 04:33:55.461" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:33:55.466" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:33:55.466" starttime="20170810 04:33:55.465" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:33:55.467" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:33:55.467" starttime="20170810 04:33:55.467" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:33:55.468" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:33:55.468" starttime="20170810 04:33:55.467" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:33:55.468" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:33:55.468" starttime="20170810 04:33:55.468" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:33:55.694" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:33:55.694" starttime="20170810 04:33:55.469" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:33:55.694" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:33:55.694" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:33:55.694" starttime="20170810 04:33:55.469" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:33:55.695" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:33:55.695" starttime="20170810 04:33:55.695" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:33:55.696" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:33:55.696" starttime="20170810 04:33:55.695" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:55.696" starttime="20170810 04:33:55.465" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:55.696" starttime="20170810 04:33:55.464" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:55.696" starttime="20170810 04:33:55.464" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:33:55.697" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:33:55.697" starttime="20170810 04:33:55.696" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:33:55.699" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:33:55.699" starttime="20170810 04:33:55.698" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:33:55.700" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:33:55.700" starttime="20170810 04:33:55.700" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:55.700" starttime="20170810 04:33:55.699" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:55.700" starttime="20170810 04:33:55.697" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:55.701" starttime="20170810 04:33:55.697" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:33:55.800" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:33:55.800" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:33:55.800" starttime="20170810 04:33:55.701" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:33:55.803" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:33:55.803" starttime="20170810 04:33:55.802" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:33:55.804" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:33:55.804" starttime="20170810 04:33:55.804" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:55.804" starttime="20170810 04:33:55.803" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:55.804" starttime="20170810 04:33:55.801" status="PASS"></status>
</kw>
<status endtime="20170810 04:33:55.804" starttime="20170810 04:33:55.801" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:33:55.805" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:33:55.805" starttime="20170810 04:33:55.805" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:33:55.805" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:33:55.805" starttime="20170810 04:33:55.463" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:33:55.806" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:33:55.806" starttime="20170810 04:33:55.805" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:33:55.806" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:33:55.806" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:33:55.806" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170810 04:33:55.806" starttime="20170810 04:33:55.806" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:33:55.807" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:33:55.807" starttime="20170810 04:33:55.462" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:33:55.807" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:33:55.807" starttime="20170810 04:33:55.462" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:33:55.808" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:33:55.808" starttime="20170810 04:33:55.807" status="FAIL"></status>
</kw>
<status endtime="20170810 04:33:55.808" starttime="20170810 04:33:55.461" status="FAIL"></status>
</kw>
<status endtime="20170810 04:33:55.808" starttime="20170810 04:33:54.875" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:34:05.814" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:34:05.814" starttime="20170810 04:34:05.813" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:34:05.815" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:34:05.815" starttime="20170810 04:34:05.814" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:34:05.815" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:34:05.815" starttime="20170810 04:34:05.815" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:34:05.816" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:34:05.816" starttime="20170810 04:34:05.816" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:34:06.033" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:34:06.033" starttime="20170810 04:34:05.817" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:34:06.033" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:34:06.033" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:34:06.033" starttime="20170810 04:34:05.816" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:34:06.034" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:34:06.034" starttime="20170810 04:34:06.033" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:34:06.034" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:34:06.035" starttime="20170810 04:34:06.034" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:06.035" starttime="20170810 04:34:05.813" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:06.035" starttime="20170810 04:34:05.812" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:06.035" starttime="20170810 04:34:05.812" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:34:06.035" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:34:06.035" starttime="20170810 04:34:06.035" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:34:06.038" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:34:06.038" starttime="20170810 04:34:06.037" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:34:06.038" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:34:06.039" starttime="20170810 04:34:06.038" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:06.039" starttime="20170810 04:34:06.038" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:06.039" starttime="20170810 04:34:06.036" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:06.039" starttime="20170810 04:34:06.036" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:34:06.109" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:34:06.109" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:34:06.109" starttime="20170810 04:34:06.039" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:34:06.111" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:34:06.111" starttime="20170810 04:34:06.110" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:34:06.112" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:34:06.112" starttime="20170810 04:34:06.111" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:06.112" starttime="20170810 04:34:06.111" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:06.112" starttime="20170810 04:34:06.110" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:06.112" starttime="20170810 04:34:06.109" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:34:06.112" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:34:06.113" starttime="20170810 04:34:06.112" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:34:06.113" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:34:06.113" starttime="20170810 04:34:05.811" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:34:06.113" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:34:06.113" starttime="20170810 04:34:06.113" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:34:06.114" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:34:06.114" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:34:06.114" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:34:06.114" starttime="20170810 04:34:06.114" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:34:06.115" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:34:06.115" starttime="20170810 04:34:05.810" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:34:06.115" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:34:06.115" starttime="20170810 04:34:05.810" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:34:06.115" starttime="20170810 04:34:06.115" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:06.116" starttime="20170810 04:34:05.810" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:34:06.120" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:34:06.120" starttime="20170810 04:34:06.119" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:34:06.121" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:34:06.121" starttime="20170810 04:34:06.121" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:34:06.122" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:34:06.122" starttime="20170810 04:34:06.122" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:34:06.123" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:34:06.123" starttime="20170810 04:34:06.123" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:34:06.362" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:34:06.362" starttime="20170810 04:34:06.124" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:34:06.362" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:34:06.362" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:34:06.362" starttime="20170810 04:34:06.124" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:34:06.363" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:34:06.363" starttime="20170810 04:34:06.362" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:34:06.363" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:34:06.363" starttime="20170810 04:34:06.363" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:06.364" starttime="20170810 04:34:06.118" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:06.364" starttime="20170810 04:34:06.118" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:06.364" starttime="20170810 04:34:06.117" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:34:06.364" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:34:06.364" starttime="20170810 04:34:06.364" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:34:06.366" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:34:06.367" starttime="20170810 04:34:06.366" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:34:06.367" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:34:06.368" starttime="20170810 04:34:06.367" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:06.368" starttime="20170810 04:34:06.367" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:06.368" starttime="20170810 04:34:06.365" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:06.368" starttime="20170810 04:34:06.365" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:34:06.524" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:34:06.524" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:34:06.524" starttime="20170810 04:34:06.368" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:34:06.526" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:34:06.526" starttime="20170810 04:34:06.525" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:34:06.527" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:34:06.528" starttime="20170810 04:34:06.527" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:06.528" starttime="20170810 04:34:06.526" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:06.528" starttime="20170810 04:34:06.525" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:06.528" starttime="20170810 04:34:06.524" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:34:06.528" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:34:06.528" starttime="20170810 04:34:06.528" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:34:06.528" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:34:06.529" starttime="20170810 04:34:06.117" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:34:06.529" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:34:06.529" starttime="20170810 04:34:06.529" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:34:06.530" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:34:06.530" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:34:06.530" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:34:06.530" starttime="20170810 04:34:06.529" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:34:06.530" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:34:06.530" starttime="20170810 04:34:06.116" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:34:06.530" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:34:06.531" starttime="20170810 04:34:06.116" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:34:06.531" starttime="20170810 04:34:06.531" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:34:06.538" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:34:06.539" starttime="20170810 04:34:06.538" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:34:06.539" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:34:06.539" starttime="20170810 04:34:06.539" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:34:06.540" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:34:06.540" starttime="20170810 04:34:06.539" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:34:06.541" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:34:06.541" starttime="20170810 04:34:06.540" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:34:06.753" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:34:06.753" starttime="20170810 04:34:06.541" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:34:06.753" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:34:06.753" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:34:06.753" starttime="20170810 04:34:06.541" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:34:06.754" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:34:06.754" starttime="20170810 04:34:06.753" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:34:06.754" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:34:06.755" starttime="20170810 04:34:06.754" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:06.755" starttime="20170810 04:34:06.537" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:06.755" starttime="20170810 04:34:06.537" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:06.755" starttime="20170810 04:34:06.536" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:34:06.755" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:34:06.755" starttime="20170810 04:34:06.755" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:34:06.758" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:34:06.758" starttime="20170810 04:34:06.757" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:34:06.759" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:34:06.759" starttime="20170810 04:34:06.759" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:06.759" starttime="20170810 04:34:06.758" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:06.759" starttime="20170810 04:34:06.756" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:06.759" starttime="20170810 04:34:06.756" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:34:06.829" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:34:06.830" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:34:06.830" starttime="20170810 04:34:06.759" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:34:06.831" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:34:06.831" starttime="20170810 04:34:06.831" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:34:06.832" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:34:06.832" starttime="20170810 04:34:06.832" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:06.833" starttime="20170810 04:34:06.832" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:06.833" starttime="20170810 04:34:06.830" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:06.833" starttime="20170810 04:34:06.830" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:34:06.833" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:34:06.833" starttime="20170810 04:34:06.833" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:34:06.833" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:34:06.833" starttime="20170810 04:34:06.536" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:34:06.834" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:34:06.834" starttime="20170810 04:34:06.834" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:34:06.835" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:34:06.835" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:34:06.835" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170810 04:34:06.835" starttime="20170810 04:34:06.834" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:34:06.835" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:34:06.835" starttime="20170810 04:34:06.535" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:34:06.835" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:34:06.835" starttime="20170810 04:34:06.532" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:34:06.836" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:34:06.836" starttime="20170810 04:34:06.836" status="FAIL"></status>
</kw>
<status endtime="20170810 04:34:06.836" starttime="20170810 04:34:06.531" status="FAIL"></status>
</kw>
<status endtime="20170810 04:34:06.836" starttime="20170810 04:34:05.809" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:34:16.842" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:34:16.843" starttime="20170810 04:34:16.842" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:34:16.844" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:34:16.844" starttime="20170810 04:34:16.843" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:34:16.845" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:34:16.845" starttime="20170810 04:34:16.844" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:34:16.846" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:34:16.846" starttime="20170810 04:34:16.845" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:34:17.036" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:34:17.036" starttime="20170810 04:34:16.847" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:34:17.036" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:34:17.036" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:34:17.036" starttime="20170810 04:34:16.846" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:34:17.037" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:34:17.037" starttime="20170810 04:34:17.036" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:34:17.037" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:34:17.038" starttime="20170810 04:34:17.037" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:17.038" starttime="20170810 04:34:16.841" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:17.038" starttime="20170810 04:34:16.841" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:17.038" starttime="20170810 04:34:16.840" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:34:17.038" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:34:17.038" starttime="20170810 04:34:17.038" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:34:17.041" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:34:17.041" starttime="20170810 04:34:17.040" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:34:17.042" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:34:17.042" starttime="20170810 04:34:17.041" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:17.042" starttime="20170810 04:34:17.041" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:17.042" starttime="20170810 04:34:17.039" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:17.042" starttime="20170810 04:34:17.039" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:34:17.162" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:34:17.163" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:34:17.163" starttime="20170810 04:34:17.042" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:34:17.164" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:34:17.164" starttime="20170810 04:34:17.164" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:34:17.165" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:34:17.166" starttime="20170810 04:34:17.165" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:17.166" starttime="20170810 04:34:17.165" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:17.166" starttime="20170810 04:34:17.163" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:17.166" starttime="20170810 04:34:17.163" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:34:17.166" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:34:17.166" starttime="20170810 04:34:17.166" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:34:17.166" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:34:17.167" starttime="20170810 04:34:16.839" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:34:17.167" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:34:17.167" starttime="20170810 04:34:17.167" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:34:17.168" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:34:17.168" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:34:17.168" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:34:17.168" starttime="20170810 04:34:17.167" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:34:17.168" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:34:17.168" starttime="20170810 04:34:16.839" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:34:17.168" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:34:17.169" starttime="20170810 04:34:16.838" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:34:17.169" starttime="20170810 04:34:17.169" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:17.169" starttime="20170810 04:34:16.838" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:34:17.173" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:34:17.174" starttime="20170810 04:34:17.172" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:34:17.174" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:34:17.174" starttime="20170810 04:34:17.174" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:34:17.175" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:34:17.175" starttime="20170810 04:34:17.174" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:34:17.175" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:34:17.175" starttime="20170810 04:34:17.175" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:34:17.466" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:34:17.466" starttime="20170810 04:34:17.176" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:34:17.467" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:34:17.467" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:34:17.467" starttime="20170810 04:34:17.176" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:34:17.467" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:34:17.467" starttime="20170810 04:34:17.467" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:34:17.468" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:34:17.468" starttime="20170810 04:34:17.468" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:17.468" starttime="20170810 04:34:17.172" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:17.468" starttime="20170810 04:34:17.171" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:17.468" starttime="20170810 04:34:17.171" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:34:17.469" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:34:17.469" starttime="20170810 04:34:17.469" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:34:17.471" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:34:17.471" starttime="20170810 04:34:17.470" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:34:17.472" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:34:17.472" starttime="20170810 04:34:17.472" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:17.472" starttime="20170810 04:34:17.471" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:17.472" starttime="20170810 04:34:17.470" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:17.472" starttime="20170810 04:34:17.469" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:34:17.566" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:34:17.567" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:34:17.567" starttime="20170810 04:34:17.473" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:34:17.568" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:34:17.568" starttime="20170810 04:34:17.568" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:34:17.569" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:34:17.570" starttime="20170810 04:34:17.569" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:17.570" starttime="20170810 04:34:17.569" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:17.570" starttime="20170810 04:34:17.567" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:17.570" starttime="20170810 04:34:17.567" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:34:17.570" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:34:17.570" starttime="20170810 04:34:17.570" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:34:17.570" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:34:17.571" starttime="20170810 04:34:17.170" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:34:17.571" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:34:17.571" starttime="20170810 04:34:17.571" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:34:17.572" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:34:17.572" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:34:17.572" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:34:17.572" starttime="20170810 04:34:17.571" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:34:17.572" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:34:17.572" starttime="20170810 04:34:17.170" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:34:17.573" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:34:17.573" starttime="20170810 04:34:17.169" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:34:17.573" starttime="20170810 04:34:17.573" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:34:17.577" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:34:17.578" starttime="20170810 04:34:17.577" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:34:17.578" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:34:17.578" starttime="20170810 04:34:17.578" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:34:17.579" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:34:17.579" starttime="20170810 04:34:17.578" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:34:17.579" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:34:17.579" starttime="20170810 04:34:17.579" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:34:17.775" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:34:17.775" starttime="20170810 04:34:17.580" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:34:17.775" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:34:17.775" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:34:17.775" starttime="20170810 04:34:17.580" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:34:17.776" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:34:17.776" starttime="20170810 04:34:17.776" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:34:17.777" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:34:17.777" starttime="20170810 04:34:17.776" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:17.777" starttime="20170810 04:34:17.576" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:17.777" starttime="20170810 04:34:17.576" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:17.777" starttime="20170810 04:34:17.575" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:34:17.778" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:34:17.778" starttime="20170810 04:34:17.777" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:34:17.780" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:34:17.780" starttime="20170810 04:34:17.779" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:34:17.781" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:34:17.781" starttime="20170810 04:34:17.781" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:17.782" starttime="20170810 04:34:17.781" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:17.782" starttime="20170810 04:34:17.779" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:17.782" starttime="20170810 04:34:17.778" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:34:17.851" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:34:17.851" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:34:17.852" starttime="20170810 04:34:17.782" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:34:17.853" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:34:17.853" starttime="20170810 04:34:17.853" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:34:17.854" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:34:17.854" starttime="20170810 04:34:17.854" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:17.854" starttime="20170810 04:34:17.853" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:17.855" starttime="20170810 04:34:17.852" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:17.855" starttime="20170810 04:34:17.852" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:34:17.855" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:34:17.855" starttime="20170810 04:34:17.855" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:34:17.855" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:34:17.855" starttime="20170810 04:34:17.575" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:34:17.856" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:34:17.856" starttime="20170810 04:34:17.856" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:34:17.856" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:34:17.857" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:34:17.857" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170810 04:34:17.857" starttime="20170810 04:34:17.856" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:34:17.857" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:34:17.857" starttime="20170810 04:34:17.574" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:34:17.857" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:34:17.857" starttime="20170810 04:34:17.574" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:34:17.858" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:34:17.858" starttime="20170810 04:34:17.857" status="FAIL"></status>
</kw>
<status endtime="20170810 04:34:17.858" starttime="20170810 04:34:17.573" status="FAIL"></status>
</kw>
<status endtime="20170810 04:34:17.858" starttime="20170810 04:34:16.837" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:34:27.864" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:34:27.865" starttime="20170810 04:34:27.864" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:34:27.865" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:34:27.865" starttime="20170810 04:34:27.865" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:34:27.866" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:34:27.866" starttime="20170810 04:34:27.866" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:34:27.867" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:34:27.867" starttime="20170810 04:34:27.866" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:34:28.114" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:34:28.114" starttime="20170810 04:34:27.867" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:34:28.114" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:34:28.114" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:34:28.114" starttime="20170810 04:34:27.867" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:34:28.115" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:34:28.115" starttime="20170810 04:34:28.115" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:34:28.116" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:34:28.116" starttime="20170810 04:34:28.115" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:28.116" starttime="20170810 04:34:27.863" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:28.116" starttime="20170810 04:34:27.863" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:28.116" starttime="20170810 04:34:27.862" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:34:28.117" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:34:28.117" starttime="20170810 04:34:28.116" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:34:28.119" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:34:28.119" starttime="20170810 04:34:28.118" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:34:28.120" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:34:28.120" starttime="20170810 04:34:28.119" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:28.120" starttime="20170810 04:34:28.119" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:28.120" starttime="20170810 04:34:28.117" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:28.120" starttime="20170810 04:34:28.117" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:34:28.261" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:34:28.261" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:34:28.261" starttime="20170810 04:34:28.121" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:34:28.263" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:34:28.263" starttime="20170810 04:34:28.263" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:34:28.264" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:34:28.264" starttime="20170810 04:34:28.264" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:28.264" starttime="20170810 04:34:28.263" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:28.265" starttime="20170810 04:34:28.262" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:28.265" starttime="20170810 04:34:28.262" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:34:28.265" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:34:28.265" starttime="20170810 04:34:28.265" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:34:28.265" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:34:28.265" starttime="20170810 04:34:27.861" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:34:28.266" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:34:28.266" starttime="20170810 04:34:28.266" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:34:28.267" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:34:28.267" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:34:28.267" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:34:28.267" starttime="20170810 04:34:28.266" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:34:28.267" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:34:28.267" starttime="20170810 04:34:27.861" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:34:28.267" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:34:28.267" starttime="20170810 04:34:27.860" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:34:28.268" starttime="20170810 04:34:28.268" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:28.268" starttime="20170810 04:34:27.860" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:34:28.272" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:34:28.273" starttime="20170810 04:34:28.271" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:34:28.273" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:34:28.273" starttime="20170810 04:34:28.273" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:34:28.274" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:34:28.274" starttime="20170810 04:34:28.274" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:34:28.275" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:34:28.275" starttime="20170810 04:34:28.275" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:34:28.461" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:34:28.461" starttime="20170810 04:34:28.276" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:34:28.461" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:34:28.461" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:34:28.461" starttime="20170810 04:34:28.276" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:34:28.462" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:34:28.462" starttime="20170810 04:34:28.461" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:34:28.463" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:34:28.463" starttime="20170810 04:34:28.462" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:28.463" starttime="20170810 04:34:28.271" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:28.463" starttime="20170810 04:34:28.270" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:28.463" starttime="20170810 04:34:28.270" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:34:28.463" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:34:28.464" starttime="20170810 04:34:28.463" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:34:28.466" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:34:28.466" starttime="20170810 04:34:28.465" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:34:28.466" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:34:28.467" starttime="20170810 04:34:28.466" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:28.467" starttime="20170810 04:34:28.466" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:28.467" starttime="20170810 04:34:28.464" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:28.467" starttime="20170810 04:34:28.464" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:34:28.561" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:34:28.561" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:34:28.561" starttime="20170810 04:34:28.467" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:34:28.563" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:34:28.563" starttime="20170810 04:34:28.562" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:34:28.564" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:34:28.564" starttime="20170810 04:34:28.563" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:28.564" starttime="20170810 04:34:28.563" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:28.564" starttime="20170810 04:34:28.562" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:28.564" starttime="20170810 04:34:28.561" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:34:28.564" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:34:28.564" starttime="20170810 04:34:28.564" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:34:28.565" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:34:28.565" starttime="20170810 04:34:28.269" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:34:28.565" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:34:28.565" starttime="20170810 04:34:28.565" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:34:28.566" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:34:28.566" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:34:28.566" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:34:28.566" starttime="20170810 04:34:28.566" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:34:28.566" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:34:28.566" starttime="20170810 04:34:28.269" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:34:28.567" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:34:28.567" starttime="20170810 04:34:28.268" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:34:28.567" starttime="20170810 04:34:28.567" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:34:28.571" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:34:28.572" starttime="20170810 04:34:28.571" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:34:28.572" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:34:28.572" starttime="20170810 04:34:28.572" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:34:28.573" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:34:28.573" starttime="20170810 04:34:28.573" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:34:28.574" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:34:28.574" starttime="20170810 04:34:28.573" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:34:28.766" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:34:28.766" starttime="20170810 04:34:28.574" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:34:28.766" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:34:28.766" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:34:28.766" starttime="20170810 04:34:28.574" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:34:28.767" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:34:28.767" starttime="20170810 04:34:28.767" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:34:28.768" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:34:28.768" starttime="20170810 04:34:28.767" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:28.768" starttime="20170810 04:34:28.571" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:28.768" starttime="20170810 04:34:28.570" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:28.768" starttime="20170810 04:34:28.570" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:34:28.769" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:34:28.769" starttime="20170810 04:34:28.768" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:34:28.771" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:34:28.771" starttime="20170810 04:34:28.770" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:34:28.772" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:34:28.772" starttime="20170810 04:34:28.772" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:28.772" starttime="20170810 04:34:28.771" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:28.772" starttime="20170810 04:34:28.770" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:28.773" starttime="20170810 04:34:28.769" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:34:28.871" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:34:28.872" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:34:28.872" starttime="20170810 04:34:28.773" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:34:28.874" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:34:28.874" starttime="20170810 04:34:28.873" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:34:28.875" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:34:28.875" starttime="20170810 04:34:28.874" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:28.875" starttime="20170810 04:34:28.874" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:28.875" starttime="20170810 04:34:28.873" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:28.875" starttime="20170810 04:34:28.872" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:34:28.875" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:34:28.876" starttime="20170810 04:34:28.875" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:34:28.876" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:34:28.876" starttime="20170810 04:34:28.569" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:34:28.876" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:34:28.877" starttime="20170810 04:34:28.876" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:34:28.877" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:34:28.877" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:34:28.877" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170810 04:34:28.877" starttime="20170810 04:34:28.877" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:34:28.877" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:34:28.878" starttime="20170810 04:34:28.568" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:34:28.878" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:34:28.878" starttime="20170810 04:34:28.568" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:34:28.879" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:34:28.879" starttime="20170810 04:34:28.878" status="FAIL"></status>
</kw>
<status endtime="20170810 04:34:28.879" starttime="20170810 04:34:28.567" status="FAIL"></status>
</kw>
<status endtime="20170810 04:34:28.879" starttime="20170810 04:34:27.859" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:34:38.885" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:34:38.885" starttime="20170810 04:34:38.885" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:34:38.886" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:34:38.886" starttime="20170810 04:34:38.886" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:34:38.886" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:34:38.887" starttime="20170810 04:34:38.886" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:34:38.887" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:34:38.887" starttime="20170810 04:34:38.887" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:34:39.165" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:34:39.166" starttime="20170810 04:34:38.888" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:34:39.166" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:34:39.166" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:34:39.166" starttime="20170810 04:34:38.887" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:34:39.167" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:34:39.167" starttime="20170810 04:34:39.166" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:34:39.167" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:34:39.167" starttime="20170810 04:34:39.167" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:39.168" starttime="20170810 04:34:38.884" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:39.168" starttime="20170810 04:34:38.884" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:39.168" starttime="20170810 04:34:38.883" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:34:39.168" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:34:39.168" starttime="20170810 04:34:39.168" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:34:39.170" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:34:39.170" starttime="20170810 04:34:39.170" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:34:39.171" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:34:39.171" starttime="20170810 04:34:39.171" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:39.172" starttime="20170810 04:34:39.171" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:39.172" starttime="20170810 04:34:39.169" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:39.172" starttime="20170810 04:34:39.169" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:34:39.254" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:34:39.254" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:34:39.254" starttime="20170810 04:34:39.172" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:34:39.256" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:34:39.256" starttime="20170810 04:34:39.255" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:34:39.257" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:34:39.257" starttime="20170810 04:34:39.257" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:39.257" starttime="20170810 04:34:39.256" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:39.257" starttime="20170810 04:34:39.255" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:39.258" starttime="20170810 04:34:39.254" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:34:39.258" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:34:39.258" starttime="20170810 04:34:39.258" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:34:39.258" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:34:39.258" starttime="20170810 04:34:38.882" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:34:39.259" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:34:39.259" starttime="20170810 04:34:39.259" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:34:39.260" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:34:39.260" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:34:39.260" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:34:39.260" starttime="20170810 04:34:39.259" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:34:39.260" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:34:39.260" starttime="20170810 04:34:38.881" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:34:39.261" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:34:39.261" starttime="20170810 04:34:38.881" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:34:39.261" starttime="20170810 04:34:39.261" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:39.261" starttime="20170810 04:34:38.881" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:34:39.265" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:34:39.266" starttime="20170810 04:34:39.265" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:34:39.266" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:34:39.266" starttime="20170810 04:34:39.266" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:34:39.267" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:34:39.267" starttime="20170810 04:34:39.266" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:34:39.267" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:34:39.267" starttime="20170810 04:34:39.267" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:34:39.481" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:34:39.481" starttime="20170810 04:34:39.268" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:34:39.481" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:34:39.481" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:34:39.482" starttime="20170810 04:34:39.268" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:34:39.482" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:34:39.482" starttime="20170810 04:34:39.482" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:34:39.483" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:34:39.483" starttime="20170810 04:34:39.483" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:39.483" starttime="20170810 04:34:39.264" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:39.483" starttime="20170810 04:34:39.264" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:39.483" starttime="20170810 04:34:39.263" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:34:39.484" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:34:39.484" starttime="20170810 04:34:39.484" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:34:39.486" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:34:39.486" starttime="20170810 04:34:39.485" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:34:39.487" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:34:39.487" starttime="20170810 04:34:39.487" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:39.487" starttime="20170810 04:34:39.486" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:39.487" starttime="20170810 04:34:39.485" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:39.487" starttime="20170810 04:34:39.484" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:34:39.581" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:34:39.581" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:34:39.581" starttime="20170810 04:34:39.488" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:34:39.583" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:34:39.583" starttime="20170810 04:34:39.583" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:34:39.584" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:34:39.584" starttime="20170810 04:34:39.584" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:39.584" starttime="20170810 04:34:39.583" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:39.584" starttime="20170810 04:34:39.582" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:39.584" starttime="20170810 04:34:39.582" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:34:39.585" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:34:39.585" starttime="20170810 04:34:39.585" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:34:39.585" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:34:39.585" starttime="20170810 04:34:39.262" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:34:39.586" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:34:39.586" starttime="20170810 04:34:39.585" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:34:39.586" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:34:39.586" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:34:39.586" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:34:39.586" starttime="20170810 04:34:39.586" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:34:39.587" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:34:39.587" starttime="20170810 04:34:39.262" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:34:39.587" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:34:39.587" starttime="20170810 04:34:39.261" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:34:39.588" starttime="20170810 04:34:39.588" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:34:39.596" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:34:39.597" starttime="20170810 04:34:39.596" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:34:39.598" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:34:39.598" starttime="20170810 04:34:39.597" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:34:39.599" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:34:39.599" starttime="20170810 04:34:39.598" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:34:39.600" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:34:39.600" starttime="20170810 04:34:39.599" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:34:39.811" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:34:39.811" starttime="20170810 04:34:39.601" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:34:39.811" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:34:39.811" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:34:39.811" starttime="20170810 04:34:39.600" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:34:39.812" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:34:39.812" starttime="20170810 04:34:39.811" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:34:39.812" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:34:39.812" starttime="20170810 04:34:39.812" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:39.813" starttime="20170810 04:34:39.595" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:39.813" starttime="20170810 04:34:39.594" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:39.813" starttime="20170810 04:34:39.594" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:34:39.813" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:34:39.813" starttime="20170810 04:34:39.813" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:34:39.816" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:34:39.816" starttime="20170810 04:34:39.815" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:34:39.817" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:34:39.817" starttime="20170810 04:34:39.816" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:39.817" starttime="20170810 04:34:39.816" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:39.817" starttime="20170810 04:34:39.814" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:39.817" starttime="20170810 04:34:39.814" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:34:39.888" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:34:39.888" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:34:39.888" starttime="20170810 04:34:39.817" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:34:39.889" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:34:39.890" starttime="20170810 04:34:39.889" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:34:39.890" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:34:39.890" starttime="20170810 04:34:39.890" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:39.891" starttime="20170810 04:34:39.890" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:39.891" starttime="20170810 04:34:39.889" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:39.891" starttime="20170810 04:34:39.888" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:34:39.891" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:34:39.891" starttime="20170810 04:34:39.891" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:34:39.892" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:34:39.892" starttime="20170810 04:34:39.592" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:34:39.892" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:34:39.892" starttime="20170810 04:34:39.892" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:34:39.893" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:34:39.893" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:34:39.893" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170810 04:34:39.893" starttime="20170810 04:34:39.893" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:34:39.893" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:34:39.893" starttime="20170810 04:34:39.592" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:34:39.894" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:34:39.894" starttime="20170810 04:34:39.588" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:34:39.894" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:34:39.894" starttime="20170810 04:34:39.894" status="FAIL"></status>
</kw>
<status endtime="20170810 04:34:39.895" starttime="20170810 04:34:39.588" status="FAIL"></status>
</kw>
<status endtime="20170810 04:34:39.895" starttime="20170810 04:34:38.880" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:34:49.900" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:34:49.901" starttime="20170810 04:34:49.900" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:34:49.901" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:34:49.901" starttime="20170810 04:34:49.901" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:34:49.902" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:34:49.902" starttime="20170810 04:34:49.902" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:34:49.903" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:34:49.903" starttime="20170810 04:34:49.902" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:34:50.101" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:34:50.102" starttime="20170810 04:34:49.903" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:34:50.102" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:34:50.102" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:34:50.102" starttime="20170810 04:34:49.903" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:34:50.102" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:34:50.103" starttime="20170810 04:34:50.102" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:34:50.103" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:34:50.103" starttime="20170810 04:34:50.103" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:50.103" starttime="20170810 04:34:49.899" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:50.103" starttime="20170810 04:34:49.899" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:50.104" starttime="20170810 04:34:49.898" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:34:50.104" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:34:50.104" starttime="20170810 04:34:50.104" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:34:50.106" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:34:50.106" starttime="20170810 04:34:50.106" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:34:50.107" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:34:50.107" starttime="20170810 04:34:50.107" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:50.107" starttime="20170810 04:34:50.106" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:50.108" starttime="20170810 04:34:50.105" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:50.108" starttime="20170810 04:34:50.104" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:34:50.174" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:34:50.174" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:34:50.174" starttime="20170810 04:34:50.108" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:34:50.176" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:34:50.176" starttime="20170810 04:34:50.175" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:34:50.177" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:34:50.177" starttime="20170810 04:34:50.177" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:50.177" starttime="20170810 04:34:50.176" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:50.177" starttime="20170810 04:34:50.175" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:50.177" starttime="20170810 04:34:50.175" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:34:50.178" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:34:50.178" starttime="20170810 04:34:50.177" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:34:50.178" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:34:50.178" starttime="20170810 04:34:49.898" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:34:50.178" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:34:50.179" starttime="20170810 04:34:50.178" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:34:50.179" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:34:50.179" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:34:50.179" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:34:50.179" starttime="20170810 04:34:50.179" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:34:50.180" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:34:50.180" starttime="20170810 04:34:49.897" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:34:50.180" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:34:50.180" starttime="20170810 04:34:49.896" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:34:50.180" starttime="20170810 04:34:50.180" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:50.181" starttime="20170810 04:34:49.896" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:34:50.184" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:34:50.185" starttime="20170810 04:34:50.184" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:34:50.185" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:34:50.185" starttime="20170810 04:34:50.185" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:34:50.186" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:34:50.186" starttime="20170810 04:34:50.186" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:34:50.187" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:34:50.187" starttime="20170810 04:34:50.186" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:34:50.367" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:34:50.367" starttime="20170810 04:34:50.187" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:34:50.367" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:34:50.367" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:34:50.367" starttime="20170810 04:34:50.187" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:34:50.368" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:34:50.368" starttime="20170810 04:34:50.367" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:34:50.368" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:34:50.368" starttime="20170810 04:34:50.368" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:50.369" starttime="20170810 04:34:50.183" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:50.369" starttime="20170810 04:34:50.183" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:50.369" starttime="20170810 04:34:50.182" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:34:50.369" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:34:50.369" starttime="20170810 04:34:50.369" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:34:50.371" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:34:50.371" starttime="20170810 04:34:50.371" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:34:50.372" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:34:50.372" starttime="20170810 04:34:50.372" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:50.373" starttime="20170810 04:34:50.372" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:50.373" starttime="20170810 04:34:50.370" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:50.373" starttime="20170810 04:34:50.370" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:34:50.467" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:34:50.467" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:34:50.467" starttime="20170810 04:34:50.373" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:34:50.468" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:34:50.468" starttime="20170810 04:34:50.468" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:34:50.469" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:34:50.469" starttime="20170810 04:34:50.469" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:50.470" starttime="20170810 04:34:50.469" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:50.470" starttime="20170810 04:34:50.467" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:50.470" starttime="20170810 04:34:50.467" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:34:50.470" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:34:50.470" starttime="20170810 04:34:50.470" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:34:50.470" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:34:50.471" starttime="20170810 04:34:50.182" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:34:50.471" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:34:50.471" starttime="20170810 04:34:50.471" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:34:50.472" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:34:50.472" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:34:50.472" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:34:50.472" starttime="20170810 04:34:50.471" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:34:50.472" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:34:50.472" starttime="20170810 04:34:50.181" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:34:50.473" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:34:50.473" starttime="20170810 04:34:50.181" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:34:50.473" starttime="20170810 04:34:50.473" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:34:50.477" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:34:50.478" starttime="20170810 04:34:50.477" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:34:50.478" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:34:50.478" starttime="20170810 04:34:50.478" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:34:50.479" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:34:50.479" starttime="20170810 04:34:50.478" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:34:50.479" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:34:50.479" starttime="20170810 04:34:50.479" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:34:50.673" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:34:50.673" starttime="20170810 04:34:50.480" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:34:50.674" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:34:50.674" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:34:50.674" starttime="20170810 04:34:50.480" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:34:50.674" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:34:50.674" starttime="20170810 04:34:50.674" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:34:50.675" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:34:50.675" starttime="20170810 04:34:50.675" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:50.675" starttime="20170810 04:34:50.476" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:50.675" starttime="20170810 04:34:50.476" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:50.675" starttime="20170810 04:34:50.475" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:34:50.676" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:34:50.676" starttime="20170810 04:34:50.676" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:34:50.679" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:34:50.679" starttime="20170810 04:34:50.678" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:34:50.679" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:34:50.680" starttime="20170810 04:34:50.679" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:50.680" starttime="20170810 04:34:50.679" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:50.680" starttime="20170810 04:34:50.677" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:50.680" starttime="20170810 04:34:50.676" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:34:50.751" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:34:50.751" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:34:50.751" starttime="20170810 04:34:50.680" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:34:50.753" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:34:50.753" starttime="20170810 04:34:50.752" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:34:50.754" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:34:50.754" starttime="20170810 04:34:50.753" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:50.754" starttime="20170810 04:34:50.753" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:50.754" starttime="20170810 04:34:50.752" status="PASS"></status>
</kw>
<status endtime="20170810 04:34:50.754" starttime="20170810 04:34:50.751" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:34:50.754" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:34:50.754" starttime="20170810 04:34:50.754" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:34:50.755" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:34:50.755" starttime="20170810 04:34:50.475" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:34:50.755" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:34:50.755" starttime="20170810 04:34:50.755" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:34:50.756" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:34:50.756" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:34:50.756" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170810 04:34:50.756" starttime="20170810 04:34:50.756" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:34:50.756" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:34:50.756" starttime="20170810 04:34:50.474" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:34:50.757" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:34:50.757" starttime="20170810 04:34:50.474" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:34:50.757" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:34:50.757" starttime="20170810 04:34:50.757" status="FAIL"></status>
</kw>
<status endtime="20170810 04:34:50.758" starttime="20170810 04:34:50.473" status="FAIL"></status>
</kw>
<status endtime="20170810 04:34:50.758" starttime="20170810 04:34:49.895" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:35:00.762" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:35:00.763" starttime="20170810 04:35:00.762" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:35:00.764" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:35:00.764" starttime="20170810 04:35:00.763" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:35:00.764" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:35:00.764" starttime="20170810 04:35:00.764" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:35:00.765" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:35:00.765" starttime="20170810 04:35:00.764" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:35:00.945" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:35:00.945" starttime="20170810 04:35:00.765" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:35:00.946" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:35:00.946" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:35:00.946" starttime="20170810 04:35:00.765" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:35:00.946" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:35:00.946" starttime="20170810 04:35:00.946" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:35:00.947" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:35:00.947" starttime="20170810 04:35:00.947" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:00.947" starttime="20170810 04:35:00.762" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:00.947" starttime="20170810 04:35:00.761" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:00.947" starttime="20170810 04:35:00.761" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:35:00.948" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:35:00.948" starttime="20170810 04:35:00.948" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:35:00.950" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:35:00.950" starttime="20170810 04:35:00.949" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:35:00.951" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:35:00.951" starttime="20170810 04:35:00.951" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:00.951" starttime="20170810 04:35:00.950" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:00.951" starttime="20170810 04:35:00.949" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:00.951" starttime="20170810 04:35:00.948" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:35:01.026" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:35:01.027" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:35:01.027" starttime="20170810 04:35:00.952" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:35:01.028" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:35:01.029" starttime="20170810 04:35:01.028" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:35:01.030" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:35:01.030" starttime="20170810 04:35:01.029" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:01.030" starttime="20170810 04:35:01.029" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:01.030" starttime="20170810 04:35:01.027" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:01.030" starttime="20170810 04:35:01.027" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:35:01.031" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:35:01.031" starttime="20170810 04:35:01.030" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:35:01.031" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:35:01.031" starttime="20170810 04:35:00.760" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:35:01.032" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:35:01.032" starttime="20170810 04:35:01.031" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:35:01.032" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:35:01.032" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:35:01.032" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:35:01.033" starttime="20170810 04:35:01.032" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:35:01.033" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:35:01.033" starttime="20170810 04:35:00.759" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:35:01.033" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:35:01.033" starttime="20170810 04:35:00.759" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:35:01.034" starttime="20170810 04:35:01.033" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:01.034" starttime="20170810 04:35:00.759" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:35:01.038" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:35:01.038" starttime="20170810 04:35:01.037" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:35:01.039" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:35:01.039" starttime="20170810 04:35:01.038" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:35:01.039" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:35:01.039" starttime="20170810 04:35:01.039" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:35:01.040" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:35:01.040" starttime="20170810 04:35:01.039" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:35:01.245" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:35:01.246" starttime="20170810 04:35:01.041" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:35:01.246" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:35:01.246" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:35:01.246" starttime="20170810 04:35:01.040" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:35:01.247" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:35:01.247" starttime="20170810 04:35:01.246" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:35:01.247" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:35:01.247" starttime="20170810 04:35:01.247" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:01.248" starttime="20170810 04:35:01.036" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:01.248" starttime="20170810 04:35:01.036" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:01.248" starttime="20170810 04:35:01.035" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:35:01.248" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:35:01.248" starttime="20170810 04:35:01.248" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:35:01.250" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:35:01.250" starttime="20170810 04:35:01.250" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:35:01.251" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:35:01.252" starttime="20170810 04:35:01.251" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:01.252" starttime="20170810 04:35:01.251" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:01.252" starttime="20170810 04:35:01.249" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:01.252" starttime="20170810 04:35:01.249" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:35:01.369" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:35:01.369" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:35:01.369" starttime="20170810 04:35:01.252" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:35:01.371" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:35:01.371" starttime="20170810 04:35:01.371" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:35:01.372" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:35:01.372" starttime="20170810 04:35:01.372" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:01.372" starttime="20170810 04:35:01.371" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:01.372" starttime="20170810 04:35:01.370" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:01.373" starttime="20170810 04:35:01.370" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:35:01.373" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:35:01.373" starttime="20170810 04:35:01.373" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:35:01.373" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:35:01.373" starttime="20170810 04:35:01.035" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:35:01.374" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:35:01.374" starttime="20170810 04:35:01.373" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:35:01.375" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:35:01.375" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:35:01.375" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:35:01.375" starttime="20170810 04:35:01.374" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:35:01.375" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:35:01.375" starttime="20170810 04:35:01.034" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:35:01.375" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:35:01.375" starttime="20170810 04:35:01.034" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:35:01.376" starttime="20170810 04:35:01.376" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:35:01.381" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:35:01.381" starttime="20170810 04:35:01.381" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:35:01.382" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:35:01.382" starttime="20170810 04:35:01.382" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:35:01.383" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:35:01.383" starttime="20170810 04:35:01.382" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:35:01.383" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:35:01.383" starttime="20170810 04:35:01.383" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:35:01.576" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:35:01.577" starttime="20170810 04:35:01.384" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:35:01.577" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:35:01.577" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:35:01.577" starttime="20170810 04:35:01.384" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:35:01.577" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:35:01.578" starttime="20170810 04:35:01.577" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:35:01.578" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:35:01.578" starttime="20170810 04:35:01.578" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:01.578" starttime="20170810 04:35:01.380" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:01.578" starttime="20170810 04:35:01.380" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:01.579" starttime="20170810 04:35:01.379" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:35:01.579" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:35:01.579" starttime="20170810 04:35:01.579" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:35:01.582" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:35:01.582" starttime="20170810 04:35:01.581" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:35:01.583" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:35:01.584" starttime="20170810 04:35:01.583" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:01.584" starttime="20170810 04:35:01.582" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:01.584" starttime="20170810 04:35:01.580" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:01.584" starttime="20170810 04:35:01.579" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:35:01.658" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:35:01.658" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:35:01.658" starttime="20170810 04:35:01.584" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:35:01.660" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:35:01.660" starttime="20170810 04:35:01.659" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:35:01.661" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:35:01.661" starttime="20170810 04:35:01.660" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:01.661" starttime="20170810 04:35:01.660" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:01.661" starttime="20170810 04:35:01.659" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:01.661" starttime="20170810 04:35:01.658" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:35:01.661" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:35:01.662" starttime="20170810 04:35:01.661" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:35:01.662" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:35:01.662" starttime="20170810 04:35:01.378" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:35:01.662" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:35:01.662" starttime="20170810 04:35:01.662" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:35:01.663" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:35:01.663" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:35:01.663" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170810 04:35:01.663" starttime="20170810 04:35:01.663" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:35:01.663" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:35:01.663" starttime="20170810 04:35:01.377" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:35:01.664" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:35:01.664" starttime="20170810 04:35:01.376" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:35:01.664" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:35:01.664" starttime="20170810 04:35:01.664" status="FAIL"></status>
</kw>
<status endtime="20170810 04:35:01.665" starttime="20170810 04:35:01.376" status="FAIL"></status>
</kw>
<status endtime="20170810 04:35:01.665" starttime="20170810 04:35:00.758" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:35:11.670" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:35:11.670" starttime="20170810 04:35:11.669" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:35:11.671" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:35:11.671" starttime="20170810 04:35:11.671" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:35:11.672" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:35:11.672" starttime="20170810 04:35:11.671" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:35:11.672" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:35:11.673" starttime="20170810 04:35:11.672" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:35:11.858" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:35:11.858" starttime="20170810 04:35:11.673" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:35:11.858" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:35:11.858" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:35:11.858" starttime="20170810 04:35:11.673" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:35:11.859" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:35:11.859" starttime="20170810 04:35:11.859" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:35:11.860" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:35:11.860" starttime="20170810 04:35:11.859" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:11.860" starttime="20170810 04:35:11.669" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:11.860" starttime="20170810 04:35:11.668" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:11.860" starttime="20170810 04:35:11.668" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:35:11.861" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:35:11.861" starttime="20170810 04:35:11.860" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:35:11.863" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:35:11.863" starttime="20170810 04:35:11.862" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:35:11.864" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:35:11.864" starttime="20170810 04:35:11.864" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:11.864" starttime="20170810 04:35:11.863" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:11.864" starttime="20170810 04:35:11.862" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:11.864" starttime="20170810 04:35:11.861" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:35:11.931" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:35:11.931" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:35:11.931" starttime="20170810 04:35:11.864" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:35:11.933" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:35:11.933" starttime="20170810 04:35:11.932" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:35:11.934" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:35:11.934" starttime="20170810 04:35:11.933" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:11.934" starttime="20170810 04:35:11.933" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:11.934" starttime="20170810 04:35:11.932" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:11.934" starttime="20170810 04:35:11.931" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:35:11.934" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:35:11.935" starttime="20170810 04:35:11.934" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:35:11.935" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:35:11.935" starttime="20170810 04:35:11.667" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:35:11.935" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:35:11.935" starttime="20170810 04:35:11.935" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:35:11.936" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:35:11.936" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:35:11.936" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:35:11.936" starttime="20170810 04:35:11.936" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:35:11.936" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:35:11.936" starttime="20170810 04:35:11.667" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:35:11.937" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:35:11.937" starttime="20170810 04:35:11.666" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:35:11.937" starttime="20170810 04:35:11.937" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:11.937" starttime="20170810 04:35:11.666" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:35:11.941" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:35:11.942" starttime="20170810 04:35:11.941" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:35:11.942" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:35:11.942" starttime="20170810 04:35:11.942" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:35:11.943" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:35:11.943" starttime="20170810 04:35:11.943" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:35:11.944" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:35:11.944" starttime="20170810 04:35:11.944" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:35:12.125" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:35:12.125" starttime="20170810 04:35:11.945" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:35:12.125" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:35:12.125" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:35:12.125" starttime="20170810 04:35:11.945" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:35:12.126" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:35:12.126" starttime="20170810 04:35:12.125" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:35:12.126" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:35:12.126" starttime="20170810 04:35:12.126" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:12.126" starttime="20170810 04:35:11.940" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:12.127" starttime="20170810 04:35:11.940" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:12.127" starttime="20170810 04:35:11.939" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:35:12.127" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:35:12.127" starttime="20170810 04:35:12.127" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:35:12.129" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:35:12.129" starttime="20170810 04:35:12.129" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:35:12.130" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:35:12.130" starttime="20170810 04:35:12.130" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:12.130" starttime="20170810 04:35:12.129" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:12.131" starttime="20170810 04:35:12.128" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:12.131" starttime="20170810 04:35:12.128" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:35:12.223" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:35:12.223" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:35:12.223" starttime="20170810 04:35:12.131" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:35:12.225" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:35:12.225" starttime="20170810 04:35:12.225" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:35:12.226" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:35:12.226" starttime="20170810 04:35:12.226" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:12.226" starttime="20170810 04:35:12.225" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:12.226" starttime="20170810 04:35:12.224" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:12.226" starttime="20170810 04:35:12.224" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:35:12.227" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:35:12.227" starttime="20170810 04:35:12.227" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:35:12.227" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:35:12.227" starttime="20170810 04:35:11.939" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:35:12.228" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:35:12.228" starttime="20170810 04:35:12.227" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:35:12.228" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:35:12.228" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:35:12.228" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:35:12.229" starttime="20170810 04:35:12.228" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:35:12.229" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:35:12.229" starttime="20170810 04:35:11.938" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:35:12.229" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:35:12.229" starttime="20170810 04:35:11.938" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:35:12.230" starttime="20170810 04:35:12.229" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:35:12.237" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:35:12.237" starttime="20170810 04:35:12.236" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:35:12.238" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:35:12.238" starttime="20170810 04:35:12.238" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:35:12.239" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:35:12.239" starttime="20170810 04:35:12.238" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:35:12.239" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:35:12.239" starttime="20170810 04:35:12.239" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:35:12.463" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:35:12.463" starttime="20170810 04:35:12.240" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:35:12.463" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:35:12.463" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:35:12.463" starttime="20170810 04:35:12.240" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:35:12.464" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:35:12.464" starttime="20170810 04:35:12.463" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:35:12.464" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:35:12.465" starttime="20170810 04:35:12.464" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:12.465" starttime="20170810 04:35:12.236" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:12.465" starttime="20170810 04:35:12.235" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:12.465" starttime="20170810 04:35:12.235" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:35:12.465" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:35:12.465" starttime="20170810 04:35:12.465" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:35:12.468" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:35:12.468" starttime="20170810 04:35:12.467" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:35:12.469" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:35:12.469" starttime="20170810 04:35:12.468" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:12.469" starttime="20170810 04:35:12.468" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:12.469" starttime="20170810 04:35:12.466" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:12.469" starttime="20170810 04:35:12.466" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:35:12.540" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:35:12.540" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:35:12.540" starttime="20170810 04:35:12.469" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:35:12.542" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:35:12.542" starttime="20170810 04:35:12.541" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:35:12.542" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:35:12.543" starttime="20170810 04:35:12.542" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:12.543" starttime="20170810 04:35:12.542" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:12.543" starttime="20170810 04:35:12.541" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:12.543" starttime="20170810 04:35:12.540" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:35:12.543" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:35:12.543" starttime="20170810 04:35:12.543" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:35:12.544" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:35:12.544" starttime="20170810 04:35:12.234" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:35:12.544" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:35:12.544" starttime="20170810 04:35:12.544" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:35:12.545" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:35:12.545" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:35:12.545" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170810 04:35:12.545" starttime="20170810 04:35:12.544" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:35:12.545" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:35:12.545" starttime="20170810 04:35:12.234" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:35:12.545" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:35:12.546" starttime="20170810 04:35:12.230" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:35:12.546" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:35:12.546" starttime="20170810 04:35:12.546" status="FAIL"></status>
</kw>
<status endtime="20170810 04:35:12.546" starttime="20170810 04:35:12.230" status="FAIL"></status>
</kw>
<status endtime="20170810 04:35:12.547" starttime="20170810 04:35:11.665" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:35:22.552" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:35:22.552" starttime="20170810 04:35:22.551" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:35:22.553" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:35:22.553" starttime="20170810 04:35:22.552" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:35:22.553" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:35:22.553" starttime="20170810 04:35:22.553" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:35:22.554" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:35:22.554" starttime="20170810 04:35:22.553" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:35:22.836" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:35:22.836" starttime="20170810 04:35:22.555" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:35:22.837" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:35:22.837" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:35:22.837" starttime="20170810 04:35:22.554" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:35:22.837" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:35:22.837" starttime="20170810 04:35:22.837" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:35:22.838" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:35:22.838" starttime="20170810 04:35:22.838" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:22.838" starttime="20170810 04:35:22.551" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:22.838" starttime="20170810 04:35:22.550" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:22.838" starttime="20170810 04:35:22.550" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:35:22.839" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:35:22.839" starttime="20170810 04:35:22.839" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:35:22.841" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:35:22.841" starttime="20170810 04:35:22.840" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:35:22.842" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:35:22.842" starttime="20170810 04:35:22.842" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:22.842" starttime="20170810 04:35:22.841" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:22.843" starttime="20170810 04:35:22.840" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:22.843" starttime="20170810 04:35:22.839" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:35:22.910" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:35:22.910" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:35:22.910" starttime="20170810 04:35:22.843" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:35:22.912" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:35:22.912" starttime="20170810 04:35:22.911" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:35:22.913" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:35:22.913" starttime="20170810 04:35:22.913" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:22.914" starttime="20170810 04:35:22.912" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:22.914" starttime="20170810 04:35:22.911" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:22.914" starttime="20170810 04:35:22.910" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:35:22.914" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:35:22.914" starttime="20170810 04:35:22.914" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:35:22.914" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:35:22.914" starttime="20170810 04:35:22.549" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:35:22.915" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:35:22.915" starttime="20170810 04:35:22.915" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:35:22.916" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:35:22.916" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:35:22.916" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:35:22.916" starttime="20170810 04:35:22.915" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:35:22.916" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:35:22.916" starttime="20170810 04:35:22.548" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:35:22.916" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:35:22.916" starttime="20170810 04:35:22.548" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:35:22.917" starttime="20170810 04:35:22.917" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:22.917" starttime="20170810 04:35:22.548" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:35:22.921" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:35:22.921" starttime="20170810 04:35:22.920" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:35:22.922" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:35:22.922" starttime="20170810 04:35:22.922" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:35:22.923" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:35:22.923" starttime="20170810 04:35:22.922" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:35:22.923" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:35:22.923" starttime="20170810 04:35:22.923" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:35:23.157" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:35:23.157" starttime="20170810 04:35:22.924" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:35:23.157" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:35:23.157" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:35:23.157" starttime="20170810 04:35:22.923" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:35:23.158" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:35:23.158" starttime="20170810 04:35:23.158" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:35:23.159" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:35:23.159" starttime="20170810 04:35:23.158" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:23.159" starttime="20170810 04:35:22.920" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:23.159" starttime="20170810 04:35:22.919" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:23.159" starttime="20170810 04:35:22.919" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:35:23.160" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:35:23.160" starttime="20170810 04:35:23.159" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:35:23.162" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:35:23.162" starttime="20170810 04:35:23.161" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:35:23.164" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:35:23.164" starttime="20170810 04:35:23.163" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:23.164" starttime="20170810 04:35:23.163" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:23.164" starttime="20170810 04:35:23.160" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:23.164" starttime="20170810 04:35:23.160" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:35:23.258" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:35:23.258" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:35:23.258" starttime="20170810 04:35:23.165" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:35:23.260" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:35:23.260" starttime="20170810 04:35:23.260" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:35:23.261" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:35:23.261" starttime="20170810 04:35:23.261" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:23.261" starttime="20170810 04:35:23.260" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:23.262" starttime="20170810 04:35:23.259" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:23.262" starttime="20170810 04:35:23.259" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:35:23.262" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:35:23.262" starttime="20170810 04:35:23.262" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:35:23.262" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:35:23.262" starttime="20170810 04:35:22.918" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:35:23.263" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:35:23.263" starttime="20170810 04:35:23.263" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:35:23.264" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:35:23.264" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:35:23.264" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:35:23.264" starttime="20170810 04:35:23.263" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:35:23.265" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:35:23.265" starttime="20170810 04:35:22.918" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:35:23.265" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:35:23.265" starttime="20170810 04:35:22.917" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:35:23.266" starttime="20170810 04:35:23.266" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:35:23.272" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:35:23.273" starttime="20170810 04:35:23.272" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:35:23.274" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:35:23.274" starttime="20170810 04:35:23.273" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:35:23.274" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:35:23.275" starttime="20170810 04:35:23.274" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:35:23.275" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:35:23.275" starttime="20170810 04:35:23.275" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:35:23.456" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:35:23.456" starttime="20170810 04:35:23.277" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:35:23.456" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:35:23.456" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:35:23.456" starttime="20170810 04:35:23.276" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:35:23.457" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:35:23.457" starttime="20170810 04:35:23.457" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:35:23.458" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:35:23.458" starttime="20170810 04:35:23.457" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:23.458" starttime="20170810 04:35:23.271" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:23.458" starttime="20170810 04:35:23.270" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:23.458" starttime="20170810 04:35:23.269" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:35:23.459" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:35:23.459" starttime="20170810 04:35:23.458" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:35:23.461" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:35:23.461" starttime="20170810 04:35:23.460" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:35:23.462" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:35:23.462" starttime="20170810 04:35:23.462" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:23.462" starttime="20170810 04:35:23.461" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:23.462" starttime="20170810 04:35:23.459" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:23.462" starttime="20170810 04:35:23.459" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:35:23.532" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:35:23.532" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:35:23.532" starttime="20170810 04:35:23.463" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:35:23.534" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:35:23.534" starttime="20170810 04:35:23.533" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:35:23.535" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:35:23.535" starttime="20170810 04:35:23.534" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:23.535" starttime="20170810 04:35:23.534" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:23.535" starttime="20170810 04:35:23.533" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:23.535" starttime="20170810 04:35:23.532" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:35:23.535" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:35:23.535" starttime="20170810 04:35:23.535" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:35:23.536" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:35:23.536" starttime="20170810 04:35:23.268" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:35:23.536" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:35:23.536" starttime="20170810 04:35:23.536" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:35:23.537" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:35:23.537" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:35:23.537" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170810 04:35:23.537" starttime="20170810 04:35:23.537" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:35:23.537" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:35:23.537" starttime="20170810 04:35:23.268" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:35:23.538" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:35:23.538" starttime="20170810 04:35:23.267" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:35:23.538" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:35:23.538" starttime="20170810 04:35:23.538" status="FAIL"></status>
</kw>
<status endtime="20170810 04:35:23.538" starttime="20170810 04:35:23.266" status="FAIL"></status>
</kw>
<status endtime="20170810 04:35:23.539" starttime="20170810 04:35:22.547" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:35:33.544" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:35:33.544" starttime="20170810 04:35:33.544" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:35:33.545" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:35:33.545" starttime="20170810 04:35:33.545" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:35:33.546" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:35:33.546" starttime="20170810 04:35:33.545" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:35:33.546" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:35:33.546" starttime="20170810 04:35:33.546" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:35:33.747" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:35:33.747" starttime="20170810 04:35:33.547" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:35:33.748" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:35:33.748" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:35:33.748" starttime="20170810 04:35:33.547" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:35:33.748" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:35:33.748" starttime="20170810 04:35:33.748" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:35:33.749" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:35:33.749" starttime="20170810 04:35:33.749" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:33.749" starttime="20170810 04:35:33.543" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:33.749" starttime="20170810 04:35:33.543" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:33.750" starttime="20170810 04:35:33.542" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:35:33.750" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:35:33.750" starttime="20170810 04:35:33.750" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:35:33.752" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:35:33.752" starttime="20170810 04:35:33.751" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:35:33.753" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:35:33.753" starttime="20170810 04:35:33.753" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:33.753" starttime="20170810 04:35:33.752" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:33.753" starttime="20170810 04:35:33.751" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:33.754" starttime="20170810 04:35:33.750" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:35:33.833" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:35:33.833" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:35:33.833" starttime="20170810 04:35:33.754" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:35:33.835" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:35:33.835" starttime="20170810 04:35:33.834" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:35:33.835" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:35:33.836" starttime="20170810 04:35:33.835" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:33.836" starttime="20170810 04:35:33.835" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:33.836" starttime="20170810 04:35:33.834" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:33.836" starttime="20170810 04:35:33.833" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:35:33.836" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:35:33.836" starttime="20170810 04:35:33.836" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:35:33.837" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:35:33.837" starttime="20170810 04:35:33.541" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:35:33.837" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:35:33.837" starttime="20170810 04:35:33.837" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:35:33.838" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:35:33.838" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:35:33.838" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:35:33.838" starttime="20170810 04:35:33.838" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:35:33.838" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:35:33.838" starttime="20170810 04:35:33.541" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:35:33.839" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:35:33.839" starttime="20170810 04:35:33.540" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:35:33.839" starttime="20170810 04:35:33.839" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:33.839" starttime="20170810 04:35:33.540" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:35:33.843" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:35:33.844" starttime="20170810 04:35:33.843" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:35:33.844" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:35:33.844" starttime="20170810 04:35:33.844" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:35:33.845" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:35:33.845" starttime="20170810 04:35:33.845" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:35:33.846" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:35:33.846" starttime="20170810 04:35:33.845" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:35:34.033" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:35:34.033" starttime="20170810 04:35:33.846" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:35:34.033" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:35:34.033" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:35:34.033" starttime="20170810 04:35:33.846" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:35:34.034" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:35:34.034" starttime="20170810 04:35:34.033" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:35:34.034" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:35:34.035" starttime="20170810 04:35:34.034" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:34.035" starttime="20170810 04:35:33.842" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:34.035" starttime="20170810 04:35:33.842" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:34.035" starttime="20170810 04:35:33.841" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:35:34.035" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:35:34.035" starttime="20170810 04:35:34.035" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:35:34.038" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:35:34.038" starttime="20170810 04:35:34.037" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:35:34.038" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:35:34.039" starttime="20170810 04:35:34.038" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:34.039" starttime="20170810 04:35:34.038" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:34.039" starttime="20170810 04:35:34.036" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:34.039" starttime="20170810 04:35:34.036" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:35:34.145" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:35:34.145" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:35:34.145" starttime="20170810 04:35:34.039" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:35:34.146" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:35:34.146" starttime="20170810 04:35:34.146" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:35:34.147" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:35:34.147" starttime="20170810 04:35:34.147" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:34.148" starttime="20170810 04:35:34.147" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:34.148" starttime="20170810 04:35:34.145" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:34.148" starttime="20170810 04:35:34.145" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:35:34.148" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:35:34.148" starttime="20170810 04:35:34.148" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:35:34.148" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:35:34.148" starttime="20170810 04:35:33.840" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:35:34.149" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:35:34.149" starttime="20170810 04:35:34.149" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:35:34.150" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:35:34.150" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:35:34.150" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:35:34.150" starttime="20170810 04:35:34.149" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:35:34.150" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:35:34.150" starttime="20170810 04:35:33.840" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:35:34.150" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:35:34.150" starttime="20170810 04:35:33.839" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:35:34.151" starttime="20170810 04:35:34.151" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:35:34.155" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:35:34.155" starttime="20170810 04:35:34.155" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:35:34.156" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:35:34.156" starttime="20170810 04:35:34.156" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:35:34.157" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:35:34.157" starttime="20170810 04:35:34.156" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:35:34.157" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:35:34.157" starttime="20170810 04:35:34.157" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:35:34.380" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:35:34.380" starttime="20170810 04:35:34.158" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:35:34.380" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:35:34.381" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:35:34.381" starttime="20170810 04:35:34.158" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:35:34.381" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:35:34.381" starttime="20170810 04:35:34.381" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:35:34.382" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:35:34.382" starttime="20170810 04:35:34.382" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:34.382" starttime="20170810 04:35:34.154" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:34.382" starttime="20170810 04:35:34.154" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:34.382" starttime="20170810 04:35:34.153" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:35:34.383" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:35:34.383" starttime="20170810 04:35:34.383" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:35:34.385" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:35:34.385" starttime="20170810 04:35:34.384" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:35:34.386" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:35:34.386" starttime="20170810 04:35:34.386" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:34.386" starttime="20170810 04:35:34.385" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:34.387" starttime="20170810 04:35:34.384" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:34.387" starttime="20170810 04:35:34.383" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:35:34.528" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:35:34.528" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:35:34.528" starttime="20170810 04:35:34.387" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:35:34.530" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:35:34.530" starttime="20170810 04:35:34.529" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:35:34.530" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:35:34.531" starttime="20170810 04:35:34.530" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:34.531" starttime="20170810 04:35:34.530" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:34.531" starttime="20170810 04:35:34.529" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:34.531" starttime="20170810 04:35:34.528" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:35:34.531" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:35:34.532" starttime="20170810 04:35:34.531" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:35:34.532" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:35:34.532" starttime="20170810 04:35:34.153" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:35:34.533" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:35:34.533" starttime="20170810 04:35:34.532" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:35:34.534" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:35:34.534" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:35:34.534" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170810 04:35:34.534" starttime="20170810 04:35:34.533" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:35:34.534" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:35:34.534" starttime="20170810 04:35:34.152" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:35:34.535" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:35:34.535" starttime="20170810 04:35:34.151" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:35:34.536" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:35:34.536" starttime="20170810 04:35:34.535" status="FAIL"></status>
</kw>
<status endtime="20170810 04:35:34.536" starttime="20170810 04:35:34.151" status="FAIL"></status>
</kw>
<status endtime="20170810 04:35:34.536" starttime="20170810 04:35:33.539" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:35:44.541" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:35:44.542" starttime="20170810 04:35:44.541" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:35:44.542" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:35:44.542" starttime="20170810 04:35:44.542" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:35:44.543" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:35:44.543" starttime="20170810 04:35:44.543" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:35:44.544" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:35:44.544" starttime="20170810 04:35:44.543" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:35:44.743" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:35:44.743" starttime="20170810 04:35:44.544" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:35:44.744" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:35:44.744" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:35:44.744" starttime="20170810 04:35:44.544" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:35:44.744" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:35:44.744" starttime="20170810 04:35:44.744" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:35:44.745" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:35:44.745" starttime="20170810 04:35:44.745" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:44.745" starttime="20170810 04:35:44.540" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:44.745" starttime="20170810 04:35:44.540" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:44.745" starttime="20170810 04:35:44.539" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:35:44.746" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:35:44.746" starttime="20170810 04:35:44.746" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:35:44.748" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:35:44.748" starttime="20170810 04:35:44.747" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:35:44.749" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:35:44.749" starttime="20170810 04:35:44.749" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:44.749" starttime="20170810 04:35:44.748" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:44.749" starttime="20170810 04:35:44.747" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:44.750" starttime="20170810 04:35:44.746" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:35:44.816" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:35:44.817" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:35:44.817" starttime="20170810 04:35:44.750" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:35:44.818" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:35:44.818" starttime="20170810 04:35:44.818" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:35:44.819" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:35:44.819" starttime="20170810 04:35:44.819" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:44.819" starttime="20170810 04:35:44.819" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:44.820" starttime="20170810 04:35:44.817" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:44.820" starttime="20170810 04:35:44.817" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:35:44.820" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:35:44.820" starttime="20170810 04:35:44.820" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:35:44.820" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:35:44.820" starttime="20170810 04:35:44.539" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:35:44.821" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:35:44.821" starttime="20170810 04:35:44.821" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:35:44.822" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:35:44.822" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:35:44.822" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:35:44.822" starttime="20170810 04:35:44.821" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:35:44.822" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:35:44.822" starttime="20170810 04:35:44.538" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:35:44.822" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:35:44.822" starttime="20170810 04:35:44.538" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:35:44.823" starttime="20170810 04:35:44.823" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:44.823" starttime="20170810 04:35:44.537" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:35:44.827" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:35:44.827" starttime="20170810 04:35:44.827" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:35:44.828" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:35:44.828" starttime="20170810 04:35:44.828" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:35:44.829" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:35:44.829" starttime="20170810 04:35:44.828" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:35:44.829" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:35:44.829" starttime="20170810 04:35:44.829" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:35:45.032" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:35:45.032" starttime="20170810 04:35:44.830" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:35:45.032" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:35:45.032" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:35:45.032" starttime="20170810 04:35:44.830" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:35:45.033" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:35:45.033" starttime="20170810 04:35:45.033" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:35:45.034" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:35:45.034" starttime="20170810 04:35:45.033" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:45.034" starttime="20170810 04:35:44.826" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:45.034" starttime="20170810 04:35:44.825" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:45.034" starttime="20170810 04:35:44.825" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:35:45.035" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:35:45.035" starttime="20170810 04:35:45.034" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:35:45.037" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:35:45.037" starttime="20170810 04:35:45.036" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:35:45.038" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:35:45.038" starttime="20170810 04:35:45.037" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:45.038" starttime="20170810 04:35:45.037" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:45.038" starttime="20170810 04:35:45.035" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:45.038" starttime="20170810 04:35:45.035" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:35:45.186" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:35:45.186" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:35:45.186" starttime="20170810 04:35:45.038" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:35:45.188" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:35:45.188" starttime="20170810 04:35:45.187" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:35:45.189" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:35:45.189" starttime="20170810 04:35:45.189" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:45.189" starttime="20170810 04:35:45.188" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:45.189" starttime="20170810 04:35:45.187" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:45.189" starttime="20170810 04:35:45.186" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:35:45.190" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:35:45.190" starttime="20170810 04:35:45.189" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:35:45.190" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:35:45.190" starttime="20170810 04:35:44.824" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:35:45.191" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:35:45.191" starttime="20170810 04:35:45.190" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:35:45.191" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:35:45.191" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:35:45.191" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:35:45.191" starttime="20170810 04:35:45.191" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:35:45.192" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:35:45.192" starttime="20170810 04:35:44.824" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:35:45.192" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:35:45.192" starttime="20170810 04:35:44.823" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:35:45.193" starttime="20170810 04:35:45.192" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:35:45.199" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:35:45.200" starttime="20170810 04:35:45.199" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:35:45.200" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:35:45.200" starttime="20170810 04:35:45.200" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:35:45.201" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:35:45.201" starttime="20170810 04:35:45.201" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:35:45.202" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:35:45.202" starttime="20170810 04:35:45.201" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:35:45.520" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:35:45.520" starttime="20170810 04:35:45.202" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:35:45.520" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:35:45.520" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:35:45.520" starttime="20170810 04:35:45.202" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:35:45.521" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:35:45.521" starttime="20170810 04:35:45.520" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:35:45.522" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:35:45.522" starttime="20170810 04:35:45.521" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:45.522" starttime="20170810 04:35:45.199" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:45.522" starttime="20170810 04:35:45.198" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:45.522" starttime="20170810 04:35:45.198" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:35:45.523" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:35:45.523" starttime="20170810 04:35:45.522" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:35:45.525" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:35:45.525" starttime="20170810 04:35:45.524" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:35:45.526" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:35:45.526" starttime="20170810 04:35:45.526" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:45.526" starttime="20170810 04:35:45.525" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:45.526" starttime="20170810 04:35:45.523" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:45.526" starttime="20170810 04:35:45.523" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:35:45.602" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:35:45.602" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:35:45.602" starttime="20170810 04:35:45.526" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:35:45.604" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:35:45.604" starttime="20170810 04:35:45.603" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:35:45.605" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:35:45.605" starttime="20170810 04:35:45.604" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:45.605" starttime="20170810 04:35:45.604" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:45.605" starttime="20170810 04:35:45.603" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:45.605" starttime="20170810 04:35:45.602" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:35:45.605" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:35:45.606" starttime="20170810 04:35:45.605" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:35:45.606" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:35:45.606" starttime="20170810 04:35:45.197" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:35:45.607" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:35:45.607" starttime="20170810 04:35:45.606" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:35:45.607" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:35:45.607" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:35:45.608" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170810 04:35:45.608" starttime="20170810 04:35:45.607" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:35:45.608" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:35:45.608" starttime="20170810 04:35:45.196" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:35:45.608" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:35:45.608" starttime="20170810 04:35:45.193" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:35:45.609" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:35:45.610" starttime="20170810 04:35:45.609" status="FAIL"></status>
</kw>
<status endtime="20170810 04:35:45.610" starttime="20170810 04:35:45.193" status="FAIL"></status>
</kw>
<status endtime="20170810 04:35:45.610" starttime="20170810 04:35:44.537" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:35:55.615" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:35:55.615" starttime="20170810 04:35:55.615" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:35:55.616" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:35:55.616" starttime="20170810 04:35:55.616" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:35:55.617" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:35:55.617" starttime="20170810 04:35:55.616" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:35:55.617" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:35:55.617" starttime="20170810 04:35:55.617" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:35:55.820" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:35:55.820" starttime="20170810 04:35:55.618" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:35:55.820" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:35:55.820" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:35:55.820" starttime="20170810 04:35:55.618" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:35:55.821" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:35:55.821" starttime="20170810 04:35:55.820" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:35:55.821" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:35:55.822" starttime="20170810 04:35:55.821" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:55.822" starttime="20170810 04:35:55.614" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:55.822" starttime="20170810 04:35:55.614" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:55.822" starttime="20170810 04:35:55.613" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:35:55.822" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:35:55.823" starttime="20170810 04:35:55.822" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:35:55.825" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:35:55.825" starttime="20170810 04:35:55.824" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:35:55.826" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:35:55.827" starttime="20170810 04:35:55.826" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:55.827" starttime="20170810 04:35:55.825" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:55.827" starttime="20170810 04:35:55.823" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:55.827" starttime="20170810 04:35:55.823" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:35:55.929" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:35:55.929" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:35:55.929" starttime="20170810 04:35:55.827" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:35:55.931" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:35:55.931" starttime="20170810 04:35:55.930" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:35:55.932" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:35:55.932" starttime="20170810 04:35:55.931" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:55.932" starttime="20170810 04:35:55.931" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:55.932" starttime="20170810 04:35:55.930" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:55.932" starttime="20170810 04:35:55.929" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:35:55.932" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:35:55.933" starttime="20170810 04:35:55.932" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:35:55.933" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:35:55.933" starttime="20170810 04:35:55.612" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:35:55.933" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:35:55.933" starttime="20170810 04:35:55.933" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:35:55.934" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:35:55.934" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:35:55.934" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:35:55.934" starttime="20170810 04:35:55.934" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:35:55.934" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:35:55.934" starttime="20170810 04:35:55.612" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:35:55.935" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:35:55.935" starttime="20170810 04:35:55.611" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:35:55.935" starttime="20170810 04:35:55.935" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:55.935" starttime="20170810 04:35:55.611" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:35:55.939" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:35:55.940" starttime="20170810 04:35:55.939" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:35:55.940" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:35:55.940" starttime="20170810 04:35:55.940" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:35:55.941" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:35:55.941" starttime="20170810 04:35:55.941" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:35:55.941" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:35:55.942" starttime="20170810 04:35:55.941" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:35:56.133" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:35:56.133" starttime="20170810 04:35:55.942" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:35:56.133" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:35:56.133" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:35:56.133" starttime="20170810 04:35:55.942" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:35:56.134" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:35:56.134" starttime="20170810 04:35:56.133" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:35:56.134" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:35:56.134" starttime="20170810 04:35:56.134" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:56.135" starttime="20170810 04:35:55.938" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:56.135" starttime="20170810 04:35:55.938" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:56.135" starttime="20170810 04:35:55.937" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:35:56.135" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:35:56.135" starttime="20170810 04:35:56.135" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:35:56.137" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:35:56.137" starttime="20170810 04:35:56.137" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:35:56.138" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:35:56.138" starttime="20170810 04:35:56.138" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:56.139" starttime="20170810 04:35:56.138" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:56.139" starttime="20170810 04:35:56.136" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:56.139" starttime="20170810 04:35:56.136" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:35:56.233" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:35:56.233" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:35:56.233" starttime="20170810 04:35:56.139" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:35:56.235" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:35:56.235" starttime="20170810 04:35:56.234" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:35:56.236" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:35:56.236" starttime="20170810 04:35:56.235" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:56.236" starttime="20170810 04:35:56.235" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:56.236" starttime="20170810 04:35:56.234" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:56.236" starttime="20170810 04:35:56.233" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:35:56.236" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:35:56.236" starttime="20170810 04:35:56.236" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:35:56.237" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:35:56.237" starttime="20170810 04:35:55.936" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:35:56.237" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:35:56.237" starttime="20170810 04:35:56.237" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:35:56.238" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:35:56.238" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:35:56.238" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:35:56.238" starttime="20170810 04:35:56.238" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:35:56.238" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:35:56.238" starttime="20170810 04:35:55.936" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:35:56.239" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:35:56.239" starttime="20170810 04:35:55.936" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:35:56.239" starttime="20170810 04:35:56.239" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:35:56.243" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:35:56.244" starttime="20170810 04:35:56.243" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:35:56.244" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:35:56.244" starttime="20170810 04:35:56.244" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:35:56.245" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:35:56.245" starttime="20170810 04:35:56.245" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:35:56.246" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:35:56.246" starttime="20170810 04:35:56.245" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:35:56.556" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:35:56.556" starttime="20170810 04:35:56.246" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:35:56.556" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:35:56.557" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:35:56.557" starttime="20170810 04:35:56.246" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:35:56.557" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:35:56.557" starttime="20170810 04:35:56.557" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:35:56.558" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:35:56.558" starttime="20170810 04:35:56.558" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:56.558" starttime="20170810 04:35:56.243" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:56.558" starttime="20170810 04:35:56.242" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:56.558" starttime="20170810 04:35:56.242" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:35:56.559" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:35:56.559" starttime="20170810 04:35:56.559" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:35:56.561" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:35:56.561" starttime="20170810 04:35:56.560" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:35:56.562" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:35:56.562" starttime="20170810 04:35:56.562" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:56.562" starttime="20170810 04:35:56.561" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:56.563" starttime="20170810 04:35:56.560" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:56.563" starttime="20170810 04:35:56.559" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:35:56.651" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:35:56.651" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:35:56.651" starttime="20170810 04:35:56.563" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:35:56.653" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:35:56.653" starttime="20170810 04:35:56.653" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:35:56.654" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:35:56.654" starttime="20170810 04:35:56.654" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:56.654" starttime="20170810 04:35:56.653" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:56.655" starttime="20170810 04:35:56.652" status="PASS"></status>
</kw>
<status endtime="20170810 04:35:56.655" starttime="20170810 04:35:56.652" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:35:56.655" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:35:56.655" starttime="20170810 04:35:56.655" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:35:56.655" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:35:56.655" starttime="20170810 04:35:56.241" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:35:56.656" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:35:56.656" starttime="20170810 04:35:56.656" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:35:56.656" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:35:56.657" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:35:56.657" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170810 04:35:56.657" starttime="20170810 04:35:56.656" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:35:56.657" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:35:56.657" starttime="20170810 04:35:56.240" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:35:56.657" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:35:56.657" starttime="20170810 04:35:56.240" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:35:56.658" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:35:56.658" starttime="20170810 04:35:56.657" status="FAIL"></status>
</kw>
<status endtime="20170810 04:35:56.658" starttime="20170810 04:35:56.239" status="FAIL"></status>
</kw>
<status endtime="20170810 04:35:56.658" starttime="20170810 04:35:55.610" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:36:06.663" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:36:06.663" starttime="20170810 04:36:06.663" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:36:06.664" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:36:06.664" starttime="20170810 04:36:06.664" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:36:06.665" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:36:06.665" starttime="20170810 04:36:06.664" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:36:06.665" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:36:06.665" starttime="20170810 04:36:06.665" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:36:06.939" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:36:06.939" starttime="20170810 04:36:06.666" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:06.939" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:36:06.939" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:36:06.939" starttime="20170810 04:36:06.666" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:36:06.939" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:36:06.940" starttime="20170810 04:36:06.939" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:36:06.940" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:36:06.940" starttime="20170810 04:36:06.940" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:06.940" starttime="20170810 04:36:06.662" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:06.940" starttime="20170810 04:36:06.662" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:06.941" starttime="20170810 04:36:06.661" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:36:06.941" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:36:06.941" starttime="20170810 04:36:06.941" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:36:06.944" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:36:06.944" starttime="20170810 04:36:06.943" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:36:06.946" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:36:06.946" starttime="20170810 04:36:06.945" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:06.946" starttime="20170810 04:36:06.945" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:06.946" starttime="20170810 04:36:06.942" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:06.946" starttime="20170810 04:36:06.942" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:36:07.013" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:36:07.013" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:36:07.013" starttime="20170810 04:36:06.946" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:36:07.015" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:36:07.015" starttime="20170810 04:36:07.014" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:36:07.016" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:36:07.016" starttime="20170810 04:36:07.016" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:07.016" starttime="20170810 04:36:07.015" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:07.016" starttime="20170810 04:36:07.014" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:07.016" starttime="20170810 04:36:07.014" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:36:07.017" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:36:07.017" starttime="20170810 04:36:07.016" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:07.017" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:36:07.017" starttime="20170810 04:36:06.660" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:36:07.017" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:36:07.018" starttime="20170810 04:36:07.017" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:36:07.018" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:36:07.018" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:36:07.018" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:36:07.018" starttime="20170810 04:36:07.018" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:07.019" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:36:07.019" starttime="20170810 04:36:06.660" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:07.019" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:36:07.019" starttime="20170810 04:36:06.660" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:36:07.019" starttime="20170810 04:36:07.019" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:07.020" starttime="20170810 04:36:06.659" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:36:07.023" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:36:07.024" starttime="20170810 04:36:07.023" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:36:07.024" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:36:07.024" starttime="20170810 04:36:07.024" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:36:07.025" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:36:07.025" starttime="20170810 04:36:07.025" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:36:07.026" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:36:07.026" starttime="20170810 04:36:07.025" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:36:07.249" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:36:07.249" starttime="20170810 04:36:07.026" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:07.249" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:36:07.249" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:36:07.249" starttime="20170810 04:36:07.026" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:36:07.250" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:36:07.250" starttime="20170810 04:36:07.250" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:36:07.251" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:36:07.251" starttime="20170810 04:36:07.250" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:07.251" starttime="20170810 04:36:07.022" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:07.251" starttime="20170810 04:36:07.022" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:07.251" starttime="20170810 04:36:07.021" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:36:07.252" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:36:07.252" starttime="20170810 04:36:07.251" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:36:07.254" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:36:07.254" starttime="20170810 04:36:07.253" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:36:07.255" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:36:07.255" starttime="20170810 04:36:07.254" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:07.255" starttime="20170810 04:36:07.254" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:07.255" starttime="20170810 04:36:07.252" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:07.255" starttime="20170810 04:36:07.252" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:36:07.349" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:36:07.349" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:36:07.349" starttime="20170810 04:36:07.255" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:36:07.351" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:36:07.351" starttime="20170810 04:36:07.350" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:36:07.352" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:36:07.352" starttime="20170810 04:36:07.351" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:07.352" starttime="20170810 04:36:07.351" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:07.352" starttime="20170810 04:36:07.350" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:07.352" starttime="20170810 04:36:07.349" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:36:07.352" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:36:07.353" starttime="20170810 04:36:07.352" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:07.353" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:36:07.353" starttime="20170810 04:36:07.021" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:36:07.353" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:36:07.353" starttime="20170810 04:36:07.353" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:36:07.354" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:36:07.354" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:36:07.354" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:36:07.354" starttime="20170810 04:36:07.354" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:07.354" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:36:07.354" starttime="20170810 04:36:07.020" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:07.355" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:36:07.355" starttime="20170810 04:36:07.020" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:36:07.355" starttime="20170810 04:36:07.355" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:36:07.359" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:36:07.360" starttime="20170810 04:36:07.359" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:36:07.360" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:36:07.360" starttime="20170810 04:36:07.360" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:36:07.361" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:36:07.361" starttime="20170810 04:36:07.360" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:36:07.361" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:36:07.362" starttime="20170810 04:36:07.361" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:36:07.549" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:36:07.549" starttime="20170810 04:36:07.362" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:07.549" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:36:07.549" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:36:07.549" starttime="20170810 04:36:07.362" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:36:07.550" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:36:07.550" starttime="20170810 04:36:07.549" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:36:07.550" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:36:07.550" starttime="20170810 04:36:07.550" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:07.551" starttime="20170810 04:36:07.358" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:07.551" starttime="20170810 04:36:07.358" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:07.551" starttime="20170810 04:36:07.358" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:36:07.551" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:36:07.551" starttime="20170810 04:36:07.551" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:36:07.554" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:36:07.554" starttime="20170810 04:36:07.553" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:36:07.555" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:36:07.555" starttime="20170810 04:36:07.554" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:07.555" starttime="20170810 04:36:07.554" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:07.555" starttime="20170810 04:36:07.552" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:07.555" starttime="20170810 04:36:07.552" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:36:07.634" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:36:07.634" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:36:07.634" starttime="20170810 04:36:07.555" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:36:07.636" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:36:07.636" starttime="20170810 04:36:07.635" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:36:07.637" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:36:07.637" starttime="20170810 04:36:07.637" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:07.637" starttime="20170810 04:36:07.636" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:07.637" starttime="20170810 04:36:07.635" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:07.637" starttime="20170810 04:36:07.635" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:36:07.638" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:36:07.638" starttime="20170810 04:36:07.637" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:07.638" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:36:07.638" starttime="20170810 04:36:07.357" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:36:07.638" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:36:07.639" starttime="20170810 04:36:07.638" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:36:07.639" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:36:07.639" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:36:07.639" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170810 04:36:07.639" starttime="20170810 04:36:07.639" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:07.640" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:36:07.640" starttime="20170810 04:36:07.356" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:07.640" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:36:07.640" starttime="20170810 04:36:07.356" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:36:07.641" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:36:07.641" starttime="20170810 04:36:07.640" status="FAIL"></status>
</kw>
<status endtime="20170810 04:36:07.641" starttime="20170810 04:36:07.355" status="FAIL"></status>
</kw>
<status endtime="20170810 04:36:07.641" starttime="20170810 04:36:06.659" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:36:17.645" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:36:17.646" starttime="20170810 04:36:17.645" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:36:17.646" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:36:17.646" starttime="20170810 04:36:17.646" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:36:17.647" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:36:17.647" starttime="20170810 04:36:17.647" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:36:17.648" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:36:17.648" starttime="20170810 04:36:17.647" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:36:17.841" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:36:17.841" starttime="20170810 04:36:17.648" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:17.842" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:36:17.842" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:36:17.842" starttime="20170810 04:36:17.648" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:36:17.842" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:36:17.842" starttime="20170810 04:36:17.842" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:36:17.843" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:36:17.843" starttime="20170810 04:36:17.843" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:17.843" starttime="20170810 04:36:17.645" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:17.843" starttime="20170810 04:36:17.644" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:17.843" starttime="20170810 04:36:17.644" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:36:17.844" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:36:17.844" starttime="20170810 04:36:17.844" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:36:17.846" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:36:17.846" starttime="20170810 04:36:17.845" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:36:17.847" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:36:17.847" starttime="20170810 04:36:17.847" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:17.847" starttime="20170810 04:36:17.846" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:17.847" starttime="20170810 04:36:17.845" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:17.847" starttime="20170810 04:36:17.844" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:36:17.912" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:36:17.913" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:36:17.913" starttime="20170810 04:36:17.847" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:36:17.914" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:36:17.914" starttime="20170810 04:36:17.914" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:36:17.915" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:36:17.915" starttime="20170810 04:36:17.915" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:17.915" starttime="20170810 04:36:17.914" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:17.915" starttime="20170810 04:36:17.913" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:17.915" starttime="20170810 04:36:17.913" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:36:17.916" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:36:17.916" starttime="20170810 04:36:17.916" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:17.916" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:36:17.916" starttime="20170810 04:36:17.643" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:36:17.917" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:36:17.917" starttime="20170810 04:36:17.916" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:36:17.918" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:36:17.918" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:36:17.918" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:36:17.918" starttime="20170810 04:36:17.917" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:17.918" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:36:17.918" starttime="20170810 04:36:17.642" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:17.919" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:36:17.919" starttime="20170810 04:36:17.642" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:36:17.919" starttime="20170810 04:36:17.919" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:17.919" starttime="20170810 04:36:17.642" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:36:17.923" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:36:17.924" starttime="20170810 04:36:17.923" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:36:17.924" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:36:17.924" starttime="20170810 04:36:17.924" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:36:17.925" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:36:17.925" starttime="20170810 04:36:17.925" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:36:17.926" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:36:17.926" starttime="20170810 04:36:17.925" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:36:18.137" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:36:18.138" starttime="20170810 04:36:17.926" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:18.138" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:36:18.138" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:36:18.138" starttime="20170810 04:36:17.926" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:36:18.138" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:36:18.139" starttime="20170810 04:36:18.138" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:36:18.139" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:36:18.139" starttime="20170810 04:36:18.139" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:18.139" starttime="20170810 04:36:17.922" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:18.139" starttime="20170810 04:36:17.922" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:18.140" starttime="20170810 04:36:17.921" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:36:18.140" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:36:18.140" starttime="20170810 04:36:18.140" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:36:18.142" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:36:18.142" starttime="20170810 04:36:18.141" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:36:18.143" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:36:18.143" starttime="20170810 04:36:18.143" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:18.143" starttime="20170810 04:36:18.142" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:18.143" starttime="20170810 04:36:18.141" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:18.144" starttime="20170810 04:36:18.140" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:36:18.237" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:36:18.237" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:36:18.237" starttime="20170810 04:36:18.144" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:36:18.239" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:36:18.239" starttime="20170810 04:36:18.238" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:36:18.239" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:36:18.240" starttime="20170810 04:36:18.239" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:18.240" starttime="20170810 04:36:18.239" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:18.240" starttime="20170810 04:36:18.238" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:18.240" starttime="20170810 04:36:18.237" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:36:18.240" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:36:18.240" starttime="20170810 04:36:18.240" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:18.241" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:36:18.241" starttime="20170810 04:36:17.920" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:36:18.241" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:36:18.241" starttime="20170810 04:36:18.241" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:36:18.242" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:36:18.242" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:36:18.242" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:36:18.242" starttime="20170810 04:36:18.242" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:18.242" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:36:18.242" starttime="20170810 04:36:17.920" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:18.243" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:36:18.243" starttime="20170810 04:36:17.919" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:36:18.243" starttime="20170810 04:36:18.243" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:36:18.250" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:36:18.251" starttime="20170810 04:36:18.250" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:36:18.251" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:36:18.251" starttime="20170810 04:36:18.251" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:36:18.252" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:36:18.252" starttime="20170810 04:36:18.252" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:36:18.253" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:36:18.253" starttime="20170810 04:36:18.252" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:36:18.471" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:36:18.471" starttime="20170810 04:36:18.254" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:18.471" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:36:18.471" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:36:18.471" starttime="20170810 04:36:18.253" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:36:18.472" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:36:18.472" starttime="20170810 04:36:18.471" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:36:18.473" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:36:18.473" starttime="20170810 04:36:18.472" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:18.473" starttime="20170810 04:36:18.250" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:18.473" starttime="20170810 04:36:18.249" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:18.473" starttime="20170810 04:36:18.248" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:36:18.474" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:36:18.474" starttime="20170810 04:36:18.473" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:36:18.476" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:36:18.476" starttime="20170810 04:36:18.475" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:36:18.477" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:36:18.477" starttime="20170810 04:36:18.477" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:18.477" starttime="20170810 04:36:18.476" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:18.477" starttime="20170810 04:36:18.474" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:18.477" starttime="20170810 04:36:18.474" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:36:18.547" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:36:18.547" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:36:18.547" starttime="20170810 04:36:18.478" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:36:18.549" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:36:18.549" starttime="20170810 04:36:18.548" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:36:18.550" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:36:18.550" starttime="20170810 04:36:18.549" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:18.550" starttime="20170810 04:36:18.549" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:18.550" starttime="20170810 04:36:18.548" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:18.550" starttime="20170810 04:36:18.547" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:36:18.550" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:36:18.550" starttime="20170810 04:36:18.550" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:18.551" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:36:18.551" starttime="20170810 04:36:18.248" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:36:18.551" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:36:18.551" starttime="20170810 04:36:18.551" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:36:18.552" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:36:18.552" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:36:18.552" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170810 04:36:18.552" starttime="20170810 04:36:18.552" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:18.552" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:36:18.552" starttime="20170810 04:36:18.247" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:18.553" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:36:18.553" starttime="20170810 04:36:18.244" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:36:18.553" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:36:18.553" starttime="20170810 04:36:18.553" status="FAIL"></status>
</kw>
<status endtime="20170810 04:36:18.554" starttime="20170810 04:36:18.243" status="FAIL"></status>
</kw>
<status endtime="20170810 04:36:18.554" starttime="20170810 04:36:17.641" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:36:28.559" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:36:28.559" starttime="20170810 04:36:28.558" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:36:28.560" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:36:28.560" starttime="20170810 04:36:28.559" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:36:28.560" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:36:28.560" starttime="20170810 04:36:28.560" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:36:28.561" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:36:28.561" starttime="20170810 04:36:28.561" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:36:28.745" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:36:28.746" starttime="20170810 04:36:28.562" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:28.746" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:36:28.746" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:36:28.746" starttime="20170810 04:36:28.561" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:36:28.746" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:36:28.747" starttime="20170810 04:36:28.746" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:36:28.747" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:36:28.747" starttime="20170810 04:36:28.747" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:28.747" starttime="20170810 04:36:28.558" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:28.747" starttime="20170810 04:36:28.557" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:28.748" starttime="20170810 04:36:28.557" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:36:28.748" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:36:28.748" starttime="20170810 04:36:28.748" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:36:28.750" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:36:28.750" starttime="20170810 04:36:28.750" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:36:28.751" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:36:28.751" starttime="20170810 04:36:28.751" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:28.751" starttime="20170810 04:36:28.750" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:28.751" starttime="20170810 04:36:28.749" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:28.752" starttime="20170810 04:36:28.748" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:36:28.850" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:36:28.850" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:36:28.851" starttime="20170810 04:36:28.752" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:36:28.852" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:36:28.852" starttime="20170810 04:36:28.852" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:36:28.853" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:36:28.853" starttime="20170810 04:36:28.853" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:28.854" starttime="20170810 04:36:28.853" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:28.854" starttime="20170810 04:36:28.851" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:28.854" starttime="20170810 04:36:28.851" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:36:28.854" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:36:28.854" starttime="20170810 04:36:28.854" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:28.854" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:36:28.854" starttime="20170810 04:36:28.556" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:36:28.855" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:36:28.855" starttime="20170810 04:36:28.855" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:36:28.856" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:36:28.856" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:36:28.856" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:36:28.856" starttime="20170810 04:36:28.855" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:28.856" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:36:28.856" starttime="20170810 04:36:28.555" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:28.856" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:36:28.856" starttime="20170810 04:36:28.555" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:36:28.857" starttime="20170810 04:36:28.857" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:28.857" starttime="20170810 04:36:28.555" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:36:28.861" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:36:28.861" starttime="20170810 04:36:28.860" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:36:28.862" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:36:28.862" starttime="20170810 04:36:28.862" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:36:28.862" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:36:28.863" starttime="20170810 04:36:28.862" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:36:28.863" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:36:28.863" starttime="20170810 04:36:28.863" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:36:29.067" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:36:29.067" starttime="20170810 04:36:28.864" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:29.067" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:36:29.067" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:36:29.067" starttime="20170810 04:36:28.863" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:36:29.068" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:36:29.068" starttime="20170810 04:36:29.067" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:36:29.068" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:36:29.068" starttime="20170810 04:36:29.068" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:29.069" starttime="20170810 04:36:28.860" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:29.069" starttime="20170810 04:36:28.859" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:29.069" starttime="20170810 04:36:28.859" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:36:29.069" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:36:29.069" starttime="20170810 04:36:29.069" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:36:29.071" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:36:29.071" starttime="20170810 04:36:29.071" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:36:29.072" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:36:29.072" starttime="20170810 04:36:29.072" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:29.073" starttime="20170810 04:36:29.072" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:29.073" starttime="20170810 04:36:29.070" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:29.073" starttime="20170810 04:36:29.070" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:36:29.177" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:36:29.177" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:36:29.177" starttime="20170810 04:36:29.073" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:36:29.178" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:36:29.179" starttime="20170810 04:36:29.178" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:36:29.179" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:36:29.179" starttime="20170810 04:36:29.179" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:29.180" starttime="20170810 04:36:29.179" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:29.180" starttime="20170810 04:36:29.177" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:29.180" starttime="20170810 04:36:29.177" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:36:29.180" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:36:29.180" starttime="20170810 04:36:29.180" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:29.180" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:36:29.180" starttime="20170810 04:36:28.858" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:36:29.181" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:36:29.181" starttime="20170810 04:36:29.181" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:36:29.182" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:36:29.182" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:36:29.182" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:36:29.182" starttime="20170810 04:36:29.181" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:29.182" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:36:29.182" starttime="20170810 04:36:28.858" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:29.182" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:36:29.182" starttime="20170810 04:36:28.857" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:36:29.183" starttime="20170810 04:36:29.183" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:36:29.187" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:36:29.188" starttime="20170810 04:36:29.187" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:36:29.188" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:36:29.188" starttime="20170810 04:36:29.188" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:36:29.189" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:36:29.189" starttime="20170810 04:36:29.188" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:36:29.189" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:36:29.189" starttime="20170810 04:36:29.189" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:36:29.403" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:36:29.403" starttime="20170810 04:36:29.190" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:29.403" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:36:29.403" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:36:29.403" starttime="20170810 04:36:29.190" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:36:29.404" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:36:29.404" starttime="20170810 04:36:29.404" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:36:29.405" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:36:29.405" starttime="20170810 04:36:29.404" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:29.405" starttime="20170810 04:36:29.186" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:29.405" starttime="20170810 04:36:29.186" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:29.405" starttime="20170810 04:36:29.185" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:36:29.406" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:36:29.406" starttime="20170810 04:36:29.405" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:36:29.408" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:36:29.408" starttime="20170810 04:36:29.407" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:36:29.410" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:36:29.410" starttime="20170810 04:36:29.409" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:29.410" starttime="20170810 04:36:29.409" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:29.410" starttime="20170810 04:36:29.406" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:29.410" starttime="20170810 04:36:29.406" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:36:29.503" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:36:29.503" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:36:29.503" starttime="20170810 04:36:29.410" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:36:29.505" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:36:29.505" starttime="20170810 04:36:29.504" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:36:29.506" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:36:29.506" starttime="20170810 04:36:29.505" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:29.506" starttime="20170810 04:36:29.505" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:29.506" starttime="20170810 04:36:29.504" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:29.506" starttime="20170810 04:36:29.503" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:36:29.506" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:36:29.506" starttime="20170810 04:36:29.506" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:29.507" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:36:29.507" starttime="20170810 04:36:29.185" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:36:29.507" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:36:29.507" starttime="20170810 04:36:29.507" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:36:29.508" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:36:29.508" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:36:29.508" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170810 04:36:29.508" starttime="20170810 04:36:29.508" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:29.508" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:36:29.509" starttime="20170810 04:36:29.184" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:29.509" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:36:29.509" starttime="20170810 04:36:29.184" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:36:29.509" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:36:29.509" starttime="20170810 04:36:29.509" status="FAIL"></status>
</kw>
<status endtime="20170810 04:36:29.510" starttime="20170810 04:36:29.183" status="FAIL"></status>
</kw>
<status endtime="20170810 04:36:29.510" starttime="20170810 04:36:28.554" status="FAIL"></status>
</kw>
<msg timestamp="20170810 04:36:29.510" level="FAIL">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:36:29.510" starttime="20170810 04:26:27.124" status="FAIL"></status>
</kw>
<status endtime="20170810 04:36:29.510" starttime="20170810 04:26:26.549" status="FAIL"></status>
</kw>
<status endtime="20170810 04:36:29.511" starttime="20170810 04:26:18.744" status="FAIL"></status>
</kw>
<status endtime="20170810 04:36:29.511" starttime="20170810 04:26:18.743" status="FAIL"></status>
</kw>
<kw name="Test Exit Logs" type="teardown">
<doc>Collect FFDC and SOL log.</doc>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:36:29.516" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:36:29.516" starttime="20170810 04:36:29.516" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:36:29.517" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:36:29.517" starttime="20170810 04:36:29.517" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:36:29.518" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:36:29.518" starttime="20170810 04:36:29.517" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:36:29.518" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:36:29.518" starttime="20170810 04:36:29.518" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:36:29.764" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:36:29.764" starttime="20170810 04:36:29.519" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:29.764" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:36:29.764" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:36:29.764" starttime="20170810 04:36:29.519" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:36:29.765" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:36:29.765" starttime="20170810 04:36:29.764" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:36:29.765" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:36:29.765" starttime="20170810 04:36:29.765" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:29.765" starttime="20170810 04:36:29.515" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:29.766" starttime="20170810 04:36:29.515" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:29.766" starttime="20170810 04:36:29.514" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:36:29.766" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:36:29.766" starttime="20170810 04:36:29.766" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:36:29.768" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:36:29.768" starttime="20170810 04:36:29.768" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:36:29.769" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:36:29.769" starttime="20170810 04:36:29.769" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:29.769" starttime="20170810 04:36:29.768" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:29.770" starttime="20170810 04:36:29.767" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:29.770" starttime="20170810 04:36:29.766" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:36:29.879" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:36:29.879" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:36:29.879" starttime="20170810 04:36:29.770" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:36:29.881" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:36:29.881" starttime="20170810 04:36:29.880" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:36:29.882" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:36:29.882" starttime="20170810 04:36:29.882" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:29.882" starttime="20170810 04:36:29.881" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:29.882" starttime="20170810 04:36:29.880" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:29.882" starttime="20170810 04:36:29.879" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:36:29.883" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:36:29.883" starttime="20170810 04:36:29.882" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:29.883" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:36:29.883" starttime="20170810 04:36:29.513" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:36:29.884" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:36:29.884" starttime="20170810 04:36:29.883" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:36:29.884" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:36:29.884" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:36:29.884" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:36:29.885" starttime="20170810 04:36:29.884" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:29.885" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:36:29.885" starttime="20170810 04:36:29.513" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:29.885" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:36:29.885" starttime="20170810 04:36:29.512" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170810 04:36:29.886" level="FAIL">Running != Quiesced</msg>
<status endtime="20170810 04:36:29.886" starttime="20170810 04:36:29.886" status="FAIL"></status>
</kw>
<msg timestamp="20170810 04:36:29.886" level="INFO">${status} = False</msg>
<status endtime="20170810 04:36:29.886" starttime="20170810 04:36:29.885" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:29.887" level="INFO">${status} = False</msg>
<status endtime="20170810 04:36:29.887" starttime="20170810 04:36:29.512" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170810 04:36:29.912" level="INFO">Length is 10</msg>
<status endtime="20170810 04:36:29.912" starttime="20170810 04:36:29.912" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170810 04:36:29.924" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170810 04:36:32.924" level="INFO">${RC} = 0</msg>
<msg timestamp="20170810 04:36:32.924" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.844 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.598 ms
64 bytes from 9.3.86.161: icmp_se...</msg>
<status endtime="20170810 04:36:32.924" starttime="20170810 04:36:29.912" status="PASS"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170810 04:36:32.927" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.844 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.598 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.567 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=1.29 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.567/0.826/1.298/0.294 ms</msg>
<status endtime="20170810 04:36:32.927" starttime="20170810 04:36:32.926" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20170810 04:36:32.928" starttime="20170810 04:36:32.928" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:32.929" starttime="20170810 04:36:29.911" status="PASS"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170810 04:36:32.942" level="INFO">${cur_time} = 2017-08-10 04:36:32:941804</msg>
<status endtime="20170810 04:36:32.942" starttime="20170810 04:36:32.942" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170810 04:36:32.943" level="INFO">${cur_time} = 20170810043632941804</msg>
<status endtime="20170810 04:36:32.943" starttime="20170810 04:36:32.942" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:32.943" starttime="20170810 04:36:32.941" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:32.943" level="INFO">${FFDC_TIME} = 20170810043632941804</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170810 04:36:32.954" level="INFO">${suite_name} = TestsTestBasicPoweron</msg>
<status endtime="20170810 04:36:32.954" starttime="20170810 04:36:32.953" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170810 04:36:32.954" level="INFO">${suite_name} = 20170810043632941804_TestsTestBasicPoweron</msg>
<status endtime="20170810 04:36:32.954" starttime="20170810 04:36:32.954" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170810 04:36:32.955" level="INFO">${test_name} = PowerOnTest</msg>
<status endtime="20170810 04:36:32.955" starttime="20170810 04:36:32.955" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170810 04:36:32.955" level="INFO">${test_name} = 20170810043632941804_PowerOnTest</msg>
<status endtime="20170810 04:36:32.955" starttime="20170810 04:36:32.955" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:32.956" starttime="20170810 04:36:32.953" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:32.956" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/</msg>
<msg timestamp="20170810 04:36:32.957" level="INFO">${FFDC_PREFIX} = 20170810043632941804_</msg>
<msg timestamp="20170810 04:36:32.977" level="INFO">${LOG_PREFIX} = /tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:36:32.979" level="INFO">Created directory '&lt;a href="file:///tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest"&gt;/tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest&lt;/a&gt;'.</msg>
<status endtime="20170810 04:36:32.979" starttime="20170810 04:36:32.977" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:32.986" level="INFO">${FFDC_FILE_PATH} = /tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:36:33.006" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt"&gt;/tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:36:33.006" starttime="20170810 04:36:33.005" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:33.006" starttime="20170810 04:36:33.005" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:36:33.007" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt"&gt;/tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:36:33.008" starttime="20170810 04:36:33.007" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:33.008" starttime="20170810 04:36:33.007" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:36:33.009" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt"&gt;/tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:36:33.009" starttime="20170810 04:36:33.008" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:33.009" starttime="20170810 04:36:33.008" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:36:33.011" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt"&gt;/tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:36:33.011" starttime="20170810 04:36:33.010" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:33.011" starttime="20170810 04:36:33.009" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:36:33.012" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt"&gt;/tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:36:33.012" starttime="20170810 04:36:33.011" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:33.012" starttime="20170810 04:36:33.011" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:36:33.013" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt"&gt;/tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:36:33.013" starttime="20170810 04:36:33.013" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:33.013" starttime="20170810 04:36:33.012" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:36:33.015" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt"&gt;/tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:36:33.015" starttime="20170810 04:36:33.014" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:33.015" starttime="20170810 04:36:33.014" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:36:33.016" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt"&gt;/tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:36:33.016" starttime="20170810 04:36:33.016" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:33.016" starttime="20170810 04:36:33.015" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:36:33.017" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt"&gt;/tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:36:33.017" starttime="20170810 04:36:33.017" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:33.017" starttime="20170810 04:36:33.016" status="PASS"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:36:33.019" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt"&gt;/tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:36:33.019" starttime="20170810 04:36:33.019" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:33.019" starttime="20170810 04:36:33.018" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:36:33.020" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt"&gt;/tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:36:33.020" starttime="20170810 04:36:33.020" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:33.020" starttime="20170810 04:36:33.019" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:36:33.021" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt"&gt;/tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:36:33.022" starttime="20170810 04:36:33.021" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:33.022" starttime="20170810 04:36:33.020" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:36:33.023" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt"&gt;/tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:36:33.023" starttime="20170810 04:36:33.023" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:33.023" starttime="20170810 04:36:33.022" status="PASS"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170810 04:36:33.052" level="INFO">width=80
path_separator=/
height=24
port=22
prompt=# 
alias=bmc_connection
index=1
encoding=UTF-8
host=9.3.86.161
newline=

timeout=25 seconds
term_type=vt100</msg>
<msg timestamp="20170810 04:36:33.053" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170810 04:36:33.164" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170810 04:36:33.174" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170810 04:36:33.174" level="INFO">${stderr} = </msg>
<msg timestamp="20170810 04:36:33.174" level="INFO">${rc} = 0</msg>
<status endtime="20170810 04:36:33.174" starttime="20170810 04:36:33.024" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170810 04:36:33.174" level="INFO">Length is 0</msg>
<status endtime="20170810 04:36:33.175" starttime="20170810 04:36:33.174" status="PASS"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170810 04:36:33.175" level="INFO">Length is 11</msg>
<status endtime="20170810 04:36:33.175" starttime="20170810 04:36:33.175" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:33.175" level="INFO">${model_name} = Witherspoon</msg>
<status endtime="20170810 04:36:33.175" starttime="20170810 04:36:33.023" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:36:33.177" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt"&gt;/tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:36:33.177" starttime="20170810 04:36:33.176" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:33.177" starttime="20170810 04:36:33.175" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:33.177" starttime="20170810 04:36:33.018" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:36:33.178" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt"&gt;/tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:36:33.178" starttime="20170810 04:36:33.178" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:33.178" starttime="20170810 04:36:33.177" status="PASS"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170810 04:36:33.179" level="INFO">@{entries} = [ DRIVER INFO | APPLICATION DATA | BMC DATA ]</msg>
<status endtime="20170810 04:36:33.179" starttime="20170810 04:36:33.178" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = DRIVER INFO" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:36:33.180" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt"&gt;/tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:36:33.180" starttime="20170810 04:36:33.180" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:33.180" starttime="20170810 04:36:33.179" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:36:33.182" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt"&gt;/tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:36:33.182" starttime="20170810 04:36:33.181" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:33.182" starttime="20170810 04:36:33.181" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:33.182" starttime="20170810 04:36:33.179" status="PASS"></status>
</kw>
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:36:33.183" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt"&gt;/tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:36:33.183" starttime="20170810 04:36:33.183" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:33.183" starttime="20170810 04:36:33.182" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:36:33.184" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt"&gt;/tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:36:33.184" starttime="20170810 04:36:33.184" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:33.184" starttime="20170810 04:36:33.183" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:33.185" starttime="20170810 04:36:33.182" status="PASS"></status>
</kw>
<kw name="${index} = BMC DATA" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:36:33.186" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt"&gt;/tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:36:33.186" starttime="20170810 04:36:33.185" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:33.186" starttime="20170810 04:36:33.185" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:36:33.187" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt"&gt;/tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:36:33.188" starttime="20170810 04:36:33.187" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:33.188" starttime="20170810 04:36:33.186" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:33.188" starttime="20170810 04:36:33.185" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:33.188" starttime="20170810 04:36:33.179" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:36:33.189" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt"&gt;/tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:36:33.189" starttime="20170810 04:36:33.188" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:33.189" starttime="20170810 04:36:33.188" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:33.189" starttime="20170810 04:36:33.004" status="PASS"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170810 04:36:33.195" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status endtime="20170810 04:36:33.195" starttime="20170810 04:36:33.195" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC LOGS" type="foritem">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170810 04:36:33.197" level="INFO">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Core Files', 'SCP Coredump Files') | ('OS FFDC', 'OS FFDC Files') | ('SEL Log', 'Collect eSEL Log') | ('Get Request FFDC', 'BMC FFDC Get Requests') |...</msg>
<status endtime="20170810 04:36:33.197" starttime="20170810 04:36:33.197" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status endtime="20170810 04:36:33.198" starttime="20170810 04:36:33.198" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:33.199" level="INFO">@{ffdc_function_list} = [ FFDC Generic Report | Core Files | OS FFDC | SEL Log | Get Request FFDC | BMC Specific Files ]</msg>
<status endtime="20170810 04:36:33.199" starttime="20170810 04:36:33.198" status="PASS"></status>
</kw>
<kw name="${method} IN [ @{method_list} ]" type="for">
<kw name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170810 04:36:33.201" starttime="20170810 04:36:33.200" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:33.201" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:36:33.201" level="INFO">${ret_values} = None</msg>
<status endtime="20170810 04:36:33.201" starttime="20170810 04:36:33.200" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170810 04:36:33.201" starttime="20170810 04:36:33.201" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170810 04:36:33.228" level="INFO">@{entries} = [ DRIVER INFO | APPLICATION DATA | BMC DATA ]</msg>
<status endtime="20170810 04:36:33.228" starttime="20170810 04:36:33.227" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = DRIVER INFO" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170810 04:36:33.229" level="INFO">@{cmd_list} = [ ('FW Level', 'cat /etc/os-release') ]</msg>
<status endtime="20170810 04:36:33.229" starttime="20170810 04:36:33.228" status="PASS"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170810 04:36:33.237" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status endtime="20170810 04:36:33.237" starttime="20170810 04:36:33.229" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('FW Level', 'cat /etc/os-release')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:36:33.246" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt"&gt;/tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:36:33.246" starttime="20170810 04:36:33.245" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:33.246" starttime="20170810 04:36:33.245" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:36:33.247" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt"&gt;/tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:36:33.248" starttime="20170810 04:36:33.247" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:33.248" starttime="20170810 04:36:33.246" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:36:33.249" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt"&gt;/tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:36:33.249" starttime="20170810 04:36:33.248" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:33.249" starttime="20170810 04:36:33.248" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:36:33.250" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt"&gt;/tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:36:33.250" starttime="20170810 04:36:33.250" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:33.250" starttime="20170810 04:36:33.249" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:33.250" starttime="20170810 04:36:33.239" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:33.251" starttime="20170810 04:36:33.238" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 04:36:33.251" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status endtime="20170810 04:36:33.251" starttime="20170810 04:36:33.251" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170810 04:36:33.318" level="INFO">width=80
path_separator=/
height=24
port=22
prompt=# 
alias=bmc_connection
index=1
encoding=UTF-8
host=9.3.86.161
newline=

timeout=25 seconds
term_type=vt100</msg>
<msg timestamp="20170810 04:36:33.319" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170810 04:36:33.398" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170810 04:36:33.398" starttime="20170810 04:36:33.282" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:33.398" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:36:33.398" level="INFO">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.8-210"\nVERSION_ID="v1.99.8-210-gcdcb10f"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC...</msg>
<status endtime="20170810 04:36:33.398" starttime="20170810 04:36:33.252" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170810 04:36:33.399" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.8-210"
VERSION_ID="v1.99.8-210-gcdcb10f"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Projec...</msg>
<status endtime="20170810 04:36:33.399" starttime="20170810 04:36:33.399" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 04:36:33.399" level="INFO">${stderr} = </msg>
<status endtime="20170810 04:36:33.399" starttime="20170810 04:36:33.399" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:36:33.406" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt"&gt;/tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:36:33.407" starttime="20170810 04:36:33.406" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:33.407" starttime="20170810 04:36:33.405" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:33.407" starttime="20170810 04:36:33.400" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:33.407" starttime="20170810 04:36:33.237" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:33.407" starttime="20170810 04:36:33.237" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:33.407" starttime="20170810 04:36:33.237" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:33.407" starttime="20170810 04:36:33.228" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:33.407" starttime="20170810 04:36:33.228" status="PASS"></status>
</kw>
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170810 04:36:33.408" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status endtime="20170810 04:36:33.408" starttime="20170810 04:36:33.408" status="PASS"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170810 04:36:33.409" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status endtime="20170810 04:36:33.409" starttime="20170810 04:36:33.409" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:36:33.413" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt"&gt;/tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:36:33.413" starttime="20170810 04:36:33.412" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:33.413" starttime="20170810 04:36:33.412" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:36:33.414" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt"&gt;/tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:36:33.414" starttime="20170810 04:36:33.414" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:33.414" starttime="20170810 04:36:33.413" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:36:33.415" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt"&gt;/tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:36:33.415" starttime="20170810 04:36:33.415" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:33.416" starttime="20170810 04:36:33.414" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:36:33.417" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt"&gt;/tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:36:33.417" starttime="20170810 04:36:33.416" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:33.417" starttime="20170810 04:36:33.416" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:33.417" starttime="20170810 04:36:33.411" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:33.417" starttime="20170810 04:36:33.410" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 04:36:33.418" level="INFO">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status endtime="20170810 04:36:33.418" starttime="20170810 04:36:33.417" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170810 04:36:33.485" level="INFO">width=80
path_separator=/
height=24
port=22
prompt=# 
alias=bmc_connection
index=1
encoding=UTF-8
host=9.3.86.161
newline=

timeout=25 seconds
term_type=vt100</msg>
<msg timestamp="20170810 04:36:33.486" level="INFO">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg timestamp="20170810 04:36:35.023" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170810 04:36:35.023" starttime="20170810 04:36:33.450" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:35.023" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:36:35.024" level="INFO">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState.R...</msg>
<status endtime="20170810 04:36:35.024" starttime="20170810 04:36:33.418" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170810 04:36:35.024" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Runnin...</msg>
<status endtime="20170810 04:36:35.024" starttime="20170810 04:36:35.024" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 04:36:35.025" level="INFO">${stderr} = </msg>
<status endtime="20170810 04:36:35.025" starttime="20170810 04:36:35.025" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:36:35.031" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt"&gt;/tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:36:35.031" starttime="20170810 04:36:35.031" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:35.032" starttime="20170810 04:36:35.030" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:35.032" starttime="20170810 04:36:35.025" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:35.032" starttime="20170810 04:36:33.410" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:35.032" starttime="20170810 04:36:33.409" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:35.032" starttime="20170810 04:36:33.409" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:35.032" starttime="20170810 04:36:33.408" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:35.032" starttime="20170810 04:36:33.407" status="PASS"></status>
</kw>
<kw name="${index} = BMC DATA" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170810 04:36:35.033" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC OS', 'uname -a') | ('BMC File System Disk Space Usage', 'df -hT') ]</msg>
<status endtime="20170810 04:36:35.033" starttime="20170810 04:36:35.033" status="PASS"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170810 04:36:35.034" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status endtime="20170810 04:36:35.034" starttime="20170810 04:36:35.033" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC Uptime', 'uptime')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:36:35.037" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt"&gt;/tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:36:35.037" starttime="20170810 04:36:35.037" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:35.038" starttime="20170810 04:36:35.036" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:36:35.039" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt"&gt;/tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:36:35.039" starttime="20170810 04:36:35.038" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:35.039" starttime="20170810 04:36:35.038" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:36:35.040" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt"&gt;/tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:36:35.040" starttime="20170810 04:36:35.040" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:35.040" starttime="20170810 04:36:35.039" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:36:35.041" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt"&gt;/tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:36:35.041" starttime="20170810 04:36:35.041" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:35.042" starttime="20170810 04:36:35.040" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:35.042" starttime="20170810 04:36:35.035" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:35.042" starttime="20170810 04:36:35.035" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 04:36:35.042" level="INFO">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status endtime="20170810 04:36:35.042" starttime="20170810 04:36:35.042" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170810 04:36:35.109" level="INFO">width=80
path_separator=/
height=24
port=22
prompt=# 
alias=bmc_connection
index=1
encoding=UTF-8
host=9.3.86.161
newline=

timeout=25 seconds
term_type=vt100</msg>
<msg timestamp="20170810 04:36:35.109" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170810 04:36:35.166" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170810 04:36:35.166" starttime="20170810 04:36:35.073" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:35.166" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:36:35.166" level="INFO">${ret_values} = (u' 04:36:40 up 16 min,  load average: 0.76, 0.75, 0.71', u'', 0)</msg>
<status endtime="20170810 04:36:35.166" starttime="20170810 04:36:35.043" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170810 04:36:35.167" level="INFO">${stdout} =  04:36:40 up 16 min,  load average: 0.76, 0.75, 0.71</msg>
<status endtime="20170810 04:36:35.167" starttime="20170810 04:36:35.166" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 04:36:35.167" level="INFO">${stderr} = </msg>
<status endtime="20170810 04:36:35.167" starttime="20170810 04:36:35.167" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:36:35.174" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt"&gt;/tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:36:35.174" starttime="20170810 04:36:35.173" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:35.174" starttime="20170810 04:36:35.173" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:35.174" starttime="20170810 04:36:35.168" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:35.174" starttime="20170810 04:36:35.034" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:35.174" starttime="20170810 04:36:35.034" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC OS', 'uname -a')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:36:35.177" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt"&gt;/tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:36:35.177" starttime="20170810 04:36:35.177" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:35.177" starttime="20170810 04:36:35.176" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:36:35.178" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt"&gt;/tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:36:35.179" starttime="20170810 04:36:35.178" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:35.179" starttime="20170810 04:36:35.177" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:36:35.180" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt"&gt;/tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:36:35.180" starttime="20170810 04:36:35.179" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:35.180" starttime="20170810 04:36:35.179" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:36:35.181" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt"&gt;/tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:36:35.182" starttime="20170810 04:36:35.181" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:35.182" starttime="20170810 04:36:35.181" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:35.182" starttime="20170810 04:36:35.176" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:35.182" starttime="20170810 04:36:35.175" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 04:36:35.183" level="INFO">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status endtime="20170810 04:36:35.183" starttime="20170810 04:36:35.182" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170810 04:36:35.249" level="INFO">width=80
path_separator=/
height=24
port=22
prompt=# 
alias=bmc_connection
index=1
encoding=UTF-8
host=9.3.86.161
newline=

timeout=25 seconds
term_type=vt100</msg>
<msg timestamp="20170810 04:36:35.250" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170810 04:36:35.306" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170810 04:36:35.306" starttime="20170810 04:36:35.214" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:35.306" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:36:35.307" level="INFO">${ret_values} = (u'Linux witherspoon 4.10.17-77fdabc2fd388455a01efc4f6dae54ca0f863020 #1 Thu Aug 10 03:57:45 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status endtime="20170810 04:36:35.307" starttime="20170810 04:36:35.183" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170810 04:36:35.307" level="INFO">${stdout} = Linux witherspoon 4.10.17-77fdabc2fd388455a01efc4f6dae54ca0f863020 #1 Thu Aug 10 03:57:45 UTC 2017 armv6l GNU/Linux</msg>
<status endtime="20170810 04:36:35.307" starttime="20170810 04:36:35.307" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 04:36:35.308" level="INFO">${stderr} = </msg>
<status endtime="20170810 04:36:35.308" starttime="20170810 04:36:35.307" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:36:35.314" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt"&gt;/tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:36:35.314" starttime="20170810 04:36:35.314" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:35.314" starttime="20170810 04:36:35.313" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:35.314" starttime="20170810 04:36:35.308" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:35.315" starttime="20170810 04:36:35.175" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:35.315" starttime="20170810 04:36:35.174" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:36:35.317" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt"&gt;/tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:36:35.318" starttime="20170810 04:36:35.317" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:35.318" starttime="20170810 04:36:35.317" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:36:35.319" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt"&gt;/tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:36:35.319" starttime="20170810 04:36:35.319" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:35.319" starttime="20170810 04:36:35.318" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:36:35.320" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt"&gt;/tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:36:35.320" starttime="20170810 04:36:35.320" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:35.320" starttime="20170810 04:36:35.319" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:36:35.321" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt"&gt;/tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:36:35.322" starttime="20170810 04:36:35.321" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:35.322" starttime="20170810 04:36:35.321" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:35.322" starttime="20170810 04:36:35.316" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:35.322" starttime="20170810 04:36:35.316" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 04:36:35.323" level="INFO">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status endtime="20170810 04:36:35.323" starttime="20170810 04:36:35.322" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170810 04:36:35.390" level="INFO">width=80
path_separator=/
height=24
port=22
prompt=# 
alias=bmc_connection
index=1
encoding=UTF-8
host=9.3.86.161
newline=

timeout=25 seconds
term_type=vt100</msg>
<msg timestamp="20170810 04:36:35.391" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170810 04:36:35.447" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170810 04:36:35.447" starttime="20170810 04:36:35.354" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:35.448" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:36:35.448" level="INFO">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\ndev                  devtmpfs      210.2M         0    210.2M   0% /dev\ntmpfs                tmpfs         211.1M    ...</msg>
<status endtime="20170810 04:36:35.448" starttime="20170810 04:36:35.323" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170810 04:36:35.448" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     14.1...</msg>
<status endtime="20170810 04:36:35.448" starttime="20170810 04:36:35.448" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 04:36:35.449" level="INFO">${stderr} = </msg>
<status endtime="20170810 04:36:35.449" starttime="20170810 04:36:35.449" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:36:35.457" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt"&gt;/tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:36:35.457" starttime="20170810 04:36:35.456" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:35.457" starttime="20170810 04:36:35.455" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:35.457" starttime="20170810 04:36:35.449" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:35.457" starttime="20170810 04:36:35.315" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:35.457" starttime="20170810 04:36:35.315" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:35.457" starttime="20170810 04:36:35.034" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:35.457" starttime="20170810 04:36:35.032" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:35.457" starttime="20170810 04:36:35.032" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:35.457" starttime="20170810 04:36:33.228" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:35.458" starttime="20170810 04:36:33.227" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:35.458" starttime="20170810 04:36:33.201" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:35.458" starttime="20170810 04:36:33.199" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:35.458" starttime="20170810 04:36:33.199" status="PASS"></status>
</kw>
<kw name="${method} = ('Core Files', 'SCP Coredump Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170810 04:36:35.460" starttime="20170810 04:36:35.459" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:35.460" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:36:35.460" level="INFO">${ret_values} = None</msg>
<status endtime="20170810 04:36:35.460" starttime="20170810 04:36:35.459" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170810 04:36:35.460" starttime="20170810 04:36:35.460" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170810 04:36:35.517" level="INFO">width=80
path_separator=/
height=24
port=22
prompt=# 
alias=bmc_connection
index=1
encoding=UTF-8
host=9.3.86.161
newline=

timeout=25 seconds
term_type=vt100</msg>
<msg timestamp="20170810 04:36:35.518" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170810 04:36:35.574" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170810 04:36:35.586" level="INFO">${core_files} = /tmp/core_ipmid.1148
/tmp/core_ipmid.1570
/tmp/core_openpower-occ-c.1107
/tmp/core_openpower-occ-c.1559
/tmp/core_openpower-occ-c.1561
/tmp/core_openpower-occ-c.1563
/tmp/core_openpower-occ-c.1565
/tm...</msg>
<msg timestamp="20170810 04:36:35.586" level="INFO">${stderr} = </msg>
<msg timestamp="20170810 04:36:35.586" level="INFO">${rc} = 0</msg>
<status endtime="20170810 04:36:35.586" starttime="20170810 04:36:35.486" status="PASS"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170810 04:36:35.586" level="INFO">@{core_list} = [ /tmp/core_ipmid.1148 | /tmp/core_ipmid.1570 | /tmp/core_openpower-occ-c.1107 | /tmp/core_openpower-occ-c.1559 | /tmp/core_openpower-occ-c.1561 | /tmp/core_openpower-occ-c.1563 | /tmp/core_openpower-...</msg>
<status endtime="20170810 04:36:35.587" starttime="20170810 04:36:35.586" status="PASS"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status endtime="20170810 04:36:35.603" starttime="20170810 04:36:35.597" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status endtime="20170810 04:36:36.340" starttime="20170810 04:36:35.605" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:36.340" starttime="20170810 04:36:35.604" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:36.340" starttime="20170810 04:36:35.603" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:36.340" starttime="20170810 04:36:35.596" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:36.340" starttime="20170810 04:36:35.587" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{core_list} ]" type="for">
<kw name="${index} = /tmp/core_ipmid.1148" type="foritem">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170810 04:36:36.693" starttime="20170810 04:36:36.341" status="PASS"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg timestamp="20170810 04:36:36.726" level="INFO">width=80
path_separator=/
height=24
port=22
prompt=# 
alias=bmc_connection
index=1
encoding=UTF-8
host=9.3.86.161
newline=

timeout=25 seconds
term_type=vt100</msg>
<msg timestamp="20170810 04:36:36.726" level="INFO">Executing command 'rm /tmp/core_ipmid.1148'.</msg>
<msg timestamp="20170810 04:36:36.854" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170810 04:36:36.865" starttime="20170810 04:36:36.693" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:36.865" starttime="20170810 04:36:36.340" status="PASS"></status>
</kw>
<kw name="${index} = /tmp/core_ipmid.1570" type="foritem">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170810 04:36:37.336" starttime="20170810 04:36:36.866" status="PASS"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg timestamp="20170810 04:36:37.377" level="INFO">width=80
path_separator=/
height=24
port=22
prompt=# 
alias=bmc_connection
index=1
encoding=UTF-8
host=9.3.86.161
newline=

timeout=25 seconds
term_type=vt100</msg>
<msg timestamp="20170810 04:36:37.377" level="INFO">Executing command 'rm /tmp/core_ipmid.1570'.</msg>
<msg timestamp="20170810 04:36:37.445" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170810 04:36:37.457" starttime="20170810 04:36:37.337" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:37.457" starttime="20170810 04:36:36.865" status="PASS"></status>
</kw>
<kw name="${index} = /tmp/core_openpower-occ-c.1107" type="foritem">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170810 04:36:37.721" starttime="20170810 04:36:37.457" status="PASS"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg timestamp="20170810 04:36:37.755" level="INFO">width=80
path_separator=/
height=24
port=22
prompt=# 
alias=bmc_connection
index=1
encoding=UTF-8
host=9.3.86.161
newline=

timeout=25 seconds
term_type=vt100</msg>
<msg timestamp="20170810 04:36:37.755" level="INFO">Executing command 'rm /tmp/core_openpower-occ-c.1107'.</msg>
<msg timestamp="20170810 04:36:37.811" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170810 04:36:37.823" starttime="20170810 04:36:37.722" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:37.823" starttime="20170810 04:36:37.457" status="PASS"></status>
</kw>
<kw name="${index} = /tmp/core_openpower-occ-c.1559" type="foritem">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170810 04:36:38.138" starttime="20170810 04:36:37.824" status="PASS"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg timestamp="20170810 04:36:38.172" level="INFO">width=80
path_separator=/
height=24
port=22
prompt=# 
alias=bmc_connection
index=1
encoding=UTF-8
host=9.3.86.161
newline=

timeout=25 seconds
term_type=vt100</msg>
<msg timestamp="20170810 04:36:38.172" level="INFO">Executing command 'rm /tmp/core_openpower-occ-c.1559'.</msg>
<msg timestamp="20170810 04:36:38.249" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170810 04:36:38.261" starttime="20170810 04:36:38.139" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:38.261" starttime="20170810 04:36:37.824" status="PASS"></status>
</kw>
<kw name="${index} = /tmp/core_openpower-occ-c.1561" type="foritem">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170810 04:36:38.595" starttime="20170810 04:36:38.261" status="PASS"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg timestamp="20170810 04:36:38.628" level="INFO">width=80
path_separator=/
height=24
port=22
prompt=# 
alias=bmc_connection
index=1
encoding=UTF-8
host=9.3.86.161
newline=

timeout=25 seconds
term_type=vt100</msg>
<msg timestamp="20170810 04:36:38.629" level="INFO">Executing command 'rm /tmp/core_openpower-occ-c.1561'.</msg>
<msg timestamp="20170810 04:36:38.685" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170810 04:36:38.697" starttime="20170810 04:36:38.595" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:38.697" starttime="20170810 04:36:38.261" status="PASS"></status>
</kw>
<kw name="${index} = /tmp/core_openpower-occ-c.1563" type="foritem">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170810 04:36:38.967" starttime="20170810 04:36:38.698" status="PASS"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg timestamp="20170810 04:36:39.003" level="INFO">width=80
path_separator=/
height=24
port=22
prompt=# 
alias=bmc_connection
index=1
encoding=UTF-8
host=9.3.86.161
newline=

timeout=25 seconds
term_type=vt100</msg>
<msg timestamp="20170810 04:36:39.003" level="INFO">Executing command 'rm /tmp/core_openpower-occ-c.1563'.</msg>
<msg timestamp="20170810 04:36:39.051" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170810 04:36:39.062" starttime="20170810 04:36:38.968" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:39.062" starttime="20170810 04:36:38.697" status="PASS"></status>
</kw>
<kw name="${index} = /tmp/core_openpower-occ-c.1565" type="foritem">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170810 04:36:39.322" starttime="20170810 04:36:39.063" status="PASS"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg timestamp="20170810 04:36:39.357" level="INFO">width=80
path_separator=/
height=24
port=22
prompt=# 
alias=bmc_connection
index=1
encoding=UTF-8
host=9.3.86.161
newline=

timeout=25 seconds
term_type=vt100</msg>
<msg timestamp="20170810 04:36:39.358" level="INFO">Executing command 'rm /tmp/core_openpower-occ-c.1565'.</msg>
<msg timestamp="20170810 04:36:39.424" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170810 04:36:39.436" starttime="20170810 04:36:39.322" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:39.436" starttime="20170810 04:36:39.063" status="PASS"></status>
</kw>
<kw name="${index} = /tmp/core_openpower-occ-c.1567" type="foritem">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170810 04:36:39.796" starttime="20170810 04:36:39.436" status="PASS"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg timestamp="20170810 04:36:39.829" level="INFO">width=80
path_separator=/
height=24
port=22
prompt=# 
alias=bmc_connection
index=1
encoding=UTF-8
host=9.3.86.161
newline=

timeout=25 seconds
term_type=vt100</msg>
<msg timestamp="20170810 04:36:39.829" level="INFO">Executing command 'rm /tmp/core_openpower-occ-c.1567'.</msg>
<msg timestamp="20170810 04:36:39.886" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170810 04:36:39.898" starttime="20170810 04:36:39.796" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:39.899" starttime="20170810 04:36:39.436" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:39.899" starttime="20170810 04:36:36.340" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:39.899" starttime="20170810 04:36:35.485" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:39.899" starttime="20170810 04:36:35.461" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:39.899" starttime="20170810 04:36:35.458" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:39.899" starttime="20170810 04:36:35.458" status="PASS"></status>
</kw>
<kw name="${method} = ('OS FFDC', 'OS FFDC Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170810 04:36:39.902" starttime="20170810 04:36:39.901" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:39.902" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:36:39.902" level="INFO">${ret_values} = None</msg>
<status endtime="20170810 04:36:39.902" starttime="20170810 04:36:39.901" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170810 04:36:39.903" starttime="20170810 04:36:39.903" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170810 04:36:39.929" level="INFO">Returning from the enclosing user keyword.</msg>
<status endtime="20170810 04:36:39.929" starttime="20170810 04:36:39.929" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:39.930" starttime="20170810 04:36:39.928" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:39.930" starttime="20170810 04:36:39.903" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:39.930" starttime="20170810 04:36:39.900" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:39.930" starttime="20170810 04:36:39.899" status="PASS"></status>
</kw>
<kw name="${method} = ('SEL Log', 'Collect eSEL Log')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170810 04:36:39.932" starttime="20170810 04:36:39.931" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:39.932" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:36:39.932" level="INFO">${ret_values} = None</msg>
<status endtime="20170810 04:36:39.932" starttime="20170810 04:36:39.931" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170810 04:36:39.932" starttime="20170810 04:36:39.932" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:36:39.961" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:36:39.961" starttime="20170810 04:36:39.961" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:36:39.962" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:36:39.962" starttime="20170810 04:36:39.962" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:36:39.963" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:36:39.963" starttime="20170810 04:36:39.962" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:36:39.963" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:36:39.963" starttime="20170810 04:36:39.963" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:36:40.160" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:36:40.160" starttime="20170810 04:36:39.964" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:40.160" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:36:40.160" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:36:40.160" starttime="20170810 04:36:39.964" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:36:40.161" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:36:40.161" starttime="20170810 04:36:40.161" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:36:40.162" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:36:40.162" starttime="20170810 04:36:40.161" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:40.162" starttime="20170810 04:36:39.960" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:40.162" starttime="20170810 04:36:39.960" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:40.162" starttime="20170810 04:36:39.959" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:36:40.163" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status endtime="20170810 04:36:40.163" starttime="20170810 04:36:40.162" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170810 04:36:40.164" starttime="20170810 04:36:40.163" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:36:40.379" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170810 04:36:40.379" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:36:40.379" starttime="20170810 04:36:40.164" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170810 04:36:40.379" starttime="20170810 04:36:40.379" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:36:40.380" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:36:40.380" starttime="20170810 04:36:40.380" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:40.381" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:36:40.381" starttime="20170810 04:36:39.958" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:36:40.382" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:36:40.382" starttime="20170810 04:36:40.382" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:40.382" level="INFO">${status} = True</msg>
<status endtime="20170810 04:36:40.382" starttime="20170810 04:36:40.381" status="PASS"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<status endtime="20170810 04:36:40.383" starttime="20170810 04:36:40.383" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:36:40.384" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [], 
      "Id": 2, 
      "Message": "xyz.openbmc_project.Software.Version.Error.ManifestFileFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502338615037, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [], 
      "Id": 3, 
      "Message": "xyz.openbmc_project.Common.Error.InternalFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502338896197, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/4": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 2a 00 00 00 00 0c 29 01 da ac 00 00 00 0c 29 59 7b 9a 42 00 00 06 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 22 90 00 00 22 55 48 00 18 01 00 26 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 2a da 00 48 00 00 00 e0 00 00 0d 00 00 00 00 00 00 20 00 00 00 00 08 00 00 00 08 00 00 00 00 00 11 0d 00 00 42 43 38 41 32 41 44 41 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 04 a7 2c 00 00 c2 04 55 44 06 a8 01 00 2a 00 e7 64 01 02 da 02 00 00 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 11 0d 00 00 00 00 00 00 00 00 a9 70 e7 9c 00 01 03 80 00 00 08 00 00 00 08 00 00 00 00 00 06 a0 06 28 00 01 06 00 01 28 00 42 45 52 52 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 cc 00 00 00 00 00 00 00 cc 00 00 00 05 00 00 00 00 00 00 00 01 34 c7 7e 28 00 00 00 01 00 08 46 54 fe 36 d6 d2 00 00 01 6d 00 00 00 00 00 00 07 d0 00 00 00 24 00 00 00 05 28 42 80 0c 00 00 00 00 00 04 46 54 b3 0e 3f b6 00 00 00 95 00 00 00 00 00 00 00 20 00 00 00 05 28 db 89 e0 00 00 00 00 00 04 46 54 2d 5e d8 74 00 00 04 3d 00 00 07 dd 00 00 00 20 00 00 00 05 28 db 96 e8 00 00 00 00 00 04 46 54 5d ac e6 35 00 00 05 01 00 00 08 00 00 00 00 20 00 00 00 05 28 db a1 74 00 00 00 00 00 04 46 54 21 0e 9c fc 00 00 05 95 00 00 08 00 00 00 00 20 01 28 00 42 49 4d 50 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 9a 00 00 00 01 00 00 00 28 00 00 00 2d 00 00 00 00 00 02 33 d7 d8 ae 00 00 00 01 00 04 46 54 e8 cb 8d fb 00 00 06 a8 00 00 00 00 00 00 00 20 00 00 00 03 06 e4 ec e2 00 00 00 01 00 04 46 54 27 4f b9 f0 00 00 08 d9 00 00 00 14 00 00 00 20 00 00 00 03 06 e5 1a a4 00 00 00 01 00 04 46 54 f4 41 74 7c 00 00 04 a0 00 00 00 00 00 00 00 20 00 00 00 03 06 e5 ac 0a 00 00 00 00 00 04 46 54 86 ed 4a 46 00 00 04 d5 00 00 00 01 00 00 00 20 00 00 00 05 0f cb 10 d6 00 00 00 00 00 08 46 54 08 1c a1 13 00 00 01 d6 00 00 09 47 00 00 06 fe 00 00 00 24 00 00 00 05 28 38 05 70 00 00 00 01 00 04 46 54 46 9e d3 b9 00 00 03 ed 00 00 00 01 00 00 00 20 00 00 00 05 28 38 11 06 00 00 00 01 00 04 46 54 c2 cf d2 29 00 00 00 92 00 00 00 00 00 00 00 20 00 00 00 05 28 38 22 ee 00 00 00 01 00 04 46 54 ba 81 8b 92 00 00 00 9e 00 00 00 01 00 00 00 20 00 00 00 05 28 38 2e 18 00 00 00 01 00 04 46 54 b5 3c be bd 00 00 02 15 00 00 00 00 00 00 00 20 00 00 00 05 28 38 40 be 00 00 00 01 00 0c 46 54 13 26 d9 b4 00 00 02 7e 00 00 00 65 00 00 00 00 00 00 00 00 00 00 00 28 00 00 00 05 28 38 96 88 00 00 00 01 00 04 46 54 6d ee 36 d2 00 00 03 05 00 00 00 00 00 00 00 20 00 00 00 05 28 3a fc 9a 00 00 00 01 00 04 46 54 8f e0 a2 86 00 00 02 4c 00 00 00 03 00 00 00 20 00 00 00 05 28 3b 07 de 00 00 00 01 00 04 46 54 db d0 fb 0b 00 00 00 ad 00 00 00 00 00 00 00 20 00 00 00 05 28 3b 65 22 00 00 00 01 00 04 46 54 7d 46 50 0c 00 00 02 5b 00 00 00 01 00 00 00 20 00 00 00 05 28 3b 6f c2 00 00 00 01 00 04 46 54 d1 a6 41 80 00 00 03 fc 00 00 00 00 00 00 00 20 00 00 00 05 28 3f 29 fc 00 00 00 00 00 0c 46 54 35 1a 22 28 00 00 00 b3 00 00 00 01 00 80 00 01 00 00 00 80 00 00 00 28 00 00 00 05 28 4a 3b c2 00 00 00 00 00 04 46 54 aa 85 de d7 00 00 00 88 00 00 07 99 00 00 00 20 00 00 00 05 28 65 44 22 00 00 00 00 00 04 46 54 52 89 27 b6 00 00 00 a2 00 00 00 03 00 00 00 20 00 00 00 05 28 9e 16 6e 00 00 00 00 00 04 46 54 21 48 34 4d 00 00 05 e3 00 00 00 00 00 00 00 20 01 28 00 42 49 4e 46 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 9a 00 00 00 01 00 00 00 28 00 00 00 58 00 00 00 00 00 a5 90 60 40 00 00 00 00 20 00 00 00 05 0f be 71 e6 00 00 00 01 00 08 46 54 82 f9 8a 2b 00 00 07 86 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 05 28 2b f1 b4 00 00 00 01 00 08 46 54 8d c3 56 a3 00 00 06 10 00 00 00 00 00 00 00 03 00 00 00 24 00 00 00 05 28 42 8d 4c 00 00 00 00 00 04 46 54 8a 39 16 0d 00 00 01 2c 00 00 00 07 00 00 00 20 00 00 00 05 28 43 72 8e 00 00 00 00 00 08 46 54 d4 f8 58 37 00 00 02 57 ff f9 67 a0 00 00 06 a0 00 00 00 24 00 00 00 05 28 43 7e 78 00 00 00 00 00 10 46 54 e8 ab b6 e1 00 00 02 5a 00 00 0c 07 00 00 00 05 00 00 00 01 00 00 00 00 00 00 00 2c 00 00 00 05 28 43 89 fc 00 00 00 00 00 04 46 54 c0 fa a9 38 00 00 00 d2 00 00 00 04 00 00 00 20 00 00 00 05 28 43 e1 54 00 00 00 01 00 10 46 54 c3 58 71 12 00 00 02 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 05 28 43 ed 5a 00 00 00 01 00 08 46 54 f1 ba 3e 82 00 00 02 0d 00 00 00 00 00 00 00 03 00 00 00 24 00 00 00 05 28 43 f9 b8 00 00 00 01 00 10 46 54 2f da c9 3b 00 00 02 1c 00 00 00 00 00 00 07 99 00 00 00 00 00 00 07 99 00 00 00 2c 00 00 00 05 28 44 05 f6 00 00 00 01 00 10 46 54 72 31 8e 42 00 00 02 20 00 00 00 00 00 00 09 47 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 28 44 11 8a 00 00 00 01 00 10 46 54 e0 df 31 f7 00 00 02 24 00 00 00 00 00 00 00 64 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 28 ad 23 ca 00 00 00 00 00 04 46 54 cc 4c c9 f7 00 00 00 c2 00 00 00 ff 00 00 00 20 00 00 00 05 28 db b0 e4 00 00 00 00 00 04 46 54 dc 8e 1c 44 00 00 05 1a 00 00 10 00 00 00 00 20 00 00 00 05 28 db be fa 00 00 00 00 00 14 46 54 f6 6a b3 d5 00 00 00 cf 00 00 00 00 00 00 07 d0 00 00 00 65 00 00 0c 1c 00 00 00 23 00 00 00 30 00 00 00 05 28 db cb e2 00 00 00 00 00 10 46 54 3f 7c 1e d4 00 00 00 eb 00 00 07 d0 00 00 0b 22 00 00 0e 64 00 00 02 1e 00 00 00 2c 00 00 00 05 28 db df 90 00 00 00 00 00 04 46 54 8a 39 16 0d 00 00 01 2c 00 00 00 00 00 00 00 20 01 04 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 55 44 00 78 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 40 43 c0 54 00 00 00 00 40 43 fb 24 00 00 00 00 40 43 b3 54 00 00 00 00 40 43 b8 c0 00 00 00 00 40 43 bc d0 00 00 00 00 40 43 be 04 00 00 00 00 40 43 6f a4 00 00 00 00 40 43 82 d4 00 00 00 00 40 43 92 c4 00 00 00 00 40 43 3d 3c 00 00 00 00 40 1a 7d 24 00 00 00 00 00 00 25 80 a6 9c 4e 80 00 20 00 00 00 00 90 00 00 00 00 00 00 00 00 00 7c 08 02 a6 fb e1 ff f8"
      ], 
      "Id": 4, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502339309569, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/4/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:36:40.384" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:36:40.385" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': {u'/xyz/openbmc_project/logging/entry/4': {u'Timestamp': 1502339309569, u'Id': 4, u'associations': [[u'callout', u'fault', u'/xyz/openbmc_project/inv...</msg>
<status endtime="20170810 04:36:40.385" starttime="20170810 04:36:40.384" status="PASS"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${content['data']}</arg>
</arguments>
<assign>
<var>${esel_list}</var>
</assign>
<msg timestamp="20170810 04:36:40.385" level="INFO">${esel_list} = [u'/xyz/openbmc_project/logging/entry/2', u'/xyz/openbmc_project/logging/entry/3', u'/xyz/openbmc_project/logging/entry/4', u'/xyz/openbmc_project/logging/entry/4/callout']</msg>
<status endtime="20170810 04:36:40.386" starttime="20170810 04:36:40.385" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>esel</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170810 04:36:40.386" level="INFO">${logpath} = /tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_esel</msg>
<status endtime="20170810 04:36:40.386" starttime="20170810 04:36:40.386" status="PASS"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${logpath}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:36:40.387" level="INFO">Created file '&lt;a href="file:///tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_esel"&gt;/tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_esel&lt;/a&gt;'.</msg>
<status endtime="20170810 04:36:40.387" starttime="20170810 04:36:40.386" status="PASS"></status>
</kw>
<kw name="${entry_path} IN [ @{esel_list} ]" type="for">
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/2" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170810 04:36:40.388" starttime="20170810 04:36:40.387" status="PASS"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:36:40.391" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:36:40.392" starttime="20170810 04:36:40.391" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:36:40.392" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:36:40.392" starttime="20170810 04:36:40.392" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:36:40.393" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:36:40.393" starttime="20170810 04:36:40.392" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:36:40.393" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:36:40.393" starttime="20170810 04:36:40.393" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:36:40.588" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:36:40.588" starttime="20170810 04:36:40.394" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:40.588" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:36:40.588" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:36:40.588" starttime="20170810 04:36:40.394" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:36:40.589" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:36:40.589" starttime="20170810 04:36:40.588" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:36:40.589" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:36:40.589" starttime="20170810 04:36:40.589" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:40.590" starttime="20170810 04:36:40.390" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:40.590" starttime="20170810 04:36:40.390" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:40.590" starttime="20170810 04:36:40.389" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:36:40.590" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/2/attr/AdditionalData</msg>
<status endtime="20170810 04:36:40.591" starttime="20170810 04:36:40.590" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170810 04:36:40.591" starttime="20170810 04:36:40.591" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:36:40.697" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/2/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170810 04:36:40.697" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:36:40.697" starttime="20170810 04:36:40.591" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170810 04:36:40.698" starttime="20170810 04:36:40.698" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:36:40.698" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:36:40.699" starttime="20170810 04:36:40.698" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:40.699" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:36:40.699" starttime="20170810 04:36:40.389" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:36:40.699" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:36:40.699" starttime="20170810 04:36:40.699" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:36:40.700" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:36:40.700" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:36:40.700" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': []}</msg>
<status endtime="20170810 04:36:40.700" starttime="20170810 04:36:40.700" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:40.700" level="INFO">${esel_data} = []</msg>
<status endtime="20170810 04:36:40.700" starttime="20170810 04:36:40.388" status="PASS"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170810 04:36:40.701" level="INFO">Length is 0</msg>
<msg timestamp="20170810 04:36:40.701" level="INFO">${length} = 0</msg>
<status endtime="20170810 04:36:40.701" starttime="20170810 04:36:40.701" status="PASS"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170810 04:36:40.702" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170810 04:36:40.702" starttime="20170810 04:36:40.702" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:40.702" starttime="20170810 04:36:40.387" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/3" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170810 04:36:40.704" starttime="20170810 04:36:40.703" status="PASS"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:36:40.709" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:36:40.709" starttime="20170810 04:36:40.708" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:36:40.710" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:36:40.710" starttime="20170810 04:36:40.709" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:36:40.711" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:36:40.711" starttime="20170810 04:36:40.710" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:36:40.712" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:36:40.712" starttime="20170810 04:36:40.711" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:36:41.006" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:36:41.006" starttime="20170810 04:36:40.713" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:41.006" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:36:41.006" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:36:41.006" starttime="20170810 04:36:40.712" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:36:41.007" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:36:41.007" starttime="20170810 04:36:41.007" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:36:41.008" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:36:41.008" starttime="20170810 04:36:41.008" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:41.008" starttime="20170810 04:36:40.707" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:41.008" starttime="20170810 04:36:40.707" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:41.008" starttime="20170810 04:36:40.706" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:36:41.009" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/3/attr/AdditionalData</msg>
<status endtime="20170810 04:36:41.009" starttime="20170810 04:36:41.009" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170810 04:36:41.010" starttime="20170810 04:36:41.009" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:36:41.114" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/3/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170810 04:36:41.114" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:36:41.114" starttime="20170810 04:36:41.010" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170810 04:36:41.114" starttime="20170810 04:36:41.114" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:36:41.115" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:36:41.115" starttime="20170810 04:36:41.115" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:41.115" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:36:41.115" starttime="20170810 04:36:40.705" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:36:41.116" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:36:41.116" starttime="20170810 04:36:41.116" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:36:41.117" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:36:41.117" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:36:41.117" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': []}</msg>
<status endtime="20170810 04:36:41.118" starttime="20170810 04:36:41.117" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:41.118" level="INFO">${esel_data} = []</msg>
<status endtime="20170810 04:36:41.118" starttime="20170810 04:36:40.704" status="PASS"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170810 04:36:41.119" level="INFO">Length is 0</msg>
<msg timestamp="20170810 04:36:41.119" level="INFO">${length} = 0</msg>
<status endtime="20170810 04:36:41.119" starttime="20170810 04:36:41.118" status="PASS"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170810 04:36:41.120" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170810 04:36:41.120" starttime="20170810 04:36:41.119" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:41.120" starttime="20170810 04:36:40.703" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/4" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170810 04:36:41.121" starttime="20170810 04:36:41.120" status="PASS"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:36:41.124" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:36:41.125" starttime="20170810 04:36:41.124" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:36:41.125" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:36:41.125" starttime="20170810 04:36:41.125" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:36:41.126" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:36:41.126" starttime="20170810 04:36:41.125" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:36:41.126" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:36:41.126" starttime="20170810 04:36:41.126" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:36:41.310" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:36:41.310" starttime="20170810 04:36:41.127" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:41.310" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:36:41.310" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:36:41.310" starttime="20170810 04:36:41.127" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:36:41.311" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:36:41.311" starttime="20170810 04:36:41.311" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:36:41.312" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:36:41.312" starttime="20170810 04:36:41.311" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:41.312" starttime="20170810 04:36:41.123" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:41.312" starttime="20170810 04:36:41.123" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:41.312" starttime="20170810 04:36:41.122" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:36:41.313" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/4/attr/AdditionalData</msg>
<status endtime="20170810 04:36:41.313" starttime="20170810 04:36:41.312" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170810 04:36:41.313" starttime="20170810 04:36:41.313" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:36:41.420" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/4/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170810 04:36:41.421" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:36:41.421" starttime="20170810 04:36:41.314" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170810 04:36:41.422" starttime="20170810 04:36:41.421" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:36:41.422" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:36:41.422" starttime="20170810 04:36:41.422" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:41.423" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:36:41.423" starttime="20170810 04:36:41.122" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:36:41.424" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:36:41.424" starttime="20170810 04:36:41.423" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:36:41.425" level="INFO">To JSON using : content={
  "data": [
    "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 2a 00 00 00 00 0c 29 01 da ac 00 00 00 0c 29 59 7b 9a 42 00 00 06 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 22 90 00 00 22 55 48 00 18 01 00 26 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 2a da 00 48 00 00 00 e0 00 00 0d 00 00 00 00 00 00 20 00 00 00 00 08 00 00 00 08 00 00 00 00 00 11 0d 00 00 42 43 38 41 32 41 44 41 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 04 a7 2c 00 00 c2 04 55 44 06 a8 01 00 2a 00 e7 64 01 02 da 02 00 00 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 11 0d 00 00 00 00 00 00 00 00 a9 70 e7 9c 00 01 03 80 00 00 08 00 00 00 08 00 00 00 00 00 06 a0 06 28 00 01 06 00 01 28 00 42 45 52 52 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 cc 00 00 00 00 00 00 00 cc 00 00 00 05 00 00 00 00 00 00 00 01 34 c7 7e 28 00 00 00 01 00 08 46 54 fe 36 d6 d2 00 00 01 6d 00 00 00 00 00 00 07 d0 00 00 00 24 00 00 00 05 28 42 80 0c 00 00 00 00 00 04 46 54 b3 0e 3f b6 00 00 00 95 00 00 00 00 00 00 00 20 00 00 00 05 28 db 89 e0 00 00 00 00 00 04 46 54 2d 5e d8 74 00 00 04 3d 00 00 07 dd 00 00 00 20 00 00 00 05 28 db 96 e8 00 00 00 00 00 04 46 54 5d ac e6 35 00 00 05 01 00 00 08 00 00 00 00 20 00 00 00 05 28 db a1 74 00 00 00 00 00 04 46 54 21 0e 9c fc 00 00 05 95 00 00 08 00 00 00 00 20 01 28 00 42 49 4d 50 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 9a 00 00 00 01 00 00 00 28 00 00 00 2d 00 00 00 00 00 02 33 d7 d8 ae 00 00 00 01 00 04 46 54 e8 cb 8d fb 00 00 06 a8 00 00 00 00 00 00 00 20 00 00 00 03 06 e4 ec e2 00 00 00 01 00 04 46 54 27 4f b9 f0 00 00 08 d9 00 00 00 14 00 00 00 20 00 00 00 03 06 e5 1a a4 00 00 00 01 00 04 46 54 f4 41 74 7c 00 00 04 a0 00 00 00 00 00 00 00 20 00 00 00 03 06 e5 ac 0a 00 00 00 00 00 04 46 54 86 ed 4a 46 00 00 04 d5 00 00 00 01 00 00 00 20 00 00 00 05 0f cb 10 d6 00 00 00 00 00 08 46 54 08 1c a1 13 00 00 01 d6 00 00 09 47 00 00 06 fe 00 00 00 24 00 00 00 05 28 38 05 70 00 00 00 01 00 04 46 54 46 9e d3 b9 00 00 03 ed 00 00 00 01 00 00 00 20 00 00 00 05 28 38 11 06 00 00 00 01 00 04 46 54 c2 cf d2 29 00 00 00 92 00 00 00 00 00 00 00 20 00 00 00 05 28 38 22 ee 00 00 00 01 00 04 46 54 ba 81 8b 92 00 00 00 9e 00 00 00 01 00 00 00 20 00 00 00 05 28 38 2e 18 00 00 00 01 00 04 46 54 b5 3c be bd 00 00 02 15 00 00 00 00 00 00 00 20 00 00 00 05 28 38 40 be 00 00 00 01 00 0c 46 54 13 26 d9 b4 00 00 02 7e 00 00 00 65 00 00 00 00 00 00 00 00 00 00 00 28 00 00 00 05 28 38 96 88 00 00 00 01 00 04 46 54 6d ee 36 d2 00 00 03 05 00 00 00 00 00 00 00 20 00 00 00 05 28 3a fc 9a 00 00 00 01 00 04 46 54 8f e0 a2 86 00 00 02 4c 00 00 00 03 00 00 00 20 00 00 00 05 28 3b 07 de 00 00 00 01 00 04 46 54 db d0 fb 0b 00 00 00 ad 00 00 00 00 00 00 00 20 00 00 00 05 28 3b 65 22 00 00 00 01 00 04 46 54 7d 46 50 0c 00 00 02 5b 00 00 00 01 00 00 00 20 00 00 00 05 28 3b 6f c2 00 00 00 01 00 04 46 54 d1 a6 41 80 00 00 03 fc 00 00 00 00 00 00 00 20 00 00 00 05 28 3f 29 fc 00 00 00 00 00 0c 46 54 35 1a 22 28 00 00 00 b3 00 00 00 01 00 80 00 01 00 00 00 80 00 00 00 28 00 00 00 05 28 4a 3b c2 00 00 00 00 00 04 46 54 aa 85 de d7 00 00 00 88 00 00 07 99 00 00 00 20 00 00 00 05 28 65 44 22 00 00 00 00 00 04 46 54 52 89 27 b6 00 00 00 a2 00 00 00 03 00 00 00 20 00 00 00 05 28 9e 16 6e 00 00 00 00 00 04 46 54 21 48 34 4d 00 00 05 e3 00 00 00 00 00 00 00 20 01 28 00 42 49 4e 46 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 9a 00 00 00 01 00 00 00 28 00 00 00 58 00 00 00 00 00 a5 90 60 40 00 00 00 00 20 00 00 00 05 0f be 71 e6 00 00 00 01 00 08 46 54 82 f9 8a 2b 00 00 07 86 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 05 28 2b f1 b4 00 00 00 01 00 08 46 54 8d c3 56 a3 00 00 06 10 00 00 00 00 00 00 00 03 00 00 00 24 00 00 00 05 28 42 8d 4c 00 00 00 00 00 04 46 54 8a 39 16 0d 00 00 01 2c 00 00 00 07 00 00 00 20 00 00 00 05 28 43 72 8e 00 00 00 00 00 08 46 54 d4 f8 58 37 00 00 02 57 ff f9 67 a0 00 00 06 a0 00 00 00 24 00 00 00 05 28 43 7e 78 00 00 00 00 00 10 46 54 e8 ab b6 e1 00 00 02 5a 00 00 0c 07 00 00 00 05 00 00 00 01 00 00 00 00 00 00 00 2c 00 00 00 05 28 43 89 fc 00 00 00 00 00 04 46 54 c0 fa a9 38 00 00 00 d2 00 00 00 04 00 00 00 20 00 00 00 05 28 43 e1 54 00 00 00 01 00 10 46 54 c3 58 71 12 00 00 02 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 05 28 43 ed 5a 00 00 00 01 00 08 46 54 f1 ba 3e 82 00 00 02 0d 00 00 00 00 00 00 00 03 00 00 00 24 00 00 00 05 28 43 f9 b8 00 00 00 01 00 10 46 54 2f da c9 3b 00 00 02 1c 00 00 00 00 00 00 07 99 00 00 00 00 00 00 07 99 00 00 00 2c 00 00 00 05 28 44 05 f6 00 00 00 01 00 10 46 54 72 31 8e 42 00 00 02 20 00 00 00 00 00 00 09 47 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 28 44 11 8a 00 00 00 01 00 10 46 54 e0 df 31 f7 00 00 02 24 00 00 00 00 00 00 00 64 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 28 ad 23 ca 00 00 00 00 00 04 46 54 cc 4c c9 f7 00 00 00 c2 00 00 00 ff 00 00 00 20 00 00 00 05 28 db b0 e4 00 00 00 00 00 04 46 54 dc 8e 1c 44 00 00 05 1a 00 00 10 00 00 00 00 20 00 00 00 05 28 db be fa 00 00 00 00 00 14 46 54 f6 6a b3 d5 00 00 00 cf 00 00 00 00 00 00 07 d0 00 00 00 65 00 00 0c 1c 00 00 00 23 00 00 00 30 00 00 00 05 28 db cb e2 00 00 00 00 00 10 46 54 3f 7c 1e d4 00 00 00 eb 00 00 07 d0 00 00 0b 22 00 00 0e 64 00 00 02 1e 00 00 00 2c 00 00 00 05 28 db df 90 00 00 00 00 00 04 46 54 8a 39 16 0d 00 00 01 2c 00 00 00 00 00 00 00 20 01 04 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 55 44 00 78 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 40 43 c0 54 00 00 00 00 40 43 fb 24 00 00 00 00 40 43 b3 54 00 00 00 00 40 43 b8 c0 00 00 00 00 40 43 bc d0 00 00 00 00 40 43 be 04 00 00 00 00 40 43 6f a4 00 00 00 00 40 43 82 d4 00 00 00 00 40 43 92 c4 00 00 00 00 40 43 3d 3c 00 00 00 00 40 1a 7d 24 00 00 00 00 00 00 25 80 a6 9c 4e 80 00 20 00 00 00 00 90 00 00 00 00 00 00 00 00 00 7c 08 02 a6 fb e1 ff f8"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:36:41.425" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:36:41.425" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 2a 00 00 0...</msg>
<status endtime="20170810 04:36:41.425" starttime="20170810 04:36:41.424" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:41.425" level="INFO">${esel_data} = [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 2a 00 00 00 00 0c 29 01 da ac 00 00 00 0c 29 59 7b 9a 42 00 0...</msg>
<status endtime="20170810 04:36:41.426" starttime="20170810 04:36:41.121" status="PASS"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170810 04:36:41.426" level="INFO">Length is 2</msg>
<msg timestamp="20170810 04:36:41.426" level="INFO">${length} = 2</msg>
<status endtime="20170810 04:36:41.426" starttime="20170810 04:36:41.426" status="PASS"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status endtime="20170810 04:36:41.427" starttime="20170810 04:36:41.426" status="PASS"></status>
</kw>
<kw name="Get Esel Index" library="openbmc_ffdc_list">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg timestamp="20170810 04:36:41.427" level="INFO">${index} = 1</msg>
<status endtime="20170810 04:36:41.427" starttime="20170810 04:36:41.427" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:36:41.429" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_esel"&gt;/tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_esel&lt;/a&gt;'.</msg>
<status endtime="20170810 04:36:41.429" starttime="20170810 04:36:41.428" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:41.429" starttime="20170810 04:36:41.427" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:36:41.430" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_esel"&gt;/tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_esel&lt;/a&gt;'.</msg>
<status endtime="20170810 04:36:41.431" starttime="20170810 04:36:41.430" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:41.431" starttime="20170810 04:36:41.429" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:41.431" starttime="20170810 04:36:41.120" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/4/callout" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<msg timestamp="20170810 04:36:41.432" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170810 04:36:41.432" starttime="20170810 04:36:41.431" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:41.432" starttime="20170810 04:36:41.431" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:41.432" starttime="20170810 04:36:40.387" status="PASS"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>which eSEL.pl</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20170810 04:36:41.438" level="INFO">Running command 'which eSEL.pl 2&gt;&amp;1'.</msg>
<msg timestamp="20170810 04:36:41.441" level="INFO">${out} = </msg>
<status endtime="20170810 04:36:41.441" starttime="20170810 04:36:41.432" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<msg timestamp="20170810 04:36:41.445" level="FAIL">'' does not contain 'eSEL.pl'</msg>
<status endtime="20170810 04:36:41.445" starttime="20170810 04:36:41.444" status="FAIL"></status>
</kw>
<msg timestamp="20170810 04:36:41.445" level="INFO">${status} = False</msg>
<status endtime="20170810 04:36:41.446" starttime="20170810 04:36:41.444" status="PASS"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170810 04:36:41.446" level="INFO">Returning from the enclosing user keyword.</msg>
<status endtime="20170810 04:36:41.446" starttime="20170810 04:36:41.446" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:41.447" starttime="20170810 04:36:39.958" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:41.447" starttime="20170810 04:36:39.933" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:41.447" starttime="20170810 04:36:39.930" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:41.447" starttime="20170810 04:36:39.930" status="PASS"></status>
</kw>
<kw name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170810 04:36:41.449" starttime="20170810 04:36:41.449" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:41.449" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:36:41.450" level="INFO">${ret_values} = None</msg>
<status endtime="20170810 04:36:41.450" starttime="20170810 04:36:41.449" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170810 04:36:41.450" starttime="20170810 04:36:41.450" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170810 04:36:41.479" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status endtime="20170810 04:36:41.479" starttime="20170810 04:36:41.478" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = GET REQUESTS" type="foritem">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170810 04:36:41.486" level="INFO">@{cmd_list} = [ ('BMC_record_log', '/org/openbmc/control/led/enumerate') | ('BMC_led', '/org/openbmc/records/events/enumerate') | ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_sensor_list', ...</msg>
<status endtime="20170810 04:36:41.486" starttime="20170810 04:36:41.480" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170810 04:36:41.488" level="INFO">${logpath} = /tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_record_log.txt</msg>
<status endtime="20170810 04:36:41.488" starttime="20170810 04:36:41.487" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:36:41.492" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:36:41.493" starttime="20170810 04:36:41.492" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:36:41.494" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:36:41.494" starttime="20170810 04:36:41.493" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:36:41.495" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:36:41.495" starttime="20170810 04:36:41.494" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:36:41.496" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:36:41.496" starttime="20170810 04:36:41.495" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:36:41.720" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:36:41.720" starttime="20170810 04:36:41.497" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:41.720" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:36:41.720" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:36:41.720" starttime="20170810 04:36:41.496" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:36:41.721" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:36:41.721" starttime="20170810 04:36:41.720" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:36:41.721" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:36:41.722" starttime="20170810 04:36:41.721" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:41.722" starttime="20170810 04:36:41.491" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:41.722" starttime="20170810 04:36:41.490" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:41.722" starttime="20170810 04:36:41.489" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:36:41.723" level="INFO">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status endtime="20170810 04:36:41.723" starttime="20170810 04:36:41.722" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170810 04:36:41.724" starttime="20170810 04:36:41.723" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:36:41.777" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170810 04:36:41.777" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170810 04:36:41.777" starttime="20170810 04:36:41.724" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170810 04:36:41.778" starttime="20170810 04:36:41.777" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:36:41.778" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:36:41.778" starttime="20170810 04:36:41.778" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:41.779" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170810 04:36:41.779" starttime="20170810 04:36:41.488" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:36:41.780" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170810 04:36:41.780" level="FAIL">404 != 200</msg>
<status endtime="20170810 04:36:41.780" starttime="20170810 04:36:41.779" status="FAIL"></status>
</kw>
<msg timestamp="20170810 04:36:41.780" level="INFO">${status} = False</msg>
<status endtime="20170810 04:36:41.780" starttime="20170810 04:36:41.779" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170810 04:36:41.781" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170810 04:36:41.781" starttime="20170810 04:36:41.781" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:41.781" starttime="20170810 04:36:41.780" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:41.781" starttime="20170810 04:36:41.487" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170810 04:36:41.782" level="INFO">${logpath} = /tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_led.txt</msg>
<status endtime="20170810 04:36:41.782" starttime="20170810 04:36:41.782" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:36:41.785" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:36:41.785" starttime="20170810 04:36:41.785" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:36:41.786" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:36:41.786" starttime="20170810 04:36:41.785" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:36:41.786" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:36:41.786" starttime="20170810 04:36:41.786" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:36:41.787" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:36:41.787" starttime="20170810 04:36:41.787" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:36:42.023" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:36:42.023" starttime="20170810 04:36:41.788" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:42.023" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:36:42.023" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:36:42.023" starttime="20170810 04:36:41.787" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:36:42.024" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:36:42.024" starttime="20170810 04:36:42.024" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:36:42.025" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:36:42.025" starttime="20170810 04:36:42.024" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:42.025" starttime="20170810 04:36:41.784" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:42.026" starttime="20170810 04:36:41.784" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:42.026" starttime="20170810 04:36:41.783" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:36:42.026" level="INFO">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status endtime="20170810 04:36:42.026" starttime="20170810 04:36:42.026" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170810 04:36:42.027" starttime="20170810 04:36:42.027" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:36:42.123" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg timestamp="20170810 04:36:42.123" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170810 04:36:42.123" starttime="20170810 04:36:42.028" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170810 04:36:42.123" starttime="20170810 04:36:42.123" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:36:42.124" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:36:42.124" starttime="20170810 04:36:42.124" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:42.124" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170810 04:36:42.124" starttime="20170810 04:36:41.782" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:36:42.125" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170810 04:36:42.126" level="FAIL">404 != 200</msg>
<status endtime="20170810 04:36:42.126" starttime="20170810 04:36:42.125" status="FAIL"></status>
</kw>
<msg timestamp="20170810 04:36:42.126" level="INFO">${status} = False</msg>
<status endtime="20170810 04:36:42.126" starttime="20170810 04:36:42.124" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170810 04:36:42.127" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170810 04:36:42.128" starttime="20170810 04:36:42.127" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:42.128" starttime="20170810 04:36:42.126" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:42.128" starttime="20170810 04:36:41.781" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170810 04:36:42.129" level="INFO">${logpath} = /tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_inventory.txt</msg>
<status endtime="20170810 04:36:42.129" starttime="20170810 04:36:42.128" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:36:42.133" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:36:42.133" starttime="20170810 04:36:42.132" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:36:42.134" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:36:42.134" starttime="20170810 04:36:42.133" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:36:42.135" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:36:42.135" starttime="20170810 04:36:42.134" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:36:42.136" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:36:42.136" starttime="20170810 04:36:42.135" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:36:42.376" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:36:42.376" starttime="20170810 04:36:42.137" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:42.376" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:36:42.376" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:36:42.376" starttime="20170810 04:36:42.136" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:36:42.377" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:36:42.377" starttime="20170810 04:36:42.377" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:36:42.378" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:36:42.378" starttime="20170810 04:36:42.377" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:42.378" starttime="20170810 04:36:42.131" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:42.378" starttime="20170810 04:36:42.131" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:42.378" starttime="20170810 04:36:42.130" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:36:42.379" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status endtime="20170810 04:36:42.379" starttime="20170810 04:36:42.378" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170810 04:36:42.379" starttime="20170810 04:36:42.379" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:36:44.540" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170810 04:36:44.540" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:36:44.540" starttime="20170810 04:36:42.379" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170810 04:36:44.541" starttime="20170810 04:36:44.540" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:36:44.541" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:36:44.541" starttime="20170810 04:36:44.541" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:44.542" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:36:44.542" starttime="20170810 04:36:42.129" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:36:44.543" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:36:44.543" starttime="20170810 04:36:44.542" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:44.543" level="INFO">${status} = True</msg>
<status endtime="20170810 04:36:44.543" starttime="20170810 04:36:44.542" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170810 04:36:44.543" starttime="20170810 04:36:44.543" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170810 04:36:44.547" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "", 
      "Model": "0000000000000000", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "", 
      "SerialNumber": "0000000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 0
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard": {
      "BuildDate": "", 
      "Manufacturer": "0000000000000000", 
      "Model": "", 
      "PartNumber": "00VK525         ", 
      "Present": 0, 
      "PrettyName": "SYSTEM PLANAR   ", 
      "SerialNumber": "Y130UF72700J    "
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL906", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933943218", 
      "Version": "20"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core10": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core12": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core14": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core16": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core4": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core5": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core6": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core7": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL906", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933943264", 
      "Version": "20"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core10": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core12": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core14": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core16": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core4": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core5": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core6": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core7": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core9": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196b", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196a", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm10": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ef", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm11": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1801", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm12": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1983", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm13": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1824", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm14": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1907", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm15": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db18d0", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm2": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196c", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm3": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196d", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm4": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1971", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm5": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17e7", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm6": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1973", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm7": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1970", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ec", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm9": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ed", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }, 
    "/xyz/openbmc_project/inventory/system/fault": {
      "endpoints": [
        "/xyz/openbmc_project/logging/entry/4"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:36:44.547" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170810 04:36:44.547" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system": {
            "BuildDate": "",
            "Cached": 0,
            "FieldReplaceable": 0,
            "Manufacturer": "",
            ...</msg>
<status endtime="20170810 04:36:44.548" starttime="20170810 04:36:44.544" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:36:44.549" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_inventory.txt"&gt;/tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:36:44.549" starttime="20170810 04:36:44.549" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:44.549" starttime="20170810 04:36:44.548" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:44.549" starttime="20170810 04:36:42.128" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170810 04:36:44.550" level="INFO">${logpath} = /tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_sensor_list.txt</msg>
<status endtime="20170810 04:36:44.550" starttime="20170810 04:36:44.550" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:36:44.553" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:36:44.553" starttime="20170810 04:36:44.553" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:36:44.554" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:36:44.554" starttime="20170810 04:36:44.554" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:36:44.554" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:36:44.555" starttime="20170810 04:36:44.554" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:36:44.555" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:36:44.555" starttime="20170810 04:36:44.555" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:36:44.795" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:36:44.795" starttime="20170810 04:36:44.556" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:44.795" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:36:44.795" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:36:44.795" starttime="20170810 04:36:44.555" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:36:44.796" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:36:44.796" starttime="20170810 04:36:44.796" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:36:44.797" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:36:44.797" starttime="20170810 04:36:44.796" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:44.797" starttime="20170810 04:36:44.552" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:44.797" starttime="20170810 04:36:44.552" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:44.797" starttime="20170810 04:36:44.551" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:36:44.797" level="INFO">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status endtime="20170810 04:36:44.798" starttime="20170810 04:36:44.797" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170810 04:36:44.798" starttime="20170810 04:36:44.798" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:36:45.054" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170810 04:36:45.054" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:36:45.054" starttime="20170810 04:36:44.798" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170810 04:36:45.055" starttime="20170810 04:36:45.055" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:36:45.055" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:36:45.056" starttime="20170810 04:36:45.055" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:45.056" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:36:45.056" starttime="20170810 04:36:44.550" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:36:45.057" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:36:45.057" starttime="20170810 04:36:45.057" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:45.057" level="INFO">${status} = True</msg>
<status endtime="20170810 04:36:45.057" starttime="20170810 04:36:45.056" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170810 04:36:45.058" starttime="20170810 04:36:45.057" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170810 04:36:45.058" level="INFO">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 3
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:36:45.059" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170810 04:36:45.059" level="INFO">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 3
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status endtime="20170810 04:36:45.059" starttime="20170810 04:36:45.058" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:36:45.060" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_sensor_list.txt"&gt;/tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:36:45.060" starttime="20170810 04:36:45.060" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:45.060" starttime="20170810 04:36:45.059" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:45.060" starttime="20170810 04:36:44.550" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170810 04:36:45.061" level="INFO">${logpath} = /tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_elog.txt</msg>
<status endtime="20170810 04:36:45.061" starttime="20170810 04:36:45.061" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:36:45.064" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:36:45.064" starttime="20170810 04:36:45.063" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:36:45.065" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:36:45.065" starttime="20170810 04:36:45.064" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:36:45.065" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:36:45.065" starttime="20170810 04:36:45.065" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:36:45.066" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:36:45.066" starttime="20170810 04:36:45.066" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:36:45.271" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:36:45.271" starttime="20170810 04:36:45.067" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:45.271" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:36:45.271" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:36:45.271" starttime="20170810 04:36:45.066" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:36:45.272" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:36:45.272" starttime="20170810 04:36:45.271" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:36:45.272" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:36:45.272" starttime="20170810 04:36:45.272" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:45.273" starttime="20170810 04:36:45.063" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:45.273" starttime="20170810 04:36:45.062" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:45.273" starttime="20170810 04:36:45.062" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:36:45.273" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status endtime="20170810 04:36:45.273" starttime="20170810 04:36:45.273" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170810 04:36:45.274" starttime="20170810 04:36:45.274" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:36:45.499" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170810 04:36:45.500" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:36:45.500" starttime="20170810 04:36:45.274" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170810 04:36:45.500" starttime="20170810 04:36:45.500" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:36:45.501" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:36:45.501" starttime="20170810 04:36:45.501" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:45.501" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:36:45.501" starttime="20170810 04:36:45.061" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:36:45.502" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:36:45.502" starttime="20170810 04:36:45.502" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:45.502" level="INFO">${status} = True</msg>
<status endtime="20170810 04:36:45.502" starttime="20170810 04:36:45.501" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170810 04:36:45.503" starttime="20170810 04:36:45.502" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170810 04:36:45.504" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [], 
      "Id": 2, 
      "Message": "xyz.openbmc_project.Software.Version.Error.ManifestFileFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502338615037, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [], 
      "Id": 3, 
      "Message": "xyz.openbmc_project.Common.Error.InternalFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502338896197, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/4": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 2a 00 00 00 00 0c 29 01 da ac 00 00 00 0c 29 59 7b 9a 42 00 00 06 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 22 90 00 00 22 55 48 00 18 01 00 26 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 2a da 00 48 00 00 00 e0 00 00 0d 00 00 00 00 00 00 20 00 00 00 00 08 00 00 00 08 00 00 00 00 00 11 0d 00 00 42 43 38 41 32 41 44 41 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 04 a7 2c 00 00 c2 04 55 44 06 a8 01 00 2a 00 e7 64 01 02 da 02 00 00 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 11 0d 00 00 00 00 00 00 00 00 a9 70 e7 9c 00 01 03 80 00 00 08 00 00 00 08 00 00 00 00 00 06 a0 06 28 00 01 06 00 01 28 00 42 45 52 52 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 cc 00 00 00 00 00 00 00 cc 00 00 00 05 00 00 00 00 00 00 00 01 34 c7 7e 28 00 00 00 01 00 08 46 54 fe 36 d6 d2 00 00 01 6d 00 00 00 00 00 00 07 d0 00 00 00 24 00 00 00 05 28 42 80 0c 00 00 00 00 00 04 46 54 b3 0e 3f b6 00 00 00 95 00 00 00 00 00 00 00 20 00 00 00 05 28 db 89 e0 00 00 00 00 00 04 46 54 2d 5e d8 74 00 00 04 3d 00 00 07 dd 00 00 00 20 00 00 00 05 28 db 96 e8 00 00 00 00 00 04 46 54 5d ac e6 35 00 00 05 01 00 00 08 00 00 00 00 20 00 00 00 05 28 db a1 74 00 00 00 00 00 04 46 54 21 0e 9c fc 00 00 05 95 00 00 08 00 00 00 00 20 01 28 00 42 49 4d 50 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 9a 00 00 00 01 00 00 00 28 00 00 00 2d 00 00 00 00 00 02 33 d7 d8 ae 00 00 00 01 00 04 46 54 e8 cb 8d fb 00 00 06 a8 00 00 00 00 00 00 00 20 00 00 00 03 06 e4 ec e2 00 00 00 01 00 04 46 54 27 4f b9 f0 00 00 08 d9 00 00 00 14 00 00 00 20 00 00 00 03 06 e5 1a a4 00 00 00 01 00 04 46 54 f4 41 74 7c 00 00 04 a0 00 00 00 00 00 00 00 20 00 00 00 03 06 e5 ac 0a 00 00 00 00 00 04 46 54 86 ed 4a 46 00 00 04 d5 00 00 00 01 00 00 00 20 00 00 00 05 0f cb 10 d6 00 00 00 00 00 08 46 54 08 1c a1 13 00 00 01 d6 00 00 09 47 00 00 06 fe 00 00 00 24 00 00 00 05 28 38 05 70 00 00 00 01 00 04 46 54 46 9e d3 b9 00 00 03 ed 00 00 00 01 00 00 00 20 00 00 00 05 28 38 11 06 00 00 00 01 00 04 46 54 c2 cf d2 29 00 00 00 92 00 00 00 00 00 00 00 20 00 00 00 05 28 38 22 ee 00 00 00 01 00 04 46 54 ba 81 8b 92 00 00 00 9e 00 00 00 01 00 00 00 20 00 00 00 05 28 38 2e 18 00 00 00 01 00 04 46 54 b5 3c be bd 00 00 02 15 00 00 00 00 00 00 00 20 00 00 00 05 28 38 40 be 00 00 00 01 00 0c 46 54 13 26 d9 b4 00 00 02 7e 00 00 00 65 00 00 00 00 00 00 00 00 00 00 00 28 00 00 00 05 28 38 96 88 00 00 00 01 00 04 46 54 6d ee 36 d2 00 00 03 05 00 00 00 00 00 00 00 20 00 00 00 05 28 3a fc 9a 00 00 00 01 00 04 46 54 8f e0 a2 86 00 00 02 4c 00 00 00 03 00 00 00 20 00 00 00 05 28 3b 07 de 00 00 00 01 00 04 46 54 db d0 fb 0b 00 00 00 ad 00 00 00 00 00 00 00 20 00 00 00 05 28 3b 65 22 00 00 00 01 00 04 46 54 7d 46 50 0c 00 00 02 5b 00 00 00 01 00 00 00 20 00 00 00 05 28 3b 6f c2 00 00 00 01 00 04 46 54 d1 a6 41 80 00 00 03 fc 00 00 00 00 00 00 00 20 00 00 00 05 28 3f 29 fc 00 00 00 00 00 0c 46 54 35 1a 22 28 00 00 00 b3 00 00 00 01 00 80 00 01 00 00 00 80 00 00 00 28 00 00 00 05 28 4a 3b c2 00 00 00 00 00 04 46 54 aa 85 de d7 00 00 00 88 00 00 07 99 00 00 00 20 00 00 00 05 28 65 44 22 00 00 00 00 00 04 46 54 52 89 27 b6 00 00 00 a2 00 00 00 03 00 00 00 20 00 00 00 05 28 9e 16 6e 00 00 00 00 00 04 46 54 21 48 34 4d 00 00 05 e3 00 00 00 00 00 00 00 20 01 28 00 42 49 4e 46 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 9a 00 00 00 01 00 00 00 28 00 00 00 58 00 00 00 00 00 a5 90 60 40 00 00 00 00 20 00 00 00 05 0f be 71 e6 00 00 00 01 00 08 46 54 82 f9 8a 2b 00 00 07 86 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 05 28 2b f1 b4 00 00 00 01 00 08 46 54 8d c3 56 a3 00 00 06 10 00 00 00 00 00 00 00 03 00 00 00 24 00 00 00 05 28 42 8d 4c 00 00 00 00 00 04 46 54 8a 39 16 0d 00 00 01 2c 00 00 00 07 00 00 00 20 00 00 00 05 28 43 72 8e 00 00 00 00 00 08 46 54 d4 f8 58 37 00 00 02 57 ff f9 67 a0 00 00 06 a0 00 00 00 24 00 00 00 05 28 43 7e 78 00 00 00 00 00 10 46 54 e8 ab b6 e1 00 00 02 5a 00 00 0c 07 00 00 00 05 00 00 00 01 00 00 00 00 00 00 00 2c 00 00 00 05 28 43 89 fc 00 00 00 00 00 04 46 54 c0 fa a9 38 00 00 00 d2 00 00 00 04 00 00 00 20 00 00 00 05 28 43 e1 54 00 00 00 01 00 10 46 54 c3 58 71 12 00 00 02 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 05 28 43 ed 5a 00 00 00 01 00 08 46 54 f1 ba 3e 82 00 00 02 0d 00 00 00 00 00 00 00 03 00 00 00 24 00 00 00 05 28 43 f9 b8 00 00 00 01 00 10 46 54 2f da c9 3b 00 00 02 1c 00 00 00 00 00 00 07 99 00 00 00 00 00 00 07 99 00 00 00 2c 00 00 00 05 28 44 05 f6 00 00 00 01 00 10 46 54 72 31 8e 42 00 00 02 20 00 00 00 00 00 00 09 47 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 28 44 11 8a 00 00 00 01 00 10 46 54 e0 df 31 f7 00 00 02 24 00 00 00 00 00 00 00 64 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 28 ad 23 ca 00 00 00 00 00 04 46 54 cc 4c c9 f7 00 00 00 c2 00 00 00 ff 00 00 00 20 00 00 00 05 28 db b0 e4 00 00 00 00 00 04 46 54 dc 8e 1c 44 00 00 05 1a 00 00 10 00 00 00 00 20 00 00 00 05 28 db be fa 00 00 00 00 00 14 46 54 f6 6a b3 d5 00 00 00 cf 00 00 00 00 00 00 07 d0 00 00 00 65 00 00 0c 1c 00 00 00 23 00 00 00 30 00 00 00 05 28 db cb e2 00 00 00 00 00 10 46 54 3f 7c 1e d4 00 00 00 eb 00 00 07 d0 00 00 0b 22 00 00 0e 64 00 00 02 1e 00 00 00 2c 00 00 00 05 28 db df 90 00 00 00 00 00 04 46 54 8a 39 16 0d 00 00 01 2c 00 00 00 00 00 00 00 20 01 04 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 55 44 00 78 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 40 43 c0 54 00 00 00 00 40 43 fb 24 00 00 00 00 40 43 b3 54 00 00 00 00 40 43 b8 c0 00 00 00 00 40 43 bc d0 00 00 00 00 40 43 be 04 00 00 00 00 40 43 6f a4 00 00 00 00 40 43 82 d4 00 00 00 00 40 43 92 c4 00 00 00 00 40 43 3d 3c 00 00 00 00 40 1a 7d 24 00 00 00 00 00 00 25 80 a6 9c 4e 80 00 20 00 00 00 00 90 00 00 00 00 00 00 00 00 00 7c 08 02 a6 fb e1 ff f8"
      ], 
      "Id": 4, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502339309569, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/4/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:36:45.504" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170810 04:36:45.505" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/logging/entry/2": {
            "AdditionalData": [],
            "Id": 2,
            "Message": "xyz.openbmc_project.Software.Version.Error.ManifestFile...</msg>
<status endtime="20170810 04:36:45.505" starttime="20170810 04:36:45.503" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:36:45.506" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_elog.txt"&gt;/tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_elog.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:36:45.506" starttime="20170810 04:36:45.506" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:45.506" starttime="20170810 04:36:45.505" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:45.506" starttime="20170810 04:36:45.060" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:45.506" starttime="20170810 04:36:41.486" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:45.507" starttime="20170810 04:36:41.479" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:45.507" starttime="20170810 04:36:41.479" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:45.507" starttime="20170810 04:36:41.479" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:45.507" starttime="20170810 04:36:41.478" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:45.507" starttime="20170810 04:36:41.451" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:45.507" starttime="20170810 04:36:41.448" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:45.507" starttime="20170810 04:36:41.447" status="PASS"></status>
</kw>
<kw name="${method} = ('BMC Specific Files', 'BMC FFDC Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170810 04:36:45.509" starttime="20170810 04:36:45.509" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:45.509" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:36:45.509" level="INFO">${ret_values} = None</msg>
<status endtime="20170810 04:36:45.509" starttime="20170810 04:36:45.508" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170810 04:36:45.510" starttime="20170810 04:36:45.509" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170810 04:36:45.537" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status endtime="20170810 04:36:45.537" starttime="20170810 04:36:45.537" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC FILES" type="foritem">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170810 04:36:45.538" level="INFO">@{cmd_list} = [ ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_proc_list', 'top -n 1 -b') | ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/') | ('BMC_dmesg', 'dmesg') | ('BMC_journalctl', 'journalctl --no-pager') | ...</msg>
<status endtime="20170810 04:36:45.538" starttime="20170810 04:36:45.538" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170810 04:36:45.539" level="INFO">${logpath} = /tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_procinfo.txt</msg>
<status endtime="20170810 04:36:45.539" starttime="20170810 04:36:45.539" status="PASS"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170810 04:36:45.541" starttime="20170810 04:36:45.540" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 04:36:45.542" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status endtime="20170810 04:36:45.542" starttime="20170810 04:36:45.541" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170810 04:36:45.611" level="INFO">width=80
path_separator=/
height=24
port=22
prompt=# 
alias=bmc_connection
index=1
encoding=UTF-8
host=9.3.86.161
newline=

timeout=25 seconds
term_type=vt100</msg>
<msg timestamp="20170810 04:36:45.612" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170810 04:36:45.670" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170810 04:36:45.670" starttime="20170810 04:36:45.573" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:45.670" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:36:45.670" level="INFO">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status endtime="20170810 04:36:45.670" starttime="20170810 04:36:45.542" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170810 04:36:45.671" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status endtime="20170810 04:36:45.671" starttime="20170810 04:36:45.671" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 04:36:45.672" level="INFO">${stderr} = </msg>
<status endtime="20170810 04:36:45.672" starttime="20170810 04:36:45.671" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:36:45.678" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_procinfo.txt"&gt;/tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:36:45.678" starttime="20170810 04:36:45.678" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:45.678" starttime="20170810 04:36:45.677" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:45.678" starttime="20170810 04:36:45.672" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:45.679" starttime="20170810 04:36:45.539" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:45.679" starttime="20170810 04:36:45.539" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170810 04:36:45.679" level="INFO">${logpath} = /tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_proc_list.txt</msg>
<status endtime="20170810 04:36:45.679" starttime="20170810 04:36:45.679" status="PASS"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170810 04:36:45.681" starttime="20170810 04:36:45.680" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 04:36:45.681" level="INFO">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status endtime="20170810 04:36:45.681" starttime="20170810 04:36:45.681" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170810 04:36:45.753" level="INFO">width=80
path_separator=/
height=24
port=22
prompt=# 
alias=bmc_connection
index=1
encoding=UTF-8
host=9.3.86.161
newline=

timeout=25 seconds
term_type=vt100</msg>
<msg timestamp="20170810 04:36:45.754" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170810 04:36:46.123" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170810 04:36:46.123" starttime="20170810 04:36:45.712" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:46.123" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:36:46.123" level="INFO">${ret_values} = (u'Mem: 222464K used, 209792K free, 14764K shrd, 30888K buff, 93816K cached\nCPU:   0% usr  33% sys   0% nic  66% idle   0% io   0% irq   0% sirq\nLoad average: 0.81 0.76 0.72 1/159 1608\n  PID  PPID ...</msg>
<status endtime="20170810 04:36:46.123" starttime="20170810 04:36:45.682" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170810 04:36:46.124" level="INFO">${stdout} = Mem: 222464K used, 209792K free, 14764K shrd, 30888K buff, 93816K cached
CPU:   0% usr  33% sys   0% nic  66% idle   0% io   0% irq   0% sirq
Load average: 0.81 0.76 0.72 1/159 1608
  PID  PPID USER  ...</msg>
<status endtime="20170810 04:36:46.124" starttime="20170810 04:36:46.124" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 04:36:46.125" level="INFO">${stderr} = </msg>
<status endtime="20170810 04:36:46.125" starttime="20170810 04:36:46.124" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:36:46.131" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_proc_list.txt"&gt;/tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:36:46.132" starttime="20170810 04:36:46.131" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:46.132" starttime="20170810 04:36:46.130" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:46.132" starttime="20170810 04:36:46.125" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:46.132" starttime="20170810 04:36:45.680" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:46.132" starttime="20170810 04:36:45.679" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170810 04:36:46.133" level="INFO">${logpath} = /tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_proc_fd_active_list.txt</msg>
<status endtime="20170810 04:36:46.133" starttime="20170810 04:36:46.132" status="PASS"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170810 04:36:46.134" starttime="20170810 04:36:46.134" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 04:36:46.135" level="INFO">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status endtime="20170810 04:36:46.135" starttime="20170810 04:36:46.135" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170810 04:36:46.204" level="INFO">width=80
path_separator=/
height=24
port=22
prompt=# 
alias=bmc_connection
index=1
encoding=UTF-8
host=9.3.86.161
newline=

timeout=25 seconds
term_type=vt100</msg>
<msg timestamp="20170810 04:36:46.205" level="INFO">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg timestamp="20170810 04:36:46.799" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170810 04:36:46.799" starttime="20170810 04:36:46.167" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:46.800" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:36:46.801" level="INFO">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Aug 10 04:36 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Aug 10 04:36 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status endtime="20170810 04:36:46.801" starttime="20170810 04:36:46.135" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170810 04:36:46.802" level="INFO">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Aug 10 04:36 0 -&gt; /dev/null
lrwx------    1 root     root            64 Aug 10 04:36 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status endtime="20170810 04:36:46.802" starttime="20170810 04:36:46.801" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 04:36:46.802" level="INFO">${stderr} = ls: /proc/1609/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status endtime="20170810 04:36:46.802" starttime="20170810 04:36:46.802" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:36:46.810" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_proc_fd_active_list.txt"&gt;/tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:36:46.810" starttime="20170810 04:36:46.809" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:46.810" starttime="20170810 04:36:46.808" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:46.810" starttime="20170810 04:36:46.803" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:46.810" starttime="20170810 04:36:46.133" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:46.810" starttime="20170810 04:36:46.132" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_dmesg', 'dmesg')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170810 04:36:46.811" level="INFO">${logpath} = /tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_dmesg.txt</msg>
<status endtime="20170810 04:36:46.811" starttime="20170810 04:36:46.810" status="PASS"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170810 04:36:46.812" starttime="20170810 04:36:46.812" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 04:36:46.813" level="INFO">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status endtime="20170810 04:36:46.813" starttime="20170810 04:36:46.812" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170810 04:36:46.881" level="INFO">width=80
path_separator=/
height=24
port=22
prompt=# 
alias=bmc_connection
index=1
encoding=UTF-8
host=9.3.86.161
newline=

timeout=25 seconds
term_type=vt100</msg>
<msg timestamp="20170810 04:36:46.881" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170810 04:36:46.938" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170810 04:36:46.938" starttime="20170810 04:36:46.845" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:46.938" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:36:46.939" level="INFO">${ret_values} = (u'[    0.000000] Booting Linux on physical CPU 0x0\n[    0.000000] Linux version 4.10.17-77fdabc2fd388455a01efc4f6dae54ca0f863020 (jenkins@openbmc-builder1) (gcc version 6.2.0 (GCC) ) #1 Thu Aug 10 0...</msg>
<status endtime="20170810 04:36:46.939" starttime="20170810 04:36:46.813" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170810 04:36:46.939" level="INFO">${stdout} = [    0.000000] Booting Linux on physical CPU 0x0
[    0.000000] Linux version 4.10.17-77fdabc2fd388455a01efc4f6dae54ca0f863020 (jenkins@openbmc-builder1) (gcc version 6.2.0 (GCC) ) #1 Thu Aug 10 03:57...</msg>
<status endtime="20170810 04:36:46.939" starttime="20170810 04:36:46.939" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 04:36:46.940" level="INFO">${stderr} = </msg>
<status endtime="20170810 04:36:46.940" starttime="20170810 04:36:46.940" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:36:46.947" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_dmesg.txt"&gt;/tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:36:46.947" starttime="20170810 04:36:46.946" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:46.947" starttime="20170810 04:36:46.945" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:46.947" starttime="20170810 04:36:46.940" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:46.947" starttime="20170810 04:36:46.811" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:46.947" starttime="20170810 04:36:46.810" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170810 04:36:46.948" level="INFO">${logpath} = /tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_journalctl.txt</msg>
<status endtime="20170810 04:36:46.948" starttime="20170810 04:36:46.948" status="PASS"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170810 04:36:46.950" starttime="20170810 04:36:46.949" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 04:36:46.950" level="INFO">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status endtime="20170810 04:36:46.950" starttime="20170810 04:36:46.950" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170810 04:36:47.019" level="INFO">width=80
path_separator=/
height=24
port=22
prompt=# 
alias=bmc_connection
index=1
encoding=UTF-8
host=9.3.86.161
newline=

timeout=25 seconds
term_type=vt100</msg>
<msg timestamp="20170810 04:36:47.020" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170810 04:36:49.400" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170810 04:36:49.401" starttime="20170810 04:36:46.981" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:49.401" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:36:49.405" level="INFO">${ret_values} = (u'-- Logs begin at Thu 2017-08-10 04:20:28 UTC, end at Thu 2017-08-10 04:36:50 UTC. --\nAug 10 04:20:28 witherspoon kernel: Booting Linux on physical CPU 0x0\nAug 10 04:20:28 witherspoon kernel: Linu...</msg>
<status endtime="20170810 04:36:49.405" starttime="20170810 04:36:46.951" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170810 04:36:49.407" level="INFO">${stdout} = -- Logs begin at Thu 2017-08-10 04:20:28 UTC, end at Thu 2017-08-10 04:36:50 UTC. --
Aug 10 04:20:28 witherspoon kernel: Booting Linux on physical CPU 0x0
Aug 10 04:20:28 witherspoon kernel: Linux ver...</msg>
<status endtime="20170810 04:36:49.407" starttime="20170810 04:36:49.406" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 04:36:49.408" level="INFO">${stderr} = </msg>
<status endtime="20170810 04:36:49.408" starttime="20170810 04:36:49.407" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:36:49.416" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_journalctl.txt"&gt;/tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:36:49.416" starttime="20170810 04:36:49.415" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:49.416" starttime="20170810 04:36:49.413" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:49.416" starttime="20170810 04:36:49.408" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:49.417" starttime="20170810 04:36:46.948" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:49.417" starttime="20170810 04:36:46.948" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170810 04:36:49.417" level="INFO">${logpath} = /tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_meminfo.txt</msg>
<status endtime="20170810 04:36:49.417" starttime="20170810 04:36:49.417" status="PASS"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170810 04:36:49.419" starttime="20170810 04:36:49.418" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 04:36:49.419" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status endtime="20170810 04:36:49.420" starttime="20170810 04:36:49.419" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170810 04:36:49.486" level="INFO">width=80
path_separator=/
height=24
port=22
prompt=# 
alias=bmc_connection
index=1
encoding=UTF-8
host=9.3.86.161
newline=

timeout=25 seconds
term_type=vt100</msg>
<msg timestamp="20170810 04:36:49.487" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170810 04:36:49.543" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170810 04:36:49.543" starttime="20170810 04:36:49.450" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:49.544" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:36:49.544" level="INFO">${ret_values} = (u'MemTotal:         432256 kB\nMemFree:          209544 kB\nMemAvailable:     318852 kB\nBuffers:           30888 kB\nCached:            93820 kB\nSwapCached:            0 kB\nActive:           13620...</msg>
<status endtime="20170810 04:36:49.544" starttime="20170810 04:36:49.420" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170810 04:36:49.544" level="INFO">${stdout} = MemTotal:         432256 kB
MemFree:          209544 kB
MemAvailable:     318852 kB
Buffers:           30888 kB
Cached:            93820 kB
SwapCached:            0 kB
Active:           136204 kB
Inac...</msg>
<status endtime="20170810 04:36:49.544" starttime="20170810 04:36:49.544" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 04:36:49.545" level="INFO">${stderr} = </msg>
<status endtime="20170810 04:36:49.545" starttime="20170810 04:36:49.545" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:36:49.551" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_meminfo.txt"&gt;/tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/20170810043632941804_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:36:49.552" starttime="20170810 04:36:49.551" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:49.552" starttime="20170810 04:36:49.550" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:49.552" starttime="20170810 04:36:49.545" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:49.552" starttime="20170810 04:36:49.418" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:49.552" starttime="20170810 04:36:49.417" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:49.552" starttime="20170810 04:36:45.538" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:49.552" starttime="20170810 04:36:45.538" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:49.552" starttime="20170810 04:36:45.537" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:49.552" starttime="20170810 04:36:45.537" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:49.552" starttime="20170810 04:36:45.536" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:49.552" starttime="20170810 04:36:45.510" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:49.552" starttime="20170810 04:36:45.507" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:49.553" starttime="20170810 04:36:45.507" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:49.553" starttime="20170810 04:36:33.199" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:49.553" starttime="20170810 04:36:33.196" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:49.553" starttime="20170810 04:36:33.196" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:49.553" starttime="20170810 04:36:33.195" status="PASS"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status endtime="20170810 04:36:49.561" starttime="20170810 04:36:49.560" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:49.561" starttime="20170810 04:36:49.553" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:49.561" starttime="20170810 04:36:33.195" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:49.561" starttime="20170810 04:36:29.887" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:49.561" starttime="20170810 04:36:29.887" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status endtime="20170810 04:36:49.562" starttime="20170810 04:36:49.561" status="PASS"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170810 04:36:49.571" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status endtime="20170810 04:36:49.571" starttime="20170810 04:36:49.562" status="PASS"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170810 04:36:49.572" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/12278/obmc-robot/logs/20170810043632941804_TestsTestBasicPoweron/20170810043632941804_PowerOnTest/</msg>
<status endtime="20170810 04:36:49.572" starttime="20170810 04:36:49.572" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status endtime="20170810 04:36:49.573" starttime="20170810 04:36:49.572" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status endtime="20170810 04:36:49.573" starttime="20170810 04:36:49.573" status="PASS"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:36:49.574" level="INFO">Directory '&lt;a href="file:///tmp/fspcibld/12278/obmc-robot/logs"&gt;/tmp/fspcibld/12278/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status endtime="20170810 04:36:49.574" starttime="20170810 04:36:49.574" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:36:49.575" level="INFO">File '&lt;a href="file:///tmp/fspcibld/12278/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/12278/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status endtime="20170810 04:36:49.575" starttime="20170810 04:36:49.575" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:49.575" level="INFO">${exist} = True</msg>
<status endtime="20170810 04:36:49.575" starttime="20170810 04:36:49.574" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status endtime="20170810 04:36:49.576" starttime="20170810 04:36:49.575" status="PASS"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status endtime="20170810 04:36:49.576" starttime="20170810 04:36:49.576" status="PASS"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170810 04:36:49.577" level="INFO">${cur_time} = 2017-08-10 04:36:49:577030</msg>
<status endtime="20170810 04:36:49.577" starttime="20170810 04:36:49.577" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170810 04:36:49.578" level="INFO">${cur_time} = 20170810043649577030</msg>
<status endtime="20170810 04:36:49.578" starttime="20170810 04:36:49.577" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:49.578" level="INFO">${cur_time} = 20170810043649577030</msg>
<status endtime="20170810 04:36:49.578" starttime="20170810 04:36:49.576" status="PASS"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:36:49.579" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/12278/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/12278/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:36:49.579" starttime="20170810 04:36:49.578" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:49.579" starttime="20170810 04:36:49.562" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:49.579" starttime="20170810 04:36:29.512" status="PASS"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170810 04:36:49.581" level="INFO">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170810 04:36:49.581" starttime="20170810 04:36:49.581" status="PASS"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170810 04:36:49.582" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170810 04:36:49.582" starttime="20170810 04:36:49.582" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:49.582" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170810 04:36:49.582" starttime="20170810 04:36:49.580" status="PASS"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 04:36:49.583" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170810 04:36:49.583" starttime="20170810 04:36:49.583" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170810 04:36:49.584" starttime="20170810 04:36:49.584" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170810 04:36:49.590" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170810 04:36:49.593" level="INFO">${rc} = 0</msg>
<msg timestamp="20170810 04:36:49.593" level="INFO">${output} = /tmp/fspcibld/12278/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170810 04:36:49.593" starttime="20170810 04:36:49.584" status="PASS"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170810 04:36:49.596" starttime="20170810 04:36:49.595" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170810 04:36:49.597" starttime="20170810 04:36:49.596" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 04:36:49.598" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20170810 04:36:49.598" starttime="20170810 04:36:49.597" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:49.598" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20170810 04:36:49.598" starttime="20170810 04:36:49.583" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 04:36:49.599" level="INFO">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status endtime="20170810 04:36:49.599" starttime="20170810 04:36:49.599" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170810 04:36:49.600" starttime="20170810 04:36:49.599" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20170810 04:36:49.606" level="INFO">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20170810 04:36:49.637" level="INFO">${rc} = 0</msg>
<msg timestamp="20170810 04:36:49.637" level="INFO">${os_con_pid} = </msg>
<status endtime="20170810 04:36:49.638" starttime="20170810 04:36:49.600" status="PASS"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status endtime="20170810 04:36:49.652" starttime="20170810 04:36:49.648" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 04:36:49.654" level="INFO">${cmd_buf} = kill -9 </msg>
<status endtime="20170810 04:36:49.654" starttime="20170810 04:36:49.652" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170810 04:36:49.658" starttime="20170810 04:36:49.656" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170810 04:36:49.660" level="INFO">${rc} = None</msg>
<msg timestamp="20170810 04:36:49.660" level="INFO">${output} = None</msg>
<status endtime="20170810 04:36:49.660" starttime="20170810 04:36:49.658" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170810 04:36:49.661" starttime="20170810 04:36:49.660" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:36:49.672" level="INFO">Copied file from '&lt;a href="file:///tmp/9.3.86.161_os_console"&gt;/tmp/9.3.86.161_os_console&lt;/a&gt;' to '&lt;a href="file:///tmp/fspcibld/12278/obmc-robot/logs/9.3.86.161_os_console"&gt;/tmp/fspcibld/12278/obmc-robot/logs/9.3.86.161_os_console&lt;/a&gt;'.</msg>
<status endtime="20170810 04:36:49.673" starttime="20170810 04:36:49.664" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:49.673" starttime="20170810 04:36:49.663" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:49.673" starttime="20170810 04:36:49.661" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20170810 04:36:49.674" level="INFO">${output} = </msg>
<status endtime="20170810 04:36:49.674" starttime="20170810 04:36:49.673" status="PASS"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg timestamp="20170810 04:36:49.675" level="INFO">${loc_quiet} = 1</msg>
<status endtime="20170810 04:36:49.675" starttime="20170810 04:36:49.675" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Cmd Fnc" library="gen_cmd">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status endtime="20170810 04:36:49.736" starttime="20170810 04:36:49.677" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:49.737" level="INFO">${rc} = 0</msg>
<msg timestamp="20170810 04:36:49.795" level="INFO">${output} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 


--== Welcome to Host...</msg>
<status endtime="20170810 04:36:49.795" starttime="20170810 04:36:49.675" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:36:49.829" level="INFO">${sol_log} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 


--== Welcome to Host...</msg>
<status endtime="20170810 04:36:49.829" starttime="20170810 04:36:49.579" status="PASS"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg timestamp="20170810 04:36:49.875" level="INFO">spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 


--== Welcome to Hostboot hostboot-faac61e/hbicore.bin ==--

  3.85052|secure|Booting in non-secure mode.
  3.85053|secure|SecureROM invalid - skipping functionality
  5.56586|ERRL|Dumping errors reported prior to registration
  6.33888|ISTEP  6. 5 - host_init_fsi
  6.44379|ISTEP  6. 6 - host_set_ipl_parms
  6.47238|ISTEP  6. 7 - host_discover_targets
 11.65885|HWAS|PRESENT&gt; DIMM[03]=FFFF000000000000
 11.65886|HWAS|PRESENT&gt; Proc[05]=C000000000000000
 11.68287|ISTEP  6. 8 - host_update_master_tpm
 11.69059|SECURE|Security Access Bit&gt; 0x0000000000000000
 11.69059|SECURE|Secure Mode Disable (via Jumper)&gt; 0xC000000000000000
 11.69070|ISTEP  6. 9 - host_gard
 11.72339|ISTEP  6.10 - host_revert_sbe_mcs_setup
 11.73383|ISTEP  6.11 - host_start_occ_xstop_handler
 11.73534|ISTEP  6.12 - host_voltage_config
 11.77112|ISTEP  7. 2 - mss_volt
 12.55689|ISTEP  7. 3 - mss_freq
 12.79143|ISTEP  7. 4 - mss_eff_config
 15.72986|ISTEP  7. 5 - mss_attr_update
 15.74008|ISTEP  8. 1 - host_slave_sbe_config
 15.77538|ISTEP  8. 2 - host_setup_sbe
 15.78031|ISTEP  8. 3 - host_cbs_start
 15.79513|ISTEP  8. 4 - proc_check_slave_sbe_seeprom_complete
 22.40763|ISTEP  8. 5 - host_attnlisten_proc
 22.40872|ISTEP  8. 6 - host_p9_fbc_eff_config
 22.41507|ISTEP  8. 7 - host_p9_eff_config_links
 22.42347|ISTEP  8. 8 - proc_attr_update
 22.42503|ISTEP  8. 9 - proc_chiplet_fabric_scominit
 22.45529|ISTEP  8.10 - proc_xbus_scominit
 24.01645|ISTEP  8.11 - proc_xbus_enable_ridi
 24.02120|ISTEP  9. 1 - fabric_erepair
 24.02886|ISTEP  9. 2 - fabric_io_dccal
 24.69755|ISTEP  9. 3 - fabric_pre_trainadv
 24.70356|ISTEP  9. 4 - fabric_io_run_training
 24.82884|ISTEP  9. 5 - fabric_post_trainadv
 24.83503|ISTEP  9. 6 - proc_smp_link_layer
 24.83937|ISTEP  9. 7 - proc_fab_iovalid
 24.85680|ISTEP  9. 8 - host_fbc_eff_config_aggregate
 24.86399|ISTEP 10. 1 - proc_build_smp
 25.25749|ISTEP 10. 2 - host_slave_sbe_update
 25.95027|ISTEP 10. 3 - host_set_voltages
 26.17498|ISTEP 10. 4 - proc_cen_ref_clk_enable
 26.18583|ISTEP 10. 5 - proc_enable_osclite
 26.18701|ISTEP 10. 6 - proc_chiplet_scominit
 26.23818|ISTEP 10. 7 - proc_abus_scominit
 26.24732|ISTEP 10. 8 - proc_obus_scominit
 26.33364|ISTEP 10. 9 - proc_npu_scominit
 26.35498|ISTEP 10.10 - proc_pcie_scominit
 26.39663|ISTEP 10.11 - proc_scomoverride_chiplets
 26.39828|ISTEP 10.12 - proc_chiplet_enable_ridi
 26.40188|ISTEP 10.13 - host_rng_bist
 26.40570|ISTEP 10.14 - host_update_redundant_tpm
 26.47764|ISTEP 11. 1 - host_prd_hwreconfig
 26.48137|ISTEP 12. 1 - mss_getecid
 26.48589|ISTEP 13. 1 - host_disable_memvolt
 26.57537|ISTEP 13. 2 - mem_pll_reset
 26.58775|ISTEP 13. 3 - mem_pll_initf
 26.62169|ISTEP 13. 4 - mem_pll_setup
 26.64645|ISTEP 13. 6 - mem_startclocks
 26.66352|ISTEP 13. 7 - host_enable_memvolt
 26.66990|ISTEP 13. 8 - mss_scominit
 26.99270|ISTEP 13. 9 - mss_ddr_phy_reset
 27.09099|ISTEP 13.10 - mss_draminit
 27.27298|ISTEP 13.11 - mss_draminit_training
 27.69107|ISTEP 13.12 - mss_draminit_trainadv
 27.69463|ISTEP 13.13 - mss_draminit_mc
 27.71798|ISTEP 14. 1 - mss_memdiag
 79.56160|ISTEP 14. 2 - mss_thermal_init
 79.56820|ISTEP 14. 3 - proc_pcie_config
 79.57818|ISTEP 14. 4 - mss_power_cleanup
 79.58014|ISTEP 14. 5 - proc_setup_bars
 79.61380|ISTEP 14. 6 - proc_htm_setup
 79.62273|ISTEP 14. 7 - proc_exit_cache_contained
 79.63469|ISTEP 15. 1 - host_build_stop_image
 82.98355|ISTEP 15. 2 - proc_set_pba_homer_bar
 82.98728|ISTEP 15. 3 - host_establish_ex_chiplet
 82.99566|ISTEP 15. 4 - host_start_stop_engine
 83.09941|ISTEP 16. 1 - host_activate_master
  0.00715|ISTEP 16. 2 - host_activate_slave_cores
 84.72611|ISTEP 16. 3 - host_secure_rng
 84.73203|ISTEP 16. 4 - mss_scrub
 84.71804|ISTEP 16. 5 - host_ipl_complete
 84.76671|ISTEP 16. 6 - host_load_io_ppe
 84.73548|ISTEP 18.11 - proc_tod_setup
 84.79966|ISTEP 18.12 - proc_tod_init
 84.79665|ISTEP 20. 1 - host_load_payload
 85.04833|ISTEP 20. 2 - host_load_hdat
 88.80567|ISTEP 21. 1 - host_runtime_setup
102.02732|================================================
102.03087|Error reported by occc (0x2A00) PLID 0x90000022
102.03087|  &lt;none&gt;
102.03088|  ModuleId   0x0d unknown
102.03088|  ReasonCode 0x2ada unknown
102.03266|  UserData1   : 0x0000080000000800
102.03267|  UserData2   : 0x00000000110d0000
102.03267|------------------------------------------------
102.03268|  Callout type             : Procedure Callout
102.03268|  Procedure                : EPUB_PRC_HB_CODE
102.03269|  Priority                 : SRCI_PRIORITY_LOW
102.03269|------------------------------------------------
102.03270|  Hostboot Build ID: hostboot-faac61e/hbicore.bin
102.03270|================================================
102.50828|htmgt|OCCs are now running in ACTIVE state
102.50926|ISTEP 21. 2 - host_verify_hdat
102.49136|ISTEP 21. 3 - host_start_payload
[  119.142688311,5] OPAL skiboot-07937c7 starting...
[  119.142691183,7] initial console log level: memory 7, driver 5
[  119.142693321,6] CPU: P9 generation processor (max 4 threads/core)
[  119.142695347,7] CPU: Boot CPU PIR is 0x084c PVR is 0x004e1200
[  119.142697453,7] CPU: Initial max PIR set to 0x7fff
[  119.144119228,7] OPAL table: 0x300e3640 .. 0x300e3b80, branch table: 0x30002000
[  119.144123234,7] Assigning physical memory map table for nimbus
[  119.144126430,7] Parsing HDAT...
[  119.144127779,5] SPIRA-S found.
[  119.144130995,6] BMC #0: HW version 3, SW version 2, chip DD1.0
[  119.144489951,6] SP Family is ibm,ast2500,openbmc
[  119.144496809,7] LPC: IOPATH chip id = 0
[  119.144498258,7] LPC: FW BAR       = f0000000
[  119.144499901,7] LPC: MEM BAR      = e0000000
[  119.144501477,7] LPC: IO BAR       = d0010000
[  119.144503058,7] LPC: Internal BAR = c0012000
[  119.144516487,7] LPC UART: base addr = 3f8 (3f8) size = 1 clk = 1843200, baud = 115200
[  119.144519434,7] LPC: BT [0, 0] sms_int: 0, bmc_int: 0
[  119.145230439,5] UART: Using UART at 0x60300d00103f8
[  119.147812860,3] I2C: HDAT version 2 not supported! THIS IS A BUG
[  119.148083166,3] I2C: HDAT version 2 not supported! THIS IS A BUG
[  119.148681947,5] CHIP: Chip ID 0000 type: P9N DD2.0
[  119.148755942,5] CHIP: Chip ID 0008 type: P9N DD2.0
[  119.149052607,5] SLW: Enabling: stop0_lite
[  119.149103678,5] SLW: Enabling: stop0
[  119.149256236,5] PLAT: Using virtual UART
[  119.149477070,7] LPC: Routing irq 9, policy: 0 (r=1)
[  119.149479056,7] LPC: SerIRQ 9 using route 0 targetted at OPAL
[  119.149687581,5] PLAT: Detected Witherspoon platform
[  119.149751387,5] PLAT: Detected BMC platform OpenBMC
[  119.189803460,5] CPU: All 176 processors called in...
[  119.182878196,7] XIVE[CPU 084d] Initialized TMA (VP: 1/cd W01=0000000000000000)
[  119.177367156,7] XIVE[CPU 000e] Initialized TMA (VP: 0/8e W01=0000000000000000)
[  119.181159317,7] XIVE[CPU 0009] Initialized TMA (VP: 0/89 W01=0000000000000000)
[  119.185230544,7] XIVE[CPU 000d] Initialized TMA (VP: 0/8d W01=0000000000000000)
[  119.181205861,7] XIVE[CPU 000f] Initialized TMA (VP: 0/8f W01=0000000000000000)
[  119.172930663,7] XIVE[CPU 0017] Initialized TMA (VP: 0/97 W01=0000000000000000)
[    2.360529875,5] FLASH: Found system flash:  id:0
[    2.360655268,5] BT: Interface initialized, IO 0x00e4
[    2.360702760,7] LPC: Routing irq 10, policy: 0 (r=1)
[    2.360704595,7] LPC: SerIRQ 10 using route 1 targetted at OPAL
[    3.309679070,5] NVRAM: Size is 576 KB
[    4.426756535,5] STB: secure and trusted boot not supported
[    4.426756272,7] LPC-MBOX: Sending BMC interrupt
[    4.426877968,5] OPAL: Using OPAL UART console
[    4.426924425,7] LPC: Routing irq 4, policy: 0 (r=1)
[    4.426926120,7] LPC: SerIRQ 4 using route 2 targetted at OPAL
[    4.429573127,5] VAS: Initialized
[    4.429708660,3] NX0: Unknown NX type!
[    4.429749414,3] NX0: ERROR: Unknown NX type!
[    4.429791502,5] Found ibm,power9-nx
[    4.429825320,3] NX0: DMA VAS MMIO BAR, 0x0006019100000000, xcfg 0x201105e
[    4.429965648,3] NX8: Unknown NX type!
[    4.430008714,3] NX8: ERROR: Unknown NX type!
[    4.430047320,5] Found ibm,power9-nx
[    4.430074209,3] NX8: DMA VAS MMIO BAR, 0x0006219100000000, xcfg 0x201105e
[    6.029184023,3] FLASH: flash subpartition not found.
[    6.029267355,3] FLASH: FAILED reading subpart info. rc=-10
[    6.031729423,3] CAPP: Error loading ucode lid. index=200d1
[    6.057026147,5] PCI: Resetting PHBs and training links...
[    7.256543816,5] PCI: Probing slots...
[    7.312934202,3] PCI: built-in device not found:  (loc: 100)
[    7.313002089,3] PCI: built-in device not found: GPU0 down (loc: 250)
[    7.313070120,3] PCI: built-in device not found: GPU0 (loc: 400)
[    7.313113838,3] PCI: built-in device not found: GPU1 down (loc: 258)
[    7.313156364,3] PCI: built-in device not found: GPU1 (loc: 500)
[    7.313196871,3] PCI: built-in device not found: GPU2 down (loc: 260)
[    7.313252234,3] PCI: built-in device not found: GPU2 (loc: 600)
[    7.313309217,3] PCI: built-in device not found:  (loc: 100)
[    7.313360719,3] PCI: built-in device not found: GPU3 down (loc: 220)
[    7.313415716,3] PCI: built-in device not found: GPU3 (loc: 300)
[    7.313459202,3] PCI: built-in device not found: GPU4 down (loc: 228)
[    7.313520506,3] PCI: built-in device not found: GPU4 (loc: 400)
[    7.313563912,3] PCI: built-in device not found: GPU5 down (loc: 268)
[    7.313618965,3] PCI: built-in device not found: GPU5 (loc: 500)
[    7.313675279,5] PHB#0000:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[    7.313742058,5] PHB#0001:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..01 
[    7.313811352,5] PHB#0001:01:00.0 [EP  ] 104c 8241 R:02 C:0c0330 (      usb-xhci) 
[    7.313875271,5] PHB#0002:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..02 
[    7.313934247,5] PHB#0002:01:00.0 [ETOX] 1a03 1150 R:04 C:060400 B:02..02 
[    7.314001261,5] PHB#0002:02:00.0 [PCID] 1a03 2000 R:41 C:030000 (           vga) 
[    7.314074683,5] PHB#0003:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[    7.314153812,5] PHB#0004:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..06 
[    7.314221691,5] PHB#0004:01:00.0 [SWUP] 10b5 8725 R:ca C:060400 B:02..06 
[    7.314314675,5] PHB#0004:02:02.0 [SWDN] 10b5 8725 R:ca C:060400 B:03..03 SLOT=S000403 
[    7.314405338,5] PHB#0004:03:00.0 [LGCY] 1b4b 9235 R:11 C:010601 (          sata) LOC_CODE=S000403
[    7.314499757,5] PHB#0004:02:0a.0 [SWDN] 10b5 8725 R:ca C:060400 B:04..04 SLOT=GPU0 down 
[    7.314581232,5] PHB#0004:02:0b.0 [SWDN] 10b5 8725 R:ca C:060400 B:05..05 SLOT=GPU1 down 
[    7.314662515,5] PHB#0004:02:0c.0 [SWDN] 10b5 8725 R:ca C:060400 B:06..06 SLOT=GPU2 down 
[    7.314744784,5] PHB#0004:01:00.1 [EP  ] 10b5 87d0 R:ca C:088000 (system-peripheral) 
[    7.314819226,5] PHB#0004:01:00.2 [EP  ] 10b5 87d0 R:ca C:088000 (system-peripheral) 
[    7.314896821,5] PHB#0004:01:00.3 [EP  ] 10b5 87d0 R:ca C:088000 (system-peripheral) 
[    7.314955370,5] PHB#0004:01:00.4 [EP  ] 10b5 87d0 R:ca C:088000 (system-peripheral) 
[    7.315030207,5] PHB#0005:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..01 
[    7.315098857,5] PHB#0005:01:00.0 [EP  ] 14e4 1657 R:01 C:020000 (      ethernet) 
[    7.315177885,5] PHB#0005:01:00.1 [EP  ] 14e4 1657 R:01 C:020000 (      ethernet) 
[    7.315245313,5] PHB#0006:00:00.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU0 
[    7.315337739,5] PHB#0006:00:00.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU0 
[    7.315420925,5] PHB#0006:00:01.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU1 
[    7.315500935,5] PHB#0006:00:01.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU1 
[    7.315593562,5] PHB#0006:00:02.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU2 
[    7.315676602,5] PHB#0006:00:02.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU2 
[    7.315752773,5] PHB#0007:00:00.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU3 
[    7.315829420,5] PHB#0007:00:00.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU3 
[    7.315924968,5] PHB#0007:00:01.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU4 
[    7.316017240,5] PHB#0007:00:01.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU4 
[    7.316100006,5] PHB#0007:00:02.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU5 
[    7.316176610,5] PHB#0007:00:02.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU5 
[    7.316262555,5] PHB#0030:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[    7.316328747,5] PHB#0033:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[    7.316394586,5] PHB#0034:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[    7.316460499,5] PHB#0035:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..08 
[    7.316527903,5] PHB#0035:01:00.0 [SWUP] 10b5 8725 R:ca C:060400 B:02..08 
[    7.316605946,5] PHB#0035:02:08.0 [SWDN] 10b5 8725 R:ca C:060400 B:03..07 
[    7.316680476,5] PHB#0035:02:0d.0 [SWDN] 10b5 8725 R:ca C:060400 B:08..08 SLOT=GPU5 down 
[   16.235686414,5] IPMI: Resetting boot count on successful boot
[   16.235771068,5] INIT: Waiting for kernel...
[   16.235816979,5] INIT: 64-bit LE kernel discovered
[   16.235875355,5] OCC: All Chip Rdy after 0 ms
[   16.277474787,5] INIT: Starting kernel at 0x20010000, fdt at 0x309513c8 343552 bytes)
[   17.299210450,5] OPAL: Switch to little-endian OS
[    0.000000] opal: OPAL detected !
[    0.000000] Page sizes from device-tree:
[    0.000000] Page size shift = 12 AP=0x0
[    0.000000] Page size shift = 16 AP=0x5
[    0.000000] Page size shift = 21 AP=0x1
[    0.000000] Page size shift = 30 AP=0x2
[    0.000000] Initializing Radix MMU
[    0.000000] Partition table c000201fff7f0000
[    0.000000] Mapped range 0x0 - 0x2000000000 with 0x40000000
[    0.000000] Mapped range 0x200000000000 - 0x202000000000 with 0x40000000
[    0.000000] Process table c000201ffe800000 and radix root for kernel: c000000001420000
[    0.000000] Linux version 4.12.3-openpower1 (fspbld@gfwa125.aus.stglabs.ibm.com) (gcc version 6.3.0 (Buildroot 2017.05.2-00163-g8035745) ) #2 SMP Sun Aug 6 21:18:12 CDT 2017
[    0.000000] OPAL: Found memory mapped LPC bus on chip 0
[    0.000000] Using PowerNV machine description
[    0.000000] bootconsole [udbg0] enabled
[    0.000000] CPU maps initialized for 4 threads per core
 -&gt; smp_release_cpus()
spinning_secondaries = 175
 &lt;- smp_release_cpus()
[    0.000000] -----------------------------------------------------
[    0.000000] ppc64_pft_size    = 0x0
[    0.000000] phys_mem_size     = 0x4000000000
[    0.000000] dcache_bsize      = 0x80
[    0.000000] icache_bsize      = 0x80
[    0.000000] cpu_features      = 0x075c7afd18500249
[    0.000000]   possible        = 0x5f7fffff18500649
[    0.000000]   always          = 0x0000000018100040
[    0.000000] cpu_user_features = 0xdc0065c2 0xaee00000
[    0.000000] mmu_features      = 0x3c006041
[    0.000000] firmware_features = 0x0000000010000000
[    0.000000] -----------------------------------------------------
[    0.000000] numa:   NODE_DATA [mem 0x1fffff6700-0x1fffffffff]
[    0.000000] numa:   NODE_DATA [mem 0x201fff6d6700-0x201fff6dffff]
[    0.000000] numa:   NODE_DATA [mem 0x201fff6ace00-0x201fff6b66ff]
[    0.000000] numa:     NODE_DATA(250) on node 8
[    0.000000] numa:   NODE_DATA [mem 0x201fff6a3500-0x201fff6acdff]
[    0.000000] numa:     NODE_DATA(251) on node 8
[    0.000000] numa:   NODE_DATA [mem 0x201fff699c00-0x201fff6a34ff]
[    0.000000] numa:     NODE_DATA(252) on node 8
[    0.000000] numa:   NODE_DATA [mem 0x201fff690300-0x201fff699bff]
[    0.000000] numa:     NODE_DATA(253) on node 8
[    0.000000] numa:   NODE_DATA [mem 0x201fff686a00-0x201fff6902ff]
[    0.000000] numa:     NODE_DATA(254) on node 8
[    0.000000] numa:   NODE_DATA [mem 0x201fff67d100-0x201fff6869ff]
[    0.000000] numa:     NODE_DATA(255) on node 8
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0000000)
[    0.000000] PCI host bridge /pciex@600c3c0000000 (primary) ranges:
[    0.000000]  MEM 0x000600c000000000..0x000600c07ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006000000000000..0x0006003fffffffff -&gt; 0x0006000000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0xfe000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0100000)
[    0.000000] PCI host bridge /pciex@600c3c0100000  ranges:
[    0.000000]  MEM 0x000600c080000000..0x000600c0fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006004000000000..0x0006007fffffffff -&gt; 0x0006004000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfd800)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0200000)
[    0.000000] PCI host bridge /pciex@600c3c0200000  ranges:
[    0.000000]  MEM 0x000600c100000000..0x000600c17ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006008000000000..0x000600bfffffffff -&gt; 0x0006008000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfd000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0300000)
[    0.000000] PCI host bridge /pciex@600c3c0300000  ranges:
[    0.000000]  MEM 0x000600c180000000..0x000600c1fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006020000000000..0x0006023fffffffff -&gt; 0x0006020000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0xfc000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0400000)
[    0.000000] PCI host bridge /pciex@600c3c0400000  ranges:
[    0.000000]  MEM 0x000600c200000000..0x000600c27ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006024000000000..0x0006027fffffffff -&gt; 0x0006024000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfb800)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0500000)
[    0.000000] PCI host bridge /pciex@600c3c0500000  ranges:
[    0.000000]  MEM 0x000600c280000000..0x000600c2fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006028000000000..0x000602bfffffffff -&gt; 0x0006028000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfb000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0000000)
[    0.000000] PCI host bridge /pciex@620c3c0000000  ranges:
[    0.000000]  MEM 0x000620c000000000..0x000620c07ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006200000000000..0x0006203fffffffff -&gt; 0x0006200000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0x1fe000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0300000)
[    0.000000] PCI host bridge /pciex@620c3c0300000  ranges:
[    0.000000]  MEM 0x000620c180000000..0x000620c1fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006220000000000..0x0006223fffffffff -&gt; 0x0006220000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0x1fd000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0400000)
[    0.000000] PCI host bridge /pciex@620c3c0400000  ranges:
[    0.000000]  MEM 0x000620c200000000..0x000620c27ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006224000000000..0x0006227fffffffff -&gt; 0x0006224000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0x1fc800)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0500000)
[    0.000000] PCI host bridge /pciex@620c3c0500000  ranges:
[    0.000000]  MEM 0x000620c280000000..0x000620c2fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006228000000000..0x000622bfffffffff -&gt; 0x0006228000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0x1fc000)
[    0.000000] Initializing NPU PHB (/pciex@6030200000000)
[    0.000000] PCI host bridge /pciex@6030200000000  ranges:
[    0.000000]  MEM 0x0006030201600000..0x000603020171ffff -&gt; 0x0006030201600000 
[    0.000000]   Not support M64 window
[    0.000000]   016 (015) PE's M32: 0x130000 [segment=0x13000]
[    0.000000] Initializing NPU PHB (/pciex@6230200000000)
[    0.000000] PCI host bridge /pciex@6230200000000  ranges:
[    0.000000]  MEM 0x0006230201600000..0x000623020171ffff -&gt; 0x0006230201600000 
[    0.000000]   Not support M64 window
[    0.000000]   016 (015) PE's M32: 0x130000 [segment=0x13000]
[    0.000000] OPAL nvram setup, 589824 bytes
[    0.000000] Zone ranges:
[    0.000000]   DMA      [mem 0x0000000000000000-0x0000201fffffffff]
[    0.000000]   DMA32    empty
[    0.000000]   Normal   empty
[    0.000000] Movable zone start for each node
[    0.000000] Early memory node ranges
[    0.000000]   node   0: [mem 0x0000000000000000-0x0000001fffffffff]
[    0.000000]   node   8: [mem 0x0000200000000000-0x0000201fffffffff]
[    0.000000] Initmem setup node 0 [mem 0x0000000000000000-0x0000001fffffffff]
[    0.000000] Initmem setup node 8 [mem 0x0000200000000000-0x0000201fffffffff]
[    0.000000] Could not find start_pfn for node 250
[    0.000000] Initmem setup node 250 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 251
[    0.000000] Initmem setup node 251 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 252
[    0.000000] Initmem setup node 252 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 253
[    0.000000] Initmem setup node 253 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 254
[    0.000000] Initmem setup node 254 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 255
[    0.000000] Initmem setup node 255 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] percpu: Embedded 2 pages/cpu @c000001ff84b0000 s67992 r0 d63080 u131072
[    0.000000] Built 8 zonelists in Node order, mobility grouping on.  Total pages: 4190720
[    0.000000] Policy zone: DMA
[    0.000000] Kernel command line: console=tty0 console=hvc0 powersave=off
[    0.000000] log_buf_len individual max cpu contribution: 4096 bytes
[    0.000000] log_buf_len total cpu_extra contributions: 716800 bytes
[    0.000000] log_buf_len min size: 1048576 bytes
[    0.000000] log_buf_len: 2097152 bytes
[    0.000000] early log buf free: 1034148(98%)
[    0.000000] PID hash table entries: 4096 (order: -1, 32768 bytes)
[    0.000000] Memory: 267913408K/268435456K available (6144K kernel code, 1088K rwdata, 1968K rodata, 11392K init, 1693K bss, 522048K reserved, 0K cma-reserved)
[    0.000000] SLUB: HWalign=128, Order=0-3, MinObjects=0, CPUs=176, Nodes=256
[    0.000000] Hierarchical RCU implementation.
[    0.000000] 	RCU debugfs-based tracing is enabled.
[    0.000000] 	RCU restricting CPUs from NR_CPUS=2048 to nr_cpu_ids=176.
[    0.000000] RCU: Adjusting geometry for rcu_fanout_leaf=16, nr_cpu_ids=176
[    0.000000] NR_IRQS:512 nr_irqs:512 16
[    0.000000] xive: VP block alloc, for max VCPUs 176 use order 8
[    0.000000] xive: Interrupt handling intialized with native backend
[    0.000000] xive: Using priority 7 for all interrupts
[    0.000000] xive: Using 64kB queues
[    0.000004] time_init: 56 bit decrementer (max: 7fffffffffffff)
[    0.000228] clocksource: timebase: mask: 0xffffffffffffffff max_cycles: 0x761537d007, max_idle_ns: 440795202126 ns
[    0.000602] clocksource: timebase mult[1f40000] shift[24] registered
[    0.001154] Console: colour dummy device 80x25
[    0.003660] console [tty0] enabled
[    0.003828] console [hvc0] enabled
[    0.003828] console [hvc0] enabled
[    0.004030] bootconsole [udbg0] disabled
[    0.004030] bootconsole [udbg0] disabled
[    0.004759] pid_max: default: 180224 minimum: 1408
[    0.006361] Security Framework initialized
[    0.010076] Dentry cache hash table entries: 33554432 (order: 12, 268435456 bytes)
[    0.111714] Inode-cache hash table entries: 16777216 (order: 11, 134217728 bytes)
[    0.186188] Mount-cache hash table entries: 524288 (order: 6, 4194304 bytes)
[    0.186436] Mountpoint-cache hash table entries: 524288 (order: 6, 4194304 bytes)
[    0.192231] EEH: PowerNV platform initialized
[    0.192393] POWER9 performance monitor hardware support registered
[    0.194037] smp: Bringing up secondary CPUs ...
[    0.754084] smp: Brought up 8 nodes, 176 CPUs
[    0.754254] numa: Node 0 CPUs: 0-87
[    0.754345] numa: Node 8 CPUs: 88-175
[    0.754436] numa: Node 250 CPUs:
[    0.754509] numa: Node 251 CPUs:
[    0.754601] numa: Node 252 CPUs:
[    0.754681] numa: Node 253 CPUs:
[    0.754772] numa: Node 254 CPUs:
[    0.754857] numa: Node 255 CPUs:
[    0.775701] devtmpfs: initialized
[    0.790944] evm: security.capability
[    0.791796] clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 19112604462750000 ns
[    0.792126] futex hash table entries: 65536 (order: 7, 8388608 bytes)
[    0.793988] NET: Registered protocol family 16
[    0.794764] cpuidle: using governor menu
[    0.863148] PCI: Probing PCI hardware
[    0.863267] PCI host bridge to bus 0000:00
[    0.863371] pci_bus 0000:00: root bus resource [mem 0x600c000000000-0x600c07ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.863540] pci_bus 0000:00: root bus resource [mem 0x6000000000000-0x6003fbfffffff 64bit pref]
[    0.863701] pci_bus 0000:00: root bus resource [bus 00-ff]
[    0.863918] pci 0000:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.864061] pci 0000:00:00.0: disabling bridge mem windows
[    0.864336] pci 0000:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.864526] pci 0000:00:00.0: PCI bridge to [bus 01-ff]
[    0.864691] PCI host bridge to bus 0001:00
[    0.864748] pci_bus 0001:00: root bus resource [mem 0x600c080000000-0x600c0fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.864896] pci_bus 0001:00: root bus resource [mem 0x6004000000000-0x6007f7fffffff 64bit pref]
[    0.865082] pci_bus 0001:00: root bus resource [bus 00-ff]
[    0.865274] pci 0001:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.865375] pci 0001:00:00.0: disabling bridge mem windows
[    0.865849] pci 0001:01:00.0: Disabling memory decoding and releasing memory resources.
[    0.865957] pci 0001:01:00.0: BAR2 [mem size 0x00002000 64bit]: requesting alignment to 0x10000
[    0.866343] pci 0001:00:00.0: PCI bridge to [bus 01]
[    0.866565] PCI host bridge to bus 0002:00
[    0.866626] pci_bus 0002:00: root bus resource [mem 0x600c100000000-0x600c17ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.866805] pci_bus 0002:00: root bus resource [mem 0x6008000000000-0x600bf7fffffff 64bit pref]
[    0.866955] pci_bus 0002:00: root bus resource [bus 00-ff]
[    0.867160] pci 0002:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.867302] pci 0002:00:00.0: disabling bridge mem windows
[    0.867776] pci 0002:01:00.0: Disabling memory decoding and releasing memory resources.
[    0.867890] pci 0002:01:00.0: disabling bridge mem windows
[    0.868190] pci 0002:00:00.0: PCI bridge to [bus 01-02]
[    0.868581] pci 0002:02:00.0: Disabling memory decoding and releasing memory resources.
[    0.868848] pci 0002:01:00.0: PCI bridge to [bus 02]
[    0.869050] PCI host bridge to bus 0003:00
[    0.869108] pci_bus 0003:00: root bus resource [mem 0x600c180000000-0x600c1fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.869306] pci_bus 0003:00: root bus resource [mem 0x6020000000000-0x6023fbfffffff 64bit pref]
[    0.869458] pci_bus 0003:00: root bus resource [bus 00-ff]
[    0.869650] pci 0003:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.869754] pci 0003:00:00.0: disabling bridge mem windows
[    0.870032] pci 0003:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.870220] pci 0003:00:00.0: PCI bridge to [bus 01-ff]
[    0.870369] PCI host bridge to bus 0004:00
[    0.870425] pci_bus 0004:00: root bus resource [mem 0x600c200000000-0x600c27ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.870621] pci_bus 0004:00: root bus resource [mem 0x6024000000000-0x6027f7fffffff 64bit pref]
[    0.870771] pci_bus 0004:00: root bus resource [bus 00-ff]
[    0.870961] pci 0004:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.871073] pci 0004:00:00.0: disabling bridge mem windows
[    0.871586] pci 0004:01:00.0: Disabling memory decoding and releasing memory resources.
[    0.871679] pci 0004:01:00.0: disabling bridge mem windows
[    0.872237] pci 0004:01:00.1: Disabling memory decoding and releasing memory resources.
[    0.872371] pci 0004:01:00.1: BAR0 [mem size 0x00002000]: requesting alignment to 0x10000
[    0.872834] pci 0004:01:00.2: Disabling memory decoding and releasing memory resources.
[    0.872923] pci 0004:01:00.2: BAR0 [mem size 0x00002000]: requesting alignment to 0x10000
[    0.873369] pci 0004:01:00.3: Disabling memory decoding and releasing memory resources.
[    0.873428] random: fast init done
[    0.873567] pci 0004:01:00.3: BAR0 [mem size 0x00002000]: requesting alignment to 0x10000
[    0.874038] pci 0004:01:00.4: Disabling memory decoding and releasing memory resources.
[    0.874147] pci 0004:01:00.4: BAR0 [mem size 0x00002000]: requesting alignment to 0x10000
[    0.874491] pci 0004:00:00.0: PCI bridge to [bus 01-06]
[    0.875032] pci 0004:02:02.0: Disabling memory decoding and releasing memory resources.
[    0.875158] pci 0004:02:02.0: disabling bridge mem windows
[    0.875645] pci 0004:02:0a.0: Disabling memory decoding and releasing memory resources.
[    0.875735] pci 0004:02:0a.0: disabling bridge mem windows
[    0.876247] pci 0004:02:0b.0: Disabling memory decoding and releasing memory resources.
[    0.876377] pci 0004:02:0b.0: disabling bridge mem windows
[    0.876861] pci 0004:02:0c.0: Disabling memory decoding and releasing memory resources.
[    0.876936] pci 0004:02:0c.0: disabling bridge mem windows
[    0.877274] pci 0004:01:00.0: PCI bridge to [bus 02-06]
[    0.879262] pci 0004:03:00.0: Disabling memory decoding and releasing memory resources.
[    0.879360] pci 0004:03:00.0: BAR5 [mem size 0x00000800]: requesting alignment to 0x10000
[    0.879689] pci 0004:02:02.0: PCI bridge to [bus 03]
[    0.879897] pci 0004:02:0a.0: PCI bridge to [bus 04]
[    0.880093] pci 0004:02:0b.0: PCI bridge to [bus 05]
[    0.880301] pci 0004:02:0c.0: PCI bridge to [bus 06]
[    0.880499] PCI host bridge to bus 0005:00
[    0.880573] pci_bus 0005:00: root bus resource [mem 0x600c280000000-0x600c2fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.880746] pci_bus 0005:00: root bus resource [mem 0x6028000000000-0x602bf7fffffff 64bit pref]
[    0.880904] pci_bus 0005:00: root bus resource [bus 00-ff]
[    0.881100] pci 0005:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.881245] pci 0005:00:00.0: disabling bridge mem windows
[    0.881760] pci 0005:01:00.0: Disabling memory decoding and releasing memory resources.
[    0.882296] pci 0005:01:00.1: Disabling memory decoding and releasing memory resources.
[    0.882653] pci 0005:00:00.0: PCI bridge to [bus 01]
[    0.882890] PCI host bridge to bus 0030:00
[    0.882952] pci_bus 0030:00: root bus resource [mem 0x620c000000000-0x620c07ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.883128] pci_bus 0030:00: root bus resource [mem 0x6200000000000-0x6203fbfffffff 64bit pref]
[    0.883285] pci_bus 0030:00: root bus resource [bus 00-ff]
[    0.883470] pci 0030:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.883601] pci 0030:00:00.0: disabling bridge mem windows
[    0.883853] pci 0030:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.884037] pci 0030:00:00.0: PCI bridge to [bus 01-ff]
[    0.884186] PCI host bridge to bus 0033:00
[    0.884261] pci_bus 0033:00: root bus resource [mem 0x620c180000000-0x620c1fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.884449] pci_bus 0033:00: root bus resource [mem 0x6220000000000-0x6223fbfffffff 64bit pref]
[    0.884597] pci_bus 0033:00: root bus resource [bus 00-ff]
[    0.884779] pci 0033:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.884871] pci 0033:00:00.0: disabling bridge mem windows
[    0.885129] pci 0033:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.885332] pci 0033:00:00.0: PCI bridge to [bus 01-ff]
[    0.885468] PCI host bridge to bus 0034:00
[    0.885537] pci_bus 0034:00: root bus resource [mem 0x620c200000000-0x620c27ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.885701] pci_bus 0034:00: root bus resource [mem 0x6224000000000-0x6227f7fffffff 64bit pref]
[    0.885861] pci_bus 0034:00: root bus resource [bus 00-ff]
[    0.886009] pci 0034:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.886123] pci 0034:00:00.0: disabling bridge mem windows
[    0.886379] pci 0034:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.886531] pci 0034:00:00.0: PCI bridge to [bus 01-ff]
[    0.886687] PCI host bridge to bus 0035:00
[    0.886730] pci_bus 0035:00: root bus resource [mem 0x620c280000000-0x620c2fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.886932] pci_bus 0035:00: root bus resource [mem 0x6228000000000-0x622bf7fffffff 64bit pref]
[    0.887081] pci_bus 0035:00: root bus resource [bus 00-ff]
[    0.887226] pci 0035:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.887364] pci 0035:00:00.0: disabling bridge mem windows
[    0.887774] pci 0035:01:00.0: Disabling memory decoding and releasing memory resources.
[    0.887879] pci 0035:01:00.0: disabling bridge mem windows
[    0.888216] pci 0035:00:00.0: PCI bridge to [bus 01-08]
[    0.888555] pci 0035:02:08.0: Disabling memory decoding and releasing memory resources.
[    0.888650] pci 0035:02:08.0: disabling bridge mem windows
[    0.889078] pci 0035:02:0d.0: Disabling memory decoding and releasing memory resources.
[    0.889168] pci 0035:02:0d.0: disabling bridge mem windows
[    0.889476] pci 0035:01:00.0: PCI bridge to [bus 02-08]
[    0.890574] pci 0035:02:08.0: PCI bridge to [bus 03-07]
[    0.890731] pci 0035:02:0d.0: PCI bridge to [bus 08]
[    0.890902] PCI host bridge to bus 0006:00
[    0.890961] pci_bus 0006:00: root bus resource [mem 0x6030201600000-0x603020171ffff]
[    0.891112] pci_bus 0006:00: root bus resource [bus 00-ff]
[    0.891305] pci 0006:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.891631] pci 0006:00:00.1: Disabling memory decoding and releasing memory resources.
[    0.891940] pci 0006:00:01.0: Disabling memory decoding and releasing memory resources.
[    0.892222] pci 0006:00:01.1: Disabling memory decoding and releasing memory resources.
[    0.892532] pci 0006:00:02.0: Disabling memory decoding and releasing memory resources.
[    0.892818] pci 0006:00:02.1: Disabling memory decoding and releasing memory resources.
[    0.893251] PCI host bridge to bus 0007:00
[    0.893298] pci_bus 0007:00: root bus resource [mem 0x6230201600000-0x623020171ffff]
[    0.893458] pci_bus 0007:00: root bus resource [bus 00-ff]
[    0.893641] pci 0007:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.893927] pci 0007:00:00.1: Disabling memory decoding and releasing memory resources.
[    0.894208] pci 0007:00:01.0: Disabling memory decoding and releasing memory resources.
[    0.894514] pci 0007:00:01.1: Disabling memory decoding and releasing memory resources.
[    0.894804] pci 0007:00:02.0: Disabling memory decoding and releasing memory resources.
[    0.895084] pci 0007:00:02.1: Disabling memory decoding and releasing memory resources.
[    0.895460] pci 0000:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.895820] pci 0000:00:00.0: PCI bridge to [bus 01]
[    0.895938] pci 0001:00:00.0: BAR 8: assigned [mem 0x600c080000000-0x600c0807fffff]
[    0.896080] pci 0001:01:00.0: BAR 0: assigned [mem 0x600c080000000-0x600c08000ffff 64bit]
[    0.896235] pci 0001:01:00.0: BAR 2: assigned [mem 0x600c080010000-0x600c080011fff 64bit]
[    0.896379] pci 0001:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.896762] pci 0001:01     : [PE# fd] Secondary bus 1 associated with PE#fd
[    0.897097] pci 0001:01     : [PE# fd] Setting up 32-bit TCE table at 0..80000000
[    0.904397] IOMMU table initialized, virtual merging enabled
[    0.904468] pci 0001:01     : [PE# fd] Setting up window#0 0..7fffffff pg=1000
[    0.904679] pci 0001:01     : [PE# fd] Enabling 64-bit DMA bypass
[    0.904775] pci 0001:00:00.0: PCI bridge to [bus 01]
[    0.904874] pci 0001:00:00.0:   bridge window [mem 0x600c080000000-0x600c0ffefffff]
[    0.905048] pci 0002:00:00.0: BAR 8: assigned [mem 0x600c100000000-0x600c1017fffff]
[    0.905184] pci 0002:01:00.0: BAR 8: assigned [mem 0x600c100000000-0x600c1017fffff]
[    0.905309] pci 0002:01:00.0: BAR 7: no space for [io  size 0x1000]
[    0.905411] pci 0002:01:00.0: BAR 7: failed to assign [io  size 0x1000]
[    0.905518] pci 0002:02:00.0: BAR 0: assigned [mem 0x600c100000000-0x600c100ffffff]
[    0.905657] pci 0002:02:00.0: BAR 1: assigned [mem 0x600c101000000-0x600c10101ffff]
[    0.905799] pci 0002:02:00.0: BAR 2: no space for [io  size 0x0080]
[    0.905906] pci 0002:02:00.0: BAR 2: failed to assign [io  size 0x0080]
[    0.906016] pci 0002:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.906375] pci 0002:02     : [PE# fd] Secondary bus 2..2 associated with PE#fd
[    0.906733] pci 0002:02     : [PE# fd] Setting up 32-bit TCE table at 0..80000000
[    0.914017] pci 0002:02     : [PE# fd] Setting up window#0 0..7fffffff pg=1000
[    0.914097] pci 0002:02     : [PE# fd] Enabling 64-bit DMA bypass
[    0.914187] pci 0002:01:00.0: PCI bridge to [bus 02]
[    0.914294] pci 0002:01:00.0:   bridge window [mem 0x600c100000000-0x600c17fefffff]
[    0.914422] pci 0002:01     : [PE# fc] Secondary bus 1 associated with PE#fc
[    0.914831] pci 0002:00:00.0: PCI bridge to [bus 01-02]
[    0.914916] pci 0002:00:00.0:   bridge window [mem 0x600c100000000-0x600c17fefffff]
[    0.915069] pci_bus 0002:00: Some PCI device resources are unassigned, try booting with pci=realloc
[    0.915247] pci 0003:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.915630] pci 0003:00:00.0: PCI bridge to [bus 01]
[    0.915838] pci 0004:00:00.0: BAR 9: assigned [mem 0x6024000000000-0x602407fffffff 64bit pref]
[    0.915992] pci 0004:00:00.0: BAR 8: assigned [mem 0x600c200000000-0x600c200ffffff]
[    0.916089] pci 0004:01:00.0: BAR 9: assigned [mem 0x6024000000000-0x602407fffffff 64bit pref]
[    0.916263] pci 0004:01:00.0: BAR 8: assigned [mem 0x600c200000000-0x600c2007fffff]
[    0.916400] pci 0004:01:00.0: BAR 0: assigned [mem 0x600c200800000-0x600c20083ffff]
[    0.916509] pci 0004:01:00.1: BAR 0: assigned [mem 0x600c200840000-0x600c200841fff]
[    0.916671] pci 0004:01:00.2: BAR 0: assigned [mem 0x600c200850000-0x600c200851fff]
[    0.916812] pci 0004:01:00.3: BAR 0: assigned [mem 0x600c200860000-0x600c200861fff]
[    0.916957] pci 0004:01:00.4: BAR 0: assigned [mem 0x600c200870000-0x600c200871fff]
[    0.917099] pci 0004:01:00.0: BAR 7: no space for [io  size 0x1000]
[    0.917191] pci 0004:01:00.0: BAR 7: failed to assign [io  size 0x1000]
[    0.917311] pci 0004:01:00.0: BAR 7: no space for [io  size 0x1000]
[    0.917412] pci 0004:01:00.0: BAR 7: failed to assign [io  size 0x1000]
[    0.917520] pci 0004:02:02.0: BAR 9: assigned [mem 0x6024000000000-0x602403fffffff 64bit pref]
[    0.917678] pci 0004:02:02.0: BAR 8: assigned [mem 0x600c200000000-0x600c2007fffff]
[    0.917801] pci 0004:02:02.0: BAR 7: no space for [io  size 0x1000]
[    0.917906] pci 0004:02:02.0: BAR 7: failed to assign [io  size 0x1000]
[    0.918016] pci 0004:02:02.0: BAR 7: no space for [io  size 0x1000]
[    0.918123] pci 0004:02:02.0: BAR 7: failed to assign [io  size 0x1000]
[    0.918232] pci 0004:03:00.0: BAR 5: assigned [mem 0x600c200000000-0x600c2000007ff]
[    0.918350] pci 0004:03:00.0: BAR 6: assigned [mem 0x600c200010000-0x600c20001ffff pref]
[    0.918494] pci 0004:03:00.0: BAR 4: no space for [io  size 0x0020]
[    0.918600] pci 0004:03:00.0: BAR 4: failed to assign [io  size 0x0020]
[    0.918711] pci 0004:03:00.0: BAR 0: no space for [io  size 0x0008]
[    0.918815] pci 0004:03:00.0: BAR 0: failed to assign [io  size 0x0008]
[    0.918926] pci 0004:03:00.0: BAR 2: no space for [io  size 0x0008]
[    0.919033] pci 0004:03:00.0: BAR 2: failed to assign [io  size 0x0008]
[    0.919138] pci 0004:03:00.0: BAR 1: no space for [io  size 0x0004]
[    0.919243] pci 0004:03:00.0: BAR 1: failed to assign [io  size 0x0004]
[    0.919340] pci 0004:03:00.0: BAR 3: no space for [io  size 0x0004]
[    0.919445] pci 0004:03:00.0: BAR 3: failed to assign [io  size 0x0004]
[    0.919531] pci 0004:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.919924] pci 0004:03     : [PE# fd] Secondary bus 3 associated with PE#fd
[    0.920261] pci 0004:03     : [PE# fd] Setting up 32-bit TCE table at 0..80000000
[    0.927553] pci 0004:03     : [PE# fd] Setting up window#0 0..7fffffff pg=1000
[    0.927645] pci 0004:03     : [PE# fd] Enabling 64-bit DMA bypass
[    0.927736] pci 0004:02:02.0: PCI bridge to [bus 03]
[    0.927836] pci 0004:02:02.0:   bridge window [mem 0x600c200000000-0x600c2007fffff]
[    0.927960] pci 0004:02:02.0:   bridge window [mem 0x6024000000000-0x602403fffffff 64bit pref]
[    0.928154] pci 0004:02:0a.0: PCI bridge to [bus 04]
[    0.928260] pci 0004:02:0b.0: PCI bridge to [bus 05]
[    0.928336] pci 0004:02:0c.0: PCI bridge to [bus 06]
[    0.928449] pci 0004:02     : [PE# fc] Secondary bus 2 associated with PE#fc
[    0.928821] pci 0004:01:00.0: PCI bridge to [bus 02-06]
[    0.928895] pci 0004:01:00.0:   bridge window [mem 0x600c200000000-0x600c27fefffff]
[    0.929044] pci 0004:01:00.0:   bridge window [mem 0x6024000000000-0x6027f7ff0ffff 64bit pref]
[    0.929213] pci 0004:01     : [PE# fb] Secondary bus 1 associated with PE#fb
[    0.929589] pci 0004:01     : [PE# fb] Setting up 32-bit TCE table at 0..80000000
[    0.936891] pci 0004:01     : [PE# fb] Setting up window#0 0..7fffffff pg=1000
[    0.936978] pci 0004:01     : [PE# fb] Enabling 64-bit DMA bypass
[    0.937094] pci 0004:00:00.0: PCI bridge to [bus 01-06]
[    0.937185] pci 0004:00:00.0:   bridge window [mem 0x600c200000000-0x600c27fefffff]
[    0.937337] pci 0004:00:00.0:   bridge window [mem 0x6024000000000-0x6027f7ff0ffff 64bit pref]
[    0.937494] pci_bus 0004:00: Some PCI device resources are unassigned, try booting with pci=realloc
[    0.937704] pci 0005:00:00.0: BAR 9: assigned [mem 0x6028000000000-0x602803fffffff 64bit pref]
[    0.937848] pci 0005:01:00.0: BAR 0: assigned [mem 0x6028000000000-0x602800000ffff 64bit pref]
[    0.938016] pci 0005:01:00.0: BAR 2: assigned [mem 0x6028000010000-0x602800001ffff 64bit pref]
[    0.938185] pci 0005:01:00.0: BAR 4: assigned [mem 0x6028000020000-0x602800002ffff 64bit pref]
[    0.938353] pci 0005:01:00.1: BAR 0: assigned [mem 0x6028000030000-0x602800003ffff 64bit pref]
[    0.938526] pci 0005:01:00.1: BAR 2: assigned [mem 0x6028000040000-0x602800004ffff 64bit pref]
[    0.938664] pci 0005:01:00.1: BAR 4: assigned [mem 0x6028000050000-0x602800005ffff 64bit pref]
[    0.938843] pci 0005:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.939234] pci 0005:01     : [PE# 00] Secondary bus 1 associated with PE#0
[    0.939554] pci 0005:01     : [PE# 00] Setting up 32-bit TCE table at 0..80000000
[    0.946894] pci 0005:01     : [PE# 00] Setting up window#0 0..7fffffff pg=1000
[    0.946989] pci 0005:01     : [PE# 00] Enabling 64-bit DMA bypass
[    0.947080] pci 0005:00:00.0: PCI bridge to [bus 01]
[    0.947164] pci 0005:00:00.0:   bridge window [mem 0x6028000000000-0x602bf7fffffff 64bit pref]
[    0.947362] pci 0030:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.947749] pci 0030:00:00.0: PCI bridge to [bus 01]
[    0.947836] pci 0033:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.948235] pci 0033:00:00.0: PCI bridge to [bus 01]
[    0.948335] pci 0034:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.948708] pci 0034:00:00.0: PCI bridge to [bus 01]
[    0.948852] pci 0035:00:00.0: BAR 8: assigned [mem 0x620c280000000-0x620c2807fffff]
[    0.948975] pci 0035:01:00.0: BAR 0: assigned [mem 0x620c280000000-0x620c28003ffff]
[    0.949119] pci 0035:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.949458] pci 0035:02:08.0: PCI bridge to [bus 03-07]
[    0.949534] pci 0035:02:0d.0: PCI bridge to [bus 08]
[    0.949624] pci 0035:02     : [PE# fd] Secondary bus 2 associated with PE#fd
[    0.950002] pci 0035:01:00.0: PCI bridge to [bus 02-08]
[    0.950089] pci 0035:01     : [PE# fc] Secondary bus 1 associated with PE#fc
[    0.950469] pci 0035:00:00.0: PCI bridge to [bus 01-08]
[    0.950532] pci 0035:00:00.0:   bridge window [mem 0x620c280000000-0x620c2ffefffff]
[    0.950701] pci 0006:00:00.0: BAR 0: assigned [mem 0x6030201600000-0x603020161ffff 64bit]
[    0.950900] pci 0006:00:00.1: BAR 0: assigned [mem 0x6030201620000-0x603020163ffff 64bit]
[    0.951072] pci 0006:00:01.0: BAR 0: assigned [mem 0x6030201640000-0x603020165ffff 64bit]
[    0.951254] pci 0006:00:01.1: BAR 0: assigned [mem 0x6030201660000-0x603020167ffff 64bit]
[    0.951438] pci 0006:00:02.0: BAR 0: assigned [mem 0x6030201680000-0x603020169ffff 64bit]
[    0.951610] pci 0006:00:02.1: BAR 0: assigned [mem 0x60302016a0000-0x60302016bffff 64bit]
[    0.951785] pci 0006:00:00.0: BAR 2: assigned [mem 0x60302016c0000-0x60302016cffff 64bit]
[    0.951984] pci 0006:00:00.1: BAR 2: assigned [mem 0x60302016d0000-0x60302016dffff 64bit]
[    0.952151] pci 0006:00:01.0: BAR 2: assigned [mem 0x60302016e0000-0x60302016effff 64bit]
[    0.952345] pci 0006:00:01.1: BAR 2: assigned [mem 0x60302016f0000-0x60302016fffff 64bit]
[    0.952509] pci 0006:00:02.0: BAR 2: assigned [mem 0x6030201700000-0x603020170ffff 64bit]
[    0.952700] pci 0006:00:02.1: BAR 2: assigned [mem 0x6030201710000-0x603020171ffff 64bit]
[    0.952883] pci 0007:00:00.0: BAR 0: assigned [mem 0x6230201600000-0x623020161ffff 64bit]
[    0.953049] pci 0007:00:00.1: BAR 0: assigned [mem 0x6230201620000-0x623020163ffff 64bit]
[    0.953228] pci 0007:00:01.0: BAR 0: assigned [mem 0x6230201640000-0x623020165ffff 64bit]
[    0.953376] pci 0007:00:01.1: BAR 0: assigned [mem 0x6230201660000-0x623020167ffff 64bit]
[    0.953580] pci 0007:00:02.0: BAR 0: assigned [mem 0x6230201680000-0x623020169ffff 64bit]
[    0.953727] pci 0007:00:02.1: BAR 0: assigned [mem 0x62302016a0000-0x62302016bffff 64bit]
[    0.953899] pci 0007:00:00.0: BAR 2: assigned [mem 0x62302016c0000-0x62302016cffff 64bit]
[    0.954060] pci 0007:00:00.1: BAR 2: assigned [mem 0x62302016d0000-0x62302016dffff 64bit]
[    0.954239] pci 0007:00:01.0: BAR 2: assigned [mem 0x62302016e0000-0x62302016effff 64bit]
[    0.954427] pci 0007:00:01.1: BAR 2: assigned [mem 0x62302016f0000-0x62302016fffff 64bit]
[    0.954596] pci 0007:00:02.0: BAR 2: assigned [mem 0x6230201700000-0x623020170ffff 64bit]
[    0.954742] pci 0007:00:02.1: BAR 2: assigned [mem 0x6230201710000-0x623020171ffff 64bit]
[    0.954944] pci 0006:00:00.0: [PE# 0d] Associated device to PE
[    0.955055] pci 0006:00:00.1: Associating to existing PE d
[    0.955153] pci 0006:00:01.0: Associating to existing PE d
[    0.955253] pci 0006:00:01.1: Associating to existing PE d
[    0.955350] pci 0006:00:02.0: Associating to existing PE d
[    0.955439] pci 0006:00:02.1: Associating to existing PE d
[    0.955579] NPU6: Found 1 MMIO ATSD registers
[    0.955585] pci 0007:00:00.0: [PE# 0d] Associated device to PE
[    0.955765] pci 0007:00:00.1: Associating to existing PE d
[    0.955863] pci 0007:00:01.0: Associating to existing PE d
[    0.955935] pci 0007:00:01.1: Associating to existing PE d
[    0.956034] pci 0007:00:02.0: Associating to existing PE d
[    0.956122] pci 0007:00:02.1: Associating to existing PE d
[    0.956229] NPU7: Found 1 MMIO ATSD registers
[    0.960561] EEH: PCI Enhanced I/O Error Handling Enabled
[    0.969242] pci 0002:02:00.0: vgaarb: VGA device added: decodes=io+mem,owns=none,locks=none
[    0.969359] pci 0002:02:00.0: vgaarb: bridge control possible
[    0.969437] vgaarb: loaded
[    0.969595] SCSI subsystem initialized
[    0.969801] usbcore: registered new interface driver usbfs
[    0.969896] usbcore: registered new interface driver hub
[    0.970512] usbcore: registered new device driver usb
[    0.970623] pps_core: LinuxPPS API ver. 1 registered
[    0.970714] pps_core: Software ver. 5.3.6 - Copyright 2005-2007 Rodolfo Giometti &lt;giometti@linux.it&gt;
[    0.970839] PTP clock support registered
[    0.971701] clocksource: Switched to clocksource timebase
[    0.975057] NET: Registered protocol family 2
[    0.975412] TCP established hash table entries: 524288 (order: 6, 4194304 bytes)
[    0.978291] TCP bind hash table entries: 65536 (order: 4, 1048576 bytes)
[    0.978716] TCP: Hash tables configured (established 524288 bind 65536)
[    0.979054] UDP hash table entries: 65536 (order: 5, 2097152 bytes)
[    0.979925] UDP-Lite hash table entries: 65536 (order: 5, 2097152 bytes)
[    0.981264] NET: Registered protocol family 1
[    0.981354] pci 0001:00:00.0: enabling device (0105 -&gt; 0107)
[    0.981475] pci 0001:01:00.0: enabling device (0140 -&gt; 0142)
[    3.631759] Initialise system trusted keyrings
[    3.631947] workingset: timestamp_bits=54 max_order=22 bucket_order=0
[    3.637385] Key type asymmetric registered
[    3.637440] Asymmetric key parser 'x509' registered
[    3.637533] Block layer SCSI generic (bsg) driver version 0.4 loaded (major 250)
[    3.637673] io scheduler noop registered
[    3.638144] io scheduler cfq registered (default)
[    3.638205] io scheduler mq-deadline registered
[    3.638315] io scheduler kyber registered
[    3.641055] ipmi message handler version 39.2
[    3.641125] ipmi device interface
[    3.641226] ipmi-powernv ibm,opal:ipmi: Unable to map irq from device tree
[    3.665695] ipmi-powernv ibm,opal:ipmi: Found new BMC (man_id: 0x000000, prod_id: 0x0000, dev_id: 0x00)
[    3.680206] hvc0: raw protocol on /ibm,opal/consoles/serial@0 (boot console)
[    3.680287] hvc0: No interrupts property, using OPAL event
[    3.680698] Serial: 8250/16550 driver, 4 ports, IRQ sharing disabled
[    3.681242] [drm] radeon kernel modesetting enabled.
[    3.692118] brd: module loaded
[    3.714961] loop: module loaded
[    3.715170] pci 0004:00:00.0: enabling device (0105 -&gt; 0107)
[    3.715264] pci 0004:01:00.0: enabling device (0545 -&gt; 0547)
[    3.715371] pci 0004:02:02.0: enabling device (0545 -&gt; 0547)
[    3.715457] ahci 0004:03:00.0: enabling device (0141 -&gt; 0143)
[    3.715749] ahci 0004:03:00.0: Using 64-bit DMA iommu bypass
[    3.725914] ahci 0004:03:00.0: AHCI 0001.0000 32 slots 4 ports 6 Gbps 0xf impl SATA mode
[    3.725999] ahci 0004:03:00.0: flags: 64bit ncq sntf led only pmp fbs pio slum part sxs 
[    3.726892] scsi host0: ahci
[    3.727166] scsi host1: ahci
[    3.727420] scsi host2: ahci
[    3.727664] scsi host3: ahci
[    3.727777] ata1: SATA max UDMA/133 abar m2048@0x600c200000000 port 0x600c200000100 irq 88
[    3.727892] ata2: SATA max UDMA/133 abar m2048@0x600c200000000 port 0x600c200000180 irq 88
[    3.728030] ata3: SATA max UDMA/133 abar m2048@0x600c200000000 port 0x600c200000200 irq 88
[    3.728151] ata4: SATA max UDMA/133 abar m2048@0x600c200000000 port 0x600c200000280 irq 88
[    3.728411] libphy: Fixed MDIO Bus: probed
[    3.728517] tg3.c:v3.137 (May 11, 2014)
[    3.728581] pci 0005:00:00.0: enabling device (0105 -&gt; 0107)
[    3.728673] tg3 0005:01:00.0: enabling device (0140 -&gt; 0142)
[    3.756959] tg3 0005:01:00.0: Using 64-bit DMA iommu bypass
[    3.757416] tg3 0005:01:00.0 eth0: Tigon3 [partno(BCM95719) rev 5719001] (PCI Express) MAC address 70:e2:84:14:23:e2
[    3.757521] tg3 0005:01:00.0 eth0: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[    3.757674] tg3 0005:01:00.0 eth0: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[1] TSOcap[1]
[    3.757808] tg3 0005:01:00.0 eth0: dma_rwctrl[00000000] dma_mask[64-bit]
[    3.758019] tg3 0005:01:00.1: enabling device (0140 -&gt; 0142)
[    3.798434] tg3 0005:01:00.1: Using 64-bit DMA iommu bypass
[    3.798858] tg3 0005:01:00.1 eth1: Tigon3 [partno(BCM95719) rev 5719001] (PCI Express) MAC address 70:e2:84:14:23:e3
[    3.798959] tg3 0005:01:00.1 eth1: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[    3.799110] tg3 0005:01:00.1 eth1: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[1] TSOcap[1]
[    3.799257] tg3 0005:01:00.1 eth1: dma_rwctrl[00000000] dma_mask[64-bit]
[    3.799563] ehci_hcd: USB 2.0 'Enhanced' Host Controller (EHCI) Driver
[    3.799643] ehci-pci: EHCI PCI platform driver
[    3.799761] ohci_hcd: USB 1.1 'Open' Host Controller (OHCI) Driver
[    3.799870] ohci-pci: OHCI PCI platform driver
[    3.800047] xhci_hcd 0001:01:00.0: xHCI Host Controller
[    3.800211] xhci_hcd 0001:01:00.0: new USB bus registered, assigned bus number 1
[    3.800411] xhci_hcd 0001:01:00.0: Using 64-bit DMA iommu bypass
[    3.800549] xhci_hcd 0001:01:00.0: hcc params 0x0270f06d hci version 0x96 quirks 0x04000000
[    3.801405] hub 1-0:1.0: USB hub found
[    3.801459] hub 1-0:1.0: 4 ports detected
[    3.801674] xhci_hcd 0001:01:00.0: xHCI Host Controller
[    3.801793] xhci_hcd 0001:01:00.0: new USB bus registered, assigned bus number 2
[    3.801925] usb usb2: We don't know the algorithms for LPM for this host, disabling LPM.
[    3.802232] hub 2-0:1.0: USB hub found
[    3.802286] hub 2-0:1.0: 4 ports detected
[    3.802574] usbcore: registered new interface driver usb-storage
[    3.861639] rtc-opal opal-rtc: rtc core: registered rtc-opal as rtc0
[    3.861727] i2c /dev entries driver
[    3.863769] powernv-cpufreq: cpufreq pstate min 101 nominal 50 max 0
[    3.863843] powernv-cpufreq: Workload Optimized Frequency is enabled in the platform
[    3.874864] usbcore: registered new interface driver usbhid
[    3.874929] usbhid: USB HID core driver
[    3.875381] ipip: IPv4 and MPLS over IPv4 tunneling driver
[    3.875758] NET: Registered protocol family 17
[    3.875839] Key type dns_resolver registered
[    3.876170] registered taskstats version 1
[    3.876210] Loading compiled-in X.509 certificates
[    3.883590] Loaded X.509 cert 'Build time autogenerated kernel key: 183c9032b7131ce1cb34ae01bff55b10d968c1fb'
[    3.888988] Key type encrypted registered
[    3.889042] ima: No TPM chip found, activating TPM-bypass! (rc=-19)
[    3.889240] evm: HMAC attrs: 0x1
[    3.951713] rtc-opal opal-rtc: setting system clock to 2017-08-10 04:28:54 UTC (1502339334)
[    4.052932] ata4: SATA link down (SStatus 0 SControl 300)
[    4.053039] ata3: SATA link down (SStatus 0 SControl 300)
[    4.221592] ata1: SATA link up 6.0 Gbps (SStatus 133 SControl 300)
[    4.221693] ata2: SATA link up 6.0 Gbps (SStatus 133 SControl 300)
[    4.222578] ata1.00: ATA-10: ST1000NX0313         00LY266 00LY265IBM, BE35, max UDMA/133
[    4.222699] ata1.00: 1953525168 sectors, multi 0: LBA48 NCQ (depth 31/32), AA
[    4.223504] ata1.00: configured for UDMA/133
[    4.224276] scsi 0:0:0:0: Direct-Access     ATA      ST1000NX0313     BE35 PQ: 0 ANSI: 5
[    4.224584] ata2.00: ATA-10: ST1000NX0313         00LY266 00LY265IBM, BE35, max UDMA/133
[    4.224740] ata2.00: 1953525168 sectors, multi 0: LBA48 NCQ (depth 31/32), AA
[    4.225449] ata2.00: configured for UDMA/133
[    4.226079] scsi 1:0:0:0: Direct-Access     ATA      ST1000NX0313     BE35 PQ: 0 ANSI: 5
[    4.227927] Freeing unused kernel memory: 11392K
[    4.227999] This architecture does not have kernel memory protection.
[    4.247800] udevd[2876]: starting version 3.2.2
[    4.252432] udevd[2877]: starting eudev-3.2.2
[    4.298394] pci 0002:00:00.0: enabling device (0105 -&gt; 0107)
[    4.298481] pci 0002:01:00.0: enabling device (0145 -&gt; 0147)
[    4.298600] ast 0002:02:00.0: enabling device (0140 -&gt; 0142)
[    4.298819] [drm] platform has no IO space, trying MMIO
[    4.298887] [drm] VGA not enabled on entry, requesting chip POST
[    4.299013] [drm] Using P2A bridge for configuration
[    4.299096] [drm] AST 2500 detected
[    4.299147] [drm] Analog VGA only
[    4.299245] [drm] dram MCLK=800 Mhz type=7 bus_width=16 size=01000000
[    4.299436] [TTM] Zone  kernel: Available graphics memory: 133962400 kiB
[    4.299518] [TTM] Zone   dma32: Available graphics memory: 2097152 kiB
[    4.299602] [TTM] Initializing pool allocator
[    4.305134] tg3 0005:01:00.0 enP5p1s0f0: renamed from eth0

(B)0[1;24r[m[?7h[?1h=[H[J[H[J Petitboot (v1.5.1-p1b1d3ef)[1B [0mqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq[2B  [0mSystem information[1B  System configuration[1B  System status log[1B  Language[1B  Rescan devices[1B  Retrieve config from URL[1B *[0;7mExit to shell           [12B[25D[0mqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq[1B [0mEnter=accept, e=edit, n=new, x=exit, l=language, g=log, h=help[1B Welcome to Petitboot[J[1;47H0000000000000000 0000000000000000[23B [3;21r[3;1HMM[1;24r[3;3H[Disk: sda2 / 728d2189-0c67-4551-8857-40e2845ba17b][1B[49DUbuntu[12;27H[0;7m                           [12B[52D[m[4;21r[4;1HM[1;24r[4;5HUbuntu, with Linux 4.10.0-26-generic[20B [4;21r[4;1HM[1;24r[4;5HUbuntu, with Linux 4.10.0-26-generic (recovery mode)[14;54H[0;7m   [10B[55D[m[enP5p1s0f0] Configuring with DHCP Booting in 9 sec: [sda2] Ubuntu   [24;13H8[24;33H[24;13H7[24;33H[24;13H6[24;33H[24;13H5[24;33H[24;13H4[24;33H[24;13H3[24;33H[24;13H2[24;33H[24;13H1[24;33H[24;10HUbuntu                 [24;16H Loaded kernel image from file:///var/petitboot/mnt/dev/sda2/boot/vmlinux-4.10.[?7l0[?7h[24;9Hinitrd from file:///var/petitboot/mnt/dev/sda2/boot/initrd.img-4.10.0-2[?7l6[?7h Running boot hooks[K Performing kexec loadrebootThe system is going down NOW!
Sent SIGTERM to all processes
Sent SIGKILL to all processes
[   29.092269] kexec_core: Starting new kernel
[   49.291614122,5] OPAL: Switch to big-endian OS
[   51.425399404,5] OPAL: Switch to little-endian OS
[    0.000000] opal: OPAL detected !
[    0.000000] Page sizes from device-tree:
[    0.000000] Page size shift = 12 AP=0x0
[    0.000000] Page size shift = 16 AP=0x5
[    0.000000] Page size shift = 21 AP=0x1
[    0.000000] Page size shift = 30 AP=0x2
[    0.000000] Initializing Radix MMU
[    0.000000] Partition table c000201fff7f0000
[    0.000000] Mapped range 0x0 - 0x2000000000 with 0x40000000
[    0.000000] Mapped range 0x200000000000 - 0x202000000000 with 0x40000000
[    0.000000] Process table c000201ffe800000 and radix root for kernel: c0000000014a0000
[    0.000000] Linux version 4.10.0-26-generic (buildd@bos01-ppc64el-012) (gcc version 6.3.0 20170406 (Ubuntu 6.3.0-12ubuntu2) ) #30-Ubuntu SMP Tue Jun 27 09:29:34 UTC 2017 (Ubuntu 4.10.0-26.30-generic 4.10.17)
[    0.000000] Found initrd at 0xc000000002d70000:0xc00000000531e9f2
[    0.000000] OPAL: Power8 LPC bus found, chip ID 0
[    0.000000] Using PowerNV machine description
[    0.000000] bootconsole [udbg0] enabled
[    0.000000] CPU maps initialized for 4 threads per core
 -&gt; smp_release_cpus()
spinning_secondaries = 175
 &lt;- smp_release_cpus()
[    0.000000] -----------------------------------------------------
[    0.000000] ppc64_pft_size    = 0x0
[    0.000000] phys_mem_size     = 0x4000000000
[    0.000000] dcache_bsize      = 0x80
[    0.000000] icache_bsize      = 0x80
[    0.000000] cpu_features      = 0x07fc7afd18500249
[    0.000000]   possible        = 0x7fffffff18500649
[    0.000000]   always          = 0x0000000018100040
[    0.000000] cpu_user_features = 0xdc0065c2 0xefc00000
[    0.000000] mmu_features      = 0x3c004041
[    0.000000] firmware_features = 0x0000000110000000
[    0.000000] -----------------------------------------------------
[    0.000000] cma: Reserved 13120 MiB at 0x0000201cc9000000
[    0.000000] numa: Initmem setup node 0 [mem 0x00000000-0x1fffffffff]
[    0.000000] numa:   NODE_DATA [mem 0x1fffff6300-0x1fffffffff]
[    0.000000] numa: Initmem setup node 8 [mem 0x200000000000-0x201fffffffff]
[    0.000000] numa:   NODE_DATA [mem 0x201fff6ef680-0x201fff6f937f]
[    0.000000] numa: Initmem setup node 250
[    0.000000] numa:   NODE_DATA [mem 0x201fff6c5980-0x201fff6cf67f]
[    0.000000] numa:     NODE_DATA(250) on node 8
[    0.000000] numa: Initmem setup node 251
[    0.000000] numa:   NODE_DATA [mem 0x201fff6bbc80-0x201fff6c597f]
[    0.000000] numa:     NODE_DATA(251) on node 8
[    0.000000] numa: Initmem setup node 252
[    0.000000] numa:   NODE_DATA [mem 0x201fff6b1f80-0x201fff6bbc7f]
[    0.000000] numa:     NODE_DATA(252) on node 8
[    0.000000] numa: Initmem setup node 253
[    0.000000] numa:   NODE_DATA [mem 0x201fff6a8280-0x201fff6b1f7f]
[    0.000000] numa:     NODE_DATA(253) on node 8
[    0.000000] numa: Initmem setup node 254
[    0.000000] numa:   NODE_DATA [mem 0x201fff69e580-0x201fff6a827f]
[    0.000000] numa:     NODE_DATA(254) on node 8
[    0.000000] numa: Initmem setup node 255
[    0.000000] numa:   NODE_DATA [mem 0x201fff694880-0x201fff69e57f]
[    0.000000] numa:     NODE_DATA(255) on node 8
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0000000)
[    0.000000] PCI host bridge /pciex@600c3c0000000 (primary) ranges:
[    0.000000]  MEM 0x000600c000000000..0x000600c07ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006000000000000..0x0006003fffffffff -&gt; 0x0006000000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0xfe000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0100000)
[    0.000000] PCI host bridge /pciex@600c3c0100000  ranges:
[    0.000000]  MEM 0x000600c080000000..0x000600c0fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006004000000000..0x0006007fffffffff -&gt; 0x0006004000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfd800)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0200000)
[    0.000000] PCI host bridge /pciex@600c3c0200000  ranges:
[    0.000000]  MEM 0x000600c100000000..0x000600c17ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006008000000000..0x000600bfffffffff -&gt; 0x0006008000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfd000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0300000)
[    0.000000] PCI host bridge /pciex@600c3c0300000  ranges:
[    0.000000]  MEM 0x000600c180000000..0x000600c1fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006020000000000..0x0006023fffffffff -&gt; 0x0006020000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0xfc000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0400000)
[    0.000000] PCI host bridge /pciex@600c3c0400000  ranges:
[    0.000000]  MEM 0x000600c200000000..0x000600c27ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006024000000000..0x0006027fffffffff -&gt; 0x0006024000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfb800)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0500000)
[    0.000000] PCI host bridge /pciex@600c3c0500000  ranges:
[    0.000000]  MEM 0x000600c280000000..0x000600c2fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006028000000000..0x000602bfffffffff -&gt; 0x0006028000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfb000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0000000)
[    0.000000] PCI host bridge /pciex@620c3c0000000  ranges:
[    0.000000]  MEM 0x000620c000000000..0x000620c07ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006200000000000..0x0006203fffffffff -&gt; 0x0006200000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0x1fe000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0300000)
[    0.000000] PCI host bridge /pciex@620c3c0300000  ranges:
[    0.000000]  MEM 0x000620c180000000..0x000620c1fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006220000000000..0x0006223fffffffff -&gt; 0x0006220000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0x1fd000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0400000)
[    0.000000] PCI host bridge /pciex@620c3c0400000  ranges:
[    0.000000]  MEM 0x000620c200000000..0x000620c27ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006224000000000..0x0006227fffffffff -&gt; 0x0006224000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0x1fc800)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0500000)
[    0.000000] PCI host bridge /pciex@620c3c0500000  ranges:
[    0.000000]  MEM 0x000620c280000000..0x000620c2fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006228000000000..0x000622bfffffffff -&gt; 0x0006228000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0x1fc000)
[    0.000000] Initializing NPU PHB (/pciex@6030200000000)
[    0.000000] PCI host bridge /pciex@6030200000000  ranges:
[    0.000000]  MEM 0x0006030201600000..0x000603020171ffff -&gt; 0x0006030201600000 
[    0.000000]   Not support M64 window
[    0.000000]   016 (015) PE's M32: 0x130000 [segment=0x13000]
[    0.000000] Initializing NPU PHB (/pciex@6230200000000)
[    0.000000] PCI host bridge /pciex@6230200000000  ranges:
[    0.000000]  MEM 0x0006230201600000..0x000623020171ffff -&gt; 0x0006230201600000 
[    0.000000]   Not support M64 window
[    0.000000]   016 (015) PE's M32: 0x130000 [segment=0x13000]
[    0.000000] OPAL nvram setup, 589824 bytes
[    0.000000] Zone ranges:
[    0.000000]   DMA      [mem 0x0000000000000000-0x0000201fffffffff]
[    0.000000]   DMA32    empty
[    0.000000]   Normal   empty
[    0.000000] Movable zone start for each node
[    0.000000] Early memory node ranges
[    0.000000]   node   0: [mem 0x0000000000000000-0x0000001fffffffff]
[    0.000000]   node   8: [mem 0x0000200000000000-0x0000201fffffffff]
[    0.000000] Initmem setup node 0 [mem 0x0000000000000000-0x0000001fffffffff]
[    0.000000] Initmem setup node 8 [mem 0x0000200000000000-0x0000201fffffffff]
[    0.000000] Could not find start_pfn for node 250
[    0.000000] Initmem setup node 250 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 251
[    0.000000] Initmem setup node 251 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 252
[    0.000000] Initmem setup node 252 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 253
[    0.000000] Initmem setup node 253 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 254
[    0.000000] Initmem setup node 254 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 255
[    0.000000] Initmem setup node 255 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] percpu: Embedded 3 pages/cpu @c000001ff5eb0000 s149272 r0 d47336 u196608
[    0.000000] Built 8 zonelists in Node order, mobility grouping on.  Total pages: 4190208
[    0.000000] Policy zone: DMA
[    0.000000] Kernel command line: root=UUID=728d2189-0c67-4551-8857-40e2845ba17b ro powersave=off
[    0.000000] log_buf_len individual max cpu contribution: 4096 bytes
[    0.000000] log_buf_len total cpu_extra contributions: 716800 bytes
[    0.000000] log_buf_len min size: 131072 bytes
[    0.000000] log_buf_len: 1048576 bytes
[    0.000000] early log buf free: 115600(88%)
[    0.000000] PID hash table entries: 4096 (order: -1, 32768 bytes)
[    0.000000] Memory: 254330816K/268435456K available (11712K kernel code, 1600K rwdata, 3352K rodata, 4416K init, 3045K bss, 669760K reserved, 13434880K cma-reserved)
[    0.000000] SLUB: HWalign=128, Order=0-3, MinObjects=0, CPUs=176, Nodes=256
[    0.000000] Hierarchical RCU implementation.
[    0.000000] 	Build-time adjustment of leaf fanout to 64.
[    0.000000] 	RCU restricting CPUs from NR_CPUS=2048 to nr_cpu_ids=176.
[    0.000000] RCU: Adjusting geometry for rcu_fanout_leaf=64, nr_cpu_ids=176
[    0.000000] NR_IRQS:512 nr_irqs:512 16
[    0.000000] xive: Interrupt handling intialized with native backend
[    0.000000] xive: Using priority 7 for all interrupts
[    0.000000] xive: Using 64kB queues
[    0.000003] time_init: 56 bit decrementer (max: 7fffffffffffff)
[    0.000427] clocksource: timebase: mask: 0xffffffffffffffff max_cycles: 0x761537d007, max_idle_ns: 440795202126 ns
[    0.001164] clocksource: timebase mult[1f40000] shift[24] registered
[    0.001801] Console: colour dummy device 80x25
[    0.002357] console [hvc0] enabled
[    0.002357] console [hvc0] enabled
[    0.002659] bootconsole [udbg0] disabled
[    0.002659] bootconsole [udbg0] disabled
[    0.003285] mempolicy: Enabling automatic NUMA balancing. Configure with numa_balancing= or the kernel.numa_balancing sysctl
[    0.003423] pid_max: default: 180224 minimum: 1408
[    0.005517] Security Framework initialized
[    0.005547] Yama: becoming mindful.
[    0.005664] AppArmor: AppArmor initialized
[    0.009125] Dentry cache hash table entries: 33554432 (order: 12, 268435456 bytes)
[    0.098920] Inode-cache hash table entries: 16777216 (order: 11, 134217728 bytes)
[    0.152031] Mount-cache hash table entries: 524288 (order: 6, 4194304 bytes)
[    0.152169] Mountpoint-cache hash table entries: 524288 (order: 6, 4194304 bytes)
[    0.155938] ftrace: allocating 30684 entries in 12 pages
[    0.174445] EEH: PowerNV platform initialized
[    0.174492] POWER9 performance monitor hardware support registered
[    0.176825] smp: Bringing up secondary CPUs ...
[    0.655958] smp: Brought up 8 nodes, 176 CPUs
[    0.656025] numa: Node 0 CPUs: 0-87
[    0.656074] numa: Node 8 CPUs: 88-175
[    0.656113] numa: Node 250 CPUs:
[    0.656169] numa: Node 251 CPUs:
[    0.656206] numa: Node 252 CPUs:
[    0.656261] numa: Node 253 CPUs:
[    0.656317] numa: Node 254 CPUs:
[    0.656363] numa: Node 255 CPUs:
[    0.669987] devtmpfs: initialized
[    0.736009] evm: security.selinux
[    0.736047] evm: security.SMACK64
[    0.736082] evm: security.SMACK64EXEC
[    0.736126] evm: security.SMACK64TRANSMUTE
[    0.736170] evm: security.SMACK64MMAP
[    0.736204] evm: security.ima
[    0.736238] evm: security.capability
[    0.737291] clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 7645041785100000 ns
[    0.737479] futex hash table entries: 65536 (order: 7, 8388608 bytes)
[    0.744410] NET: Registered protocol family 16
[    0.762778] cpuidle: using governor ladder
[    0.786792] cpuidle: using governor menu
[    0.787053] pstore: using zlib compression
[    0.787090] pstore: Registered nvram as persistent store backend
[    0.858997] PCI: Probing PCI hardware
[    0.859132] PCI host bridge to bus 0000:00
[    0.859212] pci_bus 0000:00: root bus resource [mem 0x600c000000000-0x600c07ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.859336] pci_bus 0000:00: root bus resource [mem 0x6000000000000-0x6003fbfffffff 64bit pref]
[    0.859474] pci_bus 0000:00: root bus resource [bus 00-ff]
[    0.859864] pci 0000:00:00.0: PCI bridge to [bus 01]
[    0.859989] PCI host bridge to bus 0001:00
[    0.860042] pci_bus 0001:00: root bus resource [mem 0x600c080000000-0x600c0fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.860164] pci_bus 0001:00: root bus resource [mem 0x6004000000000-0x6007f7fffffff 64bit pref]
[    0.860289] pci_bus 0001:00: root bus resource [bus 00-ff]
[    0.860948] pci 0001:00:00.0: PCI bridge to [bus 01]
[    0.861258] PCI host bridge to bus 0002:00
[    0.861300] pci_bus 0002:00: root bus resource [mem 0x600c100000000-0x600c17ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.861445] pci_bus 0002:00: root bus resource [mem 0x6008000000000-0x600bf7fffffff 64bit pref]
[    0.861578] pci_bus 0002:00: root bus resource [bus 00-ff]
[    0.862225] pci 0002:00:00.0: PCI bridge to [bus 01-02]
[    0.862714] pci 0002:01:00.0: PCI bridge to [bus 02]
[    0.862893] PCI host bridge to bus 0003:00
[    0.862939] pci_bus 0003:00: root bus resource [mem 0x600c180000000-0x600c1fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.863083] pci_bus 0003:00: root bus resource [mem 0x6020000000000-0x6023fbfffffff 64bit pref]
[    0.863208] pci_bus 0003:00: root bus resource [bus 00-ff]
[    0.863563] pci 0003:00:00.0: PCI bridge to [bus 01]
[    0.863696] PCI host bridge to bus 0004:00
[    0.863737] pci_bus 0004:00: root bus resource [mem 0x600c200000000-0x600c27ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.863891] pci_bus 0004:00: root bus resource [mem 0x6024000000000-0x6027f7fffffff 64bit pref]
[    0.864011] pci_bus 0004:00: root bus resource [bus 00-ff]
[    0.865825] pci 0004:00:00.0: PCI bridge to [bus 01-06]
[    0.867400] pci 0004:01:00.0: PCI bridge to [bus 02-06]
[    0.869404] pci 0004:02:02.0: PCI bridge to [bus 03]
[    0.869580] pci 0004:02:0a.0: PCI bridge to [bus 04]
[    0.869718] pci 0004:02:0b.0: PCI bridge to [bus 05]
[    0.869879] pci 0004:02:0c.0: PCI bridge to [bus 06]
[    0.870055] PCI host bridge to bus 0005:00
[    0.870098] pci_bus 0005:00: root bus resource [mem 0x600c280000000-0x600c2fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.870244] pci_bus 0005:00: root bus resource [mem 0x6028000000000-0x602bf7fffffff 64bit pref]
[    0.870350] pci_bus 0005:00: root bus resource [bus 00-ff]
[    0.871455] pci 0005:00:00.0: PCI bridge to [bus 01]
[    0.871669] PCI host bridge to bus 0030:00
[    0.871706] pci_bus 0030:00: root bus resource [mem 0x620c000000000-0x620c07ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.871861] pci_bus 0030:00: root bus resource [mem 0x6200000000000-0x6203fbfffffff 64bit pref]
[    0.871990] pci_bus 0030:00: root bus resource [bus 00-ff]
[    0.872396] pci 0030:00:00.0: PCI bridge to [bus 01]
[    0.872478] random: fast init done
[    0.872538] PCI host bridge to bus 0033:00
[    0.872600] pci_bus 0033:00: root bus resource [mem 0x620c180000000-0x620c1fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.872747] pci_bus 0033:00: root bus resource [mem 0x6220000000000-0x6223fbfffffff 64bit pref]
[    0.872860] pci_bus 0033:00: root bus resource [bus 00-ff]
[    0.873276] pci 0033:00:00.0: PCI bridge to [bus 01]
[    0.873414] PCI host bridge to bus 0034:00
[    0.873463] pci_bus 0034:00: root bus resource [mem 0x620c200000000-0x620c27ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.873603] pci_bus 0034:00: root bus resource [mem 0x6224000000000-0x6227f7fffffff 64bit pref]
[    0.873711] pci_bus 0034:00: root bus resource [bus 00-ff]
[    0.874097] pci 0034:00:00.0: PCI bridge to [bus 01]
[    0.874230] PCI host bridge to bus 0035:00
[    0.874286] pci_bus 0035:00: root bus resource [mem 0x620c280000000-0x620c2fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.874396] pci_bus 0035:00: root bus resource [mem 0x6228000000000-0x622bf7fffffff 64bit pref]
[    0.874522] pci_bus 0035:00: root bus resource [bus 00-ff]
[    0.875361] pci 0035:00:00.0: PCI bridge to [bus 01-08]
[    0.876323] pci 0035:01:00.0: PCI bridge to [bus 02-08]
[    0.877390] pci 0035:02:08.0: PCI bridge to [bus 03-07]
[    0.877554] pci 0035:02:0d.0: PCI bridge to [bus 08]
[    0.877748] PCI host bridge to bus 0006:00
[    0.877783] pci_bus 0006:00: root bus resource [mem 0x6030201600000-0x603020171ffff]
[    0.877852] pci_bus 0006:00: root bus resource [bus 00-ff]
[    0.879077] PCI host bridge to bus 0007:00
[    0.879109] pci_bus 0007:00: root bus resource [mem 0x6230201600000-0x623020171ffff]
[    0.879178] pci_bus 0007:00: root bus resource [bus 00-ff]
[    0.880322] pci 0000:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.880612] pci 0000:00:00.0: PCI bridge to [bus 01]
[    0.880700] pci 0001:00:00.0: BAR 14: assigned [mem 0x600c080000000-0x600c0807fffff]
[    0.880806] pci 0001:01:00.0: BAR 0: assigned [mem 0x600c080000000-0x600c08000ffff 64bit]
[    0.880928] pci 0001:01:00.0: BAR 2: assigned [mem 0x600c080010000-0x600c080011fff 64bit]
[    0.881036] pci 0001:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.881358] pci 0001:01     : [PE# fd] Secondary bus 1 associated with PE#fd
[    0.881678] pci 0001:01     : [PE# fd] Setting up 32-bit TCE table at 0..80000000
[    0.886453] IOMMU table initialized, virtual merging enabled
[    0.886510] pci 0001:01     : [PE# fd] Setting up window#0 0..7fffffff pg=1000
[    0.886602] pci 0001:01     : [PE# fd] Enabling 64-bit DMA bypass
[    0.886681] iommu: Adding device 0001:01:00.0 to group 0
[    0.886744] pci 0001:00:00.0: PCI bridge to [bus 01]
[    0.886804] pci 0001:00:00.0:   bridge window [mem 0x600c080000000-0x600c0ffefffff]
[    0.886977] pci 0002:00:00.0: BAR 14: assigned [mem 0x600c100000000-0x600c1017fffff]
[    0.887089] pci 0002:01:00.0: BAR 14: assigned [mem 0x600c100000000-0x600c1017fffff]
[    0.887208] pci 0002:01:00.0: BAR 13: no space for [io  size 0x1000]
[    0.887307] pci 0002:01:00.0: BAR 13: failed to assign [io  size 0x1000]
[    0.887389] pci 0002:02:00.0: BAR 0: assigned [mem 0x600c100000000-0x600c100ffffff]
[    0.887500] pci 0002:02:00.0: BAR 1: assigned [mem 0x600c101000000-0x600c10101ffff]
[    0.887609] pci 0002:02:00.0: BAR 2: no space for [io  size 0x0080]
[    0.887692] pci 0002:02:00.0: BAR 2: failed to assign [io  size 0x0080]
[    0.887781] pci 0002:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.888081] pci 0002:02     : [PE# fd] Secondary bus 2..2 associated with PE#fd
[    0.888375] pci 0002:02     : [PE# fd] Setting up 32-bit TCE table at 0..80000000
[    0.893145] pci 0002:02     : [PE# fd] Setting up window#0 0..7fffffff pg=1000
[    0.893215] pci 0002:02     : [PE# fd] Enabling 64-bit DMA bypass
[    0.893292] iommu: Adding device 0002:02:00.0 to group 1
[    0.893343] pci 0002:01:00.0: PCI bridge to [bus 02]
[    0.893407] pci 0002:01:00.0:   bridge window [mem 0x600c100000000-0x600c17fefffff]
[    0.893516] pci 0002:01     : [PE# fc] Secondary bus 1 associated with PE#fc
[    0.893842] pci 0002:00:00.0: PCI bridge to [bus 01-02]
[    0.893900] pci 0002:00:00.0:   bridge window [mem 0x600c100000000-0x600c17fefffff]
[    0.894024] pci_bus 0002:00: Some PCI device resources are unassigned, try booting with pci=realloc
[    0.894172] pci 0003:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.894478] pci 0003:00:00.0: PCI bridge to [bus 01]
[    0.894653] pci 0004:00:00.0: BAR 15: assigned [mem 0x6024000000000-0x602403fffffff 64bit pref]
[    0.894746] pci 0004:00:00.0: BAR 14: assigned [mem 0x600c200000000-0x600c200ffffff]
[    0.894856] pci 0004:01:00.0: BAR 15: assigned [mem 0x6024000000000-0x602403fffffff 64bit pref]
[    0.894984] pci 0004:01:00.0: BAR 14: assigned [mem 0x600c200000000-0x600c2007fffff]
[    0.895102] pci 0004:01:00.0: BAR 0: assigned [mem 0x600c200800000-0x600c20083ffff]
[    0.895213] pci 0004:01:00.1: BAR 0: assigned [mem 0x600c200840000-0x600c200841fff]
[    0.895321] pci 0004:01:00.2: BAR 0: assigned [mem 0x600c200842000-0x600c200843fff]
[    0.895431] pci 0004:01:00.3: BAR 0: assigned [mem 0x600c200844000-0x600c200845fff]
[    0.895535] pci 0004:01:00.4: BAR 0: assigned [mem 0x600c200846000-0x600c200847fff]
[    0.895644] pci 0004:01:00.0: BAR 13: no space for [io  size 0x1000]
[    0.895728] pci 0004:01:00.0: BAR 13: failed to assign [io  size 0x1000]
[    0.895821] pci 0004:01:00.0: BAR 13: no space for [io  size 0x1000]
[    0.895908] pci 0004:01:00.0: BAR 13: failed to assign [io  size 0x1000]
[    0.895999] pci 0004:02:02.0: BAR 15: assigned [mem 0x6024000000000-0x602403fffffff 64bit pref]
[    0.896115] pci 0004:02:02.0: BAR 14: assigned [mem 0x600c200000000-0x600c2007fffff]
[    0.896187] pci 0004:02:02.0: BAR 13: no space for [io  size 0x1000]
[    0.896267] pci 0004:02:02.0: BAR 13: failed to assign [io  size 0x1000]
[    0.896371] pci 0004:02:02.0: BAR 13: no space for [io  size 0x1000]
[    0.896469] pci 0004:02:02.0: BAR 13: failed to assign [io  size 0x1000]
[    0.896569] pci 0004:03:00.0: BAR 6: assigned [mem 0x600c200000000-0x600c20000ffff pref]
[    0.896677] pci 0004:03:00.0: BAR 5: assigned [mem 0x600c200010000-0x600c2000107ff]
[    0.896780] pci 0004:03:00.0: BAR 4: no space for [io  size 0x0020]
[    0.896867] pci 0004:03:00.0: BAR 4: failed to assign [io  size 0x0020]
[    0.896953] pci 0004:03:00.0: BAR 0: no space for [io  size 0x0008]
[    0.897037] pci 0004:03:00.0: BAR 0: failed to assign [io  size 0x0008]
[    0.897125] pci 0004:03:00.0: BAR 2: no space for [io  size 0x0008]
[    0.897207] pci 0004:03:00.0: BAR 2: failed to assign [io  size 0x0008]
[    0.897299] pci 0004:03:00.0: BAR 1: no space for [io  size 0x0004]
[    0.897380] pci 0004:03:00.0: BAR 1: failed to assign [io  size 0x0004]
[    0.897479] pci 0004:03:00.0: BAR 3: no space for [io  size 0x0004]
[    0.897564] pci 0004:03:00.0: BAR 3: failed to assign [io  size 0x0004]
[    0.897650] pci 0004:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.897962] pci 0004:03     : [PE# fd] Secondary bus 3 associated with PE#fd
[    0.898251] pci 0004:03     : [PE# fd] Setting up 32-bit TCE table at 0..80000000
[    0.903022] pci 0004:03     : [PE# fd] Setting up window#0 0..7fffffff pg=1000
[    0.903093] pci 0004:03     : [PE# fd] Enabling 64-bit DMA bypass
[    0.903162] iommu: Adding device 0004:03:00.0 to group 2
[    0.903213] pci 0004:02:02.0: PCI bridge to [bus 03]
[    0.903281] pci 0004:02:02.0:   bridge window [mem 0x600c200000000-0x600c2007fffff]
[    0.903373] pci 0004:02:02.0:   bridge window [mem 0x6024000000000-0x602403fffffff 64bit pref]
[    0.903514] pci 0004:02:0a.0: PCI bridge to [bus 04]
[    0.903574] pci 0004:02:0b.0: PCI bridge to [bus 05]
[    0.903663] pci 0004:02:0c.0: PCI bridge to [bus 06]
[    0.903761] pci 0004:02     : [PE# fc] Secondary bus 2 associated with PE#fc
[    0.904086] pci 0004:01:00.0: PCI bridge to [bus 02-06]
[    0.904140] pci 0004:01:00.0:   bridge window [mem 0x600c200000000-0x600c27fefffff]
[    0.904261] pci 0004:01:00.0:   bridge window [mem 0x6024000000000-0x6027f7ff0ffff 64bit pref]
[    0.904393] pci 0004:01     : [PE# fb] Secondary bus 1 associated with PE#fb
[    0.904716] pci 0004:01     : [PE# fb] Setting up 32-bit TCE table at 0..80000000
[    0.909492] pci 0004:01     : [PE# fb] Setting up window#0 0..7fffffff pg=1000
[    0.909561] pci 0004:01     : [PE# fb] Enabling 64-bit DMA bypass
[    0.909648] iommu: Adding device 0004:01:00.0 to group 3
[    0.909714] iommu: Adding device 0004:01:00.1 to group 3
[    0.909770] iommu: Adding device 0004:01:00.2 to group 3
[    0.909827] iommu: Adding device 0004:01:00.3 to group 3
[    0.909903] iommu: Adding device 0004:01:00.4 to group 3
[    0.909957] pci 0004:00:00.0: PCI bridge to [bus 01-06]
[    0.910035] pci 0004:00:00.0:   bridge window [mem 0x600c200000000-0x600c27fefffff]
[    0.910139] pci 0004:00:00.0:   bridge window [mem 0x6024000000000-0x6027f7ff0ffff 64bit pref]
[    0.910280] pci_bus 0004:00: Some PCI device resources are unassigned, try booting with pci=realloc
[    0.910456] pci 0005:00:00.0: BAR 15: assigned [mem 0x6028000000000-0x602803fffffff 64bit pref]
[    0.910586] pci 0005:01:00.0: BAR 0: assigned [mem 0x6028000000000-0x602800000ffff 64bit pref]
[    0.910738] pci 0005:01:00.0: BAR 2: assigned [mem 0x6028000010000-0x602800001ffff 64bit pref]
[    0.910879] pci 0005:01:00.0: BAR 4: assigned [mem 0x6028000020000-0x602800002ffff 64bit pref]
[    0.911010] pci 0005:01:00.1: BAR 0: assigned [mem 0x6028000030000-0x602800003ffff 64bit pref]
[    0.911125] pci 0005:01:00.1: BAR 2: assigned [mem 0x6028000040000-0x602800004ffff 64bit pref]
[    0.911249] pci 0005:01:00.1: BAR 4: assigned [mem 0x6028000050000-0x602800005ffff 64bit pref]
[    0.911387] pci 0005:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.911713] pci 0005:01     : [PE# 00] Secondary bus 1 associated with PE#0
[    0.911995] pci 0005:01     : [PE# 00] Setting up 32-bit TCE table at 0..80000000
[    0.916775] pci 0005:01     : [PE# 00] Setting up window#0 0..7fffffff pg=1000
[    0.916843] pci 0005:01     : [PE# 00] Enabling 64-bit DMA bypass
[    0.916908] iommu: Adding device 0005:01:00.0 to group 4
[    0.916992] iommu: Adding device 0005:01:00.1 to group 4
[    0.917076] pci 0005:00:00.0: PCI bridge to [bus 01]
[    0.917158] pci 0005:00:00.0:   bridge window [mem 0x6028000000000-0x602bf7fffffff 64bit pref]
[    0.917330] pci 0030:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.917646] pci 0030:00:00.0: PCI bridge to [bus 01]
[    0.917741] pci 0033:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.918035] pci 0033:00:00.0: PCI bridge to [bus 01]
[    0.918133] pci 0034:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.918400] pci 0034:00:00.0: PCI bridge to [bus 01]
[    0.918536] pci 0035:00:00.0: BAR 14: assigned [mem 0x620c280000000-0x620c2807fffff]
[    0.918610] pci 0035:01:00.0: BAR 0: assigned [mem 0x620c280000000-0x620c28003ffff]
[    0.918735] pci 0035:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.919049] pci 0035:02:08.0: PCI bridge to [bus 03-07]
[    0.919120] pci 0035:02:0d.0: PCI bridge to [bus 08]
[    0.919227] pci 0035:02     : [PE# fd] Secondary bus 2 associated with PE#fd
[    0.919543] pci 0035:01:00.0: PCI bridge to [bus 02-08]
[    0.919615] pci 0035:01     : [PE# fc] Secondary bus 1 associated with PE#fc
[    0.919944] pci 0035:00:00.0: PCI bridge to [bus 01-08]
[    0.920001] pci 0035:00:00.0:   bridge window [mem 0x620c280000000-0x620c2ffefffff]
[    0.920124] pci 0006:00:00.0: BAR 0: assigned [mem 0x6030201600000-0x603020161ffff 64bit]
[    0.920254] pci 0006:00:00.1: BAR 0: assigned [mem 0x6030201620000-0x603020163ffff 64bit]
[    0.920410] pci 0006:00:01.0: BAR 0: assigned [mem 0x6030201640000-0x603020165ffff 64bit]
[    0.920543] pci 0006:00:01.1: BAR 0: assigned [mem 0x6030201660000-0x603020167ffff 64bit]
[    0.920699] pci 0006:00:02.0: BAR 0: assigned [mem 0x6030201680000-0x603020169ffff 64bit]
[    0.920840] pci 0006:00:02.1: BAR 0: assigned [mem 0x60302016a0000-0x60302016bffff 64bit]
[    0.920986] pci 0006:00:00.0: BAR 2: assigned [mem 0x60302016c0000-0x60302016cffff 64bit]
[    0.921128] pci 0006:00:00.1: BAR 2: assigned [mem 0x60302016d0000-0x60302016dffff 64bit]
[    0.921275] pci 0006:00:01.0: BAR 2: assigned [mem 0x60302016e0000-0x60302016effff 64bit]
[    0.921420] pci 0006:00:01.1: BAR 2: assigned [mem 0x60302016f0000-0x60302016fffff 64bit]
[    0.921559] pci 0006:00:02.0: BAR 2: assigned [mem 0x6030201700000-0x603020170ffff 64bit]
[    0.921703] pci 0006:00:02.1: BAR 2: assigned [mem 0x6030201710000-0x603020171ffff 64bit]
[    0.921841] pci 0007:00:00.0: BAR 0: assigned [mem 0x6230201600000-0x623020161ffff 64bit]
[    0.921984] pci 0007:00:00.1: BAR 0: assigned [mem 0x6230201620000-0x623020163ffff 64bit]
[    0.922131] pci 0007:00:01.0: BAR 0: assigned [mem 0x6230201640000-0x623020165ffff 64bit]
[    0.922262] pci 0007:00:01.1: BAR 0: assigned [mem 0x6230201660000-0x623020167ffff 64bit]
[    0.922412] pci 0007:00:02.0: BAR 0: assigned [mem 0x6230201680000-0x623020169ffff 64bit]
[    0.922531] pci 0007:00:02.1: BAR 0: assigned [mem 0x62302016a0000-0x62302016bffff 64bit]
[    0.922696] pci 0007:00:00.0: BAR 2: assigned [mem 0x62302016c0000-0x62302016cffff 64bit]
[    0.922849] pci 0007:00:00.1: BAR 2: assigned [mem 0x62302016d0000-0x62302016dffff 64bit]
[    0.922996] pci 0007:00:01.0: BAR 2: assigned [mem 0x62302016e0000-0x62302016effff 64bit]
[    0.923149] pci 0007:00:01.1: BAR 2: assigned [mem 0x62302016f0000-0x62302016fffff 64bit]
[    0.923295] pci 0007:00:02.0: BAR 2: assigned [mem 0x6230201700000-0x623020170ffff 64bit]
[    0.923434] pci 0007:00:02.1: BAR 2: assigned [mem 0x6230201710000-0x623020171ffff 64bit]
[    0.923591] pci 0006:00:00.0: [PE# 0d] Associated device to PE
[    0.923664] pci 0006:00:00.1: Associating to existing PE d
[    0.923748] pci 0006:00:01.0: Associating to existing PE d
[    0.923831] pci 0006:00:01.1: Associating to existing PE d
[    0.923908] pci 0006:00:02.0: Associating to existing PE d
[    0.923986] pci 0006:00:02.1: Associating to existing PE d
[    0.924112] NPU6: Found 1 MMIO ATSD registers
[    0.924117] pci 0007:00:00.0: [PE# 0d] Associated device to PE
[    0.924263] pci 0007:00:00.1: Associating to existing PE d
[    0.924344] pci 0007:00:01.0: Associating to existing PE d
[    0.924407] pci 0007:00:01.1: Associating to existing PE d
[    0.924489] pci 0007:00:02.0: Associating to existing PE d
[    0.924565] pci 0007:00:02.1: Associating to existing PE d
[    0.924650] NPU7: Found 1 MMIO ATSD registers
[    0.928395] EEH: PCI Enhanced I/O Error Handling Enabled
[    0.950139] HugeTLB registered 2 MB page size, pre-allocated 0 pages
[    0.950190] HugeTLB registered 1 GB page size, pre-allocated 0 pages
[    0.954475] SCSI subsystem initialized
[    0.954889] pci 0002:02:00.0: vgaarb: VGA device added: decodes=io+mem,owns=none,locks=none
[    0.954983] pci 0002:02:00.0: vgaarb: bridge control possible
[    0.955048] vgaarb: loaded
[    0.955151] usbcore: registered new interface driver usbfs
[    0.955240] usbcore: registered new interface driver hub
[    0.955757] usbcore: registered new device driver usb
[    0.955821] pps_core: LinuxPPS API ver. 1 registered
[    0.955885] pps_core: Software ver. 5.3.6 - Copyright 2005-2007 Rodolfo Giometti &lt;giometti@linux.it&gt;
[    0.956004] PTP clock support registered
[    0.956967] NetLabel: Initializing
[    0.956999] NetLabel:  domain hash size = 128
[    0.957051] NetLabel:  protocols = UNLABELED CIPSOv4 CALIPSO
[    0.957165] NetLabel:  unlabeled traffic allowed by default
[    0.958090] clocksource: Switched to clocksource timebase
[    0.977968] VFS: Disk quotas dquot_6.6.0
[    0.978265] VFS: Dquot-cache hash table entries: 8192 (order 0, 65536 bytes)
[    0.978803] AppArmor: AppArmor Filesystem Enabled
[    0.982484] NET: Registered protocol family 2
[    0.983321] TCP established hash table entries: 524288 (order: 6, 4194304 bytes)
[    0.985132] TCP bind hash table entries: 65536 (order: 4, 1048576 bytes)
[    0.985491] TCP: Hash tables configured (established 524288 bind 65536)
[    0.985592] UDP hash table entries: 65536 (order: 5, 2097152 bytes)
[    0.986328] UDP-Lite hash table entries: 65536 (order: 5, 2097152 bytes)
[    0.987572] NET: Registered protocol family 1
[    0.987897] Unpacking initramfs...
[    1.926984] Freeing initrd memory: 38528K
[    1.967324] audit: initializing netlink subsys (disabled)
[    1.967447] audit: type=2000 audit(1502339365.956:1): initialized
[    1.974609] Initialise system trusted keyrings
[    1.975330] workingset: timestamp_bits=38 max_order=22 bucket_order=0
[    1.978856] zbud: loaded
[    1.983165] squashfs: version 4.0 (2009/01/31) Phillip Lougher
[    1.984016] fuse init (API version 7.26)
[    1.988558] Key type asymmetric registered
[    1.988589] Asymmetric key parser 'x509' registered
[    1.988650] Block layer SCSI generic (bsg) driver version 0.4 loaded (major 246)
[    1.989056] io scheduler noop registered
[    1.989096] io scheduler deadline registered
[    1.989150] io scheduler cfq registered (default)
[    1.991839] Using unsupported 1024x768 vga at 600c100010000, depth=32, pitch=4096
[    2.077302] Console: switching to colour frame buffer device 128x48
[    2.162565] fb0: Open Firmware frame buffer device on /pciex@600c3c0200000/pci@0/pci@0/vga@0
[    2.162918] hvc0: raw protocol on /ibm,opal/consoles/serial@0 (boot console)
[    2.162990] hvc0: No interrupts property, using OPAL event
[    2.163432] Serial: 8250/16550 driver, 32 ports, IRQ sharing enabled
[    2.165712] Linux agpgart interface v0.103
[    2.181302] loop: module loaded
[    2.181643] libphy: Fixed MDIO Bus: probed
[    2.181676] tun: Universal TUN/TAP device driver, 1.6
[    2.181729] tun: (C) 1999-2004 Max Krasnyansky &lt;maxk@qualcomm.com&gt;
[    2.181846] PPP generic driver version 2.4.2
[    2.182044] VFIO - User Level meta-driver version: 0.3
[    2.183038] ehci_hcd: USB 2.0 'Enhanced' Host Controller (EHCI) Driver
[    2.183113] ehci-pci: EHCI PCI platform driver
[    2.183205] ohci_hcd: USB 1.1 'Open' Host Controller (OHCI) Driver
[    2.183306] ohci-pci: OHCI PCI platform driver
[    2.183391] uhci_hcd: USB Universal Host Controller Interface driver
[    2.183579] xhci_hcd 0001:01:00.0: xHCI Host Controller
[    2.183687] xhci_hcd 0001:01:00.0: new USB bus registered, assigned bus number 1
[    2.183865] xhci_hcd 0001:01:00.0: Using 64-bit DMA iommu bypass
[    2.184008] xhci_hcd 0001:01:00.0: hcc params 0x0270f06d hci version 0x96 quirks 0x04000000
[    2.184634] usb usb1: New USB device found, idVendor=1d6b, idProduct=0002
[    2.184691] usb usb1: New USB device strings: Mfr=3, Product=2, SerialNumber=1
[    2.184786] usb usb1: Product: xHCI Host Controller
[    2.184852] usb usb1: Manufacturer: Linux 4.10.0-26-generic xhci-hcd
[    2.184932] usb usb1: SerialNumber: 0001:01:00.0
[    2.185177] hub 1-0:1.0: USB hub found
[    2.185239] hub 1-0:1.0: 4 ports detected
[    2.185623] xhci_hcd 0001:01:00.0: xHCI Host Controller
[    2.185674] xhci_hcd 0001:01:00.0: new USB bus registered, assigned bus number 2
[    2.185799] usb usb2: We don't know the algorithms for LPM for this host, disabling LPM.
[    2.185942] usb usb2: New USB device found, idVendor=1d6b, idProduct=0003
[    2.186042] usb usb2: New USB device strings: Mfr=3, Product=2, SerialNumber=1
[    2.186142] usb usb2: Product: xHCI Host Controller
[    2.186208] usb usb2: Manufacturer: Linux 4.10.0-26-generic xhci-hcd
[    2.186295] usb usb2: SerialNumber: 0001:01:00.0
[    2.186521] hub 2-0:1.0: USB hub found
[    2.186567] hub 2-0:1.0: 4 ports detected
[    2.187276] mousedev: PS/2 mouse device common for all mice
[    2.238039] rtc-opal opal-rtc: rtc core: registered rtc-opal as rtc0
[    2.238094] i2c /dev entries driver
[    2.238413] device-mapper: uevent: version 1.0.3
[    2.238797] device-mapper: ioctl: 4.35.0-ioctl (2016-06-23) initialised: dm-devel@redhat.com
[    2.238904] powernv-cpufreq: cpufreq pstate min 101 nominal 50 max 0
[    2.252339] ledtrig-cpu: registered to indicate activity on CPUs
[    2.253409] NET: Registered protocol family 10
[    2.260897] Segment Routing with IPv6
[    2.260966] NET: Registered protocol family 17
[    2.261037] Key type dns_resolver registered
[    2.261334] registered taskstats version 1
[    2.261383] Loading compiled-in X.509 certificates
[    2.265545] Loaded X.509 cert 'Build time autogenerated kernel key: 5d3adc177bbb659f71409a29e976c45eb95b6207'
[    2.265839] zswap: loaded using pool lzo/zbud
[    2.268530] Key type big_key registered
[    2.268563] Key type trusted registered
[    2.271236] Key type encrypted registered
[    2.271271] AppArmor: AppArmor sha1 policy hashing enabled
[    2.271315] ima: No TPM chip found, activating TPM-bypass! (rc=-19)
[    2.271415] evm: HMAC attrs: 0x1
[    2.322108] rtc-opal opal-rtc: setting system clock to 2017-08-10 04:29:26 UTC (1502339366)
[    2.322908] Unable to open file: /etc/keys/x509_ima.der (-2)
[    2.322913] Unable to open file: /etc/keys/x509_evm.der (-2)
[    2.323383] Freeing unused kernel memory: 4416K
[    2.323505] This architecture does not have kernel memory protection.
Loading, please wait...
starting version 232
[    2.549742] ahci 0004:03:00.0: Using 64-bit DMA iommu bypass
[    2.552484] tg3.c:v3.137 (May 11, 2014)
[    2.556967] [drm] Initialized
[    2.559897] ahci 0004:03:00.0: AHCI 0001.0000 32 slots 4 ports 6 Gbps 0xf impl SATA mode
[    2.559970] ahci 0004:03:00.0: flags: 64bit ncq sntf led only pmp fbs pio slum part sxs 
[    2.561046] scsi host0: ahci
[    2.561317] scsi host1: ahci
[    2.561550] scsi host2: ahci
[    2.561776] scsi host3: ahci
[    2.561921] ata1: SATA max UDMA/133 abar m2048@0x600c200010000 port 0x600c200010100 irq 88
[    2.561998] ata2: SATA max UDMA/133 abar m2048@0x600c200010000 port 0x600c200010180 irq 88
[    2.562110] ata3: SATA max UDMA/133 abar m2048@0x600c200010000 port 0x600c200010200 irq 88
[    2.562224] ata4: SATA max UDMA/133 abar m2048@0x600c200010000 port 0x600c200010280 irq 88
[    2.571352] tg3 0005:01:00.0: Using 64-bit DMA iommu bypass
[    2.571930] tg3 0005:01:00.0 eth0: Tigon3 [partno(BCM95719) rev 5719001] (PCI Express) MAC address 70:e2:84:14:23:e2
[    2.572035] tg3 0005:01:00.0 eth0: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[    2.572186] tg3 0005:01:00.0 eth0: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[1] TSOcap[1]
[    2.572271] tg3 0005:01:00.0 eth0: dma_rwctrl[00000000] dma_mask[64-bit]
[    2.579936] [drm] platform has no IO space, trying MMIO
[    2.579997] [drm] Using P2A bridge for configuration
[    2.580051] [drm] AST 2500 detected
[    2.580091] [drm] Analog VGA only
[    2.580162] [drm] dram MCLK=800 Mhz type=7 bus_width=16 size=01000000
[    2.580282] [TTM] Zone  kernel: Available graphics memory: 133937792 kiB
[    2.580354] [TTM] Zone   dma32: Available graphics memory: 2097152 kiB
[    2.580433] [TTM] Initializing pool allocator
[    2.580518] [TTM] Initializing DMA pool allocator
[    2.583605] fb: switching to astdrmfb from OFfb vga
[    2.583689] Console: switching to colour dummy device 80x25
[    2.590980] tg3 0005:01:00.1: Using 64-bit DMA iommu bypass
[    2.594981] tg3 0005:01:00.1 eth1: Tigon3 [partno(BCM95719) rev 5719001] (PCI Express) MAC address 70:e2:84:14:23:e3
[    2.595011] tg3 0005:01:00.1 eth1: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[    2.595042] tg3 0005:01:00.1 eth1: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[1] TSOcap[1]
[    2.595069] tg3 0005:01:00.1 eth1: dma_rwctrl[00000000] dma_mask[64-bit]
[    2.601679] Console: switching to colour frame buffer device 128x48
[    2.622171] ast 0002:02:00.0: fb0: astdrmfb frame buffer device
[    2.649987] [drm] Initialized ast 0.1.0 20120228 for 0002:02:00.0 on minor 0
[    2.664144] tg3 0005:01:00.0 enP5p1s0f0: renamed from eth0
[    2.758522] tg3 0005:01:00.1 enP5p1s0f1: renamed from eth1
[    2.876151] ata3: SATA link down (SStatus 0 SControl 300)
[    2.876221] ata4: SATA link down (SStatus 0 SControl 300)
[    3.037990] ata1: SATA link up 6.0 Gbps (SStatus 133 SControl 300)
[    3.038054] ata2: SATA link up 6.0 Gbps (SStatus 133 SControl 300)
[    3.038908] ata1.00: ATA-10: ST1000NX0313         00LY266 00LY265IBM, BE35, max UDMA/133
[    3.038973] ata1.00: 1953525168 sectors, multi 0: LBA48 NCQ (depth 31/32), AA
[    3.039067] ata2.00: ATA-10: ST1000NX0313         00LY266 00LY265IBM, BE35, max UDMA/133
[    3.039177] ata2.00: 1953525168 sectors, multi 0: LBA48 NCQ (depth 31/32), AA
[    3.039675] ata1.00: configured for UDMA/133
[    3.039810] ata2.00: configured for UDMA/133
[    3.040448] scsi 0:0:0:0: Direct-Access     ATA      ST1000NX0313     BE35 PQ: 0 ANSI: 5
[    3.086214] sd 0:0:0:0: [sda] 1953525168 512-byte logical blocks: (1.00 TB/932 GiB)
[    3.086269] sd 0:0:0:0: Attached scsi generic sg0 type 0
[    3.086270] sd 0:0:0:0: [sda] 4096-byte physical blocks
[    3.086284] sd 0:0:0:0: [sda] Write Protect is off
[    3.086308] sd 0:0:0:0: [sda] Write cache: enabled, read cache: enabled, doesn't support DPO or FUA
[    3.087267] scsi 1:0:0:0: Direct-Access     ATA      ST1000NX0313     BE35 PQ: 0 ANSI: 5
[    3.133228]  sda: sda1 sda2
[    3.133681] sd 0:0:0:0: [sda] Attached SCSI removable disk
[    3.138191] sd 1:0:0:0: [sdb] 1953525168 512-byte logical blocks: (1.00 TB/932 GiB)
[    3.138246] sd 1:0:0:0: Attached scsi generic sg1 type 0
[    3.138313] sd 1:0:0:0: [sdb] 4096-byte physical blocks
[    3.138385] sd 1:0:0:0: [sdb] Write Protect is off
[    3.138464] sd 1:0:0:0: [sdb] Write cache: enabled, read cache: enabled, doesn't support DPO or FUA
[    3.159968] sd 1:0:0:0: [sdb] Attached SCSI removable disk
Begin: Loading essential drivers ... done.
Begin: Running /scripts/init-premount ... done.
Begin: Mounting root file system ... Begin: Running /scripts/local-top ... done.
Begin: Running /scripts/local-premount ... done.
Begin: Will now check root file system ... fsck from util-linux 2.29
[/sbin/fsck.ext4 (1) -- /dev/sda2] fsck.ext4 -a -C0 /dev/sda2 
/dev/sda2: clean, 61754/61054976 files, 4970676/244188416 blocks
done.
[    3.613738] EXT4-fs (sda2): mounted filesystem with ordered data mode. Opts: (null)
done.
Begin: Running /scripts/local-bottom ... done.
Begin: Running /scripts/init-bottom ... done.
[    4.428055] ip_tables: (C) 2000-2006 Netfilter Core Team
[    4.469377] systemd[1]: systemd 232 running in system mode. (+PAM +AUDIT +SELINUX +IMA +APPARMOR +SMACK +SYSVINIT +UTMP +LIBCRYPTSETUP +GCRYPT +GNUTLS +ACL +XZ +LZ4 +SECCOMP +BLKID +ELFUTILS +KMOD +IDN)
[    4.470150] systemd[1]: Detected architecture ppc64-le.

Welcome to [1mUbuntu 17.04[0m!

[    4.482880] systemd[1]: Set hostname to &lt;w54L&gt;.
[    5.078183] systemd[1]: Listening on Journal Socket (/dev/log).
[[0;32m  OK  [0m] Listening on Journal Socket (/dev/log).
[    5.078536] systemd[1]: Listening on /dev/initctl Compatibility Named Pipe.
[[0;32m  OK  [0m] Listening on /dev/initctl Compatibility Named Pipe.
[    5.079051] systemd[1]: Created slice System Slice.
[[0;32m  OK  [0m] Created slice System Slice.
[    5.080115] systemd[1]: Mounting POSIX Message Queue File System...
         Mounting POSIX Message Queue File System...
[    5.080390] systemd[1]: Listening on Syslog Socket.
[[0;32m  OK  [0m] Listening on Syslog Socket.
[    5.080619] systemd[1]: Reached target Remote File Systems.
[[0;32m  OK  [0m] Reached target Remote File Systems.
[    5.080909] systemd[1]: Listening on Journal Socket.
[[0;32m  OK  [0m] Listening on Journal Socket.
         Starting Nameserver information manager...
[    5.096559] random: crng init done
         Starting Set the console keyboard layout...
         Starting Uncomplicated firewall...
         Mounting Debug File System...
[[0;32m  OK  [0m] Set up automount Arbitrary Executab\xe2\x80\xa6rmats File System Automount Point.
         Starting Load Kernel Modules...
[[0;32m  OK  [0m] Created slice User and Session Slice.
[[0;32m  OK  [0m] Reached target Slices.
[[0;32m  OK  [0m] Created slice system-serial\x2dgetty.slice.
[[0;32m  OK  [0m] Started Read required files in advance.
[[0;32m  OK  [0m] Listening on udev Control Socket.
[[0;32m  OK  [0m] Reached target User and Group Name Lookups.
[[0;32m  OK  [0m] Listening on Journal Audit Socket.
         Starting Journal Service...
         Starting Create list of required st\xe2\x80\xa6ce nodes for the current kernel...
[[0;32m  OK  [0m] Listening on udev Kernel Socket.
[[0;32m  OK  [0m] Started Forward Password Requests to Wall Directory Watch.
         Mounting Huge Pages File System...
[[0;32m  OK  [0m] Listening on fsck to fsckd communication Socket.
[[0;32m  OK  [0m] Started Load Kernel Modules.
         Starting Apply Kernel Variables...
         Mounting FUSE Control File System...
[[0;32m  OK  [0m] Started Apply Kernel Variables.
[[0;32m  OK  [0m] Started Create list of required sta\xe2\x80\xa6vice nodes for the current kernel.
         Starting Create Static Device Nodes in /dev...
[[0;32m  OK  [0m] Started Uncomplicated firewall.
[[0;32m  OK  [0m] Started Journal Service.
[[0;32m  OK  [0m] Mounted POSIX Message Queue File System.
[[0;32m  OK  [0m] Mounted Debug File System.
[[0;32m  OK  [0m] Mounted Huge Pages File System.
[[0;32m  OK  [0m] Mounted FUSE Control File System.
[[0;32m  OK  [0m] Started Nameserver information manager.
[[0;32m  OK  [0m] Reached target Network (Pre).
[[0;32m  OK  [0m] Started Set the console keyboard layout.
[[0;32m  OK  [0m] Started Create Static Device Nodes in /dev.
         Starting udev Kernel Device Manager...
[[0;32m  OK  [0m] Started udev Kernel Device Manager.
         Starting Remount Root and Kernel File Systems...
[[0;32m  OK  [0m] Started Remount Root and Kernel File Systems.
         Starting Flush Journal to Persistent Storage...
         Starting udev Coldplug all Devices...
[[0;32m  OK  [0m] Reached target Local File Systems (Pre).
[[0;32m  OK  [0m] Reached target Local File Systems.
         Starting AppArmor initialization...
         Starting Tell Plymouth To Write Out Runtime Data...
         Starting Set console font and keymap...
         Activating swap /swapfile...
         Starting Load/Save Random Seed...
[[0;32m  OK  [0m] Started Set console font and keymap.
[[0;32m  OK  [0m] Started Load/Save Random Seed.
[[0;32m  OK  [0m] Started Tell Plymouth To Write Out Runtime Data.
[[0;32m  OK  [0m] Started Flush Journal to Persistent Storage.
         Starting Create Volatile Files and Directories...
[[0;32m  OK  [0m] Started Create Volatile Files and Directories.
         Starting Update UTMP about System Boot/Shutdown...
         Starting Network Time Synchronization...
[[0;32m  OK  [0m] Started AppArmor initialization.
         Starting Raise network interfaces...
[[0;32m  OK  [0m] Started Update UTMP about System Boot/Shutdown.
[[0;32m  OK  [0m] Activated swap /swapfile.
[[0;32m  OK  [0m] Reached target Swap.
[[0;32m  OK  [0m] Started udev Coldplug all Devices.
[[0;32m  OK  [0m] Started Dispatch Password Requests to Console Directory Watch.
[[0;32m  OK  [0m] Reached target Paths.
[[0;32m  OK  [0m] Reached target Encrypted Volumes.
[[0;32m  OK  [0m] Found device NetXtreme BCM5719 Gigabit Ethernet PCIe.
[[0;32m  OK  [0m] Started ifup for enP5p1s0f0.
[[0;32m  OK  [0m] Started Network Time Synchronization.
[[0;32m  OK  [0m] Found device /dev/hvc0.
[[0;32m  OK  [0m] Listening on Load/Save RF Kill Switch Status /dev/rfkill Watch.
[[0;32m  OK  [0m] Reached target System Time Synchronized.
[[0;32m  OK  [0m] Reached target System Initialization.
[[0;32m  OK  [0m] Started Message of the Day.
[[0;32m  OK  [0m] Started Daily Cleanup of Temporary Directories.
[[0;32m  OK  [0m] Listening on D-Bus System Message Bus Socket.
[[0;32m  OK  [0m] Started Daily apt activities.
[[0;32m  OK  [0m] Reached target Timers.
[[0;32m  OK  [0m] Listening on UUID daemon activation socket.
[[0;32m  OK  [0m] Reached target Sockets.
[[0;32m  OK  [0m] Reached target Basic System.
[[0;32m  OK  [0m] Started D-Bus System Message Bus.
         Starting System Logging Service...
[[0;32m  OK  [0m] Started Regular background program processing daemon.
         Starting LSB: daemon to balance interrupts for SMP systems...
         Starting Login Service...
         Starting Accounts Service...
[[0;32m  OK  [0m] Started Set the CPU Frequency Scaling governor.
[[0;32m  OK  [0m] Started System Logging Service.
[[0;32m  OK  [0m] Started Login Service.
[[0;32m  OK  [0m] Started Raise network interfaces.
[[0;32m  OK  [0m] Reached target Network.
         Starting OpenBSD Secure Shell server...
         Starting Network Name Resolution...
         Starting Permit User Sessions...
[[0;32m  OK  [0m] Started LSB: daemon to balance interrupts for SMP systems.
[[0;32m  OK  [0m] Started Permit User Sessions.
         Starting Hold until boot process finishes up...
         Starting Terminate Plymouth Boot Screen...
[[0;32m  OK  [0m] Started Hold until boot process finishes up.
         Starting Set console scheme...
[[0;32m  OK  [0m] Started Serial Getty on hvc0.
[[0;32m  OK  [0m] Started Terminate Plymouth Boot Screen.
[[0;32m  OK  [0m] Started Set console scheme.
[[0;32m  OK  [0m] Created slice system-getty.slice.
[[0;32m  OK  [0m] Started Getty on tty1.
[[0;32m  OK  [0m] Reached target Login Prompts.
[[0;32m  OK  [0m] Started Accounts Service.
[[0;32m  OK  [0m] Started OpenBSD Secure Shell server.
[[0;32m  OK  [0m] Started Network Name Resolution.
[[0;32m  OK  [0m] Reached target Multi-User System.
[[0;32m  OK  [0m] Reached target Graphical Interface.
         Starting Update UTMP about System Runlevel Changes...
[[0;32m  OK  [0m] Started Stop ureadahead data collection 45s after completed startup.
[[0;32m  OK  [0m] Started Update UTMP about System Runlevel Changes.

Ubuntu 17.04 w54L hvc0

w54L login: </msg>
<status endtime="20170810 04:36:49.878" starttime="20170810 04:36:49.830" status="PASS"></status>
</kw>
<status endtime="20170810 04:36:49.878" starttime="20170810 04:36:29.511" status="PASS"></status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status endtime="20170810 04:36:49.878" starttime="20170810 04:26:18.623" critical="yes" status="FAIL">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: Off != FW Progress, Starting OS</status>
</test>
<doc>Test power on for HW CI.</doc>
<status endtime="20170810 04:36:49.880" starttime="20170810 04:26:18.588" status="FAIL"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status endtime="20170810 04:36:49.883" starttime="20170810 04:26:12.790" status="FAIL"></status>
</suite>
<statistics>
<total>
<stat pass="1" fail="1">Critical Tests</stat>
<stat pass="1" fail="1">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="1">chassisboot</stat>
<stat pass="0" fail="1">Power_On_Test</stat>
<stat pass="1" fail="0">Test_SSL_Connection</stat>
</tag>
<suite>
<stat pass="1" name="Tests" id="s1" fail="1">Tests</stat>
<stat pass="1" name="Security" id="s1-s1" fail="0">Tests.Security</stat>
<stat pass="1" name="Test Ssl" id="s1-s1-s1" fail="0">Tests.Security.Test Ssl</stat>
<stat pass="0" name="Test Basic Poweron" id="s1-s2" fail="1">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
