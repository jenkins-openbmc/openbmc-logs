<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170708 15:56:42.009" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/code_update/update_bmc.robot" id="s1" name="Update Bmc">
<test id="s1-t1" name="Initiate Code Update BMC">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${FORCE_UPDATE} == ${0}</arg>
<arg>Prepare BMC For Update</arg>
</arguments>
<kw name="Prepare BMC For Update">
<doc>Prerequisite operation before code update.</doc>
<kw name="Check Boot Count And Time">
<doc>Check for unexpected reboots.</doc>
<kw name="Set BMC Reset Reference Time" library="utils">
<doc>Set current boot time as a reference and increment</doc>
<kw name="Get BMC Boot Time" library="utils">
<doc>Get boot time from /proc/stat.</doc>
<assign>
<var>${cur_btime}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170708 15:56:42.852" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170708 15:56:42.852" starttime="20170708 15:56:42.852"></status>
</kw>
<msg timestamp="20170708 15:56:42.852" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170708 15:56:42.852" starttime="20170708 15:56:42.851"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:56:42.854" starttime="20170708 15:56:42.853"></status>
</kw>
<status status="PASS" endtime="20170708 15:56:42.854" starttime="20170708 15:56:42.853"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170708 15:56:42.855" starttime="20170708 15:56:42.854"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170708 15:56:42.856" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170708 15:56:42.856" starttime="20170708 15:56:42.856"></status>
</kw>
<msg timestamp="20170708 15:56:42.856" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170708 15:56:42.856" starttime="20170708 15:56:42.855"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:56:42.858" starttime="20170708 15:56:42.858"></status>
</kw>
<status status="PASS" endtime="20170708 15:56:42.858" starttime="20170708 15:56:42.857"></status>
</kw>
<status status="PASS" endtime="20170708 15:56:42.858" starttime="20170708 15:56:42.856"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170708 15:56:42.859" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170708 15:56:44.604" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170708 15:56:44.604" starttime="20170708 15:56:42.859"></status>
</kw>
<status status="PASS" endtime="20170708 15:56:44.605" starttime="20170708 15:56:42.851"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>egrep '^btime ' /proc/stat | cut -f 2 -d ' '</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170708 15:56:44.605" level="INFO">Executing command 'egrep '^btime ' /proc/stat | cut -f 2 -d ' ''.</msg>
<msg timestamp="20170708 15:56:44.682" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170708 15:56:44.682" level="INFO">${output} = 1492709344</msg>
<msg timestamp="20170708 15:56:44.682" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170708 15:56:44.682" starttime="20170708 15:56:44.605"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170708 15:56:44.683" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170708 15:56:44.683" starttime="20170708 15:56:44.683"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${btime}</var>
</assign>
<msg timestamp="20170708 15:56:44.684" level="INFO">${btime} = 1492709344</msg>
<status status="PASS" endtime="20170708 15:56:44.684" starttime="20170708 15:56:44.683"></status>
</kw>
<msg timestamp="20170708 15:56:44.684" level="INFO">${cur_btime} = 1492709344</msg>
<status status="PASS" endtime="20170708 15:56:44.684" starttime="20170708 15:56:42.850"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_TIME} == ${0} and ${BOOT_COUNT} == ${0}</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>ELSE IF</arg>
<arg>${cur_btime} &gt; ${BOOT_TIME}</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_COUNT}</arg>
<arg>${BOOT_COUNT + 1}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
</arguments>
<msg timestamp="20170708 15:56:44.686" level="INFO">${BOOT_TIME} = 1492709344</msg>
<status status="PASS" endtime="20170708 15:56:44.686" starttime="20170708 15:56:44.685"></status>
</kw>
<status status="PASS" endtime="20170708 15:56:44.686" starttime="20170708 15:56:44.684"></status>
</kw>
<status status="PASS" endtime="20170708 15:56:44.686" starttime="20170708 15:56:42.850"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Count: ${BOOT_COUNT}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:56:44.687" starttime="20170708 15:56:44.686"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Time: ${BOOT_TIME}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:56:44.687" starttime="20170708 15:56:44.687"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_COUNT} &gt; ${MAX_BOOT_COUNT}</arg>
<arg>Log</arg>
<arg>Phantom Reboot!!! Unexpected reboot detected</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20170708 15:56:44.688" starttime="20170708 15:56:44.688"></status>
</kw>
<status status="PASS" endtime="20170708 15:56:44.688" starttime="20170708 15:56:42.849"></status>
</kw>
<kw name="Prune Journal Log" library="utils">
<doc>Prune archived journal logs.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170708 15:56:44.691" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170708 15:56:44.691" starttime="20170708 15:56:44.690"></status>
</kw>
<msg timestamp="20170708 15:56:44.691" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170708 15:56:44.691" starttime="20170708 15:56:44.690"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:56:44.692" starttime="20170708 15:56:44.692"></status>
</kw>
<status status="PASS" endtime="20170708 15:56:44.692" starttime="20170708 15:56:44.691"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170708 15:56:44.693" starttime="20170708 15:56:44.693"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170708 15:56:44.694" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170708 15:56:44.694" starttime="20170708 15:56:44.694"></status>
</kw>
<msg timestamp="20170708 15:56:44.694" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170708 15:56:44.694" starttime="20170708 15:56:44.693"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:56:44.696" starttime="20170708 15:56:44.696"></status>
</kw>
<status status="PASS" endtime="20170708 15:56:44.696" starttime="20170708 15:56:44.696"></status>
</kw>
<status status="PASS" endtime="20170708 15:56:44.696" starttime="20170708 15:56:44.695"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170708 15:56:44.697" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170708 15:56:46.477" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170708 15:56:46.477" starttime="20170708 15:56:44.697"></status>
</kw>
<status status="PASS" endtime="20170708 15:56:46.477" starttime="20170708 15:56:44.689"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>journalctl --vacuum-size=${vacuum_size}</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170708 15:56:46.479" level="INFO">Executing command 'journalctl --vacuum-size=1M'.</msg>
<msg timestamp="20170708 15:56:46.555" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170708 15:56:46.556" level="INFO">${output} = </msg>
<msg timestamp="20170708 15:56:46.556" level="INFO">${stderr} = Vacuuming done, freed 0B of archived journals from /run/log/journal/98da6a547f8141998b98e23f5894fd04.</msg>
<msg timestamp="20170708 15:56:46.556" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20170708 15:56:46.556" starttime="20170708 15:56:46.478"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${stderr}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:56:46.557" starttime="20170708 15:56:46.556"></status>
</kw>
<status status="PASS" endtime="20170708 15:56:46.557" starttime="20170708 15:56:44.689"></status>
</kw>
<kw name="Power Off Request" library="state_manager">
<doc>Select appropriate poweroff keyword.</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${OBMC_STATES_VERSION}' == '${0}'</arg>
<arg>Initiate Power Off</arg>
<arg>ELSE</arg>
<arg>Initiate Host PowerOff</arg>
</arguments>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170708 15:56:46.559" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status status="PASS" endtime="20170708 15:56:46.559" starttime="20170708 15:56:46.558"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:56:46.560" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" endtime="20170708 15:56:46.560" starttime="20170708 15:56:46.560"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:56:46.564" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:56:46.564" starttime="20170708 15:56:46.563"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:56:46.565" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:56:46.565" starttime="20170708 15:56:46.565"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:56:46.566" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:56:46.566" starttime="20170708 15:56:46.565"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:56:46.566" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:56:46.566" starttime="20170708 15:56:46.566"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:56:46.756" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 15:56:46.756" starttime="20170708 15:56:46.567"></status>
</kw>
<msg timestamp="20170708 15:56:46.756" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:56:46.756" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:56:46.756" starttime="20170708 15:56:46.567"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:56:46.757" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:56:46.757" starttime="20170708 15:56:46.756"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:56:46.757" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:56:46.758" starttime="20170708 15:56:46.757"></status>
</kw>
<status status="PASS" endtime="20170708 15:56:46.758" starttime="20170708 15:56:46.563"></status>
</kw>
<status status="PASS" endtime="20170708 15:56:46.758" starttime="20170708 15:56:46.562"></status>
</kw>
<status status="PASS" endtime="20170708 15:56:46.758" starttime="20170708 15:56:46.562"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:56:46.758" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" endtime="20170708 15:56:46.759" starttime="20170708 15:56:46.758"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:56:46.759" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:56:46.759" starttime="20170708 15:56:46.759"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:56:46.760" starttime="20170708 15:56:46.759"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170708 15:56:46.761" level="INFO">${msg} = URI:https://9.41.166.169/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Ty...</msg>
<status status="PASS" endtime="20170708 15:56:46.762" starttime="20170708 15:56:46.761"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170708 15:56:46.762" level="INFO">URI:https://9.41.166.169/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170708 15:56:46.763" starttime="20170708 15:56:46.762"></status>
</kw>
<status status="PASS" endtime="20170708 15:56:46.763" starttime="20170708 15:56:46.762"></status>
</kw>
<status status="PASS" endtime="20170708 15:56:46.763" starttime="20170708 15:56:46.760"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 15:56:47.127" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170708 15:56:47.127" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:56:47.127" starttime="20170708 15:56:46.763"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170708 15:56:47.129" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170708 15:56:47.129" starttime="20170708 15:56:47.128"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170708 15:56:47.130" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170708 15:56:47.130" starttime="20170708 15:56:47.130"></status>
</kw>
<status status="PASS" endtime="20170708 15:56:47.130" starttime="20170708 15:56:47.129"></status>
</kw>
<status status="PASS" endtime="20170708 15:56:47.130" starttime="20170708 15:56:47.128"></status>
</kw>
<msg timestamp="20170708 15:56:47.130" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:56:47.130" starttime="20170708 15:56:46.561"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:56:47.131" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:56:47.131" starttime="20170708 15:56:47.131"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170708 15:56:47.132" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170708 15:56:47.132" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170708 15:56:47.132" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170708 15:56:47.132" starttime="20170708 15:56:47.132"></status>
</kw>
<status status="PASS" endtime="20170708 15:56:47.132" starttime="20170708 15:56:46.559"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" endtime="20170708 15:56:47.133" starttime="20170708 15:56:47.133"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:56:47.138" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:56:47.138" starttime="20170708 15:56:47.138"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:56:47.139" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:56:47.139" starttime="20170708 15:56:47.139"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:56:47.140" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:56:47.140" starttime="20170708 15:56:47.139"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:56:47.140" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:56:47.140" starttime="20170708 15:56:47.140"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:56:48.472" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 15:56:48.472" starttime="20170708 15:56:47.141"></status>
</kw>
<msg timestamp="20170708 15:56:48.472" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:56:48.472" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:56:48.472" starttime="20170708 15:56:47.141"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:56:48.473" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:56:48.473" starttime="20170708 15:56:48.473"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:56:48.474" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:56:48.474" starttime="20170708 15:56:48.473"></status>
</kw>
<status status="PASS" endtime="20170708 15:56:48.474" starttime="20170708 15:56:47.137"></status>
</kw>
<status status="PASS" endtime="20170708 15:56:48.474" starttime="20170708 15:56:47.136"></status>
</kw>
<status status="PASS" endtime="20170708 15:56:48.474" starttime="20170708 15:56:47.136"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:56:48.475" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170708 15:56:48.475" starttime="20170708 15:56:48.474"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:56:48.475" starttime="20170708 15:56:48.475"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 15:56:51.258" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170708 15:56:51.258" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:56:51.258" starttime="20170708 15:56:48.476"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:56:51.259" starttime="20170708 15:56:51.259"></status>
</kw>
<msg timestamp="20170708 15:56:51.260" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:56:51.260" starttime="20170708 15:56:47.135"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:56:51.260" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:56:51.260" starttime="20170708 15:56:51.260"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170708 15:56:51.261" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170708 15:56:51.261" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170708 15:56:51.261" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170708 15:56:51.261" starttime="20170708 15:56:51.261"></status>
</kw>
<msg timestamp="20170708 15:56:51.261" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170708 15:56:51.261" starttime="20170708 15:56:47.134"></status>
</kw>
<msg timestamp="20170708 15:56:51.262" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170708 15:56:51.262" starttime="20170708 15:56:47.134"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:56:51.262" starttime="20170708 15:56:51.262"></status>
</kw>
<status status="PASS" endtime="20170708 15:56:51.262" starttime="20170708 15:56:47.134"></status>
</kw>
<status status="PASS" endtime="20170708 15:56:51.262" starttime="20170708 15:56:47.133"></status>
</kw>
<status status="PASS" endtime="20170708 15:56:51.262" starttime="20170708 15:56:46.558"></status>
</kw>
<status status="PASS" endtime="20170708 15:56:51.263" starttime="20170708 15:56:46.557"></status>
</kw>
<status status="PASS" endtime="20170708 15:56:51.263" starttime="20170708 15:56:46.557"></status>
</kw>
<kw name="Set Policy Setting" library="code_update_utils">
<doc>Set the given test policy</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20170708 15:56:51.264" level="INFO">${valueDict} = {u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170708 15:56:51.264" starttime="20170708 15:56:51.263"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:56:51.265" level="INFO">${base_uri} = /org/openbmc/settings/host0</msg>
<status status="PASS" endtime="20170708 15:56:51.265" starttime="20170708 15:56:51.265"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:56:51.268" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:56:51.269" starttime="20170708 15:56:51.268"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:56:51.269" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:56:51.269" starttime="20170708 15:56:51.269"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:56:51.270" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:56:51.270" starttime="20170708 15:56:51.270"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:56:51.271" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:56:51.271" starttime="20170708 15:56:51.270"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:56:51.646" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 15:56:51.646" starttime="20170708 15:56:51.271"></status>
</kw>
<msg timestamp="20170708 15:56:51.646" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:56:51.646" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:56:51.646" starttime="20170708 15:56:51.271"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:56:51.646" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:56:51.647" starttime="20170708 15:56:51.646"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:56:51.647" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:56:51.647" starttime="20170708 15:56:51.647"></status>
</kw>
<status status="PASS" endtime="20170708 15:56:51.647" starttime="20170708 15:56:51.267"></status>
</kw>
<status status="PASS" endtime="20170708 15:56:51.648" starttime="20170708 15:56:51.267"></status>
</kw>
<status status="PASS" endtime="20170708 15:56:51.648" starttime="20170708 15:56:51.266"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:56:51.648" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170708 15:56:51.648" starttime="20170708 15:56:51.648"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:56:51.649" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:56:51.649" starttime="20170708 15:56:51.649"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:56:51.649" starttime="20170708 15:56:51.649"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170708 15:56:51.651" level="INFO">${msg} = URI:https://9.41.166.169/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': u'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170708 15:56:51.651" starttime="20170708 15:56:51.650"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170708 15:56:51.652" level="INFO">URI:https://9.41.166.169/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': u'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170708 15:56:51.652" starttime="20170708 15:56:51.652"></status>
</kw>
<status status="PASS" endtime="20170708 15:56:51.652" starttime="20170708 15:56:51.651"></status>
</kw>
<status status="PASS" endtime="20170708 15:56:51.652" starttime="20170708 15:56:51.650"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 15:56:53.686" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, data={"data": "RESTORE_LAST_STATE"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170708 15:56:53.686" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:56:53.686" starttime="20170708 15:56:51.653"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170708 15:56:53.688" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170708 15:56:53.688" starttime="20170708 15:56:53.687"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170708 15:56:53.689" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170708 15:56:53.689" starttime="20170708 15:56:53.689"></status>
</kw>
<status status="PASS" endtime="20170708 15:56:53.689" starttime="20170708 15:56:53.688"></status>
</kw>
<status status="PASS" endtime="20170708 15:56:53.689" starttime="20170708 15:56:53.686"></status>
</kw>
<msg timestamp="20170708 15:56:53.689" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:56:53.689" starttime="20170708 15:56:51.265"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:56:53.690" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:56:53.690" starttime="20170708 15:56:53.690"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170708 15:56:53.691" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170708 15:56:53.691" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170708 15:56:53.691" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170708 15:56:53.691" starttime="20170708 15:56:53.691"></status>
</kw>
<status status="PASS" endtime="20170708 15:56:53.691" starttime="20170708 15:56:51.264"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:56:53.695" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:56:53.695" starttime="20170708 15:56:53.694"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:56:53.696" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:56:53.696" starttime="20170708 15:56:53.695"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:56:53.696" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:56:53.697" starttime="20170708 15:56:53.696"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:56:53.697" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:56:53.697" starttime="20170708 15:56:53.697"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:56:54.648" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 15:56:54.648" starttime="20170708 15:56:53.698"></status>
</kw>
<msg timestamp="20170708 15:56:54.649" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:56:54.649" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:56:54.649" starttime="20170708 15:56:53.697"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:56:54.649" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:56:54.649" starttime="20170708 15:56:54.649"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:56:54.650" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:56:54.650" starttime="20170708 15:56:54.650"></status>
</kw>
<status status="PASS" endtime="20170708 15:56:54.650" starttime="20170708 15:56:53.694"></status>
</kw>
<status status="PASS" endtime="20170708 15:56:54.650" starttime="20170708 15:56:53.693"></status>
</kw>
<status status="PASS" endtime="20170708 15:56:54.650" starttime="20170708 15:56:53.693"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:56:54.651" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170708 15:56:54.651" starttime="20170708 15:56:54.651"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:56:54.652" starttime="20170708 15:56:54.651"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 15:56:54.735" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, headers=None json=None</msg>
<msg timestamp="20170708 15:56:54.735" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:56:54.735" starttime="20170708 15:56:54.652"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:56:54.735" starttime="20170708 15:56:54.735"></status>
</kw>
<msg timestamp="20170708 15:56:54.736" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:56:54.736" starttime="20170708 15:56:53.692"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:56:54.736" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:56:54.736" starttime="20170708 15:56:54.736"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170708 15:56:54.737" level="INFO">To JSON using : content={
  "data": "RESTORE_LAST_STATE", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170708 15:56:54.737" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170708 15:56:54.737" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170708 15:56:54.737" starttime="20170708 15:56:54.737"></status>
</kw>
<msg timestamp="20170708 15:56:54.738" level="INFO">${currentPolicy} = RESTORE_LAST_STATE</msg>
<status status="PASS" endtime="20170708 15:56:54.738" starttime="20170708 15:56:53.691"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${currentPolicy}</arg>
<arg>${policy}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:56:54.738" starttime="20170708 15:56:54.738"></status>
</kw>
<status status="PASS" endtime="20170708 15:56:54.739" starttime="20170708 15:56:51.263"></status>
</kw>
<kw name="Prepare For Update" library="code_update_utils">
<doc>Switch to update mode in progress. This method calls</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:56:54.740" level="INFO">${data} = {u'data': []}</msg>
<status status="PASS" endtime="20170708 15:56:54.740" starttime="20170708 15:56:54.739"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${BMC_PREP_METHOD}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:56:54.743" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:56:54.743" starttime="20170708 15:56:54.742"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:56:54.744" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:56:54.744" starttime="20170708 15:56:54.743"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:56:54.744" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:56:54.744" starttime="20170708 15:56:54.744"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:56:54.745" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:56:54.745" starttime="20170708 15:56:54.745"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:56:55.012" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 15:56:55.012" starttime="20170708 15:56:54.746"></status>
</kw>
<msg timestamp="20170708 15:56:55.012" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:56:55.012" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:56:55.012" starttime="20170708 15:56:54.745"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:56:55.013" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:56:55.013" starttime="20170708 15:56:55.013"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:56:55.014" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:56:55.014" starttime="20170708 15:56:55.013"></status>
</kw>
<status status="PASS" endtime="20170708 15:56:55.014" starttime="20170708 15:56:54.742"></status>
</kw>
<status status="PASS" endtime="20170708 15:56:55.014" starttime="20170708 15:56:54.741"></status>
</kw>
<status status="PASS" endtime="20170708 15:56:55.014" starttime="20170708 15:56:54.741"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:56:55.015" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc/action/PrepareForUpdate</msg>
<status status="PASS" endtime="20170708 15:56:55.015" starttime="20170708 15:56:55.014"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:56:55.015" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:56:55.015" starttime="20170708 15:56:55.015"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:56:55.016" starttime="20170708 15:56:55.016"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:56:55.017" starttime="20170708 15:56:55.016"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 15:56:55.384" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc/action/PrepareForUpdate, data={"data": []}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20170708 15:56:55.384" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:56:55.385" starttime="20170708 15:56:55.017"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:56:55.385" starttime="20170708 15:56:55.385"></status>
</kw>
<msg timestamp="20170708 15:56:55.385" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:56:55.385" starttime="20170708 15:56:54.740"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:56:55.386" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:56:55.386" starttime="20170708 15:56:55.386"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10s</arg>
</arguments>
<msg timestamp="20170708 15:57:05.387" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20170708 15:57:05.387" starttime="20170708 15:56:55.386"></status>
</kw>
<status status="PASS" endtime="20170708 15:57:05.387" starttime="20170708 15:56:54.739"></status>
</kw>
<kw name="Check If BMC is Up" library="utils">
<doc>Wait for Host to be online. Checks every X seconds</doc>
<arguments>
<arg>20 min</arg>
<arg>10 sec</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${max_timeout}</arg>
<arg>${interval}</arg>
<arg>Verify Ping and REST Authentication</arg>
</arguments>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170708 15:57:05.391" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170708 15:57:05.391" starttime="20170708 15:57:05.390"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170708 15:57:05.395" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170708 15:57:08.398" level="INFO">${RC} = 0</msg>
<msg timestamp="20170708 15:57:08.399" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=145 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.621 ms
64 bytes from 9.41.166.169:...</msg>
<status status="PASS" endtime="20170708 15:57:08.399" starttime="20170708 15:57:05.391"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170708 15:57:08.403" level="INFO">RC: 0
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=145 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.621 ms
64 bytes from 9.41.166.169: icmp_seq=3 ttl=63 time=0.605 ms
64 bytes from 9.41.166.169: icmp_seq=4 ttl=63 time=0.644 ms

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3000ms
rtt min/avg/max/mdev = 0.605/36.960/145.971/62.937 ms</msg>
<status status="PASS" endtime="20170708 15:57:08.403" starttime="20170708 15:57:08.402"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:57:08.404" starttime="20170708 15:57:08.403"></status>
</kw>
<status status="PASS" endtime="20170708 15:57:08.404" starttime="20170708 15:57:05.390"></status>
</kw>
<msg timestamp="20170708 15:57:08.404" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170708 15:57:08.404" starttime="20170708 15:57:05.389"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170708 15:57:08.405" starttime="20170708 15:57:08.404"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:57:08.408" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:57:08.409" starttime="20170708 15:57:08.408"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:57:08.410" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:57:08.410" starttime="20170708 15:57:08.410"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:57:08.411" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:57:08.411" starttime="20170708 15:57:08.410"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:57:08.411" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:57:08.411" starttime="20170708 15:57:08.411"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:57:08.415" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff8619c990&gt;: Failed to establish a new connection: [Errno 111] Connection refused',)': /login</msg>
<msg timestamp="20170708 15:57:08.617" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff8619cad0&gt;: Failed to establish a new connection: [Errno 111] Connection refused',)': /login</msg>
<msg timestamp="20170708 15:57:09.019" level="WARN">Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff8619cc50&gt;: Failed to establish a new connection: [Errno 111] Connection refused',)': /login</msg>
<msg timestamp="20170708 15:57:09.022" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.41.166.169', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff8619cd90&gt;: Failed to establish a new connection: [Errno 111] Connection refused',))</msg>
<status status="FAIL" endtime="20170708 15:57:09.022" starttime="20170708 15:57:08.412"></status>
</kw>
<msg timestamp="20170708 15:57:09.022" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170708 15:57:09.022" level="INFO">${resp} = ConnectionError: HTTPSConnectionPool(host='9.41.166.169', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff86...</msg>
<status status="PASS" endtime="20170708 15:57:09.022" starttime="20170708 15:57:08.412"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:57:09.023" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170708 15:57:09.023" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.41.166.169', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff8619cd90&gt;: Failed to establish a new connection: [Errno 111] Connection refused',)): FAIL != PASS</msg>
<status status="FAIL" endtime="20170708 15:57:09.023" starttime="20170708 15:57:09.022"></status>
</kw>
<status status="FAIL" endtime="20170708 15:57:09.023" starttime="20170708 15:57:08.407"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:57:29.029" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:57:29.029" starttime="20170708 15:57:29.025"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:57:29.030" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:57:29.030" starttime="20170708 15:57:29.030"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:57:29.031" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:57:29.031" starttime="20170708 15:57:29.030"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:57:29.031" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:57:29.031" starttime="20170708 15:57:29.031"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:57:47.057" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff86201250&gt;: Failed to establish a new connection: [Errno 113] No route to host',)': /login</msg>
<msg timestamp="20170708 15:57:50.257" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff86201810&gt;: Failed to establish a new connection: [Errno 113] No route to host',)': /login</msg>
<msg timestamp="20170708 15:57:53.457" level="WARN">Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff861f2bd0&gt;: Failed to establish a new connection: [Errno 113] No route to host',)': /login</msg>
<msg timestamp="20170708 15:57:56.057" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.41.166.169', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff861f2790&gt;: Failed to establish a new connection: [Errno 113] No route to host',))</msg>
<status status="FAIL" endtime="20170708 15:57:56.057" starttime="20170708 15:57:29.032"></status>
</kw>
<msg timestamp="20170708 15:57:56.058" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170708 15:57:56.058" level="INFO">${resp} = ConnectionError: HTTPSConnectionPool(host='9.41.166.169', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff86...</msg>
<status status="PASS" endtime="20170708 15:57:56.058" starttime="20170708 15:57:29.032"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:57:56.059" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170708 15:57:56.059" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.41.166.169', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff861f2790&gt;: Failed to establish a new connection: [Errno 113] No route to host',)): FAIL != PASS</msg>
<status status="FAIL" endtime="20170708 15:57:56.059" starttime="20170708 15:57:56.058"></status>
</kw>
<status status="FAIL" endtime="20170708 15:57:56.059" starttime="20170708 15:57:29.024"></status>
</kw>
<msg timestamp="20170708 15:57:56.059" level="FAIL">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ConnectionError: HTTPSConnectionPool(host='9.41.166.169', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff861f2790&gt;: Failed to establish a new connection: [Errno 113] No route to host',)): FAIL != PASS</msg>
<status status="FAIL" endtime="20170708 15:57:56.059" starttime="20170708 15:57:08.407"></status>
</kw>
<status status="FAIL" endtime="20170708 15:57:56.060" starttime="20170708 15:57:08.406"></status>
</kw>
<msg timestamp="20170708 15:57:56.060" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20170708 15:57:56.060" starttime="20170708 15:57:08.405"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20170708 15:57:56.061" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20170708 15:57:56.061" starttime="20170708 15:57:56.061"></status>
</kw>
<status status="FAIL" endtime="20170708 15:57:56.061" starttime="20170708 15:57:56.060"></status>
</kw>
<status status="FAIL" endtime="20170708 15:57:56.061" starttime="20170708 15:57:05.389"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170708 15:58:06.064" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170708 15:58:06.064" starttime="20170708 15:58:06.063"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170708 15:58:06.070" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170708 15:58:12.076" level="INFO">${RC} = 1</msg>
<msg timestamp="20170708 15:58:12.076" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
From 9.41.165.94 icmp_seq=1 Destination Host Unreachable
From 9.41.165.94 icmp_seq=2 Destination Host Unreachable
From 9.41.165.94 icmp_seq=3 Des...</msg>
<status status="PASS" endtime="20170708 15:58:12.077" starttime="20170708 15:58:06.064"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170708 15:58:12.096" level="INFO">RC: 1
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
From 9.41.165.94 icmp_seq=1 Destination Host Unreachable
From 9.41.165.94 icmp_seq=2 Destination Host Unreachable
From 9.41.165.94 icmp_seq=3 Destination Host Unreachable
From 9.41.165.94 icmp_seq=4 Destination Host Unreachable

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, +4 errors, 100% packet loss, time 2999ms
pipe 3</msg>
<status status="PASS" endtime="20170708 15:58:12.096" starttime="20170708 15:58:12.093"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20170708 15:58:12.098" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20170708 15:58:12.098" starttime="20170708 15:58:12.096"></status>
</kw>
<status status="FAIL" endtime="20170708 15:58:12.098" starttime="20170708 15:58:06.063"></status>
</kw>
<msg timestamp="20170708 15:58:12.099" level="INFO">${l_ping} = False</msg>
<status status="PASS" endtime="20170708 15:58:12.099" starttime="20170708 15:58:06.063"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=Ping Failed</arg>
</arguments>
<msg timestamp="20170708 15:58:12.101" level="FAIL">Ping Failed</msg>
<status status="FAIL" endtime="20170708 15:58:12.102" starttime="20170708 15:58:12.101"></status>
</kw>
<status status="FAIL" endtime="20170708 15:58:12.102" starttime="20170708 15:58:12.099"></status>
</kw>
<status status="FAIL" endtime="20170708 15:58:12.102" starttime="20170708 15:58:06.062"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170708 15:58:22.105" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170708 15:58:22.105" starttime="20170708 15:58:22.105"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170708 15:58:22.109" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170708 15:58:25.115" level="INFO">${RC} = 0</msg>
<msg timestamp="20170708 15:58:25.115" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=2.45 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.674 ms
64 bytes from 9.41.166.169...</msg>
<status status="PASS" endtime="20170708 15:58:25.115" starttime="20170708 15:58:22.106"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170708 15:58:25.119" level="INFO">RC: 0
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=2.45 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.674 ms
64 bytes from 9.41.166.169: icmp_seq=3 ttl=63 time=0.611 ms
64 bytes from 9.41.166.169: icmp_seq=4 ttl=63 time=0.620 ms

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3001ms
rtt min/avg/max/mdev = 0.611/1.089/2.453/0.788 ms</msg>
<status status="PASS" endtime="20170708 15:58:25.119" starttime="20170708 15:58:25.118"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:58:25.120" starttime="20170708 15:58:25.120"></status>
</kw>
<status status="PASS" endtime="20170708 15:58:25.120" starttime="20170708 15:58:22.104"></status>
</kw>
<msg timestamp="20170708 15:58:25.121" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170708 15:58:25.121" starttime="20170708 15:58:22.104"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170708 15:58:25.122" starttime="20170708 15:58:25.121"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:58:25.126" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:58:25.127" starttime="20170708 15:58:25.125"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:58:25.127" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:58:25.127" starttime="20170708 15:58:25.127"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:58:25.128" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:58:25.128" starttime="20170708 15:58:25.128"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:58:25.129" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:58:25.129" starttime="20170708 15:58:25.128"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:58:45.155" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="FAIL" endtime="20170708 15:58:45.155" starttime="20170708 15:58:25.130"></status>
</kw>
<msg timestamp="20170708 15:58:45.155" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170708 15:58:45.155" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="PASS" endtime="20170708 15:58:45.155" starttime="20170708 15:58:25.129"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:58:45.156" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170708 15:58:45.156" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170708 15:58:45.156" starttime="20170708 15:58:45.156"></status>
</kw>
<status status="FAIL" endtime="20170708 15:58:45.157" starttime="20170708 15:58:25.125"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:59:05.159" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:59:05.160" starttime="20170708 15:59:05.159"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:59:05.160" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:59:05.160" starttime="20170708 15:59:05.160"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:59:05.161" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:59:05.161" starttime="20170708 15:59:05.161"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:59:05.162" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:59:05.162" starttime="20170708 15:59:05.161"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:59:15.998" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 15:59:15.998" starttime="20170708 15:59:05.163"></status>
</kw>
<msg timestamp="20170708 15:59:15.998" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:59:15.998" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:59:15.998" starttime="20170708 15:59:05.162"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:59:15.999" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:59:15.999" starttime="20170708 15:59:15.999"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:59:16.000" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:59:16.000" starttime="20170708 15:59:15.999"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:16.000" starttime="20170708 15:59:05.157"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:16.000" starttime="20170708 15:58:25.123"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:16.000" starttime="20170708 15:58:25.122"></status>
</kw>
<msg timestamp="20170708 15:59:16.000" level="INFO">${l_rest} = True</msg>
<status status="PASS" endtime="20170708 15:59:16.000" starttime="20170708 15:58:25.122"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<status status="PASS" endtime="20170708 15:59:16.001" starttime="20170708 15:59:16.001"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170708 15:59:16.003" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170708 15:59:16.003" starttime="20170708 15:59:16.002"></status>
</kw>
<msg timestamp="20170708 15:59:16.003" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170708 15:59:16.003" starttime="20170708 15:59:16.002"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:59:16.004" starttime="20170708 15:59:16.004"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:16.004" starttime="20170708 15:59:16.003"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170708 15:59:16.005" starttime="20170708 15:59:16.005"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170708 15:59:16.006" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170708 15:59:16.006" starttime="20170708 15:59:16.006"></status>
</kw>
<msg timestamp="20170708 15:59:16.006" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170708 15:59:16.006" starttime="20170708 15:59:16.005"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:59:16.008" starttime="20170708 15:59:16.008"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:16.008" starttime="20170708 15:59:16.007"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:16.009" starttime="20170708 15:59:16.007"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170708 15:59:16.009" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170708 15:59:18.020" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170708 15:59:18.021" starttime="20170708 15:59:16.009"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:18.021" starttime="20170708 15:59:16.001"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>hostname</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${system}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170708 15:59:18.022" level="INFO">Executing command 'hostname'.</msg>
<msg timestamp="20170708 15:59:18.078" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170708 15:59:18.078" level="INFO">${system} = witherspoon</msg>
<msg timestamp="20170708 15:59:18.078" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170708 15:59:18.078" starttime="20170708 15:59:18.021"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170708 15:59:18.079" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170708 15:59:18.079" starttime="20170708 15:59:18.079"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:18.079" starttime="20170708 15:58:22.103"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:18.079" starttime="20170708 15:57:05.388"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:18.079" starttime="20170708 15:57:05.388"></status>
</kw>
<kw name="Check Boot Count And Time">
<doc>Check for unexpected reboots.</doc>
<kw name="Set BMC Reset Reference Time" library="utils">
<doc>Set current boot time as a reference and increment</doc>
<kw name="Get BMC Boot Time" library="utils">
<doc>Get boot time from /proc/stat.</doc>
<assign>
<var>${cur_btime}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170708 15:59:18.082" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170708 15:59:18.082" starttime="20170708 15:59:18.082"></status>
</kw>
<msg timestamp="20170708 15:59:18.082" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170708 15:59:18.082" starttime="20170708 15:59:18.081"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:59:18.083" starttime="20170708 15:59:18.083"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:18.083" starttime="20170708 15:59:18.082"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170708 15:59:18.084" starttime="20170708 15:59:18.084"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170708 15:59:18.085" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170708 15:59:18.085" starttime="20170708 15:59:18.085"></status>
</kw>
<msg timestamp="20170708 15:59:18.085" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170708 15:59:18.085" starttime="20170708 15:59:18.084"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:59:18.087" starttime="20170708 15:59:18.087"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:18.087" starttime="20170708 15:59:18.086"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:18.088" starttime="20170708 15:59:18.086"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170708 15:59:18.088" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170708 15:59:19.833" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170708 15:59:19.833" starttime="20170708 15:59:18.088"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:19.834" starttime="20170708 15:59:18.080"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>egrep '^btime ' /proc/stat | cut -f 2 -d ' '</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170708 15:59:19.834" level="INFO">Executing command 'egrep '^btime ' /proc/stat | cut -f 2 -d ' ''.</msg>
<msg timestamp="20170708 15:59:19.921" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170708 15:59:19.921" level="INFO">${output} = 1492709344</msg>
<msg timestamp="20170708 15:59:19.922" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170708 15:59:19.922" starttime="20170708 15:59:19.834"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170708 15:59:19.922" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170708 15:59:19.922" starttime="20170708 15:59:19.922"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${btime}</var>
</assign>
<msg timestamp="20170708 15:59:19.923" level="INFO">${btime} = 1492709344</msg>
<status status="PASS" endtime="20170708 15:59:19.923" starttime="20170708 15:59:19.923"></status>
</kw>
<msg timestamp="20170708 15:59:19.923" level="INFO">${cur_btime} = 1492709344</msg>
<status status="PASS" endtime="20170708 15:59:19.923" starttime="20170708 15:59:18.080"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_TIME} == ${0} and ${BOOT_COUNT} == ${0}</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>ELSE IF</arg>
<arg>${cur_btime} &gt; ${BOOT_TIME}</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_COUNT}</arg>
<arg>${BOOT_COUNT + 1}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:59:19.924" starttime="20170708 15:59:19.923"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:19.924" starttime="20170708 15:59:18.080"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Count: ${BOOT_COUNT}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:59:19.925" starttime="20170708 15:59:19.925"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Time: ${BOOT_TIME}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:59:19.926" starttime="20170708 15:59:19.925"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_COUNT} &gt; ${MAX_BOOT_COUNT}</arg>
<arg>Log</arg>
<arg>Phantom Reboot!!! Unexpected reboot detected</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20170708 15:59:19.926" starttime="20170708 15:59:19.926"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:19.926" starttime="20170708 15:59:18.079"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Temp BMC URI Check</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Temp BMC URI Check">
<doc>Check for transient "BMC0" interface.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/state/BMC0/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:59:19.931" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:59:19.932" starttime="20170708 15:59:19.931"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:59:19.933" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:59:19.933" starttime="20170708 15:59:19.932"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:59:19.933" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:59:19.933" starttime="20170708 15:59:19.933"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:59:19.934" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:59:19.934" starttime="20170708 15:59:19.934"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:59:20.114" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 15:59:20.114" starttime="20170708 15:59:19.935"></status>
</kw>
<msg timestamp="20170708 15:59:20.114" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:59:20.114" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:59:20.114" starttime="20170708 15:59:19.934"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:59:20.115" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:59:20.115" starttime="20170708 15:59:20.115"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:59:20.116" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:59:20.116" starttime="20170708 15:59:20.115"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:20.116" starttime="20170708 15:59:19.930"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:20.116" starttime="20170708 15:59:19.930"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:20.116" starttime="20170708 15:59:19.929"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:59:20.117" level="INFO">${base_uri} = /xyz/openbmc_project/state/BMC0/</msg>
<status status="PASS" endtime="20170708 15:59:20.117" starttime="20170708 15:59:20.116"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:59:20.118" starttime="20170708 15:59:20.117"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 15:59:20.174" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/BMC0/, headers=None json=None</msg>
<msg timestamp="20170708 15:59:20.174" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170708 15:59:20.174" starttime="20170708 15:59:20.118"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:59:20.175" starttime="20170708 15:59:20.175"></status>
</kw>
<msg timestamp="20170708 15:59:20.175" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170708 15:59:20.175" starttime="20170708 15:59:19.927"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:59:20.176" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170708 15:59:20.176" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170708 15:59:20.176" starttime="20170708 15:59:20.175"></status>
</kw>
<status status="FAIL" endtime="20170708 15:59:20.176" starttime="20170708 15:59:19.927"></status>
</kw>
<msg timestamp="20170708 15:59:20.177" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170708 15:59:20.177" starttime="20170708 15:59:19.927"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Wait For BMC Ready</arg>
<arg>ELSE</arg>
<arg>Wait For Temp BMC Ready</arg>
</arguments>
<kw name="Wait For BMC Ready" library="state_manager">
<doc>Check BMC state and wait for BMC Ready.</doc>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>BMC_READY</arg>
<arg>HOST_POWERED_OFF</arg>
</arguments>
<assign>
<var>@{states}</var>
</assign>
<msg timestamp="20170708 15:59:20.179" level="INFO">@{states} = [ BMC_READY | HOST_POWERED_OFF ]</msg>
<status status="PASS" endtime="20170708 15:59:20.179" starttime="20170708 15:59:20.179"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${OBMC_STATES_VERSION}' == '${0}'</arg>
<arg>Wait Until Keyword Succeeds</arg>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Verify BMC State</arg>
<arg>${states}</arg>
<arg>ELSE</arg>
<arg>Wait Until Keyword Succeeds</arg>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is BMC Ready</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is BMC Ready</arg>
</arguments>
<kw name="Is BMC Ready" library="state_manager">
<doc>Check if BMC state is Ready.</doc>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:59:20.187" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:59:20.188" starttime="20170708 15:59:20.187"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:59:20.188" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:59:20.189" starttime="20170708 15:59:20.188"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:59:20.190" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:59:20.190" starttime="20170708 15:59:20.189"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:59:20.190" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:59:20.190" starttime="20170708 15:59:20.190"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:59:20.375" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 15:59:20.375" starttime="20170708 15:59:20.191"></status>
</kw>
<msg timestamp="20170708 15:59:20.375" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:59:20.375" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:59:20.375" starttime="20170708 15:59:20.191"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:59:20.376" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:59:20.376" starttime="20170708 15:59:20.376"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:59:20.377" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:59:20.377" starttime="20170708 15:59:20.376"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:20.377" starttime="20170708 15:59:20.186"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:20.377" starttime="20170708 15:59:20.185"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:20.377" starttime="20170708 15:59:20.184"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:59:20.378" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170708 15:59:20.378" starttime="20170708 15:59:20.377"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:59:20.378" starttime="20170708 15:59:20.378"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 15:59:20.456" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None json=None</msg>
<msg timestamp="20170708 15:59:20.456" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:59:20.456" starttime="20170708 15:59:20.379"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:59:20.457" starttime="20170708 15:59:20.456"></status>
</kw>
<msg timestamp="20170708 15:59:20.457" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:59:20.457" starttime="20170708 15:59:20.183"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:59:20.458" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:59:20.458" starttime="20170708 15:59:20.457"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170708 15:59:20.458" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170708 15:59:20.458" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170708 15:59:20.458" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170708 15:59:20.458" starttime="20170708 15:59:20.458"></status>
</kw>
<msg timestamp="20170708 15:59:20.459" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170708 15:59:20.459" starttime="20170708 15:59:20.182"></status>
</kw>
<msg timestamp="20170708 15:59:20.459" level="INFO">${bmc_state} = Ready</msg>
<status status="PASS" endtime="20170708 15:59:20.459" starttime="20170708 15:59:20.181"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${BMC_READY_STATE}</arg>
<arg>${bmc_state}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:59:20.460" starttime="20170708 15:59:20.459"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:20.460" starttime="20170708 15:59:20.181"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:20.460" starttime="20170708 15:59:20.180"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:20.460" starttime="20170708 15:59:20.179"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:20.460" starttime="20170708 15:59:20.178"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:20.460" starttime="20170708 15:59:20.177"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:20.460" starttime="20170708 15:56:42.849"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:20.460" starttime="20170708 15:56:42.848"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Preserve BMC Network Setting</arg>
</arguments>
<kw name="Preserve BMC Network Setting" library="code_update_utils">
<doc>Preserve Network setting</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<assign>
<var>${policy}</var>
</assign>
<msg timestamp="20170708 15:59:20.468" level="INFO">${policy} = 1</msg>
<status status="PASS" endtime="20170708 15:59:20.468" starttime="20170708 15:59:20.467"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20170708 15:59:20.468" level="INFO">${value} = {u'data': 1}</msg>
<status status="PASS" endtime="20170708 15:59:20.468" starttime="20170708 15:59:20.468"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${BMC_UPD_ATTR}</arg>
<arg>preserve_network_settings</arg>
<arg>data=${value}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:59:20.470" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc</msg>
<status status="PASS" endtime="20170708 15:59:20.470" starttime="20170708 15:59:20.469"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:59:20.473" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:59:20.473" starttime="20170708 15:59:20.473"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:59:20.474" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:59:20.474" starttime="20170708 15:59:20.474"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:59:20.475" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:59:20.475" starttime="20170708 15:59:20.474"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:59:20.475" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:59:20.475" starttime="20170708 15:59:20.475"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:59:20.655" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 15:59:20.655" starttime="20170708 15:59:20.476"></status>
</kw>
<msg timestamp="20170708 15:59:20.655" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:59:20.655" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:59:20.655" starttime="20170708 15:59:20.476"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:59:20.656" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:59:20.656" starttime="20170708 15:59:20.655"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:59:20.656" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:59:20.656" starttime="20170708 15:59:20.656"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:20.656" starttime="20170708 15:59:20.472"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:20.657" starttime="20170708 15:59:20.472"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:20.657" starttime="20170708 15:59:20.471"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:59:20.657" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc/attr/preserve_network_settings</msg>
<status status="PASS" endtime="20170708 15:59:20.657" starttime="20170708 15:59:20.657"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:59:20.658" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:59:20.658" starttime="20170708 15:59:20.658"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:59:20.659" starttime="20170708 15:59:20.658"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170708 15:59:20.660" level="INFO">${msg} = URI:https://9.41.166.169/org/openbmc/control/flash/bmc/attr/preserve_network_settings, method:Put, args:{u'data': {u'data': 1}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170708 15:59:20.660" starttime="20170708 15:59:20.659"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170708 15:59:20.661" level="INFO">URI:https://9.41.166.169/org/openbmc/control/flash/bmc/attr/preserve_network_settings, method:Put, args:{u'data': {u'data': 1}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170708 15:59:20.661" starttime="20170708 15:59:20.661"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:20.661" starttime="20170708 15:59:20.660"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:20.661" starttime="20170708 15:59:20.659"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 15:59:21.051" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc/attr/preserve_network_settings, data={"data": 1},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170708 15:59:21.052" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:59:21.052" starttime="20170708 15:59:20.662"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170708 15:59:21.053" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170708 15:59:21.053" starttime="20170708 15:59:21.053"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170708 15:59:21.054" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170708 15:59:21.054" starttime="20170708 15:59:21.054"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:21.054" starttime="20170708 15:59:21.053"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:21.055" starttime="20170708 15:59:21.052"></status>
</kw>
<msg timestamp="20170708 15:59:21.055" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:59:21.055" starttime="20170708 15:59:20.470"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:59:21.056" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:59:21.056" starttime="20170708 15:59:21.055"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170708 15:59:21.056" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170708 15:59:21.056" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170708 15:59:21.056" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170708 15:59:21.057" starttime="20170708 15:59:21.056"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:21.057" starttime="20170708 15:59:20.469"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${BMC_UPD_ATTR}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:59:21.060" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:59:21.060" starttime="20170708 15:59:21.060"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:59:21.061" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:59:21.061" starttime="20170708 15:59:21.061"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:59:21.062" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:59:21.062" starttime="20170708 15:59:21.061"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:59:21.062" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:59:21.062" starttime="20170708 15:59:21.062"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:59:21.255" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 15:59:21.255" starttime="20170708 15:59:21.063"></status>
</kw>
<msg timestamp="20170708 15:59:21.255" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:59:21.256" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:59:21.256" starttime="20170708 15:59:21.063"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:59:21.256" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:59:21.256" starttime="20170708 15:59:21.256"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:59:21.257" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:59:21.257" starttime="20170708 15:59:21.257"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:21.257" starttime="20170708 15:59:21.059"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:21.257" starttime="20170708 15:59:21.059"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:21.257" starttime="20170708 15:59:21.058"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:59:21.258" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc</msg>
<status status="PASS" endtime="20170708 15:59:21.258" starttime="20170708 15:59:21.258"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:59:21.259" starttime="20170708 15:59:21.258"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 15:59:21.365" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc, headers=None json=None</msg>
<msg timestamp="20170708 15:59:21.366" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:59:21.366" starttime="20170708 15:59:21.259"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:59:21.366" starttime="20170708 15:59:21.366"></status>
</kw>
<msg timestamp="20170708 15:59:21.366" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:59:21.366" starttime="20170708 15:59:21.057"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:59:21.367" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:59:21.367" starttime="20170708 15:59:21.367"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170708 15:59:21.368" level="INFO">To JSON using : content={
  "auto_apply": 0, 
  "clear_persistent_files": 0, 
  "filename": "", 
  "preserve_network_settings": 1, 
  "restore_application_defaults": 0, 
  "status": "Idle", 
  "update_kernel_and_apps": 0
} </msg>
<msg timestamp="20170708 15:59:21.368" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170708 15:59:21.368" level="INFO">${content} = {u'status': u'Idle', u'update_kernel_and_apps': 0, u'clear_persistent_files': 0, u'auto_apply': 0, u'filename': u'', u'preserve_network_settings': 1, u'restore_application_defaults': 0}</msg>
<status status="PASS" endtime="20170708 15:59:21.368" starttime="20170708 15:59:21.368"></status>
</kw>
<msg timestamp="20170708 15:59:21.369" level="FAIL">Replacing variables from keyword return value failed: Resolving variable '${content["data"]}' failed: KeyError: 'data'</msg>
<status status="FAIL" endtime="20170708 15:59:21.369" starttime="20170708 15:59:21.057"></status>
</kw>
<status status="FAIL" endtime="20170708 15:59:21.369" starttime="20170708 15:59:20.467"></status>
</kw>
<msg timestamp="20170708 15:59:21.370" level="FAIL">Replacing variables from keyword return value failed: Resolving variable '${content["data"]}' failed: KeyError: 'data'</msg>
<status status="FAIL" endtime="20170708 15:59:21.370" starttime="20170708 15:59:20.461"></status>
</kw>
<kw type="teardown" name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>FFDC On Test Case Fail</arg>
</arguments>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:59:21.382" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:59:21.382" starttime="20170708 15:59:21.382"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:59:21.383" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:59:21.383" starttime="20170708 15:59:21.383"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:59:21.384" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:59:21.384" starttime="20170708 15:59:21.383"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:59:21.384" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:59:21.384" starttime="20170708 15:59:21.384"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:59:21.564" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 15:59:21.564" starttime="20170708 15:59:21.385"></status>
</kw>
<msg timestamp="20170708 15:59:21.565" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:59:21.565" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:59:21.565" starttime="20170708 15:59:21.385"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:59:21.565" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:59:21.565" starttime="20170708 15:59:21.565"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:59:21.566" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:59:21.566" starttime="20170708 15:59:21.566"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:21.566" starttime="20170708 15:59:21.381"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:21.566" starttime="20170708 15:59:21.381"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:21.567" starttime="20170708 15:59:21.380"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:59:21.567" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170708 15:59:21.567" starttime="20170708 15:59:21.567"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:59:21.568" starttime="20170708 15:59:21.568"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 15:59:21.630" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170708 15:59:21.630" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:59:21.630" starttime="20170708 15:59:21.568"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:59:21.631" starttime="20170708 15:59:21.630"></status>
</kw>
<msg timestamp="20170708 15:59:21.631" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:59:21.631" starttime="20170708 15:59:21.379"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:59:21.632" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:59:21.632" starttime="20170708 15:59:21.631"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170708 15:59:21.632" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170708 15:59:21.632" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170708 15:59:21.632" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170708 15:59:21.632" starttime="20170708 15:59:21.632"></status>
</kw>
<msg timestamp="20170708 15:59:21.633" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170708 15:59:21.633" starttime="20170708 15:59:21.379"></status>
</kw>
<msg timestamp="20170708 15:59:21.633" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170708 15:59:21.633" starttime="20170708 15:59:21.378"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170708 15:59:21.634" level="FAIL">Off != Quiesced</msg>
<status status="FAIL" endtime="20170708 15:59:21.634" starttime="20170708 15:59:21.634"></status>
</kw>
<msg timestamp="20170708 15:59:21.634" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170708 15:59:21.634" starttime="20170708 15:59:21.633"></status>
</kw>
<msg timestamp="20170708 15:59:21.635" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170708 15:59:21.635" starttime="20170708 15:59:21.378"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.41.166.169</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170708 15:59:21.646" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170708 15:59:21.646" starttime="20170708 15:59:21.646"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170708 15:59:21.663" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170708 15:59:24.666" level="INFO">${RC} = 0</msg>
<msg timestamp="20170708 15:59:24.666" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=0.765 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.551 ms
64 bytes from 9.41.166.16...</msg>
<status status="PASS" endtime="20170708 15:59:24.667" starttime="20170708 15:59:21.646"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170708 15:59:24.670" level="INFO">RC: 0
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=0.765 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.551 ms
64 bytes from 9.41.166.169: icmp_seq=3 ttl=63 time=0.550 ms
64 bytes from 9.41.166.169: icmp_seq=4 ttl=63 time=0.572 ms

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.550/0.609/0.765/0.093 ms</msg>
<status status="PASS" endtime="20170708 15:59:24.670" starttime="20170708 15:59:24.670"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:59:24.671" starttime="20170708 15:59:24.671"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:24.671" starttime="20170708 15:59:21.645"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170708 15:59:24.693" level="INFO">${cur_time} = 2017-07-08 15:59:24:693078</msg>
<status status="PASS" endtime="20170708 15:59:24.693" starttime="20170708 15:59:24.693"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170708 15:59:24.694" level="INFO">${cur_time} = 20170708155924693078</msg>
<status status="PASS" endtime="20170708 15:59:24.694" starttime="20170708 15:59:24.694"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:24.694" starttime="20170708 15:59:24.691"></status>
</kw>
<msg timestamp="20170708 15:59:24.701" level="INFO">${FFDC_TIME} = 20170708155924693078</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170708 15:59:24.703" level="INFO">${suite_name} = UpdateBmc</msg>
<status status="PASS" endtime="20170708 15:59:24.703" starttime="20170708 15:59:24.703"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170708 15:59:24.704" level="INFO">${suite_name} = 20170708155924693078_UpdateBmc</msg>
<status status="PASS" endtime="20170708 15:59:24.704" starttime="20170708 15:59:24.703"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170708 15:59:24.704" level="INFO">${test_name} = InitiateCodeUpdateBMC</msg>
<status status="PASS" endtime="20170708 15:59:24.704" starttime="20170708 15:59:24.704"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170708 15:59:24.705" level="INFO">${test_name} = 20170708155924693078_InitiateCodeUpdateBMC</msg>
<status status="PASS" endtime="20170708 15:59:24.705" starttime="20170708 15:59:24.704"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:24.705" starttime="20170708 15:59:24.702"></status>
</kw>
<msg timestamp="20170708 15:59:24.710" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/</msg>
<msg timestamp="20170708 15:59:24.714" level="INFO">${FFDC_PREFIX} = 20170708155924693078_</msg>
<msg timestamp="20170708 15:59:24.734" level="INFO">${LOG_PREFIX} = /home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/</arg>
</arguments>
<msg timestamp="20170708 15:59:24.736" html="yes" level="INFO">Created directory '&lt;a href="file:///home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC"&gt;/home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:59:24.736" starttime="20170708 15:59:24.735"></status>
</kw>
<msg timestamp="20170708 15:59:24.740" level="INFO">${FFDC_FILE_PATH} = /home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:59:24.751" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:59:24.751" starttime="20170708 15:59:24.750"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:24.751" starttime="20170708 15:59:24.750"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:59:24.752" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:59:24.752" starttime="20170708 15:59:24.752"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:24.752" starttime="20170708 15:59:24.751"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:59:24.754" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:59:24.754" starttime="20170708 15:59:24.753"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:24.754" starttime="20170708 15:59:24.753"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:59:24.755" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:59:24.755" starttime="20170708 15:59:24.755"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:24.755" starttime="20170708 15:59:24.754"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:59:24.759" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:59:24.759" starttime="20170708 15:59:24.756"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:24.759" starttime="20170708 15:59:24.755"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:59:24.760" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:59:24.760" starttime="20170708 15:59:24.760"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:24.760" starttime="20170708 15:59:24.759"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:59:24.761" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:59:24.761" starttime="20170708 15:59:24.761"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:24.762" starttime="20170708 15:59:24.760"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:59:24.763" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:59:24.763" starttime="20170708 15:59:24.762"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:24.763" starttime="20170708 15:59:24.762"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:59:24.764" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:59:24.764" starttime="20170708 15:59:24.764"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:24.764" starttime="20170708 15:59:24.763"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:59:24.766" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:59:24.766" starttime="20170708 15:59:24.765"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:24.766" starttime="20170708 15:59:24.765"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:59:24.767" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:59:24.767" starttime="20170708 15:59:24.767"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:24.767" starttime="20170708 15:59:24.766"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:59:24.768" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:59:24.768" starttime="20170708 15:59:24.768"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:24.769" starttime="20170708 15:59:24.767"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:59:24.770" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:59:24.770" starttime="20170708 15:59:24.769"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:24.770" starttime="20170708 15:59:24.769"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170708 15:59:24.772" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170708 15:59:24.772" starttime="20170708 15:59:24.772"></status>
</kw>
<msg timestamp="20170708 15:59:24.772" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170708 15:59:24.772" starttime="20170708 15:59:24.771"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:59:24.774" starttime="20170708 15:59:24.773"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:24.774" starttime="20170708 15:59:24.773"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170708 15:59:24.774" starttime="20170708 15:59:24.774"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170708 15:59:24.776" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170708 15:59:24.776" starttime="20170708 15:59:24.775"></status>
</kw>
<msg timestamp="20170708 15:59:24.776" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170708 15:59:24.776" starttime="20170708 15:59:24.775"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:59:24.778" starttime="20170708 15:59:24.777"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:24.778" starttime="20170708 15:59:24.777"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:24.778" starttime="20170708 15:59:24.776"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170708 15:59:24.778" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170708 15:59:26.463" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170708 15:59:26.463" starttime="20170708 15:59:24.778"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:26.463" starttime="20170708 15:59:24.771"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170708 15:59:26.464" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170708 15:59:26.551" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170708 15:59:26.551" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170708 15:59:26.551" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170708 15:59:26.551" starttime="20170708 15:59:26.464"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170708 15:59:26.551" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170708 15:59:26.551" starttime="20170708 15:59:26.551"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170708 15:59:26.552" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170708 15:59:26.552" starttime="20170708 15:59:26.552"></status>
</kw>
<msg timestamp="20170708 15:59:26.552" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" endtime="20170708 15:59:26.552" starttime="20170708 15:59:24.770"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:59:26.554" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:59:26.554" starttime="20170708 15:59:26.553"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:26.554" starttime="20170708 15:59:26.553"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:26.554" starttime="20170708 15:59:24.764"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:59:26.555" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:59:26.555" starttime="20170708 15:59:26.555"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:26.555" starttime="20170708 15:59:26.554"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170708 15:59:26.556" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170708 15:59:26.556" starttime="20170708 15:59:26.556"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:59:26.558" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:59:26.558" starttime="20170708 15:59:26.557"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:26.558" starttime="20170708 15:59:26.556"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:59:26.559" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:59:26.559" starttime="20170708 15:59:26.559"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:26.559" starttime="20170708 15:59:26.558"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:26.559" starttime="20170708 15:59:26.556"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:59:26.561" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:59:26.561" starttime="20170708 15:59:26.560"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:26.561" starttime="20170708 15:59:26.560"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:59:26.562" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:59:26.562" starttime="20170708 15:59:26.562"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:26.562" starttime="20170708 15:59:26.561"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:26.562" starttime="20170708 15:59:26.559"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:59:26.563" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:59:26.564" starttime="20170708 15:59:26.563"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:26.564" starttime="20170708 15:59:26.562"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:59:26.565" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:59:26.565" starttime="20170708 15:59:26.564"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:26.565" starttime="20170708 15:59:26.564"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:26.565" starttime="20170708 15:59:26.562"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:26.565" starttime="20170708 15:59:26.556"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:59:26.566" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:59:26.566" starttime="20170708 15:59:26.566"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:26.566" starttime="20170708 15:59:26.565"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:26.566" starttime="20170708 15:59:24.749"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170708 15:59:26.572" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20170708 15:59:26.572" starttime="20170708 15:59:26.572"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170708 15:59:26.573" level="INFO">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('Core Files', 'SCP Coredump Files') | ('BMC Specific Files', 'BMC FFDC Files') | ('SEL Log', 'Collect ...</msg>
<status status="PASS" endtime="20170708 15:59:26.573" starttime="20170708 15:59:26.573"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:59:26.575" starttime="20170708 15:59:26.574"></status>
</kw>
<msg timestamp="20170708 15:59:26.575" level="INFO">@{ffdc_function_list} = [ FFDC Generic Report | Get Request FFDC | Core Files | BMC Specific Files | SEL Log | OS FFDC ]</msg>
<status status="PASS" endtime="20170708 15:59:26.575" starttime="20170708 15:59:26.574"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:59:26.577" starttime="20170708 15:59:26.577"></status>
</kw>
<msg timestamp="20170708 15:59:26.577" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:59:26.577" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170708 15:59:26.577" starttime="20170708 15:59:26.576"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170708 15:59:26.578" starttime="20170708 15:59:26.577"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170708 15:59:26.594" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170708 15:59:26.594" starttime="20170708 15:59:26.593"></status>
</kw>
<msg timestamp="20170708 15:59:26.594" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170708 15:59:26.594" starttime="20170708 15:59:26.593"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:59:26.595" starttime="20170708 15:59:26.595"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:26.595" starttime="20170708 15:59:26.594"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170708 15:59:26.596" starttime="20170708 15:59:26.595"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170708 15:59:26.597" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170708 15:59:26.597" starttime="20170708 15:59:26.597"></status>
</kw>
<msg timestamp="20170708 15:59:26.597" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170708 15:59:26.597" starttime="20170708 15:59:26.596"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:59:26.599" starttime="20170708 15:59:26.599"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:26.599" starttime="20170708 15:59:26.598"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:26.599" starttime="20170708 15:59:26.597"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170708 15:59:26.600" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170708 15:59:28.346" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170708 15:59:28.346" starttime="20170708 15:59:26.599"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:28.346" starttime="20170708 15:59:26.592"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170708 15:59:28.347" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170708 15:59:28.347" starttime="20170708 15:59:28.347"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170708 15:59:28.348" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil  state') ]</msg>
<status status="PASS" endtime="20170708 15:59:28.348" starttime="20170708 15:59:28.348"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170708 15:59:28.356" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20170708 15:59:28.356" starttime="20170708 15:59:28.349"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil  state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:59:28.361" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:59:28.361" starttime="20170708 15:59:28.361"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:28.361" starttime="20170708 15:59:28.360"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:59:28.363" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:59:28.363" starttime="20170708 15:59:28.362"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:28.363" starttime="20170708 15:59:28.362"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:59:28.364" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:59:28.364" starttime="20170708 15:59:28.364"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:28.364" starttime="20170708 15:59:28.363"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:59:28.365" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:59:28.365" starttime="20170708 15:59:28.365"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:28.366" starttime="20170708 15:59:28.364"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:28.366" starttime="20170708 15:59:28.359"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:28.366" starttime="20170708 15:59:28.358"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170708 15:59:28.366" level="INFO">Executing command '/usr/sbin/obmcutil  state'.</msg>
<msg timestamp="20170708 15:59:29.764" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170708 15:59:29.764" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Off</msg>
<msg timestamp="20170708 15:59:29.765" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170708 15:59:29.765" starttime="20170708 15:59:28.366"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:59:29.771" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:59:29.771" starttime="20170708 15:59:29.771"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:29.772" starttime="20170708 15:59:29.770"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:29.772" starttime="20170708 15:59:29.765"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:29.772" starttime="20170708 15:59:28.357"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:29.772" starttime="20170708 15:59:28.357"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:29.772" starttime="20170708 15:59:28.356"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:29.772" starttime="20170708 15:59:28.347"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:29.772" starttime="20170708 15:59:28.347"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170708 15:59:29.773" level="INFO">@{cmd_list} = [ ('Build Info', 'cat /etc/version') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" endtime="20170708 15:59:29.773" starttime="20170708 15:59:29.773"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170708 15:59:29.774" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20170708 15:59:29.774" starttime="20170708 15:59:29.774"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('Build Info', 'cat /etc/version')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:59:29.777" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:59:29.778" starttime="20170708 15:59:29.777"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:29.778" starttime="20170708 15:59:29.777"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:59:29.779" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:59:29.779" starttime="20170708 15:59:29.779"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:29.779" starttime="20170708 15:59:29.778"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:59:29.780" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:59:29.780" starttime="20170708 15:59:29.780"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:29.781" starttime="20170708 15:59:29.779"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:59:29.782" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:59:29.782" starttime="20170708 15:59:29.781"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:29.782" starttime="20170708 15:59:29.781"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:29.782" starttime="20170708 15:59:29.776"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:29.782" starttime="20170708 15:59:29.775"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170708 15:59:29.783" level="INFO">Executing command 'cat /etc/version'.</msg>
<msg timestamp="20170708 15:59:29.867" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170708 15:59:29.867" level="INFO">${stdout} = </msg>
<msg timestamp="20170708 15:59:29.868" level="INFO">${stderr} = cat: can't open '/etc/version': No such file or directory</msg>
<status status="PASS" endtime="20170708 15:59:29.868" starttime="20170708 15:59:29.782"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:59:29.874" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:59:29.874" starttime="20170708 15:59:29.874"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:29.874" starttime="20170708 15:59:29.873"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:29.874" starttime="20170708 15:59:29.868"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:29.874" starttime="20170708 15:59:29.774"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:29.875" starttime="20170708 15:59:29.774"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:59:29.878" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:59:29.878" starttime="20170708 15:59:29.877"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:29.878" starttime="20170708 15:59:29.877"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:59:29.879" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:59:29.879" starttime="20170708 15:59:29.879"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:29.879" starttime="20170708 15:59:29.878"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:59:29.880" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:59:29.880" starttime="20170708 15:59:29.880"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:29.881" starttime="20170708 15:59:29.879"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:59:29.882" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:59:29.882" starttime="20170708 15:59:29.882"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:29.882" starttime="20170708 15:59:29.881"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:29.882" starttime="20170708 15:59:29.876"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:29.882" starttime="20170708 15:59:29.876"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170708 15:59:29.883" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170708 15:59:29.960" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170708 15:59:29.960" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.7-97"
VERSION_ID="v1.99.7-97-gf40b1ce"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Project ...</msg>
<msg timestamp="20170708 15:59:29.960" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170708 15:59:29.960" starttime="20170708 15:59:29.883"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:59:29.970" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:59:29.970" starttime="20170708 15:59:29.969"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:29.970" starttime="20170708 15:59:29.968"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:29.970" starttime="20170708 15:59:29.961"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:29.970" starttime="20170708 15:59:29.875"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:29.970" starttime="20170708 15:59:29.875"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:29.970" starttime="20170708 15:59:29.774"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:29.970" starttime="20170708 15:59:29.772"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:29.970" starttime="20170708 15:59:29.772"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170708 15:59:29.971" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" endtime="20170708 15:59:29.971" starttime="20170708 15:59:29.971"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170708 15:59:29.972" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20170708 15:59:29.972" starttime="20170708 15:59:29.972"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:59:29.975" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:59:29.975" starttime="20170708 15:59:29.975"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:29.975" starttime="20170708 15:59:29.974"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:59:29.977" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:59:29.977" starttime="20170708 15:59:29.976"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:29.977" starttime="20170708 15:59:29.976"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:59:29.978" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:59:29.978" starttime="20170708 15:59:29.978"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:29.978" starttime="20170708 15:59:29.977"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:59:29.979" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:59:29.979" starttime="20170708 15:59:29.979"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:29.980" starttime="20170708 15:59:29.978"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:29.980" starttime="20170708 15:59:29.974"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:29.980" starttime="20170708 15:59:29.973"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170708 15:59:29.980" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170708 15:59:30.065" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170708 15:59:30.065" level="INFO">${stdout} =  17:31:03 up 2 min,  load average: 4.01, 1.49, 0.54</msg>
<msg timestamp="20170708 15:59:30.065" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170708 15:59:30.065" starttime="20170708 15:59:29.980"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:59:30.073" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:59:30.073" starttime="20170708 15:59:30.072"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:30.073" starttime="20170708 15:59:30.071"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:30.073" starttime="20170708 15:59:30.066"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:30.073" starttime="20170708 15:59:29.973"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:30.073" starttime="20170708 15:59:29.972"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:59:30.077" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:59:30.077" starttime="20170708 15:59:30.076"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:30.077" starttime="20170708 15:59:30.076"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:59:30.078" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:59:30.078" starttime="20170708 15:59:30.078"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:30.078" starttime="20170708 15:59:30.077"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:59:30.080" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:59:30.080" starttime="20170708 15:59:30.079"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:30.080" starttime="20170708 15:59:30.079"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:59:30.081" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:59:30.081" starttime="20170708 15:59:30.081"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:30.081" starttime="20170708 15:59:30.080"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:30.081" starttime="20170708 15:59:30.075"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:30.081" starttime="20170708 15:59:30.074"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170708 15:59:30.082" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170708 15:59:30.251" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170708 15:59:30.251" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     37.4...</msg>
<msg timestamp="20170708 15:59:30.251" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170708 15:59:30.251" starttime="20170708 15:59:30.082"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:59:30.258" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:59:30.258" starttime="20170708 15:59:30.257"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:30.258" starttime="20170708 15:59:30.256"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:30.258" starttime="20170708 15:59:30.251"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:30.258" starttime="20170708 15:59:30.074"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:30.258" starttime="20170708 15:59:30.073"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:59:30.261" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:59:30.261" starttime="20170708 15:59:30.261"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:30.261" starttime="20170708 15:59:30.260"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:59:30.263" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:59:30.263" starttime="20170708 15:59:30.262"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:30.263" starttime="20170708 15:59:30.261"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:59:30.264" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:59:30.264" starttime="20170708 15:59:30.264"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:30.264" starttime="20170708 15:59:30.263"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:59:30.265" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:59:30.265" starttime="20170708 15:59:30.265"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:30.265" starttime="20170708 15:59:30.264"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:30.265" starttime="20170708 15:59:30.260"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:30.266" starttime="20170708 15:59:30.259"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170708 15:59:30.266" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170708 15:59:30.384" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170708 15:59:30.385" level="INFO">${stdout} = Linux witherspoon 4.10.17-990f06c35b7e119f00967e90f0514dbbd2e1b51b #1 Fri Jul 7 18:38:12 UTC 2017 armv6l GNU/Linux</msg>
<msg timestamp="20170708 15:59:30.385" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170708 15:59:30.385" starttime="20170708 15:59:30.266"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:59:30.392" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:59:30.392" starttime="20170708 15:59:30.391"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:30.392" starttime="20170708 15:59:30.391"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:30.392" starttime="20170708 15:59:30.385"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:30.392" starttime="20170708 15:59:30.258"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:30.392" starttime="20170708 15:59:30.258"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:30.392" starttime="20170708 15:59:29.972"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:30.392" starttime="20170708 15:59:29.970"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:30.392" starttime="20170708 15:59:29.970"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:30.392" starttime="20170708 15:59:28.347"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:30.393" starttime="20170708 15:59:26.592"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:30.393" starttime="20170708 15:59:26.578"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:30.393" starttime="20170708 15:59:26.575"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:30.393" starttime="20170708 15:59:26.575"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:59:30.395" starttime="20170708 15:59:30.394"></status>
</kw>
<msg timestamp="20170708 15:59:30.395" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:59:30.395" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170708 15:59:30.395" starttime="20170708 15:59:30.394"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170708 15:59:30.395" starttime="20170708 15:59:30.395"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170708 15:59:30.413" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170708 15:59:30.413" starttime="20170708 15:59:30.412"></status>
</kw>
<msg timestamp="20170708 15:59:30.413" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170708 15:59:30.413" starttime="20170708 15:59:30.411"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:59:30.415" starttime="20170708 15:59:30.414"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:30.415" starttime="20170708 15:59:30.413"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170708 15:59:30.416" starttime="20170708 15:59:30.415"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170708 15:59:30.417" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170708 15:59:30.418" starttime="20170708 15:59:30.417"></status>
</kw>
<msg timestamp="20170708 15:59:30.418" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170708 15:59:30.418" starttime="20170708 15:59:30.416"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:59:30.420" starttime="20170708 15:59:30.420"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:30.421" starttime="20170708 15:59:30.419"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:30.421" starttime="20170708 15:59:30.418"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170708 15:59:30.421" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170708 15:59:32.176" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170708 15:59:32.176" starttime="20170708 15:59:30.421"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:32.176" starttime="20170708 15:59:30.410"></status>
</kw>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170708 15:59:32.177" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20170708 15:59:32.177" starttime="20170708 15:59:32.176"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170708 15:59:32.178" level="INFO">@{cmd_list} = [ ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate') | ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_led', '/o...</msg>
<status status="PASS" endtime="20170708 15:59:32.178" starttime="20170708 15:59:32.178"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170708 15:59:32.179" level="INFO">${logpath} = /home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_elog.txt</msg>
<status status="PASS" endtime="20170708 15:59:32.179" starttime="20170708 15:59:32.179"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:59:32.182" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:59:32.182" starttime="20170708 15:59:32.182"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:59:32.183" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:59:32.183" starttime="20170708 15:59:32.183"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:59:32.184" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:59:32.184" starttime="20170708 15:59:32.183"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:59:32.185" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:59:32.185" starttime="20170708 15:59:32.184"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:59:32.385" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 15:59:32.385" starttime="20170708 15:59:32.186"></status>
</kw>
<msg timestamp="20170708 15:59:32.385" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:59:32.385" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:59:32.385" starttime="20170708 15:59:32.186"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:59:32.386" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:59:32.386" starttime="20170708 15:59:32.386"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:59:32.387" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:59:32.387" starttime="20170708 15:59:32.386"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:32.387" starttime="20170708 15:59:32.181"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:32.387" starttime="20170708 15:59:32.181"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:32.387" starttime="20170708 15:59:32.180"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:59:32.388" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" endtime="20170708 15:59:32.388" starttime="20170708 15:59:32.388"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:59:32.390" starttime="20170708 15:59:32.389"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 15:59:32.449" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170708 15:59:32.449" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170708 15:59:32.449" starttime="20170708 15:59:32.390"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:59:32.450" starttime="20170708 15:59:32.449"></status>
</kw>
<msg timestamp="20170708 15:59:32.450" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170708 15:59:32.450" starttime="20170708 15:59:32.179"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:59:32.451" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170708 15:59:32.451" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170708 15:59:32.451" starttime="20170708 15:59:32.451"></status>
</kw>
<msg timestamp="20170708 15:59:32.451" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170708 15:59:32.451" starttime="20170708 15:59:32.450"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170708 15:59:32.452" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170708 15:59:32.452" starttime="20170708 15:59:32.452"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:32.453" starttime="20170708 15:59:32.452"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:32.453" starttime="20170708 15:59:32.178"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170708 15:59:32.453" level="INFO">${logpath} = /home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_sensor_list.txt</msg>
<status status="PASS" endtime="20170708 15:59:32.453" starttime="20170708 15:59:32.453"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:59:32.456" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:59:32.457" starttime="20170708 15:59:32.456"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:59:32.457" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:59:32.457" starttime="20170708 15:59:32.457"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:59:32.458" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:59:32.458" starttime="20170708 15:59:32.458"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:59:32.459" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:59:32.459" starttime="20170708 15:59:32.459"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:59:32.731" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 15:59:32.731" starttime="20170708 15:59:32.460"></status>
</kw>
<msg timestamp="20170708 15:59:32.731" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:59:32.731" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:59:32.731" starttime="20170708 15:59:32.460"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:59:32.732" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:59:32.732" starttime="20170708 15:59:32.731"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:59:32.732" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:59:32.732" starttime="20170708 15:59:32.732"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:32.733" starttime="20170708 15:59:32.455"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:32.733" starttime="20170708 15:59:32.455"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:32.733" starttime="20170708 15:59:32.454"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:59:32.733" level="INFO">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status status="PASS" endtime="20170708 15:59:32.733" starttime="20170708 15:59:32.733"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:59:32.734" starttime="20170708 15:59:32.734"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 15:59:32.967" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170708 15:59:32.967" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:59:32.967" starttime="20170708 15:59:32.734"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:59:32.968" starttime="20170708 15:59:32.968"></status>
</kw>
<msg timestamp="20170708 15:59:32.968" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:59:32.968" starttime="20170708 15:59:32.454"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:59:32.969" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:59:32.969" starttime="20170708 15:59:32.969"></status>
</kw>
<msg timestamp="20170708 15:59:32.970" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170708 15:59:32.970" starttime="20170708 15:59:32.969"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170708 15:59:32.970" starttime="20170708 15:59:32.970"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170708 15:59:32.971" level="INFO">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 3
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }, 
    "/org/openbmc/sensors/host/cpu0/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/cpu1/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/powercap": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170708 15:59:32.971" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170708 15:59:32.971" level="INFO">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 3
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status status="PASS" endtime="20170708 15:59:32.971" starttime="20170708 15:59:32.970"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:59:32.973" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_sensor_list.txt"&gt;/home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:59:32.973" starttime="20170708 15:59:32.972"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:32.973" starttime="20170708 15:59:32.972"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:32.973" starttime="20170708 15:59:32.453"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170708 15:59:32.974" level="INFO">${logpath} = /home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_inventory.txt</msg>
<status status="PASS" endtime="20170708 15:59:32.974" starttime="20170708 15:59:32.974"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:59:32.977" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:59:32.978" starttime="20170708 15:59:32.977"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:59:32.979" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:59:32.979" starttime="20170708 15:59:32.978"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:59:32.980" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:59:32.980" starttime="20170708 15:59:32.980"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:59:32.981" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:59:32.981" starttime="20170708 15:59:32.981"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:59:33.161" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 15:59:33.161" starttime="20170708 15:59:32.982"></status>
</kw>
<msg timestamp="20170708 15:59:33.161" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:59:33.161" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:59:33.161" starttime="20170708 15:59:32.981"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:59:33.162" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:59:33.162" starttime="20170708 15:59:33.161"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:59:33.162" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:59:33.163" starttime="20170708 15:59:33.162"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:33.163" starttime="20170708 15:59:32.976"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:33.163" starttime="20170708 15:59:32.976"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:33.163" starttime="20170708 15:59:32.975"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:59:33.164" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" endtime="20170708 15:59:33.164" starttime="20170708 15:59:33.163"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:59:33.165" starttime="20170708 15:59:33.164"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 15:59:33.356" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170708 15:59:33.356" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:59:33.356" starttime="20170708 15:59:33.165"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:59:33.357" starttime="20170708 15:59:33.356"></status>
</kw>
<msg timestamp="20170708 15:59:33.357" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:59:33.357" starttime="20170708 15:59:32.975"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:59:33.358" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:59:33.358" starttime="20170708 15:59:33.358"></status>
</kw>
<msg timestamp="20170708 15:59:33.359" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170708 15:59:33.359" starttime="20170708 15:59:33.357"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170708 15:59:33.359" starttime="20170708 15:59:33.359"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170708 15:59:33.360" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 0
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170708 15:59:33.360" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170708 15:59:33.360" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system/chassis": {
            "AirCooled": 1,
            "WaterCooled": 0
        },
        "/xyz/openbmc_project/inventory/system/chassis/mo...</msg>
<status status="PASS" endtime="20170708 15:59:33.360" starttime="20170708 15:59:33.359"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:59:33.362" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_inventory.txt"&gt;/home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:59:33.362" starttime="20170708 15:59:33.361"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:33.362" starttime="20170708 15:59:33.360"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:33.362" starttime="20170708 15:59:32.973"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170708 15:59:33.363" level="INFO">${logpath} = /home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_led.txt</msg>
<status status="PASS" endtime="20170708 15:59:33.363" starttime="20170708 15:59:33.362"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:59:33.366" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:59:33.367" starttime="20170708 15:59:33.366"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:59:33.368" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:59:33.368" starttime="20170708 15:59:33.367"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:59:33.369" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:59:33.369" starttime="20170708 15:59:33.368"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:59:33.370" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:59:33.370" starttime="20170708 15:59:33.369"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:59:33.595" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 15:59:33.595" starttime="20170708 15:59:33.371"></status>
</kw>
<msg timestamp="20170708 15:59:33.595" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:59:33.595" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:59:33.595" starttime="20170708 15:59:33.370"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:59:33.596" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:59:33.596" starttime="20170708 15:59:33.595"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:59:33.597" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:59:33.597" starttime="20170708 15:59:33.596"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:33.597" starttime="20170708 15:59:33.365"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:33.597" starttime="20170708 15:59:33.364"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:33.597" starttime="20170708 15:59:33.364"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:59:33.598" level="INFO">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status status="PASS" endtime="20170708 15:59:33.598" starttime="20170708 15:59:33.597"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:59:33.598" starttime="20170708 15:59:33.598"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 15:59:33.656" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg timestamp="20170708 15:59:33.657" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170708 15:59:33.657" starttime="20170708 15:59:33.599"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:59:33.657" starttime="20170708 15:59:33.657"></status>
</kw>
<msg timestamp="20170708 15:59:33.658" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170708 15:59:33.658" starttime="20170708 15:59:33.363"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:59:33.659" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170708 15:59:33.659" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170708 15:59:33.659" starttime="20170708 15:59:33.659"></status>
</kw>
<msg timestamp="20170708 15:59:33.659" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170708 15:59:33.659" starttime="20170708 15:59:33.658"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170708 15:59:33.660" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170708 15:59:33.660" starttime="20170708 15:59:33.660"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:33.660" starttime="20170708 15:59:33.660"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:33.661" starttime="20170708 15:59:33.362"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170708 15:59:33.661" level="INFO">${logpath} = /home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_record_log.txt</msg>
<status status="PASS" endtime="20170708 15:59:33.661" starttime="20170708 15:59:33.661"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:59:33.664" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:59:33.665" starttime="20170708 15:59:33.664"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:59:33.665" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:59:33.665" starttime="20170708 15:59:33.665"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:59:33.666" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:59:33.666" starttime="20170708 15:59:33.665"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:59:33.666" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:59:33.666" starttime="20170708 15:59:33.666"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:59:33.883" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 15:59:33.883" starttime="20170708 15:59:33.667"></status>
</kw>
<msg timestamp="20170708 15:59:33.884" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:59:33.884" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:59:33.884" starttime="20170708 15:59:33.667"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:59:33.884" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:59:33.884" starttime="20170708 15:59:33.884"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:59:33.885" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:59:33.885" starttime="20170708 15:59:33.885"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:33.885" starttime="20170708 15:59:33.663"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:33.885" starttime="20170708 15:59:33.663"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:33.885" starttime="20170708 15:59:33.662"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:59:33.886" level="INFO">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status status="PASS" endtime="20170708 15:59:33.886" starttime="20170708 15:59:33.886"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:59:33.887" starttime="20170708 15:59:33.886"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 15:59:33.929" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170708 15:59:33.929" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170708 15:59:33.929" starttime="20170708 15:59:33.887"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:59:33.930" starttime="20170708 15:59:33.929"></status>
</kw>
<msg timestamp="20170708 15:59:33.930" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170708 15:59:33.930" starttime="20170708 15:59:33.661"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:59:33.931" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170708 15:59:33.931" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170708 15:59:33.931" starttime="20170708 15:59:33.931"></status>
</kw>
<msg timestamp="20170708 15:59:33.931" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170708 15:59:33.931" starttime="20170708 15:59:33.930"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170708 15:59:33.932" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170708 15:59:33.932" starttime="20170708 15:59:33.932"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:33.932" starttime="20170708 15:59:33.932"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:33.933" starttime="20170708 15:59:33.661"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:33.933" starttime="20170708 15:59:32.178"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:33.933" starttime="20170708 15:59:32.177"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:33.933" starttime="20170708 15:59:32.177"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:33.933" starttime="20170708 15:59:32.177"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:33.933" starttime="20170708 15:59:30.410"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:33.933" starttime="20170708 15:59:30.396"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:33.933" starttime="20170708 15:59:30.393"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:33.933" starttime="20170708 15:59:30.393"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:59:33.935" starttime="20170708 15:59:33.935"></status>
</kw>
<msg timestamp="20170708 15:59:33.935" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:59:33.935" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170708 15:59:33.935" starttime="20170708 15:59:33.934"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170708 15:59:33.936" starttime="20170708 15:59:33.936"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170708 15:59:33.952" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170708 15:59:33.952" starttime="20170708 15:59:33.951"></status>
</kw>
<msg timestamp="20170708 15:59:33.952" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170708 15:59:33.952" starttime="20170708 15:59:33.951"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:59:33.953" starttime="20170708 15:59:33.953"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:33.953" starttime="20170708 15:59:33.952"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170708 15:59:33.954" starttime="20170708 15:59:33.953"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170708 15:59:33.955" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170708 15:59:33.955" starttime="20170708 15:59:33.955"></status>
</kw>
<msg timestamp="20170708 15:59:33.955" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170708 15:59:33.955" starttime="20170708 15:59:33.954"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:59:33.957" starttime="20170708 15:59:33.957"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:33.957" starttime="20170708 15:59:33.956"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:33.957" starttime="20170708 15:59:33.955"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170708 15:59:33.958" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170708 15:59:35.637" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170708 15:59:35.637" starttime="20170708 15:59:33.958"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:35.638" starttime="20170708 15:59:33.950"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
</assign>
<msg timestamp="20170708 15:59:35.638" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170708 15:59:35.695" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170708 15:59:35.695" level="INFO">${core_files} = </msg>
<status status="PASS" endtime="20170708 15:59:35.695" starttime="20170708 15:59:35.638"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170708 15:59:35.696" level="INFO">@{core_list} = [ ]</msg>
<status status="PASS" endtime="20170708 15:59:35.696" starttime="20170708 15:59:35.696"></status>
</kw>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170708 15:59:35.785" starttime="20170708 15:59:35.697"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:59:36.554" starttime="20170708 15:59:35.787"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:36.554" starttime="20170708 15:59:35.786"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:36.554" starttime="20170708 15:59:35.696"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status status="PASS" endtime="20170708 15:59:36.555" starttime="20170708 15:59:36.554"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:36.555" starttime="20170708 15:59:33.950"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:36.555" starttime="20170708 15:59:33.936"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:36.555" starttime="20170708 15:59:33.933"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:36.555" starttime="20170708 15:59:33.933"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:59:36.557" starttime="20170708 15:59:36.557"></status>
</kw>
<msg timestamp="20170708 15:59:36.557" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:59:36.557" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170708 15:59:36.557" starttime="20170708 15:59:36.556"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170708 15:59:36.558" starttime="20170708 15:59:36.558"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170708 15:59:36.574" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170708 15:59:36.574" starttime="20170708 15:59:36.573"></status>
</kw>
<msg timestamp="20170708 15:59:36.574" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170708 15:59:36.574" starttime="20170708 15:59:36.573"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:59:36.575" starttime="20170708 15:59:36.575"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:36.575" starttime="20170708 15:59:36.574"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170708 15:59:36.576" starttime="20170708 15:59:36.576"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170708 15:59:36.577" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170708 15:59:36.577" starttime="20170708 15:59:36.577"></status>
</kw>
<msg timestamp="20170708 15:59:36.577" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170708 15:59:36.577" starttime="20170708 15:59:36.576"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:59:36.579" starttime="20170708 15:59:36.579"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:36.579" starttime="20170708 15:59:36.579"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:36.579" starttime="20170708 15:59:36.578"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170708 15:59:36.580" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170708 15:59:38.294" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170708 15:59:38.294" starttime="20170708 15:59:36.580"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:38.295" starttime="20170708 15:59:36.572"></status>
</kw>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170708 15:59:38.295" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20170708 15:59:38.295" starttime="20170708 15:59:38.295"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170708 15:59:38.297" level="INFO">@{cmd_list} = [ ('BMC_proc_list', 'top -n 1 -b') | ('BMC_dmesg', 'dmesg') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_journalctl', 'journalctl --no-pager') ]</msg>
<status status="PASS" endtime="20170708 15:59:38.297" starttime="20170708 15:59:38.296"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170708 15:59:38.298" level="INFO">${logpath} = /home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_proc_list.txt</msg>
<status status="PASS" endtime="20170708 15:59:38.298" starttime="20170708 15:59:38.297"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:59:38.299" starttime="20170708 15:59:38.299"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170708 15:59:38.300" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170708 15:59:38.719" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170708 15:59:38.720" level="INFO">${stdout} = Mem: 175488K used, 256844K free, 38356K shrd, 10824K buff, 73964K cached
CPU:   0% usr   0% sys   0% nic 100% idle   0% io   0% irq   0% sirq
Load average: 3.63 1.50 0.55 1/149 1165
  PID  PPID USER  ...</msg>
<msg timestamp="20170708 15:59:38.720" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170708 15:59:38.720" starttime="20170708 15:59:38.300"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:59:38.727" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_proc_list.txt"&gt;/home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:59:38.728" starttime="20170708 15:59:38.727"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:38.728" starttime="20170708 15:59:38.726"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:38.728" starttime="20170708 15:59:38.720"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:38.728" starttime="20170708 15:59:38.298"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:38.728" starttime="20170708 15:59:38.297"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170708 15:59:38.729" level="INFO">${logpath} = /home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_dmesg.txt</msg>
<status status="PASS" endtime="20170708 15:59:38.729" starttime="20170708 15:59:38.728"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:59:38.730" starttime="20170708 15:59:38.730"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170708 15:59:38.731" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170708 15:59:38.848" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170708 15:59:38.848" level="INFO">${stdout} = [    0.000000] Booting Linux on physical CPU 0x0
[    0.000000] Linux version 4.10.17-990f06c35b7e119f00967e90f0514dbbd2e1b51b (jenkins@openbmc-builder1) (gcc version 6.2.0 (GCC) ) #1 Fri Jul 7 18:38:...</msg>
<msg timestamp="20170708 15:59:38.848" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170708 15:59:38.848" starttime="20170708 15:59:38.731"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:59:38.855" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_dmesg.txt"&gt;/home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:59:38.855" starttime="20170708 15:59:38.854"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:38.855" starttime="20170708 15:59:38.853"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:38.855" starttime="20170708 15:59:38.848"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:38.855" starttime="20170708 15:59:38.729"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:38.855" starttime="20170708 15:59:38.728"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170708 15:59:38.856" level="INFO">${logpath} = /home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_meminfo.txt</msg>
<status status="PASS" endtime="20170708 15:59:38.856" starttime="20170708 15:59:38.856"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:59:38.858" starttime="20170708 15:59:38.857"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170708 15:59:38.858" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170708 15:59:38.944" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170708 15:59:38.945" level="INFO">${stdout} = MemTotal:         432332 kB
MemFree:          256688 kB
MemAvailable:     300032 kB
Buffers:           10824 kB
Cached:            73968 kB
SwapCached:            0 kB
Active:           109196 kB
Inac...</msg>
<msg timestamp="20170708 15:59:38.945" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170708 15:59:38.945" starttime="20170708 15:59:38.858"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:59:38.952" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_meminfo.txt"&gt;/home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:59:38.952" starttime="20170708 15:59:38.951"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:38.952" starttime="20170708 15:59:38.950"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:38.952" starttime="20170708 15:59:38.945"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:38.952" starttime="20170708 15:59:38.857"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:38.952" starttime="20170708 15:59:38.855"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170708 15:59:38.953" level="INFO">${logpath} = /home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_procinfo.txt</msg>
<status status="PASS" endtime="20170708 15:59:38.953" starttime="20170708 15:59:38.952"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:59:38.954" starttime="20170708 15:59:38.954"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170708 15:59:38.955" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170708 15:59:39.029" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170708 15:59:39.030" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<msg timestamp="20170708 15:59:39.030" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170708 15:59:39.030" starttime="20170708 15:59:38.955"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:59:39.036" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_procinfo.txt"&gt;/home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:59:39.037" starttime="20170708 15:59:39.036"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:39.037" starttime="20170708 15:59:39.035"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:39.037" starttime="20170708 15:59:39.030"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:39.037" starttime="20170708 15:59:38.953"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:39.037" starttime="20170708 15:59:38.952"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170708 15:59:39.038" level="INFO">${logpath} = /home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_journalctl.txt</msg>
<status status="PASS" endtime="20170708 15:59:39.038" starttime="20170708 15:59:39.037"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:59:39.039" starttime="20170708 15:59:39.039"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170708 15:59:39.040" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170708 15:59:40.268" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170708 15:59:40.269" level="INFO">${stdout} = -- Logs begin at Thu 2017-04-20 17:29:20 UTC, end at Thu 2017-04-20 17:31:10 UTC. --
Apr 20 17:29:20 witherspoon kernel: Booting Linux on physical CPU 0x0
Apr 20 17:29:20 witherspoon kernel: Linux ver...</msg>
<msg timestamp="20170708 15:59:40.269" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170708 15:59:40.269" starttime="20170708 15:59:39.040"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:59:40.277" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_journalctl.txt"&gt;/home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/20170708155924693078_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:59:40.277" starttime="20170708 15:59:40.276"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:40.277" starttime="20170708 15:59:40.275"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:40.277" starttime="20170708 15:59:40.270"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:40.277" starttime="20170708 15:59:39.038"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:40.277" starttime="20170708 15:59:39.037"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:40.277" starttime="20170708 15:59:38.297"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:40.277" starttime="20170708 15:59:38.296"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:40.277" starttime="20170708 15:59:38.296"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:40.277" starttime="20170708 15:59:38.295"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:40.277" starttime="20170708 15:59:36.572"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:40.278" starttime="20170708 15:59:36.558"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:40.278" starttime="20170708 15:59:36.555"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:40.278" starttime="20170708 15:59:36.555"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:59:40.280" starttime="20170708 15:59:40.279"></status>
</kw>
<msg timestamp="20170708 15:59:40.280" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:59:40.280" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170708 15:59:40.280" starttime="20170708 15:59:40.279"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170708 15:59:40.280" starttime="20170708 15:59:40.280"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:59:40.300" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:59:40.301" starttime="20170708 15:59:40.300"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:59:40.302" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:59:40.302" starttime="20170708 15:59:40.301"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:59:40.303" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:59:40.303" starttime="20170708 15:59:40.302"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:59:40.304" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:59:40.304" starttime="20170708 15:59:40.303"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:59:40.497" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 15:59:40.497" starttime="20170708 15:59:40.305"></status>
</kw>
<msg timestamp="20170708 15:59:40.497" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:59:40.497" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:59:40.497" starttime="20170708 15:59:40.304"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:59:40.498" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:59:40.498" starttime="20170708 15:59:40.497"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:59:40.498" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:59:40.498" starttime="20170708 15:59:40.498"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:40.499" starttime="20170708 15:59:40.299"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:40.499" starttime="20170708 15:59:40.298"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:40.499" starttime="20170708 15:59:40.297"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:59:40.499" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" endtime="20170708 15:59:40.499" starttime="20170708 15:59:40.499"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:59:40.500" starttime="20170708 15:59:40.500"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 15:59:40.542" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170708 15:59:40.542" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170708 15:59:40.542" starttime="20170708 15:59:40.500"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:59:40.543" starttime="20170708 15:59:40.543"></status>
</kw>
<msg timestamp="20170708 15:59:40.543" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170708 15:59:40.543" starttime="20170708 15:59:40.296"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:59:40.544" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170708 15:59:40.545" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170708 15:59:40.545" starttime="20170708 15:59:40.544"></status>
</kw>
<msg timestamp="20170708 15:59:40.545" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170708 15:59:40.545" starttime="20170708 15:59:40.544"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170708 15:59:40.545" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170708 15:59:40.545" starttime="20170708 15:59:40.545"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:40.546" starttime="20170708 15:59:40.295"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:40.546" starttime="20170708 15:59:40.281"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:40.546" starttime="20170708 15:59:40.278"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:40.546" starttime="20170708 15:59:40.278"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:59:40.548" starttime="20170708 15:59:40.547"></status>
</kw>
<msg timestamp="20170708 15:59:40.548" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:59:40.548" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170708 15:59:40.548" starttime="20170708 15:59:40.547"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170708 15:59:40.549" starttime="20170708 15:59:40.548"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170708 15:59:40.563" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170708 15:59:40.563" starttime="20170708 15:59:40.563"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:40.564" starttime="20170708 15:59:40.562"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:40.564" starttime="20170708 15:59:40.549"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:40.564" starttime="20170708 15:59:40.546"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:40.564" starttime="20170708 15:59:40.546"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:40.564" starttime="20170708 15:59:26.575"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:40.564" starttime="20170708 15:59:26.573"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:40.564" starttime="20170708 15:59:26.572"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:40.564" starttime="20170708 15:59:26.572"></status>
</kw>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170708 15:59:40.721" starttime="20170708 15:59:40.564"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:40.722" starttime="20170708 15:59:26.571"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:40.722" starttime="20170708 15:59:21.635"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:40.722" starttime="20170708 15:59:21.635"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" endtime="20170708 15:59:40.723" starttime="20170708 15:59:40.723"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170708 15:59:40.724" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status status="PASS" endtime="20170708 15:59:40.724" starttime="20170708 15:59:40.724"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170708 15:59:40.725" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170708155924693078_UpdateBmc/20170708155924693078_InitiateCodeUpdateBMC/</msg>
<status status="PASS" endtime="20170708 15:59:40.725" starttime="20170708 15:59:40.725"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20170708 15:59:40.726" starttime="20170708 15:59:40.725"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170708 15:59:40.726" starttime="20170708 15:59:40.726"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170708 15:59:40.727" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld/logs"&gt;/home/fspcibld/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20170708 15:59:40.727" starttime="20170708 15:59:40.727"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170708 15:59:40.728" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170708 15:59:40.728" starttime="20170708 15:59:40.728"></status>
</kw>
<msg timestamp="20170708 15:59:40.728" level="INFO">${exist} = True</msg>
<status status="PASS" endtime="20170708 15:59:40.728" starttime="20170708 15:59:40.727"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:59:40.729" starttime="20170708 15:59:40.729"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170708 15:59:40.730" starttime="20170708 15:59:40.729"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170708 15:59:40.732" level="INFO">${cur_time} = 2017-07-08 15:59:40:731667</msg>
<status status="PASS" endtime="20170708 15:59:40.732" starttime="20170708 15:59:40.731"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170708 15:59:40.732" level="INFO">${cur_time} = 20170708155940731667</msg>
<status status="PASS" endtime="20170708 15:59:40.733" starttime="20170708 15:59:40.732"></status>
</kw>
<msg timestamp="20170708 15:59:40.733" level="INFO">${cur_time} = 20170708155940731667</msg>
<status status="PASS" endtime="20170708 15:59:40.733" starttime="20170708 15:59:40.730"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170708 15:59:40.734" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:59:40.734" starttime="20170708 15:59:40.733"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:40.734" starttime="20170708 15:59:40.723"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:40.734" starttime="20170708 15:59:21.378"></status>
</kw>
<status status="PASS" endtime="20170708 15:59:40.734" starttime="20170708 15:59:21.371"></status>
</kw>
<doc>Initiate a code update on the BMC.</doc>
<tags>
<tag>Initiate_Code_Update_BMC</tag>
</tags>
<status status="FAIL" endtime="20170708 15:59:40.734" critical="yes" starttime="20170708 15:56:42.847">Replacing variables from keyword return value failed: Resolving variable '${content["data"]}' failed: KeyError: 'data'</status>
</test>
<doc>Trigger code update to a target BMC.
Execution Method :
python -m robot -v OPENBMC_HOST:&lt;hostname&gt;
-v FILE_PATH:&lt;path/*all.tar&gt; update_bmc.robot

Code update method BMC using REST
Update work flow sequence:
- User input BMC File existence check
- Ping Test and REST authentication
- Set Host Power host setting Policy to RESTORE_LAST_STATE
On reboot this policy would ensure the BMC comes
online and stays at HOST_POWERED_OFF state.
- Issue poweroff
- Prune archived journal logs
- Prepare for Update
- Wait for BMC to come online clean
- Wait for BMC_READY state
- Apply preserve BMC Network setting
- SCP image to BMC
- Activate the flash image
- Warm Reset BMC to activate code
- Wait for BMC to come online time out 30 minutes
- Version check post update
- Identify REST url post update</doc>
<status status="FAIL" endtime="20170708 15:59:40.736" starttime="20170708 15:56:42.011"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">Initiate_Code_Update_BMC</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Update Bmc" pass="0">Update Bmc</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20170708 15:57:08.415" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff8619c990&gt;: Failed to establish a new connection: [Errno 111] Connection refused',)': /login</msg>
<msg timestamp="20170708 15:57:08.617" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff8619cad0&gt;: Failed to establish a new connection: [Errno 111] Connection refused',)': /login</msg>
<msg timestamp="20170708 15:57:09.019" level="WARN">Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff8619cc50&gt;: Failed to establish a new connection: [Errno 111] Connection refused',)': /login</msg>
<msg timestamp="20170708 15:57:47.057" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff86201250&gt;: Failed to establish a new connection: [Errno 113] No route to host',)': /login</msg>
<msg timestamp="20170708 15:57:50.257" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff86201810&gt;: Failed to establish a new connection: [Errno 113] No route to host',)': /login</msg>
<msg timestamp="20170708 15:57:53.457" level="WARN">Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff861f2bd0&gt;: Failed to establish a new connection: [Errno 113] No route to host',)': /login</msg>
</errors>
</robot>
