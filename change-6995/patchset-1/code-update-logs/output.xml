<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170928 21:40:10.989" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/code_update/bmc_code_update.robot" id="s1" name="Bmc Code Update">
<test id="s1-t1" name="REST BMC Code Update">
<kw type="setup" name="Code Update Setup">
<doc>Do code update test case setup.</doc>
<kw name="Delete All Dumps" library="dump_utils">
<doc>Delete all dumps.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${DUMP_ENTRY_URI}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170928 21:40:12.224" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170928 21:40:12.225" starttime="20170928 21:40:12.222"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170928 21:40:12.227" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170928 21:40:12.227" starttime="20170928 21:40:12.226"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170928 21:40:12.227" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170928 21:40:12.227" starttime="20170928 21:40:12.227"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170928 21:40:12.228" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170928 21:40:12.228" starttime="20170928 21:40:12.228"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170928 21:40:12.437" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170928 21:40:12.437" starttime="20170928 21:40:12.229"></status>
</kw>
<msg timestamp="20170928 21:40:12.437" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 21:40:12.437" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 21:40:12.437" starttime="20170928 21:40:12.229"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170928 21:40:12.438" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 21:40:12.438" starttime="20170928 21:40:12.437"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 21:40:12.438" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 21:40:12.439" starttime="20170928 21:40:12.438"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:12.439" starttime="20170928 21:40:12.222"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:12.439" starttime="20170928 21:40:12.221"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:12.439" starttime="20170928 21:40:12.220"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170928 21:40:12.440" level="INFO">${base_uri} = /xyz/openbmc_project/dump/entry/list</msg>
<status status="PASS" endtime="20170928 21:40:12.440" starttime="20170928 21:40:12.439"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:40:12.440" starttime="20170928 21:40:12.440"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170928 21:40:12.484" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/dump/entry/list, headers=None json=None</msg>
<msg timestamp="20170928 21:40:12.484" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170928 21:40:12.484" starttime="20170928 21:40:12.441"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:40:12.484" starttime="20170928 21:40:12.484"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170928 21:40:12.485" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170928 21:40:12.485" starttime="20170928 21:40:12.485"></status>
</kw>
<msg timestamp="20170928 21:40:12.485" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170928 21:40:12.485" starttime="20170928 21:40:12.218"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20170928 21:40:12.486" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170928 21:40:12.486" starttime="20170928 21:40:12.486"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:12.486" starttime="20170928 21:40:12.218"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:12.486" starttime="20170928 21:40:12.217"></status>
</kw>
<kw name="Upload And Activate Image" library="code_update_utils">
<doc>Upload an image to the BMC and activate it with REST.</doc>
<arguments>
<arg>${IMAGE_FILE_PATH}</arg>
<arg>skip_if_active=${SKIP_UPDATE_IF_ACTIVE}</arg>
</arguments>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<msg timestamp="20170928 21:40:12.488" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar"&gt;/home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170928 21:40:12.488" starttime="20170928 21:40:12.487"></status>
</kw>
<kw name="Get Version Tar" library="code_update_utils">
<doc>Read the image version from the MANIFEST inside the tarball.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${image_version}</var>
</assign>
<msg timestamp="20170928 21:40:12.506" level="INFO">${image_version} = v1.99.10-63-g63f83a5</msg>
<status status="PASS" endtime="20170928 21:40:12.507" starttime="20170928 21:40:12.488"></status>
</kw>
<kw name="Get Binary File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${image_data}</var>
</assign>
<msg timestamp="20170928 21:40:12.507" html="yes" level="INFO">Getting file '&lt;a href="file:///home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar"&gt;/home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar&lt;/a&gt;'.</msg>
<msg timestamp="20170928 21:40:23.180" level="INFO">${image_data} = image-u-boot0000644000175100017520000113170013151356420013160 0...</msg>
<status status="PASS" endtime="20170928 21:40:23.180" starttime="20170928 21:40:12.507"></status>
</kw>
<kw name="Upload Image To BMC" library="rest_client">
<arguments>
<arg>/upload/image</arg>
<arg>data=${image_data}</arg>
</arguments>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170928 21:40:23.183" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170928 21:40:23.184" starttime="20170928 21:40:23.183"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170928 21:40:23.185" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170928 21:40:23.185" starttime="20170928 21:40:23.184"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170928 21:40:23.185" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170928 21:40:23.185" starttime="20170928 21:40:23.185"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170928 21:40:23.186" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170928 21:40:23.186" starttime="20170928 21:40:23.186"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170928 21:40:23.371" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170928 21:40:23.371" starttime="20170928 21:40:23.187"></status>
</kw>
<msg timestamp="20170928 21:40:23.371" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 21:40:23.371" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 21:40:23.371" starttime="20170928 21:40:23.186"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170928 21:40:23.372" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 21:40:23.372" starttime="20170928 21:40:23.372"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 21:40:23.373" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 21:40:23.373" starttime="20170928 21:40:23.372"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:23.373" starttime="20170928 21:40:23.183"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:23.373" starttime="20170928 21:40:23.182"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:23.373" starttime="20170928 21:40:23.181"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170928 21:40:23.374" level="INFO">${base_uri} = /upload/image</msg>
<status status="PASS" endtime="20170928 21:40:23.374" starttime="20170928 21:40:23.373"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/octet-stream</arg>
<arg>Accept=application/octet-stream</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170928 21:40:23.375" level="INFO">${headers} = {u'Content-Type': u'application/octet-stream', u'Accept': u'application/octet-stream'}</msg>
<status status="PASS" endtime="20170928 21:40:23.375" starttime="20170928 21:40:23.374"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:40:23.375" starttime="20170928 21:40:23.375"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:40:23.376" starttime="20170928 21:40:23.375"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170928 21:40:33.386" level="FAIL">SSLError: ('The write operation timed out',)</msg>
<status status="FAIL" endtime="20170928 21:40:33.386" starttime="20170928 21:40:23.376"></status>
</kw>
<status status="FAIL" endtime="20170928 21:40:33.387" starttime="20170928 21:40:23.181"></status>
</kw>
<status status="FAIL" endtime="20170928 21:40:33.387" starttime="20170928 21:40:12.487"></status>
</kw>
<kw type="teardown" name="Code Update Test Teardown">
<doc>Do code update test case teardown.</doc>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170928 21:40:33.405" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170928 21:40:33.405" starttime="20170928 21:40:33.404"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170928 21:40:33.409" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170928 21:40:36.420" level="INFO">${RC} = 0</msg>
<msg timestamp="20170928 21:40:36.420" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.66 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.723 ms
64 bytes from 9.3.86.161: icmp_seq...</msg>
<status status="PASS" endtime="20170928 21:40:36.420" starttime="20170928 21:40:33.405"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170928 21:40:36.437" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.66 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.723 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.582 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.547 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3002ms
rtt min/avg/max/mdev = 0.547/0.879/1.665/0.458 ms</msg>
<status status="PASS" endtime="20170928 21:40:36.437" starttime="20170928 21:40:36.433"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:40:36.438" starttime="20170928 21:40:36.437"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:36.439" starttime="20170928 21:40:33.404"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170928 21:40:36.473" level="INFO">${cur_time} = 2017-09-28 21:40:36:472247</msg>
<status status="PASS" endtime="20170928 21:40:36.473" starttime="20170928 21:40:36.472"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170928 21:40:36.474" level="INFO">${cur_time} = 20170928214036472247</msg>
<status status="PASS" endtime="20170928 21:40:36.474" starttime="20170928 21:40:36.474"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:36.474" starttime="20170928 21:40:36.471"></status>
</kw>
<msg timestamp="20170928 21:40:36.480" level="INFO">${FFDC_TIME} = 20170928214036472247</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170928 21:40:36.482" level="INFO">${suite_name} = BmcCodeUpdate</msg>
<status status="PASS" endtime="20170928 21:40:36.482" starttime="20170928 21:40:36.482"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170928 21:40:36.483" level="INFO">${suite_name} = 20170928214036472247_BmcCodeUpdate</msg>
<status status="PASS" endtime="20170928 21:40:36.483" starttime="20170928 21:40:36.482"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170928 21:40:36.483" level="INFO">${test_name} = RESTBMCCodeUpdate</msg>
<status status="PASS" endtime="20170928 21:40:36.483" starttime="20170928 21:40:36.483"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170928 21:40:36.484" level="INFO">${test_name} = 20170928214036472247_RESTBMCCodeUpdate</msg>
<status status="PASS" endtime="20170928 21:40:36.484" starttime="20170928 21:40:36.484"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:36.485" starttime="20170928 21:40:36.481"></status>
</kw>
<msg timestamp="20170928 21:40:36.490" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/</msg>
<msg timestamp="20170928 21:40:36.496" level="INFO">${FFDC_PREFIX} = 20170928214036472247_</msg>
<msg timestamp="20170928 21:40:36.519" level="INFO">${LOG_PREFIX} = /home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/</arg>
</arguments>
<msg timestamp="20170928 21:40:36.520" html="yes" level="INFO">Created directory '&lt;a href="file:///home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate"&gt;/home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:40:36.521" starttime="20170928 21:40:36.519"></status>
</kw>
<msg timestamp="20170928 21:40:36.527" level="INFO">${FFDC_FILE_PATH} = /home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:40:36.540" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt"&gt;/home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:40:36.540" starttime="20170928 21:40:36.540"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:36.540" starttime="20170928 21:40:36.539"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:40:36.542" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt"&gt;/home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:40:36.542" starttime="20170928 21:40:36.541"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:36.542" starttime="20170928 21:40:36.541"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:40:36.543" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt"&gt;/home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:40:36.543" starttime="20170928 21:40:36.543"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:36.543" starttime="20170928 21:40:36.542"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:40:36.545" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt"&gt;/home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:40:36.545" starttime="20170928 21:40:36.544"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:36.545" starttime="20170928 21:40:36.543"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:40:36.546" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt"&gt;/home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:40:36.546" starttime="20170928 21:40:36.546"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:36.546" starttime="20170928 21:40:36.545"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:40:36.547" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt"&gt;/home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:40:36.547" starttime="20170928 21:40:36.547"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:36.548" starttime="20170928 21:40:36.546"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:40:36.549" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt"&gt;/home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:40:36.549" starttime="20170928 21:40:36.549"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:36.549" starttime="20170928 21:40:36.548"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:40:36.551" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt"&gt;/home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:40:36.551" starttime="20170928 21:40:36.550"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:36.551" starttime="20170928 21:40:36.549"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:40:36.552" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt"&gt;/home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:40:36.552" starttime="20170928 21:40:36.552"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:36.552" starttime="20170928 21:40:36.551"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:40:36.554" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt"&gt;/home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:40:36.554" starttime="20170928 21:40:36.553"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:36.554" starttime="20170928 21:40:36.553"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:40:36.555" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt"&gt;/home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:40:36.555" starttime="20170928 21:40:36.555"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:36.555" starttime="20170928 21:40:36.554"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:40:36.558" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt"&gt;/home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:40:36.558" starttime="20170928 21:40:36.557"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:36.558" starttime="20170928 21:40:36.555"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:40:36.559" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt"&gt;/home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:40:36.559" starttime="20170928 21:40:36.559"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:36.559" starttime="20170928 21:40:36.558"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170928 21:40:36.581" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170928 21:40:36.581" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170928 21:40:37.374" level="INFO">Read output: root@witherspoon:~#</msg>
<msg timestamp="20170928 21:40:37.374" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170928 21:40:37.441" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170928 21:40:37.451" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170928 21:40:37.451" level="INFO">${stderr} = </msg>
<msg timestamp="20170928 21:40:37.452" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20170928 21:40:37.452" starttime="20170928 21:40:36.560"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170928 21:40:37.452" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170928 21:40:37.452" starttime="20170928 21:40:37.452"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170928 21:40:37.453" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170928 21:40:37.453" starttime="20170928 21:40:37.453"></status>
</kw>
<msg timestamp="20170928 21:40:37.453" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" endtime="20170928 21:40:37.453" starttime="20170928 21:40:36.560"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:40:37.455" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt"&gt;/home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:40:37.455" starttime="20170928 21:40:37.454"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:37.455" starttime="20170928 21:40:37.454"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:37.455" starttime="20170928 21:40:36.552"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:40:37.456" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt"&gt;/home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:40:37.456" starttime="20170928 21:40:37.456"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:37.456" starttime="20170928 21:40:37.455"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170928 21:40:37.457" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170928 21:40:37.457" starttime="20170928 21:40:37.457"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:40:37.459" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt"&gt;/home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:40:37.459" starttime="20170928 21:40:37.458"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:37.459" starttime="20170928 21:40:37.457"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:40:37.460" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt"&gt;/home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:40:37.460" starttime="20170928 21:40:37.459"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:37.460" starttime="20170928 21:40:37.459"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:37.460" starttime="20170928 21:40:37.457"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:40:37.462" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt"&gt;/home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:40:37.462" starttime="20170928 21:40:37.461"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:37.462" starttime="20170928 21:40:37.460"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:40:37.463" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt"&gt;/home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:40:37.463" starttime="20170928 21:40:37.463"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:37.463" starttime="20170928 21:40:37.462"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:37.463" starttime="20170928 21:40:37.460"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:40:37.466" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt"&gt;/home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:40:37.466" starttime="20170928 21:40:37.465"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:37.466" starttime="20170928 21:40:37.463"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:40:37.467" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt"&gt;/home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:40:37.467" starttime="20170928 21:40:37.467"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:37.467" starttime="20170928 21:40:37.466"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:37.467" starttime="20170928 21:40:37.463"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:37.467" starttime="20170928 21:40:37.457"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:40:37.469" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt"&gt;/home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:40:37.469" starttime="20170928 21:40:37.468"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:37.469" starttime="20170928 21:40:37.468"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:37.469" starttime="20170928 21:40:36.538"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170928 21:40:37.476" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20170928 21:40:37.476" starttime="20170928 21:40:37.476"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170928 21:40:37.477" level="INFO">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('Sys Inventory Files', 'System Inventory Files') | ('Core Files', 'SCP Coredump Files') | ('BMC Specif...</msg>
<status status="PASS" endtime="20170928 21:40:37.477" starttime="20170928 21:40:37.477"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:40:37.479" starttime="20170928 21:40:37.478"></status>
</kw>
<msg timestamp="20170928 21:40:37.479" level="INFO">@{ffdc_function_list} = [ FFDC Generic Report | Get Request FFDC | Sys Inventory Files | Core Files | BMC Specific Files | SEL Log | OS FFDC ]</msg>
<status status="PASS" endtime="20170928 21:40:37.479" starttime="20170928 21:40:37.478"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:40:37.481" starttime="20170928 21:40:37.481"></status>
</kw>
<msg timestamp="20170928 21:40:37.481" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 21:40:37.481" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170928 21:40:37.481" starttime="20170928 21:40:37.480"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170928 21:40:37.482" starttime="20170928 21:40:37.482"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170928 21:40:37.502" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170928 21:40:37.502" starttime="20170928 21:40:37.501"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170928 21:40:37.503" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status status="PASS" endtime="20170928 21:40:37.503" starttime="20170928 21:40:37.503"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170928 21:40:37.510" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20170928 21:40:37.510" starttime="20170928 21:40:37.504"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:40:37.514" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt"&gt;/home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:40:37.514" starttime="20170928 21:40:37.513"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:37.514" starttime="20170928 21:40:37.513"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:40:37.515" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt"&gt;/home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:40:37.515" starttime="20170928 21:40:37.515"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:37.515" starttime="20170928 21:40:37.514"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:40:37.517" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt"&gt;/home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:40:37.517" starttime="20170928 21:40:37.516"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:37.517" starttime="20170928 21:40:37.516"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:40:37.518" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt"&gt;/home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:40:37.518" starttime="20170928 21:40:37.518"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:37.518" starttime="20170928 21:40:37.517"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:37.518" starttime="20170928 21:40:37.512"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:37.518" starttime="20170928 21:40:37.512"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170928 21:40:37.519" level="INFO">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status status="PASS" endtime="20170928 21:40:37.519" starttime="20170928 21:40:37.519"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170928 21:40:37.582" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170928 21:40:37.583" level="INFO">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg timestamp="20170928 21:40:38.964" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170928 21:40:38.964" starttime="20170928 21:40:37.548"></status>
</kw>
<msg timestamp="20170928 21:40:38.965" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 21:40:38.965" level="INFO">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState....</msg>
<status status="PASS" endtime="20170928 21:40:38.965" starttime="20170928 21:40:37.520"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170928 21:40:38.965" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170928 21:40:38.966" starttime="20170928 21:40:38.965"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170928 21:40:38.966" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170928 21:40:38.966" starttime="20170928 21:40:38.966"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:40:38.974" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt"&gt;/home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:40:38.974" starttime="20170928 21:40:38.973"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:38.974" starttime="20170928 21:40:38.973"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:38.974" starttime="20170928 21:40:38.966"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:38.974" starttime="20170928 21:40:37.511"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:38.974" starttime="20170928 21:40:37.511"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:38.974" starttime="20170928 21:40:37.510"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:38.974" starttime="20170928 21:40:37.502"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:38.974" starttime="20170928 21:40:37.502"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170928 21:40:38.975" level="INFO">@{cmd_list} = [ ('FW Timestamp', 'cat /etc/timestamp') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" endtime="20170928 21:40:38.976" starttime="20170928 21:40:38.975"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170928 21:40:38.976" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20170928 21:40:38.977" starttime="20170928 21:40:38.976"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Timestamp', 'cat /etc/timestamp')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:40:38.980" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt"&gt;/home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:40:38.980" starttime="20170928 21:40:38.979"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:38.980" starttime="20170928 21:40:38.979"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:40:38.981" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt"&gt;/home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:40:38.981" starttime="20170928 21:40:38.981"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:38.981" starttime="20170928 21:40:38.980"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:40:38.982" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt"&gt;/home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:40:38.983" starttime="20170928 21:40:38.982"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:38.983" starttime="20170928 21:40:38.981"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:40:38.984" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt"&gt;/home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:40:38.984" starttime="20170928 21:40:38.983"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:38.984" starttime="20170928 21:40:38.983"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:38.984" starttime="20170928 21:40:38.978"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:38.985" starttime="20170928 21:40:38.978"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170928 21:40:38.985" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/timestamp  ignore_err=1</msg>
<status status="PASS" endtime="20170928 21:40:38.985" starttime="20170928 21:40:38.985"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/timestamp</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170928 21:40:39.045" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170928 21:40:39.046" level="INFO">Executing command 'cat /etc/timestamp'.</msg>
<msg timestamp="20170928 21:40:39.143" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170928 21:40:39.143" starttime="20170928 21:40:39.010"></status>
</kw>
<msg timestamp="20170928 21:40:39.143" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 21:40:39.143" level="INFO">${ret_values} = (u'20170928201615', u'', 0)</msg>
<status status="PASS" endtime="20170928 21:40:39.143" starttime="20170928 21:40:38.986"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170928 21:40:39.144" level="INFO">${stdout} = 20170928201615</msg>
<status status="PASS" endtime="20170928 21:40:39.144" starttime="20170928 21:40:39.144"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170928 21:40:39.145" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170928 21:40:39.145" starttime="20170928 21:40:39.144"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:40:39.152" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt"&gt;/home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:40:39.152" starttime="20170928 21:40:39.152"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:39.152" starttime="20170928 21:40:39.151"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:39.152" starttime="20170928 21:40:39.145"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:39.153" starttime="20170928 21:40:38.977"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:39.153" starttime="20170928 21:40:38.977"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:40:39.156" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt"&gt;/home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:40:39.156" starttime="20170928 21:40:39.155"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:39.156" starttime="20170928 21:40:39.155"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:40:39.157" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt"&gt;/home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:40:39.157" starttime="20170928 21:40:39.157"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:39.157" starttime="20170928 21:40:39.156"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:40:39.158" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt"&gt;/home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:40:39.159" starttime="20170928 21:40:39.158"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:39.159" starttime="20170928 21:40:39.158"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:40:39.160" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt"&gt;/home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:40:39.160" starttime="20170928 21:40:39.159"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:39.160" starttime="20170928 21:40:39.159"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:39.160" starttime="20170928 21:40:39.154"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:39.160" starttime="20170928 21:40:39.154"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170928 21:40:39.161" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status status="PASS" endtime="20170928 21:40:39.161" starttime="20170928 21:40:39.160"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170928 21:40:39.219" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170928 21:40:39.220" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170928 21:40:39.277" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170928 21:40:39.278" starttime="20170928 21:40:39.186"></status>
</kw>
<msg timestamp="20170928 21:40:39.278" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 21:40:39.278" level="INFO">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.10-63"\nVERSION_ID="v1.99.10-63-g7c65384"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC...</msg>
<status status="PASS" endtime="20170928 21:40:39.278" starttime="20170928 21:40:39.161"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170928 21:40:39.279" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.10-63"
VERSION_ID="v1.99.10-63-g7c65384"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Projec...</msg>
<status status="PASS" endtime="20170928 21:40:39.279" starttime="20170928 21:40:39.278"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170928 21:40:39.279" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170928 21:40:39.279" starttime="20170928 21:40:39.279"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:40:39.287" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt"&gt;/home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:40:39.287" starttime="20170928 21:40:39.286"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:39.287" starttime="20170928 21:40:39.286"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:39.287" starttime="20170928 21:40:39.280"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:39.287" starttime="20170928 21:40:39.153"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:39.287" starttime="20170928 21:40:39.153"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:39.287" starttime="20170928 21:40:38.977"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:39.287" starttime="20170928 21:40:38.975"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:39.287" starttime="20170928 21:40:38.974"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170928 21:40:39.289" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" endtime="20170928 21:40:39.289" starttime="20170928 21:40:39.288"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170928 21:40:39.289" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20170928 21:40:39.289" starttime="20170928 21:40:39.289"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:40:39.293" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt"&gt;/home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:40:39.293" starttime="20170928 21:40:39.292"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:39.293" starttime="20170928 21:40:39.292"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:40:39.294" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt"&gt;/home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:40:39.294" starttime="20170928 21:40:39.294"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:39.294" starttime="20170928 21:40:39.293"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:40:39.295" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt"&gt;/home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:40:39.295" starttime="20170928 21:40:39.295"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:39.296" starttime="20170928 21:40:39.294"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:40:39.297" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt"&gt;/home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:40:39.297" starttime="20170928 21:40:39.296"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:39.297" starttime="20170928 21:40:39.296"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:39.297" starttime="20170928 21:40:39.291"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:39.297" starttime="20170928 21:40:39.291"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170928 21:40:39.298" level="INFO">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status status="PASS" endtime="20170928 21:40:39.298" starttime="20170928 21:40:39.297"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170928 21:40:39.359" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170928 21:40:39.360" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170928 21:40:39.408" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170928 21:40:39.409" starttime="20170928 21:40:39.323"></status>
</kw>
<msg timestamp="20170928 21:40:39.409" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 21:40:39.409" level="INFO">${ret_values} = (u' 21:40:52 up 15 min,  load average: 0.83, 1.48, 1.41', u'', 0)</msg>
<status status="PASS" endtime="20170928 21:40:39.409" starttime="20170928 21:40:39.298"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170928 21:40:39.410" level="INFO">${stdout} =  21:40:52 up 15 min,  load average: 0.83, 1.48, 1.41</msg>
<status status="PASS" endtime="20170928 21:40:39.410" starttime="20170928 21:40:39.409"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170928 21:40:39.410" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170928 21:40:39.410" starttime="20170928 21:40:39.410"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:40:39.418" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt"&gt;/home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:40:39.418" starttime="20170928 21:40:39.418"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:39.418" starttime="20170928 21:40:39.417"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:39.418" starttime="20170928 21:40:39.411"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:39.418" starttime="20170928 21:40:39.290"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:39.418" starttime="20170928 21:40:39.290"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:40:39.421" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt"&gt;/home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:40:39.422" starttime="20170928 21:40:39.421"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:39.422" starttime="20170928 21:40:39.421"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:40:39.423" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt"&gt;/home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:40:39.423" starttime="20170928 21:40:39.423"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:39.423" starttime="20170928 21:40:39.422"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:40:39.424" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt"&gt;/home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:40:39.424" starttime="20170928 21:40:39.424"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:39.425" starttime="20170928 21:40:39.423"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:40:39.426" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt"&gt;/home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:40:39.426" starttime="20170928 21:40:39.425"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:39.426" starttime="20170928 21:40:39.425"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:39.426" starttime="20170928 21:40:39.420"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:39.426" starttime="20170928 21:40:39.420"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170928 21:40:39.427" level="INFO">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status status="PASS" endtime="20170928 21:40:39.427" starttime="20170928 21:40:39.426"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170928 21:40:39.487" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170928 21:40:39.487" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170928 21:40:39.556" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170928 21:40:39.556" starttime="20170928 21:40:39.452"></status>
</kw>
<msg timestamp="20170928 21:40:39.557" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 21:40:39.557" level="INFO">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\n/dev/root            squashfs       14.3M     14.3M         0 100% /\ndevtmpfs             devtmpfs      210.9M       ...</msg>
<status status="PASS" endtime="20170928 21:40:39.557" starttime="20170928 21:40:39.427"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170928 21:40:39.557" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
/dev/root            squashfs       14.3M     14.3M         0 100% /
devtmpfs             devtmpfs      210.9M         0  ...</msg>
<status status="PASS" endtime="20170928 21:40:39.557" starttime="20170928 21:40:39.557"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170928 21:40:39.558" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170928 21:40:39.558" starttime="20170928 21:40:39.558"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:40:39.566" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt"&gt;/home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:40:39.566" starttime="20170928 21:40:39.565"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:39.566" starttime="20170928 21:40:39.564"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:39.566" starttime="20170928 21:40:39.558"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:39.566" starttime="20170928 21:40:39.419"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:39.566" starttime="20170928 21:40:39.419"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:40:39.569" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt"&gt;/home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:40:39.569" starttime="20170928 21:40:39.569"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:39.569" starttime="20170928 21:40:39.568"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:40:39.570" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt"&gt;/home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:40:39.571" starttime="20170928 21:40:39.570"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:39.571" starttime="20170928 21:40:39.569"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:40:39.572" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt"&gt;/home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:40:39.572" starttime="20170928 21:40:39.571"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:39.572" starttime="20170928 21:40:39.571"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:40:39.573" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt"&gt;/home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:40:39.573" starttime="20170928 21:40:39.573"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:39.573" starttime="20170928 21:40:39.572"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:39.573" starttime="20170928 21:40:39.568"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:39.574" starttime="20170928 21:40:39.567"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170928 21:40:39.574" level="INFO">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status status="PASS" endtime="20170928 21:40:39.574" starttime="20170928 21:40:39.574"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170928 21:40:39.634" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170928 21:40:39.635" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170928 21:40:39.680" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170928 21:40:39.680" starttime="20170928 21:40:39.600"></status>
</kw>
<msg timestamp="20170928 21:40:39.680" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 21:40:39.680" level="INFO">${ret_values} = (u'Linux witherspoon 4.10.17-00cd954c889746a65f9022088c5d83f9f43bfddc #1 Fri Sep 22 12:34:59 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status status="PASS" endtime="20170928 21:40:39.680" starttime="20170928 21:40:39.575"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170928 21:40:39.681" level="INFO">${stdout} = Linux witherspoon 4.10.17-00cd954c889746a65f9022088c5d83f9f43bfddc #1 Fri Sep 22 12:34:59 UTC 2017 armv6l GNU/Linux</msg>
<status status="PASS" endtime="20170928 21:40:39.681" starttime="20170928 21:40:39.680"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170928 21:40:39.681" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170928 21:40:39.681" starttime="20170928 21:40:39.681"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:40:39.689" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt"&gt;/home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:40:39.689" starttime="20170928 21:40:39.689"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:39.689" starttime="20170928 21:40:39.688"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:39.690" starttime="20170928 21:40:39.682"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:39.690" starttime="20170928 21:40:39.566"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:39.690" starttime="20170928 21:40:39.566"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:39.690" starttime="20170928 21:40:39.289"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:39.690" starttime="20170928 21:40:39.288"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:39.690" starttime="20170928 21:40:39.288"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:39.690" starttime="20170928 21:40:37.502"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:39.690" starttime="20170928 21:40:37.500"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:39.690" starttime="20170928 21:40:37.482"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:39.690" starttime="20170928 21:40:37.479"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:39.690" starttime="20170928 21:40:37.479"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:40:39.692" starttime="20170928 21:40:39.692"></status>
</kw>
<msg timestamp="20170928 21:40:39.692" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 21:40:39.692" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170928 21:40:39.692" starttime="20170928 21:40:39.691"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170928 21:40:39.693" starttime="20170928 21:40:39.693"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170928 21:40:39.712" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20170928 21:40:39.712" starttime="20170928 21:40:39.711"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170928 21:40:39.713" level="INFO">@{cmd_list} = [ ('BMC_sensor_list', '/xyz/openbmc_project/sensors/enumerate') | ('OCC_state', '/org/open_power/control/enumerate') | ('BMC_control_list', '/xyz/openbmc_project/control/enumerate') | ('BMC_led', '/xy...</msg>
<status status="PASS" endtime="20170928 21:40:39.713" starttime="20170928 21:40:39.713"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/xyz/openbmc_project/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170928 21:40:39.715" level="INFO">${logpath} = /home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_sensor_list.txt</msg>
<status status="PASS" endtime="20170928 21:40:39.715" starttime="20170928 21:40:39.714"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170928 21:40:39.718" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170928 21:40:39.718" starttime="20170928 21:40:39.717"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170928 21:40:39.719" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170928 21:40:39.719" starttime="20170928 21:40:39.718"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170928 21:40:39.720" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170928 21:40:39.720" starttime="20170928 21:40:39.719"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170928 21:40:39.720" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170928 21:40:39.720" starttime="20170928 21:40:39.720"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170928 21:40:39.920" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170928 21:40:39.920" starttime="20170928 21:40:39.721"></status>
</kw>
<msg timestamp="20170928 21:40:39.921" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 21:40:39.921" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 21:40:39.921" starttime="20170928 21:40:39.721"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170928 21:40:39.921" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 21:40:39.921" starttime="20170928 21:40:39.921"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 21:40:39.922" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 21:40:39.922" starttime="20170928 21:40:39.922"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:39.922" starttime="20170928 21:40:39.717"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:39.922" starttime="20170928 21:40:39.716"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:39.923" starttime="20170928 21:40:39.716"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170928 21:40:39.923" level="INFO">${base_uri} = /xyz/openbmc_project/sensors/enumerate</msg>
<status status="PASS" endtime="20170928 21:40:39.923" starttime="20170928 21:40:39.923"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:40:39.924" starttime="20170928 21:40:39.924"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170928 21:40:40.548" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170928 21:40:40.548" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 21:40:40.548" starttime="20170928 21:40:39.924"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:40:40.549" starttime="20170928 21:40:40.549"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170928 21:40:40.549" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170928 21:40:40.550" starttime="20170928 21:40:40.549"></status>
</kw>
<msg timestamp="20170928 21:40:40.550" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 21:40:40.550" starttime="20170928 21:40:39.715"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 21:40:40.551" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 21:40:40.551" starttime="20170928 21:40:40.551"></status>
</kw>
<msg timestamp="20170928 21:40:40.551" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170928 21:40:40.551" starttime="20170928 21:40:40.550"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170928 21:40:40.552" starttime="20170928 21:40:40.551"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170928 21:40:40.553" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/sensors/current/ps0_output_current": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/current/ps1_output_current": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/power/ps0_input_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 4000000
    }, 
    "/xyz/openbmc_project/sensors/power/ps1_input_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/ambient": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 24700
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vcs_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 4000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdd_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 4000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vddr_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdn_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vcs_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdd_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vddr_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdn_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_input_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 208500
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_output_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 281
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_input_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_output_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170928 21:40:40.553" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170928 21:40:40.553" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/sensors/current/ps0_output_current": {
            "Scale": -3,
            "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes",
            "Value": ...</msg>
<status status="PASS" endtime="20170928 21:40:40.554" starttime="20170928 21:40:40.552"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:40:40.555" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_sensor_list.txt"&gt;/home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:40:40.555" starttime="20170928 21:40:40.555"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:40.555" starttime="20170928 21:40:40.554"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:40.555" starttime="20170928 21:40:39.714"></status>
</kw>
<kw type="foritem" name="${cmd} = ('OCC_state', '/org/open_power/control/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170928 21:40:40.556" level="INFO">${logpath} = /home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_OCC_state.txt</msg>
<status status="PASS" endtime="20170928 21:40:40.556" starttime="20170928 21:40:40.556"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170928 21:40:40.559" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170928 21:40:40.559" starttime="20170928 21:40:40.559"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170928 21:40:40.560" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170928 21:40:40.560" starttime="20170928 21:40:40.560"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170928 21:40:40.561" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170928 21:40:40.561" starttime="20170928 21:40:40.560"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170928 21:40:40.561" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170928 21:40:40.561" starttime="20170928 21:40:40.561"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170928 21:40:40.746" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170928 21:40:40.746" starttime="20170928 21:40:40.562"></status>
</kw>
<msg timestamp="20170928 21:40:40.746" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 21:40:40.746" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 21:40:40.746" starttime="20170928 21:40:40.562"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170928 21:40:40.747" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 21:40:40.747" starttime="20170928 21:40:40.747"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 21:40:40.748" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 21:40:40.748" starttime="20170928 21:40:40.747"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:40.748" starttime="20170928 21:40:40.558"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:40.748" starttime="20170928 21:40:40.558"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:40.748" starttime="20170928 21:40:40.557"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170928 21:40:40.749" level="INFO">${base_uri} = /org/open_power/control/enumerate</msg>
<status status="PASS" endtime="20170928 21:40:40.749" starttime="20170928 21:40:40.748"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:40:40.749" starttime="20170928 21:40:40.749"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170928 21:40:40.892" level="INFO">Get Request using : alias=openbmc, uri=/org/open_power/control/enumerate, headers=None json=None</msg>
<msg timestamp="20170928 21:40:40.892" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 21:40:40.892" starttime="20170928 21:40:40.750"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:40:40.893" starttime="20170928 21:40:40.892"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170928 21:40:40.893" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170928 21:40:40.893" starttime="20170928 21:40:40.893"></status>
</kw>
<msg timestamp="20170928 21:40:40.894" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 21:40:40.894" starttime="20170928 21:40:40.556"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 21:40:40.895" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 21:40:40.895" starttime="20170928 21:40:40.894"></status>
</kw>
<msg timestamp="20170928 21:40:40.895" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170928 21:40:40.895" starttime="20170928 21:40:40.894"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170928 21:40:40.896" starttime="20170928 21:40:40.895"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170928 21:40:40.896" level="INFO">To JSON using : content={
  "data": {
    "/org/open_power/control/host0": {}, 
    "/org/open_power/control/occ0": {
      "OccActive": 0
    }, 
    "/org/open_power/control/occ1": {
      "OccActive": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170928 21:40:40.896" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170928 21:40:40.896" level="INFO">${jsondata} = {
    "data": {
        "/org/open_power/control/host0": {},
        "/org/open_power/control/occ0": {
            "OccActive": 0
        },
        "/org/open_power/control/occ1": {
            "OccA...</msg>
<status status="PASS" endtime="20170928 21:40:40.897" starttime="20170928 21:40:40.896"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:40:40.898" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_OCC_state.txt"&gt;/home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_OCC_state.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:40:40.898" starttime="20170928 21:40:40.897"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:40.898" starttime="20170928 21:40:40.897"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:40.898" starttime="20170928 21:40:40.555"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_control_list', '/xyz/openbmc_project/control/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170928 21:40:40.899" level="INFO">${logpath} = /home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_control_list.txt</msg>
<status status="PASS" endtime="20170928 21:40:40.899" starttime="20170928 21:40:40.899"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170928 21:40:40.902" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170928 21:40:40.902" starttime="20170928 21:40:40.902"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170928 21:40:40.903" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170928 21:40:40.903" starttime="20170928 21:40:40.903"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170928 21:40:40.904" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170928 21:40:40.904" starttime="20170928 21:40:40.903"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170928 21:40:40.904" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170928 21:40:40.904" starttime="20170928 21:40:40.904"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170928 21:40:41.084" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170928 21:40:41.084" starttime="20170928 21:40:40.905"></status>
</kw>
<msg timestamp="20170928 21:40:41.085" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 21:40:41.085" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 21:40:41.085" starttime="20170928 21:40:40.905"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170928 21:40:41.085" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 21:40:41.086" starttime="20170928 21:40:41.085"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 21:40:41.086" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 21:40:41.086" starttime="20170928 21:40:41.086"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:41.086" starttime="20170928 21:40:40.901"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:41.087" starttime="20170928 21:40:40.901"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:41.087" starttime="20170928 21:40:40.900"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170928 21:40:41.087" level="INFO">${base_uri} = /xyz/openbmc_project/control/enumerate</msg>
<status status="PASS" endtime="20170928 21:40:41.087" starttime="20170928 21:40:41.087"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:40:41.088" starttime="20170928 21:40:41.088"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170928 21:40:41.409" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/enumerate, headers=None json=None</msg>
<msg timestamp="20170928 21:40:41.409" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 21:40:41.409" starttime="20170928 21:40:41.088"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:40:41.410" starttime="20170928 21:40:41.409"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170928 21:40:41.410" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170928 21:40:41.410" starttime="20170928 21:40:41.410"></status>
</kw>
<msg timestamp="20170928 21:40:41.410" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 21:40:41.410" starttime="20170928 21:40:40.899"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 21:40:41.411" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 21:40:41.412" starttime="20170928 21:40:41.411"></status>
</kw>
<msg timestamp="20170928 21:40:41.412" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170928 21:40:41.412" starttime="20170928 21:40:41.411"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170928 21:40:41.412" starttime="20170928 21:40:41.412"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170928 21:40:41.413" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/control/host0": {}, 
    "/xyz/openbmc_project/control/host0/TPMEnable": {
      "TPMEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/auto_reboot": {
      "AutoReboot": 1
    }, 
    "/xyz/openbmc_project/control/host0/boot": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular", 
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default"
    }, 
    "/xyz/openbmc_project/control/host0/boot/one_time": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular", 
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default", 
      "Enabled": 1
    }, 
    "/xyz/openbmc_project/control/host0/power_cap": {
      "PowerCap": 0, 
      "PowerCapEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/power_restore_policy": {
      "PowerRestorePolicy": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore"
    }, 
    "/xyz/openbmc_project/control/host0/restriction_mode": {
      "RestrictionMode": "xyz.openbmc_project.Control.Security.RestrictionMode.Modes.None"
    }, 
    "/xyz/openbmc_project/control/minimum_ship_level_required": {
      "MinimumShipLevelRequired": 1
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170928 21:40:41.413" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170928 21:40:41.413" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/control/host0": {},
        "/xyz/openbmc_project/control/host0/TPMEnable": {
            "TPMEnable": 0
        },
        "/xyz/openbmc_project/control/...</msg>
<status status="PASS" endtime="20170928 21:40:41.413" starttime="20170928 21:40:41.413"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:40:41.415" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_control_list.txt"&gt;/home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_control_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:40:41.415" starttime="20170928 21:40:41.414"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:41.415" starttime="20170928 21:40:41.414"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:41.415" starttime="20170928 21:40:40.898"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/xyz/openbmc_project/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170928 21:40:41.416" level="INFO">${logpath} = /home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_led.txt</msg>
<status status="PASS" endtime="20170928 21:40:41.416" starttime="20170928 21:40:41.416"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170928 21:40:41.419" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170928 21:40:41.419" starttime="20170928 21:40:41.419"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170928 21:40:41.420" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170928 21:40:41.420" starttime="20170928 21:40:41.419"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170928 21:40:41.420" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170928 21:40:41.421" starttime="20170928 21:40:41.420"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170928 21:40:41.421" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170928 21:40:41.421" starttime="20170928 21:40:41.421"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170928 21:40:41.635" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170928 21:40:41.635" starttime="20170928 21:40:41.422"></status>
</kw>
<msg timestamp="20170928 21:40:41.635" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 21:40:41.635" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 21:40:41.635" starttime="20170928 21:40:41.422"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170928 21:40:41.636" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 21:40:41.636" starttime="20170928 21:40:41.635"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 21:40:41.636" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 21:40:41.636" starttime="20170928 21:40:41.636"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:41.637" starttime="20170928 21:40:41.418"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:41.637" starttime="20170928 21:40:41.417"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:41.637" starttime="20170928 21:40:41.417"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170928 21:40:41.637" level="INFO">${base_uri} = /xyz/openbmc_project/led/enumerate</msg>
<status status="PASS" endtime="20170928 21:40:41.637" starttime="20170928 21:40:41.637"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:40:41.638" starttime="20170928 21:40:41.638"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170928 21:40:43.250" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170928 21:40:43.250" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 21:40:43.250" starttime="20170928 21:40:41.638"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:40:43.251" starttime="20170928 21:40:43.251"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170928 21:40:43.252" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170928 21:40:43.252" starttime="20170928 21:40:43.252"></status>
</kw>
<msg timestamp="20170928 21:40:43.252" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 21:40:43.252" starttime="20170928 21:40:41.416"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 21:40:43.253" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 21:40:43.254" starttime="20170928 21:40:43.253"></status>
</kw>
<msg timestamp="20170928 21:40:43.254" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170928 21:40:43.254" starttime="20170928 21:40:43.253"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170928 21:40:43.254" starttime="20170928 21:40:43.254"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170928 21:40:43.256" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/led/groups": {}, 
    "/xyz/openbmc_project/led/groups/bmc_booted": {
      "Asserted": 1
    }, 
    "/xyz/openbmc_project/led/groups/bmc_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/boxelder_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core10_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core11_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core12_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core13_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core14_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core15_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core16_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core17_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core18_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core19_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core20_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core21_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core22_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core23_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core6_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core7_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core8_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core9_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/cpu0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/cpu1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm10_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm11_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm12_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm13_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm14_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm15_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm6_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm7_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm8_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm9_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/enclosure_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/enclosure_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan0_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan1_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan2_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan3_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/lamp_test": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/motherboard_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/occ_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/power_on": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/powersupply0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/powersupply1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/system_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/physical/fan0": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan1": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan2": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan3": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_fault": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_id": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_power": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Blink"
    }, 
    "/xyz/openbmc_project/led/physical/rear_fault": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/rear_id": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/rear_power": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Blink"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170928 21:40:43.256" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170928 21:40:43.257" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/led/groups": {},
        "/xyz/openbmc_project/led/groups/bmc_booted": {
            "Asserted": 1
        },
        "/xyz/openbmc_project/led/groups/bmc...</msg>
<status status="PASS" endtime="20170928 21:40:43.257" starttime="20170928 21:40:43.255"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:40:43.258" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_led.txt"&gt;/home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_led.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:40:43.258" starttime="20170928 21:40:43.258"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:43.258" starttime="20170928 21:40:43.257"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:43.259" starttime="20170928 21:40:41.415"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FIRMWARE_list', '/xyz/openbmc_project/software/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170928 21:40:43.259" level="INFO">${logpath} = /home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_FIRMWARE_list.txt</msg>
<status status="PASS" endtime="20170928 21:40:43.259" starttime="20170928 21:40:43.259"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170928 21:40:43.262" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170928 21:40:43.262" starttime="20170928 21:40:43.262"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170928 21:40:43.263" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170928 21:40:43.263" starttime="20170928 21:40:43.263"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170928 21:40:43.264" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170928 21:40:43.264" starttime="20170928 21:40:43.263"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170928 21:40:43.265" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170928 21:40:43.265" starttime="20170928 21:40:43.264"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170928 21:40:43.485" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170928 21:40:43.486" starttime="20170928 21:40:43.266"></status>
</kw>
<msg timestamp="20170928 21:40:43.486" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 21:40:43.486" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 21:40:43.486" starttime="20170928 21:40:43.265"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170928 21:40:43.487" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 21:40:43.487" starttime="20170928 21:40:43.486"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 21:40:43.487" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 21:40:43.487" starttime="20170928 21:40:43.487"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:43.488" starttime="20170928 21:40:43.261"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:43.488" starttime="20170928 21:40:43.261"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:43.488" starttime="20170928 21:40:43.260"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170928 21:40:43.488" level="INFO">${base_uri} = /xyz/openbmc_project/software/enumerate</msg>
<status status="PASS" endtime="20170928 21:40:43.488" starttime="20170928 21:40:43.488"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:40:43.489" starttime="20170928 21:40:43.489"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170928 21:40:43.899" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/enumerate, headers=None json=None</msg>
<msg timestamp="20170928 21:40:43.900" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 21:40:43.900" starttime="20170928 21:40:43.489"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:40:43.901" starttime="20170928 21:40:43.900"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170928 21:40:43.901" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170928 21:40:43.901" starttime="20170928 21:40:43.901"></status>
</kw>
<msg timestamp="20170928 21:40:43.901" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 21:40:43.901" starttime="20170928 21:40:43.259"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 21:40:43.902" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 21:40:43.903" starttime="20170928 21:40:43.902"></status>
</kw>
<msg timestamp="20170928 21:40:43.903" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170928 21:40:43.903" starttime="20170928 21:40:43.902"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170928 21:40:43.903" starttime="20170928 21:40:43.903"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170928 21:40:43.904" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/software/2a6e1150": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "Path": "", 
      "Priority": 0, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "v1.99.10-63-g7c65384", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/2a6e1150/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    }, 
    "/xyz/openbmc_project/software/2a6e1150/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/7a9ef57c": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "ExtendedVersion": "op-build-57a0c70-dirty,buildroot-2017.08-6-g319c6e1,skiboot-v5.8-90-g398a98123641-pf316294,hostboot-3d6c541,linux-4.13-openpower1-pe0f5c53,petitboot-v1.5.1-pd10dfac,machine-xml-f8aaa73,occ-a43395b,hostboot-binaries-836385d,capp-ucode-9c73e9f,sbe-8d90ab2", 
      "Path": "", 
      "Priority": 1, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.19_1.35", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/7a9ef57c/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    }, 
    "/xyz/openbmc_project/software/7a9ef57c/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "ExtendedVersion": "op-build-v1.7-1321-g6eef393-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.8-rc1-pd9d2012,hostboot-c68be97,linux-4.12.8-openpower1-p919e663,petitboot-v1.5.1-p848cad7,machine-xml-c1e49a6-pbb9f626,occ-854999a,hostboot-binaries-67a15fd,capp-ucode-9c73e9f,sbe-4a62126-p180ac2a", 
      "Path": "", 
      "Priority": 0, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.54", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/a4417d5c": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "Path": "", 
      "Priority": 1, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "v1.99.10-62-g5b0adc7", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/a4417d5c/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    }, 
    "/xyz/openbmc_project/software/a4417d5c/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/active": {
      "endpoints": [
        "/xyz/openbmc_project/software/2a6e1150", 
        "/xyz/openbmc_project/software/8764baa3", 
        "/xyz/openbmc_project/software/a4417d5c", 
        "/xyz/openbmc_project/software/7a9ef57c"
      ]
    }, 
    "/xyz/openbmc_project/software/functional": {
      "endpoints": [
        "/xyz/openbmc_project/software/2a6e1150"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170928 21:40:43.905" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170928 21:40:43.905" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/software/2a6e1150": {
            "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active",
            "Path": "",
            "Priorit...</msg>
<status status="PASS" endtime="20170928 21:40:43.905" starttime="20170928 21:40:43.904"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:40:43.906" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_FIRMWARE_list.txt"&gt;/home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_FIRMWARE_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:40:43.906" starttime="20170928 21:40:43.906"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:43.907" starttime="20170928 21:40:43.905"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:43.907" starttime="20170928 21:40:43.259"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170928 21:40:43.907" level="INFO">${logpath} = /home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_elog.txt</msg>
<status status="PASS" endtime="20170928 21:40:43.907" starttime="20170928 21:40:43.907"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170928 21:40:43.910" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170928 21:40:43.911" starttime="20170928 21:40:43.910"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170928 21:40:43.912" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170928 21:40:43.912" starttime="20170928 21:40:43.911"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170928 21:40:43.912" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170928 21:40:43.912" starttime="20170928 21:40:43.912"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170928 21:40:43.913" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170928 21:40:43.913" starttime="20170928 21:40:43.913"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170928 21:40:44.089" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170928 21:40:44.089" starttime="20170928 21:40:43.914"></status>
</kw>
<msg timestamp="20170928 21:40:44.089" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 21:40:44.089" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 21:40:44.089" starttime="20170928 21:40:43.914"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170928 21:40:44.090" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 21:40:44.090" starttime="20170928 21:40:44.089"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 21:40:44.090" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 21:40:44.091" starttime="20170928 21:40:44.090"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:44.091" starttime="20170928 21:40:43.909"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:44.091" starttime="20170928 21:40:43.909"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:44.091" starttime="20170928 21:40:43.908"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170928 21:40:44.092" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" endtime="20170928 21:40:44.092" starttime="20170928 21:40:44.091"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:40:44.092" starttime="20170928 21:40:44.092"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170928 21:40:44.136" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170928 21:40:44.137" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170928 21:40:44.137" starttime="20170928 21:40:44.093"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:40:44.137" starttime="20170928 21:40:44.137"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170928 21:40:44.139" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170928 21:40:44.139" starttime="20170928 21:40:44.138"></status>
</kw>
<msg timestamp="20170928 21:40:44.139" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170928 21:40:44.139" starttime="20170928 21:40:43.908"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 21:40:44.140" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170928 21:40:44.140" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170928 21:40:44.140" starttime="20170928 21:40:44.140"></status>
</kw>
<msg timestamp="20170928 21:40:44.140" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170928 21:40:44.141" starttime="20170928 21:40:44.139"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170928 21:40:44.142" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170928 21:40:44.142" starttime="20170928 21:40:44.141"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:44.142" starttime="20170928 21:40:44.141"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:44.142" starttime="20170928 21:40:43.907"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170928 21:40:44.143" level="INFO">${logpath} = /home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_inventory.txt</msg>
<status status="PASS" endtime="20170928 21:40:44.143" starttime="20170928 21:40:44.142"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170928 21:40:44.146" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170928 21:40:44.149" starttime="20170928 21:40:44.145"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170928 21:40:44.150" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170928 21:40:44.150" starttime="20170928 21:40:44.149"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170928 21:40:44.151" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170928 21:40:44.151" starttime="20170928 21:40:44.150"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170928 21:40:44.151" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170928 21:40:44.151" starttime="20170928 21:40:44.151"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170928 21:40:44.346" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170928 21:40:44.346" starttime="20170928 21:40:44.152"></status>
</kw>
<msg timestamp="20170928 21:40:44.346" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 21:40:44.346" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 21:40:44.346" starttime="20170928 21:40:44.152"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170928 21:40:44.347" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 21:40:44.347" starttime="20170928 21:40:44.346"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 21:40:44.347" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 21:40:44.347" starttime="20170928 21:40:44.347"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:44.348" starttime="20170928 21:40:44.145"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:44.348" starttime="20170928 21:40:44.144"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:44.348" starttime="20170928 21:40:44.144"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170928 21:40:44.348" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" endtime="20170928 21:40:44.348" starttime="20170928 21:40:44.348"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:40:44.349" starttime="20170928 21:40:44.349"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170928 21:40:46.600" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170928 21:40:46.601" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 21:40:46.601" starttime="20170928 21:40:44.349"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:40:46.601" starttime="20170928 21:40:46.601"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170928 21:40:46.602" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170928 21:40:46.602" starttime="20170928 21:40:46.602"></status>
</kw>
<msg timestamp="20170928 21:40:46.602" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 21:40:46.602" starttime="20170928 21:40:44.143"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 21:40:46.604" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 21:40:46.604" starttime="20170928 21:40:46.603"></status>
</kw>
<msg timestamp="20170928 21:40:46.604" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170928 21:40:46.604" starttime="20170928 21:40:46.603"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170928 21:40:46.604" starttime="20170928 21:40:46.604"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170928 21:40:46.607" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system": {
      "AssetTag": "", 
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "", 
      "Model": "0000000000000000", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "", 
      "SerialNumber": "0000000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 0
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/activation": {
      "endpoints": [
        "/xyz/openbmc_project/software/8764baa3", 
        "/xyz/openbmc_project/software/7a9ef57c"
      ]
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "0000000000000000", 
      "Model": "", 
      "PartNumber": "00VK525         ", 
      "Present": 1, 
      "PrettyName": "SYSTEM PLANAR   ", 
      "SerialNumber": "Y130UF72700J    "
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000", 
      "UUID": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/activation": {
      "endpoints": [
        "/xyz/openbmc_project/software/2a6e1150", 
        "/xyz/openbmc_project/software/a4417d5c"
      ]
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "70:e2:84:14:23:e1", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL906", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933943218", 
      "Version": "20"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core10": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core12": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core14": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core16": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core4": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core5": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core6": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core7": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL906", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933943264", 
      "Version": "20"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core10": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core12": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core14": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core16": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core4": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core5": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core6": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core7": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core9": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196b", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196a", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm10": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ef", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm11": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1801", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm13": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1824", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm14": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 0, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1907", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm15": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db18d0", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm2": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196c", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm3": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196d", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm4": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1971", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm5": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17e7", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm6": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1973", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm7": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1970", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm9": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ed", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170928 21:40:46.608" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170928 21:40:46.608" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system": {
            "AssetTag": "",
            "BuildDate": "",
            "Cached": 0,
            "FieldReplaceable": 0,
            "Man...</msg>
<status status="PASS" endtime="20170928 21:40:46.608" starttime="20170928 21:40:46.605"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:40:46.610" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_inventory.txt"&gt;/home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:40:46.610" starttime="20170928 21:40:46.610"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:46.610" starttime="20170928 21:40:46.608"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:46.610" starttime="20170928 21:40:44.142"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:46.610" starttime="20170928 21:40:39.713"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:46.611" starttime="20170928 21:40:39.712"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:46.611" starttime="20170928 21:40:39.712"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:46.611" starttime="20170928 21:40:39.712"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:46.611" starttime="20170928 21:40:39.711"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:46.611" starttime="20170928 21:40:39.693"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:46.611" starttime="20170928 21:40:39.691"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:46.611" starttime="20170928 21:40:39.690"></status>
</kw>
<kw type="foritem" name="${method} = ('Sys Inventory Files', 'System Inventory Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:40:46.613" starttime="20170928 21:40:46.613"></status>
</kw>
<msg timestamp="20170928 21:40:46.613" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 21:40:46.613" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170928 21:40:46.613" starttime="20170928 21:40:46.612"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170928 21:40:46.614" starttime="20170928 21:40:46.614"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="System Inventory Files" library="openbmc_ffdc_methods">
<doc>Copy systest os_inventory files.</doc>
<kw name="Copy Files" library="OperatingSystem">
<doc>Copies specified files to the target directory.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
<arg>${ffdc_dir_path}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:40:46.636" starttime="20170928 21:40:46.634"></status>
</kw>
<kw name="Remove Files" library="OperatingSystem">
<doc>Uses `Remove File` to remove multiple files one-by-one.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
</arguments>
<msg timestamp="20170928 21:40:46.639" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/os_inventory_*.json"&gt;/home/fspcibld/os_inventory_*.json&lt;/a&gt;' does not exist.</msg>
<status status="PASS" endtime="20170928 21:40:46.639" starttime="20170928 21:40:46.637"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:46.639" starttime="20170928 21:40:46.632"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:46.639" starttime="20170928 21:40:46.614"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:46.639" starttime="20170928 21:40:46.611"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:46.639" starttime="20170928 21:40:46.611"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:40:46.641" starttime="20170928 21:40:46.641"></status>
</kw>
<msg timestamp="20170928 21:40:46.641" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 21:40:46.641" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170928 21:40:46.641" starttime="20170928 21:40:46.640"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170928 21:40:46.642" starttime="20170928 21:40:46.642"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170928 21:40:46.693" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170928 21:40:46.694" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170928 21:40:46.752" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170928 21:40:46.765" level="INFO">${core_files} = None</msg>
<msg timestamp="20170928 21:40:46.765" level="INFO">${stderr} = None</msg>
<msg timestamp="20170928 21:40:46.765" level="INFO">${rc} = None</msg>
<msg timestamp="20170928 21:40:46.766" level="FAIL">#(UTC) 2017/09/28 21:40:46.764464 -    0.071642 - **ERROR** The prior SSH command returned a non-zero return code:
rc:                                               0x00000001
ls: /tmp/core_*: No such file or directory
: 1 != 0</msg>
<status status="FAIL" endtime="20170928 21:40:46.766" starttime="20170928 21:40:46.664"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170928 21:40:46.767" level="INFO">@{core_list} = [ ]</msg>
<msg timestamp="20170928 21:40:46.767" level="FAIL">AttributeError: 'NoneType' object has no attribute 'split'</msg>
<status status="FAIL" endtime="20170928 21:40:46.767" starttime="20170928 21:40:46.766"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170928 21:40:46.787" starttime="20170928 21:40:46.779"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:40:47.423" starttime="20170928 21:40:46.788"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:47.423" starttime="20170928 21:40:46.787"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:47.423" starttime="20170928 21:40:46.778"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:47.423" starttime="20170928 21:40:46.767"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status status="PASS" endtime="20170928 21:40:47.424" starttime="20170928 21:40:47.424"></status>
</kw>
<status status="FAIL" endtime="20170928 21:40:47.424" starttime="20170928 21:40:46.663"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:47.424" starttime="20170928 21:40:46.642"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:47.424" starttime="20170928 21:40:46.639"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:47.424" starttime="20170928 21:40:46.639"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:40:47.427" starttime="20170928 21:40:47.426"></status>
</kw>
<msg timestamp="20170928 21:40:47.427" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 21:40:47.427" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170928 21:40:47.427" starttime="20170928 21:40:47.426"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170928 21:40:47.427" starttime="20170928 21:40:47.427"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170928 21:40:47.447" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20170928 21:40:47.447" starttime="20170928 21:40:47.447"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170928 21:40:47.449" level="INFO">@{cmd_list} = [ ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/') | ('BMC_journalctl_nopager', 'journalctl --no-pager') | ('BMC_journalctl_pretty', 'journalctl -o json-pretty...</msg>
<status status="PASS" endtime="20170928 21:40:47.449" starttime="20170928 21:40:47.449"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170928 21:40:47.450" level="INFO">${logpath} = /home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_procinfo.txt</msg>
<status status="PASS" endtime="20170928 21:40:47.450" starttime="20170928 21:40:47.450"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:40:47.452" starttime="20170928 21:40:47.451"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170928 21:40:47.452" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status status="PASS" endtime="20170928 21:40:47.453" starttime="20170928 21:40:47.452"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170928 21:40:47.510" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170928 21:40:47.510" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170928 21:40:47.570" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170928 21:40:47.570" starttime="20170928 21:40:47.477"></status>
</kw>
<msg timestamp="20170928 21:40:47.570" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 21:40:47.570" level="INFO">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status status="PASS" endtime="20170928 21:40:47.570" starttime="20170928 21:40:47.453"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170928 21:40:47.571" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status status="PASS" endtime="20170928 21:40:47.571" starttime="20170928 21:40:47.571"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170928 21:40:47.572" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170928 21:40:47.572" starttime="20170928 21:40:47.571"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:40:47.579" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_procinfo.txt"&gt;/home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:40:47.579" starttime="20170928 21:40:47.579"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:47.580" starttime="20170928 21:40:47.578"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:47.580" starttime="20170928 21:40:47.572"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:47.580" starttime="20170928 21:40:47.451"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:47.580" starttime="20170928 21:40:47.450"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170928 21:40:47.581" level="INFO">${logpath} = /home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_proc_fd_active_list.txt</msg>
<status status="PASS" endtime="20170928 21:40:47.581" starttime="20170928 21:40:47.580"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:40:47.582" starttime="20170928 21:40:47.582"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170928 21:40:47.583" level="INFO">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status status="PASS" endtime="20170928 21:40:47.583" starttime="20170928 21:40:47.582"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170928 21:40:47.643" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170928 21:40:47.644" level="INFO">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg timestamp="20170928 21:40:48.145" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170928 21:40:48.145" starttime="20170928 21:40:47.608"></status>
</kw>
<msg timestamp="20170928 21:40:48.145" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 21:40:48.146" level="INFO">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Sep 28 21:41 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Sep 28 21:41 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status status="PASS" endtime="20170928 21:40:48.146" starttime="20170928 21:40:47.583"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170928 21:40:48.147" level="INFO">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Sep 28 21:41 0 -&gt; /dev/null
lrwx------    1 root     root            64 Sep 28 21:41 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status status="PASS" endtime="20170928 21:40:48.147" starttime="20170928 21:40:48.147"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170928 21:40:48.148" level="INFO">${stderr} = ls: /proc/2527/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status status="PASS" endtime="20170928 21:40:48.148" starttime="20170928 21:40:48.147"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:40:48.156" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_proc_fd_active_list.txt"&gt;/home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:40:48.156" starttime="20170928 21:40:48.155"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:48.156" starttime="20170928 21:40:48.154"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:48.156" starttime="20170928 21:40:48.148"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:48.157" starttime="20170928 21:40:47.581"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:48.157" starttime="20170928 21:40:47.580"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl_nopager', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170928 21:40:48.157" level="INFO">${logpath} = /home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_journalctl_nopager.txt</msg>
<status status="PASS" endtime="20170928 21:40:48.157" starttime="20170928 21:40:48.157"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:40:48.159" starttime="20170928 21:40:48.158"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170928 21:40:48.160" level="INFO">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status status="PASS" endtime="20170928 21:40:48.160" starttime="20170928 21:40:48.159"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170928 21:40:48.220" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170928 21:40:48.221" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170928 21:40:51.167" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170928 21:40:51.168" starttime="20170928 21:40:48.184"></status>
</kw>
<msg timestamp="20170928 21:40:51.168" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 21:40:51.172" level="INFO">${ret_values} = (u'-- Logs begin at Thu 2017-09-28 21:25:32 UTC, end at Thu 2017-09-28 21:41:00 UTC. --\nSep 28 21:25:32 witherspoon kernel: Booting Linux on physical CPU 0x0\nSep 28 21:25:32 witherspoon kernel: Linu...</msg>
<status status="PASS" endtime="20170928 21:40:51.172" starttime="20170928 21:40:48.160"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170928 21:40:51.174" level="INFO">${stdout} = -- Logs begin at Thu 2017-09-28 21:25:32 UTC, end at Thu 2017-09-28 21:41:00 UTC. --
Sep 28 21:25:32 witherspoon kernel: Booting Linux on physical CPU 0x0
Sep 28 21:25:32 witherspoon kernel: Linux ver...</msg>
<status status="PASS" endtime="20170928 21:40:51.174" starttime="20170928 21:40:51.173"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170928 21:40:51.175" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170928 21:40:51.175" starttime="20170928 21:40:51.174"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:40:51.184" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_journalctl_nopager.txt"&gt;/home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_journalctl_nopager.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:40:51.185" starttime="20170928 21:40:51.183"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:51.185" starttime="20170928 21:40:51.181"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:51.185" starttime="20170928 21:40:51.175"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:51.185" starttime="20170928 21:40:48.158"></status>
</kw>
<status status="PASS" endtime="20170928 21:40:51.185" starttime="20170928 21:40:48.157"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl_pretty', 'journalctl -o json-pretty')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170928 21:40:51.186" level="INFO">${logpath} = /home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_journalctl_pretty.txt</msg>
<status status="PASS" endtime="20170928 21:40:51.186" starttime="20170928 21:40:51.185"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:40:51.187" starttime="20170928 21:40:51.187"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170928 21:40:51.188" level="INFO">${cmd_buf} = BMC Execute Command  journalctl -o json-pretty  ignore_err=1</msg>
<status status="PASS" endtime="20170928 21:40:51.188" starttime="20170928 21:40:51.188"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl -o json-pretty</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170928 21:40:51.247" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170928 21:40:51.248" level="INFO">Executing command 'journalctl -o json-pretty'.</msg>
<msg timestamp="20170928 21:41:00.423" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170928 21:41:00.426" starttime="20170928 21:40:51.213"></status>
</kw>
<msg timestamp="20170928 21:41:00.426" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 21:41:00.472" level="INFO">${ret_values} = (u'{\n\t"__CURSOR" : "s=9e9fba8cd3ed468c84d15786970f3952;i=1;b=4bc1ae31dce94d849a229b00ccf25611;m=14fb99c;t=55a468c577b1d;x=c86999e29a3d1e2c",\n\t"__REALTIME_TIMESTAMP" : "1506633932307229",\n\t"__MON...</msg>
<status status="PASS" endtime="20170928 21:41:00.472" starttime="20170928 21:40:51.189"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170928 21:41:00.483" level="INFO">${stdout} = {
	"__CURSOR" : "s=9e9fba8cd3ed468c84d15786970f3952;i=1;b=4bc1ae31dce94d849a229b00ccf25611;m=14fb99c;t=55a468c577b1d;x=c86999e29a3d1e2c",
	"__REALTIME_TIMESTAMP" : "1506633932307229",
	"__MONOTONIC_TI...</msg>
<status status="PASS" endtime="20170928 21:41:00.484" starttime="20170928 21:41:00.473"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170928 21:41:00.485" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170928 21:41:00.485" starttime="20170928 21:41:00.484"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:41:00.514" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_journalctl_pretty.txt"&gt;/home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_journalctl_pretty.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:41:00.514" starttime="20170928 21:41:00.506"></status>
</kw>
<status status="PASS" endtime="20170928 21:41:00.514" starttime="20170928 21:41:00.494"></status>
</kw>
<status status="PASS" endtime="20170928 21:41:00.514" starttime="20170928 21:41:00.485"></status>
</kw>
<status status="PASS" endtime="20170928 21:41:00.514" starttime="20170928 21:40:51.186"></status>
</kw>
<status status="PASS" endtime="20170928 21:41:00.514" starttime="20170928 21:40:51.185"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170928 21:41:00.515" level="INFO">${logpath} = /home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_meminfo.txt</msg>
<status status="PASS" endtime="20170928 21:41:00.515" starttime="20170928 21:41:00.515"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:41:00.517" starttime="20170928 21:41:00.516"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170928 21:41:00.517" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status status="PASS" endtime="20170928 21:41:00.517" starttime="20170928 21:41:00.517"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170928 21:41:00.581" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170928 21:41:00.581" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170928 21:41:00.628" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170928 21:41:00.628" starttime="20170928 21:41:00.543"></status>
</kw>
<msg timestamp="20170928 21:41:00.628" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 21:41:00.628" level="INFO">${ret_values} = (u'MemTotal:         432244 kB\nMemFree:          221156 kB\nMemAvailable:     323396 kB\nBuffers:           31692 kB\nCached:            81184 kB\nSwapCached:            0 kB\nActive:           15816...</msg>
<status status="PASS" endtime="20170928 21:41:00.629" starttime="20170928 21:41:00.518"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170928 21:41:00.629" level="INFO">${stdout} = MemTotal:         432244 kB
MemFree:          221156 kB
MemAvailable:     323396 kB
Buffers:           31692 kB
Cached:            81184 kB
SwapCached:            0 kB
Active:           158164 kB
Inac...</msg>
<status status="PASS" endtime="20170928 21:41:00.629" starttime="20170928 21:41:00.629"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170928 21:41:00.630" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170928 21:41:00.630" starttime="20170928 21:41:00.630"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:41:00.637" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_meminfo.txt"&gt;/home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:41:00.638" starttime="20170928 21:41:00.637"></status>
</kw>
<status status="PASS" endtime="20170928 21:41:00.638" starttime="20170928 21:41:00.636"></status>
</kw>
<status status="PASS" endtime="20170928 21:41:00.638" starttime="20170928 21:41:00.630"></status>
</kw>
<status status="PASS" endtime="20170928 21:41:00.638" starttime="20170928 21:41:00.515"></status>
</kw>
<status status="PASS" endtime="20170928 21:41:00.638" starttime="20170928 21:41:00.514"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170928 21:41:00.639" level="INFO">${logpath} = /home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_proc_list.txt</msg>
<status status="PASS" endtime="20170928 21:41:00.639" starttime="20170928 21:41:00.638"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:41:00.640" starttime="20170928 21:41:00.640"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170928 21:41:00.641" level="INFO">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status status="PASS" endtime="20170928 21:41:00.641" starttime="20170928 21:41:00.641"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170928 21:41:00.701" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170928 21:41:00.702" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170928 21:41:01.000" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170928 21:41:01.001" starttime="20170928 21:41:00.665"></status>
</kw>
<msg timestamp="20170928 21:41:01.001" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 21:41:01.001" level="INFO">${ret_values} = (u'Mem: 211056K used, 221188K free, 8944K shrd, 31692K buff, 81188K cached\nCPU:   7% usr  15% sys   0% nic  76% idle   0% io   0% irq   0% sirq\nLoad average: 1.16 1.52 1.43 1/160 2531\n  PID  PPID U...</msg>
<status status="PASS" endtime="20170928 21:41:01.001" starttime="20170928 21:41:00.641"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170928 21:41:01.002" level="INFO">${stdout} = Mem: 211056K used, 221188K free, 8944K shrd, 31692K buff, 81188K cached
CPU:   7% usr  15% sys   0% nic  76% idle   0% io   0% irq   0% sirq
Load average: 1.16 1.52 1.43 1/160 2531
  PID  PPID USER   ...</msg>
<status status="PASS" endtime="20170928 21:41:01.002" starttime="20170928 21:41:01.002"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170928 21:41:01.003" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170928 21:41:01.003" starttime="20170928 21:41:01.002"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:41:01.012" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_proc_list.txt"&gt;/home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:41:01.012" starttime="20170928 21:41:01.011"></status>
</kw>
<status status="PASS" endtime="20170928 21:41:01.012" starttime="20170928 21:41:01.010"></status>
</kw>
<status status="PASS" endtime="20170928 21:41:01.012" starttime="20170928 21:41:01.003"></status>
</kw>
<status status="PASS" endtime="20170928 21:41:01.012" starttime="20170928 21:41:00.639"></status>
</kw>
<status status="PASS" endtime="20170928 21:41:01.012" starttime="20170928 21:41:00.638"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170928 21:41:01.013" level="INFO">${logpath} = /home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_dmesg.txt</msg>
<status status="PASS" endtime="20170928 21:41:01.013" starttime="20170928 21:41:01.013"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:41:01.015" starttime="20170928 21:41:01.014"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170928 21:41:01.015" level="INFO">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status status="PASS" endtime="20170928 21:41:01.015" starttime="20170928 21:41:01.015"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170928 21:41:01.076" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170928 21:41:01.078" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170928 21:41:01.135" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170928 21:41:01.135" starttime="20170928 21:41:01.040"></status>
</kw>
<msg timestamp="20170928 21:41:01.135" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 21:41:01.135" level="INFO">${ret_values} = (u'[    0.290000] 1e787000.vuart: ttyS5 at MMIO 0x1e787000 (irq = 22, base_baud = 1500000) is a 16550A\n[    0.290000] 1e783000.serial: ttyS0 at MMIO 0x1e783000 (irq = 23, base_baud = 1500000) is a 16...</msg>
<status status="PASS" endtime="20170928 21:41:01.135" starttime="20170928 21:41:01.016"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170928 21:41:01.136" level="INFO">${stdout} = [    0.290000] 1e787000.vuart: ttyS5 at MMIO 0x1e787000 (irq = 22, base_baud = 1500000) is a 16550A
[    0.290000] 1e783000.serial: ttyS0 at MMIO 0x1e783000 (irq = 23, base_baud = 1500000) is a 16550A...</msg>
<status status="PASS" endtime="20170928 21:41:01.136" starttime="20170928 21:41:01.136"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170928 21:41:01.137" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170928 21:41:01.137" starttime="20170928 21:41:01.137"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:41:01.144" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_dmesg.txt"&gt;/home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/20170928214036472247_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:41:01.145" starttime="20170928 21:41:01.144"></status>
</kw>
<status status="PASS" endtime="20170928 21:41:01.145" starttime="20170928 21:41:01.143"></status>
</kw>
<status status="PASS" endtime="20170928 21:41:01.145" starttime="20170928 21:41:01.137"></status>
</kw>
<status status="PASS" endtime="20170928 21:41:01.145" starttime="20170928 21:41:01.013"></status>
</kw>
<status status="PASS" endtime="20170928 21:41:01.145" starttime="20170928 21:41:01.013"></status>
</kw>
<status status="PASS" endtime="20170928 21:41:01.145" starttime="20170928 21:40:47.449"></status>
</kw>
<status status="PASS" endtime="20170928 21:41:01.145" starttime="20170928 21:40:47.448"></status>
</kw>
<status status="PASS" endtime="20170928 21:41:01.145" starttime="20170928 21:40:47.447"></status>
</kw>
<status status="PASS" endtime="20170928 21:41:01.145" starttime="20170928 21:40:47.447"></status>
</kw>
<status status="PASS" endtime="20170928 21:41:01.145" starttime="20170928 21:40:47.446"></status>
</kw>
<status status="PASS" endtime="20170928 21:41:01.145" starttime="20170928 21:40:47.428"></status>
</kw>
<status status="PASS" endtime="20170928 21:41:01.145" starttime="20170928 21:40:47.425"></status>
</kw>
<status status="PASS" endtime="20170928 21:41:01.146" starttime="20170928 21:40:47.424"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:41:01.147" starttime="20170928 21:41:01.147"></status>
</kw>
<msg timestamp="20170928 21:41:01.148" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 21:41:01.148" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170928 21:41:01.148" starttime="20170928 21:41:01.147"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170928 21:41:01.148" starttime="20170928 21:41:01.148"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170928 21:41:01.172" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170928 21:41:01.173" starttime="20170928 21:41:01.172"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170928 21:41:01.173" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170928 21:41:01.173" starttime="20170928 21:41:01.173"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170928 21:41:01.174" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170928 21:41:01.174" starttime="20170928 21:41:01.174"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170928 21:41:01.175" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170928 21:41:01.175" starttime="20170928 21:41:01.174"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170928 21:41:01.411" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170928 21:41:01.411" starttime="20170928 21:41:01.175"></status>
</kw>
<msg timestamp="20170928 21:41:01.412" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 21:41:01.412" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 21:41:01.412" starttime="20170928 21:41:01.175"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170928 21:41:01.413" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 21:41:01.413" starttime="20170928 21:41:01.412"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 21:41:01.414" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 21:41:01.414" starttime="20170928 21:41:01.413"></status>
</kw>
<status status="PASS" endtime="20170928 21:41:01.414" starttime="20170928 21:41:01.171"></status>
</kw>
<status status="PASS" endtime="20170928 21:41:01.414" starttime="20170928 21:41:01.170"></status>
</kw>
<status status="PASS" endtime="20170928 21:41:01.414" starttime="20170928 21:41:01.169"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170928 21:41:01.415" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" endtime="20170928 21:41:01.415" starttime="20170928 21:41:01.415"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:41:01.416" starttime="20170928 21:41:01.416"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170928 21:41:01.459" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170928 21:41:01.459" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170928 21:41:01.460" starttime="20170928 21:41:01.417"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:41:01.460" starttime="20170928 21:41:01.460"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170928 21:41:01.461" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170928 21:41:01.461" starttime="20170928 21:41:01.461"></status>
</kw>
<msg timestamp="20170928 21:41:01.461" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170928 21:41:01.461" starttime="20170928 21:41:01.167"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 21:41:01.462" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170928 21:41:01.462" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170928 21:41:01.463" starttime="20170928 21:41:01.462"></status>
</kw>
<msg timestamp="20170928 21:41:01.463" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170928 21:41:01.463" starttime="20170928 21:41:01.461"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170928 21:41:01.463" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170928 21:41:01.463" starttime="20170928 21:41:01.463"></status>
</kw>
<status status="PASS" endtime="20170928 21:41:01.464" starttime="20170928 21:41:01.167"></status>
</kw>
<status status="PASS" endtime="20170928 21:41:01.464" starttime="20170928 21:41:01.149"></status>
</kw>
<status status="PASS" endtime="20170928 21:41:01.464" starttime="20170928 21:41:01.146"></status>
</kw>
<status status="PASS" endtime="20170928 21:41:01.464" starttime="20170928 21:41:01.146"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:41:01.466" starttime="20170928 21:41:01.466"></status>
</kw>
<msg timestamp="20170928 21:41:01.466" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 21:41:01.466" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170928 21:41:01.466" starttime="20170928 21:41:01.465"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170928 21:41:01.467" starttime="20170928 21:41:01.466"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170928 21:41:01.486" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170928 21:41:01.487" starttime="20170928 21:41:01.486"></status>
</kw>
<status status="PASS" endtime="20170928 21:41:01.487" starttime="20170928 21:41:01.485"></status>
</kw>
<status status="PASS" endtime="20170928 21:41:01.487" starttime="20170928 21:41:01.467"></status>
</kw>
<status status="PASS" endtime="20170928 21:41:01.487" starttime="20170928 21:41:01.464"></status>
</kw>
<status status="PASS" endtime="20170928 21:41:01.487" starttime="20170928 21:41:01.464"></status>
</kw>
<status status="PASS" endtime="20170928 21:41:01.487" starttime="20170928 21:40:37.479"></status>
</kw>
<status status="PASS" endtime="20170928 21:41:01.487" starttime="20170928 21:40:37.476"></status>
</kw>
<status status="PASS" endtime="20170928 21:41:01.487" starttime="20170928 21:40:37.476"></status>
</kw>
<status status="PASS" endtime="20170928 21:41:01.487" starttime="20170928 21:40:37.476"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170928 21:41:01.498" starttime="20170928 21:41:01.498"></status>
</kw>
<status status="PASS" endtime="20170928 21:41:01.498" starttime="20170928 21:41:01.488"></status>
</kw>
<status status="PASS" endtime="20170928 21:41:01.498" starttime="20170928 21:40:37.475"></status>
</kw>
<status status="PASS" endtime="20170928 21:41:01.498" starttime="20170928 21:40:33.389"></status>
</kw>
<status status="PASS" endtime="20170928 21:41:01.498" starttime="20170928 21:40:33.389"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170928 21:41:01.500" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status status="PASS" endtime="20170928 21:41:01.500" starttime="20170928 21:41:01.499"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170928 21:41:01.501" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170928214036472247_BmcCodeUpdate/20170928214036472247_RESTBMCCodeUpdate/</msg>
<status status="PASS" endtime="20170928 21:41:01.501" starttime="20170928 21:41:01.500"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20170928 21:41:01.501" starttime="20170928 21:41:01.501"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170928 21:41:01.502" starttime="20170928 21:41:01.502"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170928 21:41:01.503" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld/logs"&gt;/home/fspcibld/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20170928 21:41:01.503" starttime="20170928 21:41:01.502"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170928 21:41:01.504" level="FAIL">File '/home/fspcibld/logs/test_history.txt' does not exist.</msg>
<status status="FAIL" endtime="20170928 21:41:01.504" starttime="20170928 21:41:01.504"></status>
</kw>
<msg timestamp="20170928 21:41:01.505" level="INFO">${exist} = False</msg>
<status status="PASS" endtime="20170928 21:41:01.505" starttime="20170928 21:41:01.503"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170928 21:41:01.506" html="yes" level="INFO">Created file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:41:01.506" starttime="20170928 21:41:01.505"></status>
</kw>
<status status="PASS" endtime="20170928 21:41:01.506" starttime="20170928 21:41:01.505"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170928 21:41:01.506" starttime="20170928 21:41:01.506"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170928 21:41:01.508" level="INFO">${cur_time} = 2017-09-28 21:41:01:507386</msg>
<status status="PASS" endtime="20170928 21:41:01.508" starttime="20170928 21:41:01.507"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170928 21:41:01.508" level="INFO">${cur_time} = 20170928214101507386</msg>
<status status="PASS" endtime="20170928 21:41:01.508" starttime="20170928 21:41:01.508"></status>
</kw>
<msg timestamp="20170928 21:41:01.508" level="INFO">${cur_time} = 20170928214101507386</msg>
<status status="PASS" endtime="20170928 21:41:01.508" starttime="20170928 21:41:01.507"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170928 21:41:01.510" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:41:01.510" starttime="20170928 21:41:01.509"></status>
</kw>
<status status="PASS" endtime="20170928 21:41:01.510" starttime="20170928 21:41:01.499"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Run Keywords</arg>
<arg>Delete Error Logs</arg>
<arg>AND</arg>
<arg>Delete All Dumps</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Delete Error Logs</arg>
<arg>AND</arg>
<arg>Delete All Dumps</arg>
</arguments>
<kw name="Delete Error Logs" library="utils">
<doc>Delete error logs.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}${/}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170928 21:41:01.516" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170928 21:41:01.517" starttime="20170928 21:41:01.516"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170928 21:41:01.517" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170928 21:41:01.517" starttime="20170928 21:41:01.517"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170928 21:41:01.518" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170928 21:41:01.519" starttime="20170928 21:41:01.518"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170928 21:41:01.519" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170928 21:41:01.520" starttime="20170928 21:41:01.519"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170928 21:41:01.730" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170928 21:41:01.730" starttime="20170928 21:41:01.521"></status>
</kw>
<msg timestamp="20170928 21:41:01.731" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 21:41:01.731" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 21:41:01.731" starttime="20170928 21:41:01.520"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170928 21:41:01.731" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 21:41:01.731" starttime="20170928 21:41:01.731"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 21:41:01.733" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 21:41:01.733" starttime="20170928 21:41:01.732"></status>
</kw>
<status status="PASS" endtime="20170928 21:41:01.733" starttime="20170928 21:41:01.515"></status>
</kw>
<status status="PASS" endtime="20170928 21:41:01.733" starttime="20170928 21:41:01.515"></status>
</kw>
<status status="PASS" endtime="20170928 21:41:01.733" starttime="20170928 21:41:01.514"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170928 21:41:01.734" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//list</msg>
<status status="PASS" endtime="20170928 21:41:01.734" starttime="20170928 21:41:01.734"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:41:01.735" starttime="20170928 21:41:01.735"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170928 21:41:01.798" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//list, headers=None json=None</msg>
<msg timestamp="20170928 21:41:01.798" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170928 21:41:01.798" starttime="20170928 21:41:01.736"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:41:01.799" starttime="20170928 21:41:01.798"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170928 21:41:01.799" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170928 21:41:01.799" starttime="20170928 21:41:01.799"></status>
</kw>
<msg timestamp="20170928 21:41:01.799" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170928 21:41:01.800" starttime="20170928 21:41:01.513"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20170928 21:41:01.800" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170928 21:41:01.800" starttime="20170928 21:41:01.800"></status>
</kw>
<status status="PASS" endtime="20170928 21:41:01.800" starttime="20170928 21:41:01.512"></status>
</kw>
<kw name="Delete All Dumps" library="dump_utils">
<doc>Delete all dumps.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${DUMP_ENTRY_URI}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170928 21:41:01.804" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170928 21:41:01.804" starttime="20170928 21:41:01.803"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170928 21:41:01.805" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170928 21:41:01.805" starttime="20170928 21:41:01.804"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170928 21:41:01.805" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170928 21:41:01.805" starttime="20170928 21:41:01.805"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170928 21:41:01.806" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170928 21:41:01.806" starttime="20170928 21:41:01.806"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170928 21:41:01.982" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170928 21:41:01.982" starttime="20170928 21:41:01.807"></status>
</kw>
<msg timestamp="20170928 21:41:01.983" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 21:41:01.983" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 21:41:01.983" starttime="20170928 21:41:01.806"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170928 21:41:01.983" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 21:41:01.983" starttime="20170928 21:41:01.983"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 21:41:01.984" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 21:41:01.984" starttime="20170928 21:41:01.984"></status>
</kw>
<status status="PASS" endtime="20170928 21:41:01.984" starttime="20170928 21:41:01.803"></status>
</kw>
<status status="PASS" endtime="20170928 21:41:01.984" starttime="20170928 21:41:01.802"></status>
</kw>
<status status="PASS" endtime="20170928 21:41:01.985" starttime="20170928 21:41:01.802"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170928 21:41:01.985" level="INFO">${base_uri} = /xyz/openbmc_project/dump/entry/list</msg>
<status status="PASS" endtime="20170928 21:41:01.985" starttime="20170928 21:41:01.985"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:41:01.986" starttime="20170928 21:41:01.986"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170928 21:41:02.028" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/dump/entry/list, headers=None json=None</msg>
<msg timestamp="20170928 21:41:02.029" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170928 21:41:02.029" starttime="20170928 21:41:01.986"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:41:02.029" starttime="20170928 21:41:02.029"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170928 21:41:02.030" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170928 21:41:02.030" starttime="20170928 21:41:02.030"></status>
</kw>
<msg timestamp="20170928 21:41:02.030" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170928 21:41:02.030" starttime="20170928 21:41:01.801"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20170928 21:41:02.031" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170928 21:41:02.031" starttime="20170928 21:41:02.030"></status>
</kw>
<status status="PASS" endtime="20170928 21:41:02.031" starttime="20170928 21:41:01.801"></status>
</kw>
<status status="PASS" endtime="20170928 21:41:02.031" starttime="20170928 21:41:01.511"></status>
</kw>
<status status="PASS" endtime="20170928 21:41:02.031" starttime="20170928 21:41:01.511"></status>
</kw>
<status status="PASS" endtime="20170928 21:41:02.031" starttime="20170928 21:40:33.388"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'PASS'</arg>
<arg>Check Error And Collect FFDC</arg>
</arguments>
<status status="PASS" endtime="20170928 21:41:02.032" starttime="20170928 21:41:02.032"></status>
</kw>
<status status="PASS" endtime="20170928 21:41:02.032" starttime="20170928 21:40:33.388"></status>
</kw>
<doc>Do a BMC code update by uploading image on BMC via REST.</doc>
<tags>
<tag>REST_BMC_Code_Update</tag>
</tags>
<status status="FAIL" endtime="20170928 21:41:02.032" critical="yes" starttime="20170928 21:40:12.215">SSLError: ('The write operation timed out',)</status>
</test>
<doc>Update the BMC code on a target BMC.
Execution Method:
python -m robot -v OPENBMC_HOST:&lt;hostname&gt;
-v IMAGE_FILE_PATH:&lt;path/*.tar&gt; bmc_code_update.robot</doc>
<status status="FAIL" endtime="20170928 21:41:02.037" starttime="20170928 21:40:10.991"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">REST_BMC_Code_Update</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Bmc Code Update" pass="0">Bmc Code Update</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
