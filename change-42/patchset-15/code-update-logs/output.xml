<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20161117 19:24:57.799" generator="Robot 3.0 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/code_update/update_bmc.robot" id="s1" name="Update Bmc">
<test id="s1-t1" name="Initiate Code update BMC">
<kw name="Check If File Exist" library="code_update_utils">
<arguments>
<arg>${FILE_PATH}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n PATH: ${filepath}</arg>
</arguments>
<msg timestamp="20161117 19:24:58.247" level="INFO">
PATH: /home/fspcibld/barreleye-20161117172843.all.tar</msg>
<status status="PASS" endtime="20161117 19:24:58.247" starttime="20161117 19:24:58.247"></status>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>msg=${filepath} doesn't exist [ ERROR ]</arg>
</arguments>
<msg timestamp="20161117 19:24:58.248" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/barreleye-20161117172843.all.tar"&gt;/home/fspcibld/barreleye-20161117172843.all.tar&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20161117 19:24:58.248" starttime="20161117 19:24:58.248"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FILE_PATH}</arg>
<arg>${filepath}</arg>
</arguments>
<msg timestamp="20161117 19:24:58.249" level="INFO">${FILE_PATH} = /home/fspcibld/barreleye-20161117172843.all.tar</msg>
<status status="PASS" endtime="20161117 19:24:58.249" starttime="20161117 19:24:58.248"></status>
</kw>
<status status="PASS" endtime="20161117 19:24:58.249" starttime="20161117 19:24:58.246"></status>
</kw>
<kw name="System Readiness Test" library="code_update_utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Verify Ping and REST Authentication</arg>
</arguments>
<assign>
<var>${l_status}</var>
</assign>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161117 19:24:58.251" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20161117 19:24:58.251" starttime="20161117 19:24:58.251"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161117 19:24:58.254" level="INFO">Running command 'ping -c 4 9.3.29.119 2&gt;&amp;1'.</msg>
<msg timestamp="20161117 19:25:01.284" level="INFO">${RC} = 0</msg>
<msg timestamp="20161117 19:25:01.285" level="INFO">${output} = PING 9.3.29.119 (9.3.29.119) 56(84) bytes of data.
64 bytes from 9.3.29.119: icmp_seq=1 ttl=62 time=1.62 ms
64 bytes from 9.3.29.119: icmp_seq=2 ttl=62 time=0.775 ms
64 bytes from 9.3.29.119: icmp_seq...</msg>
<status status="PASS" endtime="20161117 19:25:01.285" starttime="20161117 19:24:58.251"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161117 19:25:01.288" level="INFO">RC: 0
Output:
PING 9.3.29.119 (9.3.29.119) 56(84) bytes of data.
64 bytes from 9.3.29.119: icmp_seq=1 ttl=62 time=1.62 ms
64 bytes from 9.3.29.119: icmp_seq=2 ttl=62 time=0.775 ms
64 bytes from 9.3.29.119: icmp_seq=3 ttl=62 time=1.45 ms
64 bytes from 9.3.29.119: icmp_seq=4 ttl=62 time=1.48 ms

--- 9.3.29.119 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3020ms
rtt min/avg/max/mdev = 0.775/1.335/1.623/0.332 ms</msg>
<status status="PASS" endtime="20161117 19:25:01.288" starttime="20161117 19:25:01.287"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161117 19:25:01.290" starttime="20161117 19:25:01.289"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:01.290" starttime="20161117 19:24:58.250"></status>
</kw>
<msg timestamp="20161117 19:25:01.290" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20161117 19:25:01.290" starttime="20161117 19:24:58.250"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20161117 19:25:01.294" starttime="20161117 19:25:01.290"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161117 19:25:01.301" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.29.119, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161117 19:25:01.302" starttime="20161117 19:25:01.300"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161117 19:25:01.304" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161117 19:25:01.304" starttime="20161117 19:25:01.302"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161117 19:25:01.305" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161117 19:25:01.305" starttime="20161117 19:25:01.304"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161117 19:25:01.306" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161117 19:25:01.306" starttime="20161117 19:25:01.305"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161117 19:25:13.291" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161117 19:25:13.292" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161117 19:25:13.292" starttime="20161117 19:25:01.306"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161117 19:25:13.293" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161117 19:25:13.293" starttime="20161117 19:25:13.292"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:13.294" starttime="20161117 19:25:01.299"></status>
</kw>
<msg timestamp="20161117 19:25:13.294" level="INFO">${l_rest} = True</msg>
<status status="PASS" endtime="20161117 19:25:13.294" starttime="20161117 19:25:01.299"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<status status="PASS" endtime="20161117 19:25:13.299" starttime="20161117 19:25:13.294"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20161117 19:25:13.301" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20161117 19:25:13.302" starttime="20161117 19:25:13.300"></status>
</kw>
<msg timestamp="20161117 19:25:13.302" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20161117 19:25:13.302" starttime="20161117 19:25:13.300"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20161117 19:25:13.308" starttime="20161117 19:25:13.306"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:13.308" starttime="20161117 19:25:13.302"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20161117 19:25:13.311" starttime="20161117 19:25:13.309"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20161117 19:25:13.312" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20161117 19:25:13.312" starttime="20161117 19:25:13.311"></status>
</kw>
<msg timestamp="20161117 19:25:13.312" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20161117 19:25:13.312" starttime="20161117 19:25:13.311"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20161117 19:25:13.315" starttime="20161117 19:25:13.315"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:13.315" starttime="20161117 19:25:13.315"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:13.315" starttime="20161117 19:25:13.312"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20161117 19:25:13.316" level="INFO">Logging into '9.3.29.119:22' as 'root'.</msg>
<msg timestamp="20161117 19:25:16.235" level="INFO">Read output: 7[r[999;999H[6n</msg>
<status status="PASS" endtime="20161117 19:25:16.236" starttime="20161117 19:25:13.316"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:16.236" starttime="20161117 19:25:13.299"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>hostname</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${system}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161117 19:25:16.237" level="INFO">Executing command 'hostname'.</msg>
<msg timestamp="20161117 19:25:16.296" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161117 19:25:16.297" level="INFO">${system} = barreleye</msg>
<msg timestamp="20161117 19:25:16.297" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161117 19:25:16.297" starttime="20161117 19:25:16.236"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161117 19:25:16.298" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161117 19:25:16.298" starttime="20161117 19:25:16.297"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:16.298" starttime="20161117 19:24:58.250"></status>
</kw>
<msg timestamp="20161117 19:25:16.298" level="INFO">${l_status} = True</msg>
<status status="PASS" endtime="20161117 19:25:16.298" starttime="20161117 19:24:58.249"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_status}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=System not in ideal state to use [ERROR]</arg>
</arguments>
<status status="PASS" endtime="20161117 19:25:16.303" starttime="20161117 19:25:16.299"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:16.303" starttime="20161117 19:24:58.249"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Validate BMC Version</arg>
<arg>before</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Validate BMC Version" library="code_update_utils">
<arguments>
<arg>before</arg>
</arguments>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20161117 19:25:16.307" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20161117 19:25:16.307" starttime="20161117 19:25:16.306"></status>
</kw>
<msg timestamp="20161117 19:25:16.307" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20161117 19:25:16.307" starttime="20161117 19:25:16.306"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20161117 19:25:16.310" starttime="20161117 19:25:16.310"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:16.310" starttime="20161117 19:25:16.307"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20161117 19:25:16.313" starttime="20161117 19:25:16.311"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20161117 19:25:16.314" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20161117 19:25:16.314" starttime="20161117 19:25:16.314"></status>
</kw>
<msg timestamp="20161117 19:25:16.314" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20161117 19:25:16.314" starttime="20161117 19:25:16.313"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20161117 19:25:16.317" starttime="20161117 19:25:16.317"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:16.317" starttime="20161117 19:25:16.317"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:16.318" starttime="20161117 19:25:16.314"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20161117 19:25:16.318" level="INFO">Logging into '9.3.29.119:22' as 'root'.</msg>
<msg timestamp="20161117 19:25:18.713" level="INFO">Read output: 7[r[999;999H[6n</msg>
<status status="PASS" endtime="20161117 19:25:18.713" starttime="20161117 19:25:16.318"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:18.714" starttime="20161117 19:25:16.305"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat /etc/version</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${version}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161117 19:25:18.715" level="INFO">Executing command 'cat /etc/version'.</msg>
<msg timestamp="20161117 19:25:18.784" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161117 19:25:18.784" level="INFO">${version} = 20161117171333</msg>
<msg timestamp="20161117 19:25:18.784" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161117 19:25:18.784" starttime="20161117 19:25:18.714"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161117 19:25:18.785" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161117 19:25:18.785" starttime="20161117 19:25:18.784"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${args}' == 'before'</arg>
<arg>Should not Contain</arg>
<arg>${FILE_PATH}</arg>
<arg>${version}</arg>
<arg>msg=Same version already installed</arg>
<arg>ELSE</arg>
<arg>Should Contain</arg>
<arg>${FILE_PATH}</arg>
<arg>${version}</arg>
<arg>msg=Code update Failed</arg>
</arguments>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${FILE_PATH}</arg>
<arg>${version}</arg>
<arg>msg=Same version already installed</arg>
</arguments>
<status status="PASS" endtime="20161117 19:25:18.790" starttime="20161117 19:25:18.789"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:18.790" starttime="20161117 19:25:18.785"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:18.790" starttime="20161117 19:25:16.305"></status>
</kw>
<msg timestamp="20161117 19:25:18.790" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20161117 19:25:18.790" starttime="20161117 19:25:16.304"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Pass Execution</arg>
<arg>Same Driver version installed</arg>
</arguments>
<status status="PASS" endtime="20161117 19:25:18.794" starttime="20161117 19:25:18.790"></status>
</kw>
<kw name="Initiate Power Off" library="utils">
<doc>Initiates the power off and waits until the Is Power Off</doc>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161117 19:25:18.796" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161117 19:25:18.796" starttime="20161117 19:25:18.795"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161117 19:25:18.797" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161117 19:25:18.797" starttime="20161117 19:25:18.796"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/control/chassis0/</arg>
<arg>powerOff</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161117 19:25:18.799" level="INFO">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status status="PASS" endtime="20161117 19:25:18.799" starttime="20161117 19:25:18.798"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161117 19:25:18.800" level="INFO">${base_uri} = /org/openbmc/control/chassis0//action/powerOff</msg>
<status status="PASS" endtime="20161117 19:25:18.800" starttime="20161117 19:25:18.800"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161117 19:25:18.801" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161117 19:25:18.801" starttime="20161117 19:25:18.800"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161117 19:25:18.801" starttime="20161117 19:25:18.801"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161117 19:25:18.803" level="INFO">${msg} = URI:https://9.3.29.119/org/openbmc/control/chassis0//action/powerOff, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161117 19:25:18.803" starttime="20161117 19:25:18.802"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161117 19:25:18.804" level="INFO">URI:https://9.3.29.119/org/openbmc/control/chassis0//action/powerOff, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161117 19:25:18.804" starttime="20161117 19:25:18.804"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:18.804" starttime="20161117 19:25:18.803"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:18.804" starttime="20161117 19:25:18.801"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161117 19:25:18.805" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.29.119, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161117 19:25:18.806" starttime="20161117 19:25:18.805"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161117 19:25:18.806" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161117 19:25:18.806" starttime="20161117 19:25:18.806"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161117 19:25:18.807" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161117 19:25:18.807" starttime="20161117 19:25:18.807"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161117 19:25:18.808" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161117 19:25:18.808" starttime="20161117 19:25:18.807"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161117 19:25:19.142" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161117 19:25:19.142" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161117 19:25:19.142" starttime="20161117 19:25:18.808"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161117 19:25:19.143" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161117 19:25:19.144" starttime="20161117 19:25:19.143"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:19.144" starttime="20161117 19:25:18.805"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161117 19:25:19.438" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/powerOff, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161117 19:25:19.438" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161117 19:25:19.438" starttime="20161117 19:25:19.144"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161117 19:25:19.440" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161117 19:25:19.440" starttime="20161117 19:25:19.439"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161117 19:25:19.442" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161117 19:25:19.442" starttime="20161117 19:25:19.442"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:19.442" starttime="20161117 19:25:19.441"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:19.443" starttime="20161117 19:25:19.438"></status>
</kw>
<msg timestamp="20161117 19:25:19.443" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161117 19:25:19.443" starttime="20161117 19:25:18.799"></status>
</kw>
<msg timestamp="20161117 19:25:19.443" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161117 19:25:19.443" starttime="20161117 19:25:18.797"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161117 19:25:19.444" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161117 19:25:19.444" starttime="20161117 19:25:19.444"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>1 min</arg>
<arg>10 sec</arg>
<arg>Is Power Off</arg>
</arguments>
<kw name="Is Power Off" library="utils">
<kw name="Get Power State" library="utils">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161117 19:25:19.447" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161117 19:25:19.447" starttime="20161117 19:25:19.446"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161117 19:25:19.448" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161117 19:25:19.448" starttime="20161117 19:25:19.447"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161117 19:25:19.449" level="INFO">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status status="PASS" endtime="20161117 19:25:19.449" starttime="20161117 19:25:19.449"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161117 19:25:19.451" level="INFO">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status status="PASS" endtime="20161117 19:25:19.451" starttime="20161117 19:25:19.450"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161117 19:25:19.451" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161117 19:25:19.451" starttime="20161117 19:25:19.451"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161117 19:25:19.453" starttime="20161117 19:25:19.452"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161117 19:25:19.455" level="INFO">${msg} = URI:https://9.3.29.119/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161117 19:25:19.455" starttime="20161117 19:25:19.454"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161117 19:25:19.457" level="INFO">URI:https://9.3.29.119/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161117 19:25:19.457" starttime="20161117 19:25:19.456"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:19.457" starttime="20161117 19:25:19.456"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:19.457" starttime="20161117 19:25:19.453"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161117 19:25:19.459" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.29.119, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161117 19:25:19.459" starttime="20161117 19:25:19.458"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161117 19:25:19.459" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161117 19:25:19.459" starttime="20161117 19:25:19.459"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161117 19:25:19.460" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161117 19:25:19.460" starttime="20161117 19:25:19.460"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161117 19:25:19.461" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161117 19:25:19.461" starttime="20161117 19:25:19.460"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161117 19:25:20.251" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161117 19:25:20.251" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161117 19:25:20.251" starttime="20161117 19:25:19.461"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161117 19:25:20.252" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161117 19:25:20.252" starttime="20161117 19:25:20.252"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:20.252" starttime="20161117 19:25:19.457"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161117 19:25:25.292" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161117 19:25:25.292" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161117 19:25:25.292" starttime="20161117 19:25:20.252"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161117 19:25:25.295" level="INFO">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161117 19:25:25.295" starttime="20161117 19:25:25.294"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161117 19:25:25.297" level="INFO">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161117 19:25:25.297" starttime="20161117 19:25:25.296"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:25.297" starttime="20161117 19:25:25.295"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:25.298" starttime="20161117 19:25:25.293"></status>
</kw>
<msg timestamp="20161117 19:25:25.299" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161117 19:25:25.299" starttime="20161117 19:25:19.449"></status>
</kw>
<msg timestamp="20161117 19:25:25.300" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161117 19:25:25.300" starttime="20161117 19:25:19.448"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161117 19:25:25.301" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161117 19:25:25.301" starttime="20161117 19:25:25.300"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161117 19:25:25.302" level="INFO">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161117 19:25:25.302" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161117 19:25:25.302" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': 0}</msg>
<status status="PASS" endtime="20161117 19:25:25.302" starttime="20161117 19:25:25.301"></status>
</kw>
<msg timestamp="20161117 19:25:25.302" level="INFO">${state} = 0</msg>
<status status="PASS" endtime="20161117 19:25:25.302" starttime="20161117 19:25:19.446"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161117 19:25:25.303" starttime="20161117 19:25:25.303"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:25.304" starttime="20161117 19:25:19.445"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:25.304" starttime="20161117 19:25:19.445"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:25.304" starttime="20161117 19:25:18.795"></status>
</kw>
<kw name="Set Policy Setting" library="code_update_utils">
<doc>Set the given test policy</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20161117 19:25:25.306" level="INFO">${valueDict} = {u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20161117 19:25:25.306" starttime="20161117 19:25:25.305"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161117 19:25:25.307" level="INFO">${base_uri} = /org/openbmc/settings/host0</msg>
<status status="PASS" endtime="20161117 19:25:25.307" starttime="20161117 19:25:25.307"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161117 19:25:25.310" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20161117 19:25:25.310" starttime="20161117 19:25:25.309"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161117 19:25:25.310" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161117 19:25:25.310" starttime="20161117 19:25:25.310"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161117 19:25:25.311" starttime="20161117 19:25:25.311"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161117 19:25:25.314" level="INFO">${msg} = URI:https://9.3.29.119/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': u'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161117 19:25:25.314" starttime="20161117 19:25:25.313"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161117 19:25:25.315" level="INFO">URI:https://9.3.29.119/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': u'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161117 19:25:25.316" starttime="20161117 19:25:25.315"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:25.316" starttime="20161117 19:25:25.314"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:25.316" starttime="20161117 19:25:25.312"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161117 19:25:25.318" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.29.119, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161117 19:25:25.318" starttime="20161117 19:25:25.317"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161117 19:25:25.319" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161117 19:25:25.319" starttime="20161117 19:25:25.319"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161117 19:25:25.319" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161117 19:25:25.320" starttime="20161117 19:25:25.319"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161117 19:25:25.320" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161117 19:25:25.320" starttime="20161117 19:25:25.320"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161117 19:25:25.672" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161117 19:25:25.672" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161117 19:25:25.672" starttime="20161117 19:25:25.320"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161117 19:25:25.673" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161117 19:25:25.673" starttime="20161117 19:25:25.673"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:25.674" starttime="20161117 19:25:25.316"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161117 19:25:25.885" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, data={"data": "RESTORE_LAST_STATE"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20161117 19:25:25.885" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161117 19:25:25.885" starttime="20161117 19:25:25.674"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161117 19:25:25.887" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161117 19:25:25.887" starttime="20161117 19:25:25.887"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161117 19:25:25.889" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161117 19:25:25.889" starttime="20161117 19:25:25.888"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:25.889" starttime="20161117 19:25:25.888"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:25.889" starttime="20161117 19:25:25.886"></status>
</kw>
<msg timestamp="20161117 19:25:25.890" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161117 19:25:25.890" starttime="20161117 19:25:25.308"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161117 19:25:25.891" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161117 19:25:25.891" starttime="20161117 19:25:25.890"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20161117 19:25:25.892" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161117 19:25:25.892" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161117 19:25:25.892" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20161117 19:25:25.892" starttime="20161117 19:25:25.891"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:25.892" starttime="20161117 19:25:25.306"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161117 19:25:25.894" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20161117 19:25:25.894" starttime="20161117 19:25:25.893"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161117 19:25:25.896" level="INFO">${msg} = URI:https://9.3.29.119/org/openbmc/settings/host0/attr/power_policy, method:Get, args:{}</msg>
<status status="PASS" endtime="20161117 19:25:25.896" starttime="20161117 19:25:25.895"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161117 19:25:25.897" level="INFO">URI:https://9.3.29.119/org/openbmc/settings/host0/attr/power_policy, method:Get, args:{}</msg>
<status status="PASS" endtime="20161117 19:25:25.897" starttime="20161117 19:25:25.896"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:25.897" starttime="20161117 19:25:25.896"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:25.897" starttime="20161117 19:25:25.894"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161117 19:25:25.899" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.29.119, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161117 19:25:25.900" starttime="20161117 19:25:25.898"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161117 19:25:25.900" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161117 19:25:25.900" starttime="20161117 19:25:25.900"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161117 19:25:25.901" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161117 19:25:25.901" starttime="20161117 19:25:25.901"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161117 19:25:25.902" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161117 19:25:25.902" starttime="20161117 19:25:25.901"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161117 19:25:26.234" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161117 19:25:26.234" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161117 19:25:26.234" starttime="20161117 19:25:25.902"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161117 19:25:26.235" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161117 19:25:26.235" starttime="20161117 19:25:26.234"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:26.235" starttime="20161117 19:25:25.898"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161117 19:25:26.336" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, headers=None </msg>
<msg timestamp="20161117 19:25:26.336" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161117 19:25:26.337" starttime="20161117 19:25:26.235"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161117 19:25:26.337" level="INFO">${msg} = Response code:200, Content:{
  "data": "RESTORE_LAST_STATE", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161117 19:25:26.338" starttime="20161117 19:25:26.337"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161117 19:25:26.338" level="INFO">Response code:200, Content:{
  "data": "RESTORE_LAST_STATE", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161117 19:25:26.338" starttime="20161117 19:25:26.338"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:26.339" starttime="20161117 19:25:26.338"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:26.339" starttime="20161117 19:25:26.337"></status>
</kw>
<msg timestamp="20161117 19:25:26.339" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161117 19:25:26.339" starttime="20161117 19:25:25.893"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161117 19:25:26.340" level="INFO">To JSON using : content={
  "data": "RESTORE_LAST_STATE", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161117 19:25:26.340" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161117 19:25:26.340" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20161117 19:25:26.340" starttime="20161117 19:25:26.340"></status>
</kw>
<msg timestamp="20161117 19:25:26.340" level="INFO">${currentPolicy} = RESTORE_LAST_STATE</msg>
<status status="PASS" endtime="20161117 19:25:26.340" starttime="20161117 19:25:25.892"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${currentPolicy}</arg>
<arg>${policy}</arg>
</arguments>
<status status="PASS" endtime="20161117 19:25:26.341" starttime="20161117 19:25:26.341"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:26.341" starttime="20161117 19:25:25.304"></status>
</kw>
<kw name="Prepare For Update" library="code_update_utils">
<doc>Switch to update mode in progress. This method calls</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161117 19:25:26.342" level="INFO">${data} = {u'data': []}</msg>
<status status="PASS" endtime="20161117 19:25:26.342" starttime="20161117 19:25:26.342"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${BMC_PREP_METHOD}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161117 19:25:26.343" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc/action/PrepareForUpdate</msg>
<status status="PASS" endtime="20161117 19:25:26.343" starttime="20161117 19:25:26.343"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161117 19:25:26.344" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161117 19:25:26.344" starttime="20161117 19:25:26.343"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161117 19:25:26.344" starttime="20161117 19:25:26.344"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161117 19:25:26.346" level="INFO">${msg} = URI:https://9.3.29.119/org/openbmc/control/flash/bmc/action/PrepareForUpdate, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161117 19:25:26.346" starttime="20161117 19:25:26.345"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161117 19:25:26.346" level="INFO">URI:https://9.3.29.119/org/openbmc/control/flash/bmc/action/PrepareForUpdate, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161117 19:25:26.347" starttime="20161117 19:25:26.346"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:26.347" starttime="20161117 19:25:26.346"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:26.347" starttime="20161117 19:25:26.344"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161117 19:25:26.348" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.29.119, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161117 19:25:26.348" starttime="20161117 19:25:26.348"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161117 19:25:26.349" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161117 19:25:26.349" starttime="20161117 19:25:26.349"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161117 19:25:26.350" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161117 19:25:26.350" starttime="20161117 19:25:26.349"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161117 19:25:26.350" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161117 19:25:26.350" starttime="20161117 19:25:26.350"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161117 19:25:26.686" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161117 19:25:26.687" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161117 19:25:26.687" starttime="20161117 19:25:26.350"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161117 19:25:26.688" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161117 19:25:26.688" starttime="20161117 19:25:26.687"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:26.688" starttime="20161117 19:25:26.347"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161117 19:25:27.097" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc/action/PrepareForUpdate, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161117 19:25:27.098" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161117 19:25:27.098" starttime="20161117 19:25:26.688"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161117 19:25:27.100" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161117 19:25:27.100" starttime="20161117 19:25:27.099"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161117 19:25:27.101" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161117 19:25:27.101" starttime="20161117 19:25:27.101"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:27.101" starttime="20161117 19:25:27.100"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:27.102" starttime="20161117 19:25:27.098"></status>
</kw>
<msg timestamp="20161117 19:25:27.102" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161117 19:25:27.102" starttime="20161117 19:25:26.342"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161117 19:25:27.103" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161117 19:25:27.103" starttime="20161117 19:25:27.103"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${BMC_UPD_ATTR}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161117 19:25:27.107" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc</msg>
<status status="PASS" endtime="20161117 19:25:27.107" starttime="20161117 19:25:27.105"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161117 19:25:27.109" level="INFO">${msg} = URI:https://9.3.29.119/org/openbmc/control/flash/bmc, method:Get, args:{}</msg>
<status status="PASS" endtime="20161117 19:25:27.109" starttime="20161117 19:25:27.108"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161117 19:25:27.110" level="INFO">URI:https://9.3.29.119/org/openbmc/control/flash/bmc, method:Get, args:{}</msg>
<status status="PASS" endtime="20161117 19:25:27.111" starttime="20161117 19:25:27.110"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:27.111" starttime="20161117 19:25:27.110"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:27.111" starttime="20161117 19:25:27.107"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161117 19:25:27.113" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.29.119, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161117 19:25:27.114" starttime="20161117 19:25:27.113"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161117 19:25:27.115" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161117 19:25:27.115" starttime="20161117 19:25:27.114"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161117 19:25:27.116" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161117 19:25:27.116" starttime="20161117 19:25:27.115"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161117 19:25:27.117" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161117 19:25:27.117" starttime="20161117 19:25:27.116"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161117 19:25:27.603" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161117 19:25:27.604" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161117 19:25:27.604" starttime="20161117 19:25:27.117"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161117 19:25:27.605" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161117 19:25:27.605" starttime="20161117 19:25:27.604"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:27.605" starttime="20161117 19:25:27.111"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161117 19:25:27.827" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc, headers=None </msg>
<msg timestamp="20161117 19:25:27.828" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161117 19:25:27.828" starttime="20161117 19:25:27.606"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161117 19:25:27.830" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "auto_apply": 0, 
    "clear_persistent_files": 0, 
    "filename": "", 
    "preserve_network_settings": 1, 
    "restore_application_defaults": 0, 
    "...</msg>
<status status="PASS" endtime="20161117 19:25:27.830" starttime="20161117 19:25:27.829"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161117 19:25:27.831" level="INFO">Response code:200, Content:{
  "data": {
    "auto_apply": 0, 
    "clear_persistent_files": 0, 
    "filename": "", 
    "preserve_network_settings": 1, 
    "restore_application_defaults": 0, 
    "status": "Switch to update mode in progress", 
    "update_kernel_and_apps": 0
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161117 19:25:27.832" starttime="20161117 19:25:27.831"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:27.832" starttime="20161117 19:25:27.830"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:27.832" starttime="20161117 19:25:27.828"></status>
</kw>
<msg timestamp="20161117 19:25:27.833" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161117 19:25:27.833" starttime="20161117 19:25:27.104"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161117 19:25:27.835" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161117 19:25:27.835" starttime="20161117 19:25:27.834"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161117 19:25:27.836" level="INFO">To JSON using : content={
  "data": {
    "auto_apply": 0, 
    "clear_persistent_files": 0, 
    "filename": "", 
    "preserve_network_settings": 1, 
    "restore_application_defaults": 0, 
    "status": "Switch to update mode in progress", 
    "update_kernel_and_apps": 0
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161117 19:25:27.836" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161117 19:25:27.836" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Switch to update mode in progress', u'update_kernel_and_apps': 0, u'clear_persistent_files': 0, u'auto_apply': 0, u'filename': u'', u'p...</msg>
<status status="PASS" endtime="20161117 19:25:27.836" starttime="20161117 19:25:27.835"></status>
</kw>
<msg timestamp="20161117 19:25:27.837" level="INFO">${data} = {u'status': u'Switch to update mode in progress', u'update_kernel_and_apps': 0, u'clear_persistent_files': 0, u'auto_apply': 0, u'filename': u'', u'preserve_network_settings': 1, u'restore_application...</msg>
<status status="PASS" endtime="20161117 19:25:27.837" starttime="20161117 19:25:27.104"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${data['status']}</arg>
<arg>Switch to update mode in progress</arg>
</arguments>
<status status="PASS" endtime="20161117 19:25:27.838" starttime="20161117 19:25:27.837"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:27.838" starttime="20161117 19:25:26.341"></status>
</kw>
<kw name="Check If BMC is Up" library="utils">
<doc>Wait for Host to be online. Checks every X seconds</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${max_timeout}</arg>
<arg>${interval}</arg>
<arg>Verify Ping and REST Authentication</arg>
</arguments>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161117 19:25:27.841" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20161117 19:25:27.841" starttime="20161117 19:25:27.841"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161117 19:25:27.850" level="INFO">Running command 'ping -c 4 9.3.29.119 2&gt;&amp;1'.</msg>
<msg timestamp="20161117 19:25:30.855" level="INFO">${RC} = 0</msg>
<msg timestamp="20161117 19:25:30.855" level="INFO">${output} = PING 9.3.29.119 (9.3.29.119) 56(84) bytes of data.
64 bytes from 9.3.29.119: icmp_seq=1 ttl=62 time=1.05 ms
64 bytes from 9.3.29.119: icmp_seq=2 ttl=62 time=0.891 ms
64 bytes from 9.3.29.119: icmp_seq...</msg>
<status status="PASS" endtime="20161117 19:25:30.855" starttime="20161117 19:25:27.842"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161117 19:25:30.859" level="INFO">RC: 0
Output:
PING 9.3.29.119 (9.3.29.119) 56(84) bytes of data.
64 bytes from 9.3.29.119: icmp_seq=1 ttl=62 time=1.05 ms
64 bytes from 9.3.29.119: icmp_seq=2 ttl=62 time=0.891 ms
64 bytes from 9.3.29.119: icmp_seq=3 ttl=62 time=0.860 ms
64 bytes from 9.3.29.119: icmp_seq=4 ttl=62 time=0.874 ms

--- 9.3.29.119 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3002ms
rtt min/avg/max/mdev = 0.860/0.918/1.050/0.085 ms</msg>
<status status="PASS" endtime="20161117 19:25:30.859" starttime="20161117 19:25:30.858"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161117 19:25:30.860" starttime="20161117 19:25:30.859"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:30.860" starttime="20161117 19:25:27.841"></status>
</kw>
<msg timestamp="20161117 19:25:30.860" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20161117 19:25:30.860" starttime="20161117 19:25:27.841"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20161117 19:25:30.866" starttime="20161117 19:25:30.861"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161117 19:25:30.868" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.29.119, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161117 19:25:30.869" starttime="20161117 19:25:30.867"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161117 19:25:30.870" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161117 19:25:30.870" starttime="20161117 19:25:30.870"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161117 19:25:30.870" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161117 19:25:30.870" starttime="20161117 19:25:30.870"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161117 19:25:30.871" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161117 19:25:30.871" starttime="20161117 19:25:30.871"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161117 19:25:31.212" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161117 19:25:31.212" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161117 19:25:31.213" starttime="20161117 19:25:30.871"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161117 19:25:31.213" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161117 19:25:31.213" starttime="20161117 19:25:31.213"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:31.213" starttime="20161117 19:25:30.866"></status>
</kw>
<msg timestamp="20161117 19:25:31.213" level="INFO">${l_rest} = True</msg>
<status status="PASS" endtime="20161117 19:25:31.213" starttime="20161117 19:25:30.866"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<status status="PASS" endtime="20161117 19:25:31.216" starttime="20161117 19:25:31.214"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20161117 19:25:31.218" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20161117 19:25:31.218" starttime="20161117 19:25:31.217"></status>
</kw>
<msg timestamp="20161117 19:25:31.218" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20161117 19:25:31.218" starttime="20161117 19:25:31.217"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20161117 19:25:31.222" starttime="20161117 19:25:31.222"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:31.222" starttime="20161117 19:25:31.218"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20161117 19:25:31.226" starttime="20161117 19:25:31.222"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20161117 19:25:31.227" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20161117 19:25:31.227" starttime="20161117 19:25:31.226"></status>
</kw>
<msg timestamp="20161117 19:25:31.227" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20161117 19:25:31.227" starttime="20161117 19:25:31.226"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20161117 19:25:31.233" starttime="20161117 19:25:31.232"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:31.233" starttime="20161117 19:25:31.231"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:31.233" starttime="20161117 19:25:31.227"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20161117 19:25:31.233" level="INFO">Logging into '9.3.29.119:22' as 'root'.</msg>
<msg timestamp="20161117 19:25:33.439" level="INFO">Read output: 7[r[999;999H[6n</msg>
<status status="PASS" endtime="20161117 19:25:33.439" starttime="20161117 19:25:31.233"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:33.440" starttime="20161117 19:25:31.216"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>hostname</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${system}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161117 19:25:33.441" level="INFO">Executing command 'hostname'.</msg>
<msg timestamp="20161117 19:25:33.514" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161117 19:25:33.514" level="INFO">${system} = barreleye</msg>
<msg timestamp="20161117 19:25:33.514" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161117 19:25:33.514" starttime="20161117 19:25:33.440"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161117 19:25:33.515" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161117 19:25:33.515" starttime="20161117 19:25:33.514"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:33.515" starttime="20161117 19:25:27.840"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:33.515" starttime="20161117 19:25:27.840"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:33.515" starttime="20161117 19:25:27.839"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>BMC_READY</arg>
<arg>HOST_POWERED_OFF</arg>
</arguments>
<assign>
<var>@{states}</var>
</assign>
<msg timestamp="20161117 19:25:33.516" level="INFO">@{states} = [ BMC_READY | HOST_POWERED_OFF ]</msg>
<status status="PASS" endtime="20161117 19:25:33.516" starttime="20161117 19:25:33.516"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Verify BMC State</arg>
<arg>${states}</arg>
</arguments>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161117 19:25:33.517" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161117 19:25:33.517" starttime="20161117 19:25:33.517"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161117 19:25:33.518" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161117 19:25:33.518" starttime="20161117 19:25:33.518"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161117 19:25:33.519" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161117 19:25:33.519" starttime="20161117 19:25:33.519"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161117 19:25:33.521" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161117 19:25:33.521" starttime="20161117 19:25:33.521"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161117 19:25:33.522" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161117 19:25:33.522" starttime="20161117 19:25:33.521"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161117 19:25:33.523" starttime="20161117 19:25:33.522"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161117 19:25:33.525" level="INFO">${msg} = URI:https://9.3.29.119/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161117 19:25:33.525" starttime="20161117 19:25:33.523"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161117 19:25:33.526" level="INFO">URI:https://9.3.29.119/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161117 19:25:33.526" starttime="20161117 19:25:33.525"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:33.526" starttime="20161117 19:25:33.525"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:33.526" starttime="20161117 19:25:33.523"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161117 19:25:33.527" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.29.119, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161117 19:25:33.528" starttime="20161117 19:25:33.527"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161117 19:25:33.529" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161117 19:25:33.529" starttime="20161117 19:25:33.529"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161117 19:25:33.530" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161117 19:25:33.530" starttime="20161117 19:25:33.530"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161117 19:25:33.530" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161117 19:25:33.530" starttime="20161117 19:25:33.530"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161117 19:25:33.860" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161117 19:25:33.860" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161117 19:25:33.860" starttime="20161117 19:25:33.531"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161117 19:25:33.861" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161117 19:25:33.861" starttime="20161117 19:25:33.861"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:33.861" starttime="20161117 19:25:33.526"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161117 19:25:34.343" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161117 19:25:34.343" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161117 19:25:34.343" starttime="20161117 19:25:33.861"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161117 19:25:34.344" level="INFO">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_OFF", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161117 19:25:34.344" starttime="20161117 19:25:34.343"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161117 19:25:34.345" level="INFO">Response code:200, Content:{
  "data": "HOST_POWERED_OFF", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161117 19:25:34.345" starttime="20161117 19:25:34.345"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:34.345" starttime="20161117 19:25:34.344"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:34.345" starttime="20161117 19:25:34.343"></status>
</kw>
<msg timestamp="20161117 19:25:34.345" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161117 19:25:34.345" starttime="20161117 19:25:33.519"></status>
</kw>
<msg timestamp="20161117 19:25:34.345" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161117 19:25:34.346" starttime="20161117 19:25:33.518"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161117 19:25:34.346" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161117 19:25:34.346" starttime="20161117 19:25:34.346"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161117 19:25:34.347" level="INFO">To JSON using : content={
  "data": "HOST_POWERED_OFF", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161117 19:25:34.347" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161117 19:25:34.347" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'HOST_POWERED_OFF'}</msg>
<status status="PASS" endtime="20161117 19:25:34.347" starttime="20161117 19:25:34.346"></status>
</kw>
<msg timestamp="20161117 19:25:34.347" level="INFO">${current} = HOST_POWERED_OFF</msg>
<status status="PASS" endtime="20161117 19:25:34.347" starttime="20161117 19:25:33.517"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<status status="PASS" endtime="20161117 19:25:34.348" starttime="20161117 19:25:34.347"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:34.348" starttime="20161117 19:25:33.516"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:34.348" starttime="20161117 19:25:33.516"></status>
</kw>
<kw name="Preserve BMC Network Setting" library="code_update_utils">
<doc>Preserve Network setting</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<assign>
<var>${policy}</var>
</assign>
<msg timestamp="20161117 19:25:34.349" level="INFO">${policy} = 1</msg>
<status status="PASS" endtime="20161117 19:25:34.349" starttime="20161117 19:25:34.348"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20161117 19:25:34.349" level="INFO">${value} = {u'data': 1}</msg>
<status status="PASS" endtime="20161117 19:25:34.349" starttime="20161117 19:25:34.349"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${BMC_UPD_ATTR}</arg>
<arg>preserve_network_settings</arg>
<arg>data=${value}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161117 19:25:34.350" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc</msg>
<status status="PASS" endtime="20161117 19:25:34.350" starttime="20161117 19:25:34.350"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161117 19:25:34.351" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc/attr/preserve_network_settings</msg>
<status status="PASS" endtime="20161117 19:25:34.351" starttime="20161117 19:25:34.351"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161117 19:25:34.352" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161117 19:25:34.352" starttime="20161117 19:25:34.352"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161117 19:25:34.352" starttime="20161117 19:25:34.352"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161117 19:25:34.354" level="INFO">${msg} = URI:https://9.3.29.119/org/openbmc/control/flash/bmc/attr/preserve_network_settings, method:Put, args:{u'data': {u'data': 1}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161117 19:25:34.354" starttime="20161117 19:25:34.353"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161117 19:25:34.355" level="INFO">URI:https://9.3.29.119/org/openbmc/control/flash/bmc/attr/preserve_network_settings, method:Put, args:{u'data': {u'data': 1}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161117 19:25:34.355" starttime="20161117 19:25:34.354"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:34.355" starttime="20161117 19:25:34.354"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:34.355" starttime="20161117 19:25:34.353"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161117 19:25:34.356" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.29.119, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161117 19:25:34.356" starttime="20161117 19:25:34.356"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161117 19:25:34.357" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161117 19:25:34.357" starttime="20161117 19:25:34.356"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161117 19:25:34.357" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161117 19:25:34.357" starttime="20161117 19:25:34.357"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161117 19:25:34.358" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161117 19:25:34.358" starttime="20161117 19:25:34.357"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161117 19:25:34.975" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161117 19:25:34.975" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161117 19:25:34.975" starttime="20161117 19:25:34.358"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161117 19:25:34.976" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161117 19:25:34.977" starttime="20161117 19:25:34.976"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:34.977" starttime="20161117 19:25:34.355"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161117 19:25:35.551" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc/attr/preserve_network_settings, data={"data": 1},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20161117 19:25:35.552" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161117 19:25:35.552" starttime="20161117 19:25:34.977"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161117 19:25:35.553" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161117 19:25:35.553" starttime="20161117 19:25:35.553"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161117 19:25:35.555" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161117 19:25:35.555" starttime="20161117 19:25:35.555"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:35.556" starttime="20161117 19:25:35.554"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:35.556" starttime="20161117 19:25:35.552"></status>
</kw>
<msg timestamp="20161117 19:25:35.556" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161117 19:25:35.557" starttime="20161117 19:25:34.351"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161117 19:25:35.558" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161117 19:25:35.558" starttime="20161117 19:25:35.557"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20161117 19:25:35.559" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161117 19:25:35.559" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161117 19:25:35.559" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20161117 19:25:35.559" starttime="20161117 19:25:35.559"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:35.560" starttime="20161117 19:25:34.349"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${BMC_UPD_ATTR}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161117 19:25:35.562" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc</msg>
<status status="PASS" endtime="20161117 19:25:35.562" starttime="20161117 19:25:35.562"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161117 19:25:35.564" level="INFO">${msg} = URI:https://9.3.29.119/org/openbmc/control/flash/bmc, method:Get, args:{}</msg>
<status status="PASS" endtime="20161117 19:25:35.564" starttime="20161117 19:25:35.563"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161117 19:25:35.566" level="INFO">URI:https://9.3.29.119/org/openbmc/control/flash/bmc, method:Get, args:{}</msg>
<status status="PASS" endtime="20161117 19:25:35.566" starttime="20161117 19:25:35.565"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:35.566" starttime="20161117 19:25:35.565"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:35.567" starttime="20161117 19:25:35.563"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161117 19:25:35.568" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.29.119, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161117 19:25:35.569" starttime="20161117 19:25:35.568"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161117 19:25:35.569" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161117 19:25:35.569" starttime="20161117 19:25:35.569"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161117 19:25:35.570" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161117 19:25:35.570" starttime="20161117 19:25:35.569"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161117 19:25:35.570" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161117 19:25:35.570" starttime="20161117 19:25:35.570"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161117 19:25:35.912" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161117 19:25:35.913" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161117 19:25:35.913" starttime="20161117 19:25:35.571"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161117 19:25:35.913" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161117 19:25:35.913" starttime="20161117 19:25:35.913"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:35.913" starttime="20161117 19:25:35.567"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161117 19:25:36.026" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc, headers=None </msg>
<msg timestamp="20161117 19:25:36.026" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161117 19:25:36.026" starttime="20161117 19:25:35.914"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161117 19:25:36.027" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "auto_apply": 0, 
    "clear_persistent_files": 0, 
    "filename": "", 
    "preserve_network_settings": 1, 
    "restore_application_defaults": 0, 
    "...</msg>
<status status="PASS" endtime="20161117 19:25:36.027" starttime="20161117 19:25:36.027"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161117 19:25:36.028" level="INFO">Response code:200, Content:{
  "data": {
    "auto_apply": 0, 
    "clear_persistent_files": 0, 
    "filename": "", 
    "preserve_network_settings": 1, 
    "restore_application_defaults": 0, 
    "status": "Switch to update mode in progress", 
    "update_kernel_and_apps": 0
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161117 19:25:36.028" starttime="20161117 19:25:36.028"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:36.029" starttime="20161117 19:25:36.027"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:36.030" starttime="20161117 19:25:36.026"></status>
</kw>
<msg timestamp="20161117 19:25:36.030" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161117 19:25:36.031" starttime="20161117 19:25:35.560"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161117 19:25:36.032" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161117 19:25:36.032" starttime="20161117 19:25:36.031"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161117 19:25:36.032" level="INFO">To JSON using : content={
  "data": {
    "auto_apply": 0, 
    "clear_persistent_files": 0, 
    "filename": "", 
    "preserve_network_settings": 1, 
    "restore_application_defaults": 0, 
    "status": "Switch to update mode in progress", 
    "update_kernel_and_apps": 0
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161117 19:25:36.033" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161117 19:25:36.033" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Switch to update mode in progress', u'update_kernel_and_apps': 0, u'clear_persistent_files': 0, u'auto_apply': 0, u'filename': u'', u'p...</msg>
<status status="PASS" endtime="20161117 19:25:36.033" starttime="20161117 19:25:36.032"></status>
</kw>
<msg timestamp="20161117 19:25:36.033" level="INFO">${data} = {u'status': u'Switch to update mode in progress', u'update_kernel_and_apps': 0, u'clear_persistent_files': 0, u'auto_apply': 0, u'filename': u'', u'preserve_network_settings': 1, u'restore_application...</msg>
<status status="PASS" endtime="20161117 19:25:36.033" starttime="20161117 19:25:35.560"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${data['preserve_network_settings']}</arg>
<arg>${1}</arg>
<arg>msg=0 indicates network is not preserved</arg>
</arguments>
<status status="PASS" endtime="20161117 19:25:36.034" starttime="20161117 19:25:36.033"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:36.034" starttime="20161117 19:25:34.348"></status>
</kw>
<kw name="SCP Tar Image File to BMC" library="code_update_utils">
<arguments>
<arg>${FILE_PATH}</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20161117 19:25:36.045" starttime="20161117 19:25:36.035"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20161117 19:25:37.217" starttime="20161117 19:25:36.049"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:37.218" starttime="20161117 19:25:36.046"></status>
</kw>
<status status="PASS" endtime="20161117 19:25:37.218" starttime="20161117 19:25:36.034"></status>
</kw>
<kw name="Put File" library="scp">
<doc>Uploads a file to the remote machine from the local machine.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>/tmp/flashimg</arg>
</arguments>
<status status="PASS" endtime="20161117 19:26:05.783" starttime="20161117 19:25:37.218"></status>
</kw>
<status status="PASS" endtime="20161117 19:26:05.783" starttime="20161117 19:25:36.034"></status>
</kw>
<kw name="Activate BMC flash image" library="code_update_utils">
<doc>Activate and verify the update status</doc>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>/tmp/flashimg</arg>
</arguments>
<assign>
<var>@{img_path}</var>
</assign>
<msg timestamp="20161117 19:26:05.786" level="INFO">@{img_path} = [ /tmp/flashimg ]</msg>
<status status="PASS" endtime="20161117 19:26:05.786" starttime="20161117 19:26:05.786"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{img_path}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161117 19:26:05.788" level="INFO">${data} = {u'data': [u'/tmp/flashimg']}</msg>
<status status="PASS" endtime="20161117 19:26:05.788" starttime="20161117 19:26:05.787"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${BMC_UPD_METHOD}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161117 19:26:05.791" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc/action/update</msg>
<status status="PASS" endtime="20161117 19:26:05.791" starttime="20161117 19:26:05.790"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161117 19:26:05.792" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161117 19:26:05.792" starttime="20161117 19:26:05.791"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161117 19:26:05.793" starttime="20161117 19:26:05.792"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161117 19:26:05.796" level="INFO">${msg} = URI:https://9.3.29.119/org/openbmc/control/flash/bmc/action/update, method:Post, args:{u'data': {u'data': [u'/tmp/flashimg']}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161117 19:26:05.796" starttime="20161117 19:26:05.795"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161117 19:26:05.798" level="INFO">URI:https://9.3.29.119/org/openbmc/control/flash/bmc/action/update, method:Post, args:{u'data': {u'data': [u'/tmp/flashimg']}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161117 19:26:05.798" starttime="20161117 19:26:05.797"></status>
</kw>
<status status="PASS" endtime="20161117 19:26:05.798" starttime="20161117 19:26:05.796"></status>
</kw>
<status status="PASS" endtime="20161117 19:26:05.798" starttime="20161117 19:26:05.793"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161117 19:26:05.800" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.29.119, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161117 19:26:05.801" starttime="20161117 19:26:05.800"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161117 19:26:05.801" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161117 19:26:05.801" starttime="20161117 19:26:05.801"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161117 19:26:05.802" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161117 19:26:05.802" starttime="20161117 19:26:05.802"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161117 19:26:05.803" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161117 19:26:05.803" starttime="20161117 19:26:05.802"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161117 19:26:06.133" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161117 19:26:06.133" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161117 19:26:06.133" starttime="20161117 19:26:05.803"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161117 19:26:06.134" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161117 19:26:06.134" starttime="20161117 19:26:06.134"></status>
</kw>
<status status="PASS" endtime="20161117 19:26:06.134" starttime="20161117 19:26:05.798"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161117 19:26:10.415" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc/action/update, data={"data": ["/tmp/flashimg"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161117 19:26:10.415" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161117 19:26:10.415" starttime="20161117 19:26:06.134"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161117 19:26:10.421" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161117 19:26:10.421" starttime="20161117 19:26:10.416"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161117 19:26:10.422" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161117 19:26:10.422" starttime="20161117 19:26:10.422"></status>
</kw>
<status status="PASS" endtime="20161117 19:26:10.423" starttime="20161117 19:26:10.421"></status>
</kw>
<status status="PASS" endtime="20161117 19:26:10.423" starttime="20161117 19:26:10.416"></status>
</kw>
<msg timestamp="20161117 19:26:10.423" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161117 19:26:10.423" starttime="20161117 19:26:05.789"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161117 19:26:10.425" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161117 19:26:10.425" starttime="20161117 19:26:10.424"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${BMC_UPD_ATTR}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161117 19:26:10.428" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc</msg>
<status status="PASS" endtime="20161117 19:26:10.428" starttime="20161117 19:26:10.427"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161117 19:26:10.430" level="INFO">${msg} = URI:https://9.3.29.119/org/openbmc/control/flash/bmc, method:Get, args:{}</msg>
<status status="PASS" endtime="20161117 19:26:10.430" starttime="20161117 19:26:10.429"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161117 19:26:10.431" level="INFO">URI:https://9.3.29.119/org/openbmc/control/flash/bmc, method:Get, args:{}</msg>
<status status="PASS" endtime="20161117 19:26:10.431" starttime="20161117 19:26:10.430"></status>
</kw>
<status status="PASS" endtime="20161117 19:26:10.431" starttime="20161117 19:26:10.430"></status>
</kw>
<status status="PASS" endtime="20161117 19:26:10.431" starttime="20161117 19:26:10.428"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161117 19:26:10.435" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.29.119, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161117 19:26:10.435" starttime="20161117 19:26:10.431"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161117 19:26:10.436" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161117 19:26:10.436" starttime="20161117 19:26:10.436"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161117 19:26:10.436" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161117 19:26:10.436" starttime="20161117 19:26:10.436"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161117 19:26:10.437" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161117 19:26:10.437" starttime="20161117 19:26:10.437"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161117 19:26:10.768" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161117 19:26:10.768" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161117 19:26:10.768" starttime="20161117 19:26:10.437"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161117 19:26:10.768" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161117 19:26:10.769" starttime="20161117 19:26:10.768"></status>
</kw>
<status status="PASS" endtime="20161117 19:26:10.769" starttime="20161117 19:26:10.431"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161117 19:26:10.882" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc, headers=None </msg>
<msg timestamp="20161117 19:26:10.882" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161117 19:26:10.883" starttime="20161117 19:26:10.769"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161117 19:26:10.884" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "auto_apply": 0, 
    "clear_persistent_files": 0, 
    "filename": "/tmp/flashimg", 
    "preserve_network_settings": 1, 
    "restore_application_default...</msg>
<status status="PASS" endtime="20161117 19:26:10.884" starttime="20161117 19:26:10.883"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161117 19:26:10.884" level="INFO">Response code:200, Content:{
  "data": {
    "auto_apply": 0, 
    "clear_persistent_files": 0, 
    "filename": "/tmp/flashimg", 
    "preserve_network_settings": 1, 
    "restore_application_defaults": 0, 
    "status": "Verify error: update: --no-flash --ignore-mount --no-save-files --no-restore-files --no-clean-saved-files\nERROR: Unable to find mtd partiton for image-bmc.\n", 
    "update_kernel_and_apps": 0
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161117 19:26:10.885" starttime="20161117 19:26:10.884"></status>
</kw>
<status status="PASS" endtime="20161117 19:26:10.885" starttime="20161117 19:26:10.884"></status>
</kw>
<status status="PASS" endtime="20161117 19:26:10.885" starttime="20161117 19:26:10.883"></status>
</kw>
<msg timestamp="20161117 19:26:10.885" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161117 19:26:10.885" starttime="20161117 19:26:10.426"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161117 19:26:10.886" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161117 19:26:10.886" starttime="20161117 19:26:10.886"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161117 19:26:10.887" level="INFO">To JSON using : content={
  "data": {
    "auto_apply": 0, 
    "clear_persistent_files": 0, 
    "filename": "/tmp/flashimg", 
    "preserve_network_settings": 1, 
    "restore_application_defaults": 0, 
    "status": "Verify error: update: --no-flash --ignore-mount --no-save-files --no-restore-files --no-clean-saved-files\nERROR: Unable to find mtd partiton for image-bmc.\n", 
    "update_kernel_and_apps": 0
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161117 19:26:10.887" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161117 19:26:10.887" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Verify error: update: --no-flash --ignore-mount --no-save-files --no-restore-files --no-clean-saved-files\nERROR: Unable to find mtd pa...</msg>
<status status="PASS" endtime="20161117 19:26:10.887" starttime="20161117 19:26:10.886"></status>
</kw>
<msg timestamp="20161117 19:26:10.887" level="INFO">${data} = {u'status': u'Verify error: update: --no-flash --ignore-mount --no-save-files --no-restore-files --no-clean-saved-files\nERROR: Unable to find mtd partiton for image-bmc.\n', u'update_kernel_and_apps'...</msg>
<status status="PASS" endtime="20161117 19:26:10.887" starttime="20161117 19:26:10.425"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${data["filename"]}</arg>
<arg>/tmp/flashimg</arg>
</arguments>
<status status="PASS" endtime="20161117 19:26:10.888" starttime="20161117 19:26:10.887"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${data['status']}</arg>
<arg>to apply</arg>
</arguments>
<msg timestamp="20161117 19:26:10.888" level="FAIL">'Verify error: update: --no-flash --ignore-mount --no-save-files --no-restore-files --no-clean-saved-files
ERROR: Unable to find mtd partiton for image-bmc.
' does not contain 'to apply'</msg>
<status status="FAIL" endtime="20161117 19:26:10.889" starttime="20161117 19:26:10.888"></status>
</kw>
<status status="FAIL" endtime="20161117 19:26:10.889" starttime="20161117 19:26:05.784"></status>
</kw>
<doc>BMC code update process initiation</doc>
<status status="FAIL" endtime="20161117 19:26:10.890" critical="yes" starttime="20161117 19:24:58.245">'Verify error: update: --no-flash --ignore-mount --no-save-files --no-restore-files --no-clean-saved-files
ERROR: Unable to find mtd partiton for image-bmc.
' does not contain 'to apply'</status>
</test>
<doc>Trigger code update to a target BMC.
Execution Method :
python -m robot -v OPENBMC_HOST:&lt;hostname&gt;
-v FILE_PATH:&lt;path/*all.tar&gt; update_bmc.robot

Code update method BMC using REST
Update work flow sequence:
- User input BMC File existence check
- Ping Test and REST authentication
- Set Host Power host setting Policy to RESTORE_LAST_STATE
On reboot this policy would ensure the BMC comes
online and stays at HOST_POWERED_OFF state.
- Issue poweroff
- Prepare for Update
- Wait for BMC to come online clean
- Wait for BMC_READY state
- Apply preserve BMC Network setting
- SCP image to BMC
- Activate the flash image
- Warm Reset BMC to activate code
- Wait for BMC to come online time out 30 minutes
- Version check post update</doc>
<status status="FAIL" endtime="20161117 19:26:10.892" starttime="20161117 19:24:57.801"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="1" id="s1" name="Update Bmc" pass="0">Update Bmc</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
