<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170803 20:03:33.049" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite name="Tests" id="s1" source="/tmp/fspcibld/27997/obmc-robot/tests">
<kw name="System Driver Data" type="setup">
<doc>System driver information.</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170803 20:03:33.757">Dictionary does not contain key 'host'.</msg>
<status starttime="20170803 20:03:33.757" status="FAIL" endtime="20170803 20:03:33.757"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:03:33.757">${has_host} = False</msg>
<status starttime="20170803 20:03:33.756" status="PASS" endtime="20170803 20:03:33.757"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170803 20:03:33.758" status="PASS" endtime="20170803 20:03:33.758"></status>
</kw>
<status starttime="20170803 20:03:33.757" status="PASS" endtime="20170803 20:03:33.758"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:33.760">${port_num} = 22</msg>
<status starttime="20170803 20:03:33.759" status="PASS" endtime="20170803 20:03:33.760"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:33.760">${SSH_PORT} = 22</msg>
<status starttime="20170803 20:03:33.760" status="PASS" endtime="20170803 20:03:33.760"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:33.761">${https_num} = 443</msg>
<status starttime="20170803 20:03:33.760" status="PASS" endtime="20170803 20:03:33.761"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:03:33.761">${AUTH_URI} = https://9.3.86.161:443</msg>
<status starttime="20170803 20:03:33.761" status="PASS" endtime="20170803 20:03:33.762"></status>
</kw>
<status starttime="20170803 20:03:33.759" status="PASS" endtime="20170803 20:03:33.762"></status>
</kw>
<status starttime="20170803 20:03:33.758" status="PASS" endtime="20170803 20:03:33.762"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170803 20:03:33.763">Dictionary does not contain key 'port'.</msg>
<status starttime="20170803 20:03:33.762" status="FAIL" endtime="20170803 20:03:33.763"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:03:33.763">${has_port} = False</msg>
<status starttime="20170803 20:03:33.762" status="PASS" endtime="20170803 20:03:33.763"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170803 20:03:33.764" status="PASS" endtime="20170803 20:03:33.764"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170803 20:03:33.765" status="PASS" endtime="20170803 20:03:33.765"></status>
</kw>
<status starttime="20170803 20:03:33.764" status="PASS" endtime="20170803 20:03:33.765"></status>
</kw>
<status starttime="20170803 20:03:33.763" status="PASS" endtime="20170803 20:03:33.765"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:03:33.766">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170803 20:03:35.469">Read output: root@witherspoon:~#</msg>
<status starttime="20170803 20:03:33.765" status="PASS" endtime="20170803 20:03:35.469"></status>
</kw>
<status starttime="20170803 20:03:33.755" status="PASS" endtime="20170803 20:03:35.469"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:35.471">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg level="INFO" timestamp="20170803 20:03:35.547">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170803 20:03:35.547">${output} = VERSION_ID="v1.99.8-182-g4437d2b"</msg>
<msg level="INFO" timestamp="20170803 20:03:35.547">${stderr} = </msg>
<status starttime="20170803 20:03:35.470" status="PASS" endtime="20170803 20:03:35.548"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:03:35.548">Length is 0</msg>
<status starttime="20170803 20:03:35.548" status="PASS" endtime="20170803 20:03:35.548"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:03:35.549">VERSION_ID="v1.99.8-182-g4437d2b"</msg>
<status starttime="20170803 20:03:35.548" status="PASS" endtime="20170803 20:03:35.549"></status>
</kw>
<status starttime="20170803 20:03:35.470" status="PASS" endtime="20170803 20:03:35.549"></status>
</kw>
<status starttime="20170803 20:03:35.470" status="PASS" endtime="20170803 20:03:35.549"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>${PNOR_CMD}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:35.550">Executing command '/usr/sbin/pflash -r /tmp/out.txt -P VERSION; cat /tmp/out.txt'.</msg>
<msg level="INFO" timestamp="20170803 20:03:35.738">Command exited with return code 1.</msg>
<msg level="INFO" timestamp="20170803 20:03:35.738">${stdout} = FFS: Flash header not found. Code: 100</msg>
<msg level="INFO" timestamp="20170803 20:03:35.738">${stderr} = Error 100 opening ffs !
cat: can't open '/tmp/out.txt': No such file or directory</msg>
<status starttime="20170803 20:03:35.550" status="PASS" endtime="20170803 20:03:35.738"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:03:35.738">Length is 81</msg>
<msg level="FAIL" timestamp="20170803 20:03:35.739">'Error 100 opening ffs !
cat: can't open '/tmp/out.txt': No such file or directory' should be empty.</msg>
<status starttime="20170803 20:03:35.738" status="FAIL" endtime="20170803 20:03:35.739"></status>
</kw>
<status starttime="20170803 20:03:35.550" status="FAIL" endtime="20170803 20:03:35.739"></status>
</kw>
<status starttime="20170803 20:03:35.549" status="FAIL" endtime="20170803 20:03:35.739"></status>
</kw>
<status starttime="20170803 20:03:35.549" status="PASS" endtime="20170803 20:03:35.739"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw library="utils" name="Get BMC System Model">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:35.919">path_separator=/
port=22
encoding=UTF-8
term_type=vt100
alias=bmc_connection
newline=

prompt=# 
width=80
timeout=25 seconds
index=1
host=9.3.86.161
height=24</msg>
<msg level="INFO" timestamp="20170803 20:03:35.920">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170803 20:03:36.645">Read output: root@witherspoon:~#</msg>
<msg level="INFO" timestamp="20170803 20:03:36.645">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170803 20:03:36.722">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170803 20:03:36.730">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170803 20:03:36.730">${stderr} = </msg>
<msg level="INFO" timestamp="20170803 20:03:36.730">${rc} = 0</msg>
<status starttime="20170803 20:03:35.740" status="PASS" endtime="20170803 20:03:36.730"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:03:36.730">Length is 0</msg>
<status starttime="20170803 20:03:36.730" status="PASS" endtime="20170803 20:03:36.730"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:03:36.731">Length is 11</msg>
<status starttime="20170803 20:03:36.731" status="PASS" endtime="20170803 20:03:36.731"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:03:36.731">${bmc_model} = Witherspoon</msg>
<status starttime="20170803 20:03:35.740" status="PASS" endtime="20170803 20:03:36.731"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:03:36.731">BMC Model=Witherspoon</msg>
<status starttime="20170803 20:03:36.731" status="PASS" endtime="20170803 20:03:36.732"></status>
</kw>
<status starttime="20170803 20:03:35.739" status="PASS" endtime="20170803 20:03:36.732"></status>
</kw>
<status starttime="20170803 20:03:35.739" status="PASS" endtime="20170803 20:03:36.732"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw library="utils" name="Enable Core Dump On BMC">
<doc>Enable core dump collection.</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170803 20:03:36.734">Dictionary does not contain key 'host'.</msg>
<status starttime="20170803 20:03:36.734" status="FAIL" endtime="20170803 20:03:36.734"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:03:36.734">${has_host} = False</msg>
<status starttime="20170803 20:03:36.733" status="PASS" endtime="20170803 20:03:36.734"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170803 20:03:36.735" status="PASS" endtime="20170803 20:03:36.735"></status>
</kw>
<status starttime="20170803 20:03:36.734" status="PASS" endtime="20170803 20:03:36.735"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:36.737">${port_num} = 22</msg>
<status starttime="20170803 20:03:36.736" status="PASS" endtime="20170803 20:03:36.737"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:36.737">${SSH_PORT} = 22</msg>
<status starttime="20170803 20:03:36.737" status="PASS" endtime="20170803 20:03:36.737"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:36.738">${https_num} = 443</msg>
<status starttime="20170803 20:03:36.737" status="PASS" endtime="20170803 20:03:36.738"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:03:36.739">${AUTH_URI} = https://9.3.86.161:443</msg>
<status starttime="20170803 20:03:36.738" status="PASS" endtime="20170803 20:03:36.739"></status>
</kw>
<status starttime="20170803 20:03:36.736" status="PASS" endtime="20170803 20:03:36.739"></status>
</kw>
<status starttime="20170803 20:03:36.735" status="PASS" endtime="20170803 20:03:36.739"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170803 20:03:36.740">Dictionary does not contain key 'port'.</msg>
<status starttime="20170803 20:03:36.740" status="FAIL" endtime="20170803 20:03:36.740"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:03:36.740">${has_port} = False</msg>
<status starttime="20170803 20:03:36.739" status="PASS" endtime="20170803 20:03:36.740"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170803 20:03:36.743" status="PASS" endtime="20170803 20:03:36.743"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170803 20:03:36.743" status="PASS" endtime="20170803 20:03:36.744"></status>
</kw>
<status starttime="20170803 20:03:36.742" status="PASS" endtime="20170803 20:03:36.744"></status>
</kw>
<status starttime="20170803 20:03:36.741" status="PASS" endtime="20170803 20:03:36.744"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:03:36.745">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170803 20:03:38.454">Read output: root@witherspoon:~#</msg>
<status starttime="20170803 20:03:36.744" status="PASS" endtime="20170803 20:03:38.454"></status>
</kw>
<status starttime="20170803 20:03:36.732" status="PASS" endtime="20170803 20:03:38.454"></status>
</kw>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:38.455">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg level="INFO" timestamp="20170803 20:03:38.532">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170803 20:03:38.532">${stdout} = /tmp/core_%e.%p</msg>
<msg level="INFO" timestamp="20170803 20:03:38.532">${stderr} = </msg>
<status starttime="20170803 20:03:38.455" status="PASS" endtime="20170803 20:03:38.532"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:03:38.532">Length is 0</msg>
<status starttime="20170803 20:03:38.532" status="PASS" endtime="20170803 20:03:38.532"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:03:38.533">${core_pattern} = /tmp/core_%e.%p</msg>
<status starttime="20170803 20:03:38.454" status="PASS" endtime="20170803 20:03:38.533"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status starttime="20170803 20:03:38.533" status="PASS" endtime="20170803 20:03:38.533"></status>
</kw>
<status starttime="20170803 20:03:36.732" status="PASS" endtime="20170803 20:03:38.533"></status>
</kw>
<status starttime="20170803 20:03:36.732" status="PASS" endtime="20170803 20:03:38.533"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${DEBUG_TARBALL_PATH}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Install Debug Tarball On BMC</arg>
<arg>${DEBUG_TARBALL_PATH}</arg>
</arguments>
<status starttime="20170803 20:03:38.534" status="PASS" endtime="20170803 20:03:38.534"></status>
</kw>
<status starttime="20170803 20:03:33.755" status="PASS" endtime="20170803 20:03:38.534"></status>
</kw>
<suite name="Security" id="s1-s1" source="/tmp/fspcibld/27997/obmc-robot/tests/security">
<suite name="Test Ssl" id="s1-s1-s1" source="/tmp/fspcibld/27997/obmc-robot/tests/security/test_ssl.robot">
<test name="Test SSL Connection" id="s1-s1-s1-t1">
<kw library="rest_client" name="Initialize OpenBMC">
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:03:38.613">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:03:38.612" status="PASS" endtime="20170803 20:03:38.613"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:38.614">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:03:38.613" status="PASS" endtime="20170803 20:03:38.614"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:38.614">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:03:38.614" status="PASS" endtime="20170803 20:03:38.614"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:38.615">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:03:38.615" status="PASS" endtime="20170803 20:03:38.615"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:03:38.799">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:03:38.616" status="PASS" endtime="20170803 20:03:38.799"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:03:38.799">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:03:38.799">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:03:38.615" status="PASS" endtime="20170803 20:03:38.799"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:03:38.800">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:03:38.800" status="PASS" endtime="20170803 20:03:38.800"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:03:38.801">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:03:38.800" status="PASS" endtime="20170803 20:03:38.801"></status>
</kw>
<status starttime="20170803 20:03:38.612" status="PASS" endtime="20170803 20:03:38.801"></status>
</kw>
<status starttime="20170803 20:03:38.611" status="PASS" endtime="20170803 20:03:38.801"></status>
</kw>
<status starttime="20170803 20:03:38.611" status="PASS" endtime="20170803 20:03:38.801"></status>
</kw>
<kw library="openbmc_ffdc" name="FFDC On Test Case Fail" type="teardown">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="state_manager" name="Is Host Quiesced">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:03:38.806">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:03:38.805" status="PASS" endtime="20170803 20:03:38.806"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:38.807">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:03:38.807" status="PASS" endtime="20170803 20:03:38.807"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:38.807">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:03:38.807" status="PASS" endtime="20170803 20:03:38.807"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:38.808">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:03:38.808" status="PASS" endtime="20170803 20:03:38.808"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:03:38.991">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:03:38.809" status="PASS" endtime="20170803 20:03:38.991"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:03:38.991">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:03:38.991">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:03:38.808" status="PASS" endtime="20170803 20:03:38.991"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:03:38.992">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:03:38.991" status="PASS" endtime="20170803 20:03:38.992"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:03:38.992">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:03:38.992" status="PASS" endtime="20170803 20:03:38.992"></status>
</kw>
<status starttime="20170803 20:03:38.805" status="PASS" endtime="20170803 20:03:38.993"></status>
</kw>
<status starttime="20170803 20:03:38.804" status="PASS" endtime="20170803 20:03:38.993"></status>
</kw>
<status starttime="20170803 20:03:38.804" status="PASS" endtime="20170803 20:03:38.993"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:38.993">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170803 20:03:38.993" status="PASS" endtime="20170803 20:03:38.993"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:38.995">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:03:38.995" status="PASS" endtime="20170803 20:03:38.996"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:03:38.996">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:03:38.996" status="PASS" endtime="20170803 20:03:38.997"></status>
</kw>
<status starttime="20170803 20:03:38.996" status="PASS" endtime="20170803 20:03:38.997"></status>
</kw>
<status starttime="20170803 20:03:38.994" status="PASS" endtime="20170803 20:03:38.997"></status>
</kw>
<status starttime="20170803 20:03:38.994" status="PASS" endtime="20170803 20:03:38.997"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:39.103">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:03:39.103">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:03:38.997" status="PASS" endtime="20170803 20:03:39.103"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:39.105">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:03:39.105" status="PASS" endtime="20170803 20:03:39.105"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:03:39.106">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:03:39.106" status="PASS" endtime="20170803 20:03:39.106"></status>
</kw>
<status starttime="20170803 20:03:39.105" status="PASS" endtime="20170803 20:03:39.106"></status>
</kw>
<status starttime="20170803 20:03:39.104" status="PASS" endtime="20170803 20:03:39.106"></status>
</kw>
<status starttime="20170803 20:03:39.104" status="PASS" endtime="20170803 20:03:39.107"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:03:39.107">Delete All Sessions</msg>
<status starttime="20170803 20:03:39.107" status="PASS" endtime="20170803 20:03:39.107"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:03:39.107">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:03:38.803" status="PASS" endtime="20170803 20:03:39.107"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:03:39.108">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:03:39.108" status="PASS" endtime="20170803 20:03:39.108"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:39.109">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:03:39.109">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:03:39.109">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:03:39.108" status="PASS" endtime="20170803 20:03:39.109"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:03:39.109">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170803 20:03:38.803" status="PASS" endtime="20170803 20:03:39.109"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:03:39.109">${host_state} = Off</msg>
<status starttime="20170803 20:03:38.802" status="PASS" endtime="20170803 20:03:39.109"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg level="FAIL" timestamp="20170803 20:03:39.110">Off != Quiesced</msg>
<status starttime="20170803 20:03:39.110" status="FAIL" endtime="20170803 20:03:39.111"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:03:39.111">${status} = False</msg>
<status starttime="20170803 20:03:39.110" status="PASS" endtime="20170803 20:03:39.111"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:03:39.111">${status} = False</msg>
<status starttime="20170803 20:03:38.802" status="PASS" endtime="20170803 20:03:39.111"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status starttime="20170803 20:03:39.111" status="PASS" endtime="20170803 20:03:39.111"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status starttime="20170803 20:03:39.112" status="PASS" endtime="20170803 20:03:39.112"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:39.121">${FFDC_DIR_PATH_STYLE} = </msg>
<status starttime="20170803 20:03:39.113" status="PASS" endtime="20170803 20:03:39.122"></status>
</kw>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:39.130">${FFDC_DIR_PATH} = </msg>
<status starttime="20170803 20:03:39.122" status="PASS" endtime="20170803 20:03:39.130"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<kw library="openbmc_ffdc" name="Set Ffdc Defaults">
<doc>Set a default value for ffdc_dir_path and ffdc_prefix if they don't</doc>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:39.133">${cur_time} = 2017-08-03 20:03:39:132345</msg>
<status starttime="20170803 20:03:39.132" status="PASS" endtime="20170803 20:03:39.133"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:39.133">${cur_time} = 20170803200339132345</msg>
<status starttime="20170803 20:03:39.133" status="PASS" endtime="20170803 20:03:39.133"></status>
</kw>
<status starttime="20170803 20:03:39.131" status="PASS" endtime="20170803 20:03:39.134"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:03:39.140">${FFDC_TIME} = 20170803200339132345</msg>
<kw library="openbmc_ffdc_utils" name="Get Test Dir and Name">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:39.142">${suite_name} = TestsSecurityTestSsl</msg>
<status starttime="20170803 20:03:39.141" status="PASS" endtime="20170803 20:03:39.142"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:39.142">${suite_name} = 20170803200339132345_TestsSecurityTestSsl</msg>
<status starttime="20170803 20:03:39.142" status="PASS" endtime="20170803 20:03:39.142"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:39.143">${test_name} = TestSSLConnection</msg>
<status starttime="20170803 20:03:39.143" status="PASS" endtime="20170803 20:03:39.143"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:39.143">${test_name} = 20170803200339132345_TestSSLConnection</msg>
<status starttime="20170803 20:03:39.143" status="PASS" endtime="20170803 20:03:39.144"></status>
</kw>
<status starttime="20170803 20:03:39.141" status="PASS" endtime="20170803 20:03:39.144"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:03:39.144">${FFDC_DIR_PATH} = /tmp/fspcibld/27997/obmc-robot/logs/20170803200339132345_TestsSecurityTestSsl/20170803200339132345_TestSSLConnection/</msg>
<msg level="INFO" timestamp="20170803 20:03:39.148">${FFDC_PREFIX} = 20170803200339132345_</msg>
<status starttime="20170803 20:03:39.131" status="PASS" endtime="20170803 20:03:39.149"></status>
</kw>
<status starttime="20170803 20:03:39.130" status="PASS" endtime="20170803 20:03:39.149"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status starttime="20170803 20:03:39.149" status="PASS" endtime="20170803 20:03:39.150"></status>
</kw>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170803 20:03:39.150">Created directory '&lt;a href="file:///tmp/fspcibld/27997/obmc-robot/logs"&gt;/tmp/fspcibld/27997/obmc-robot/logs&lt;/a&gt;'.</msg>
<status starttime="20170803 20:03:39.150" status="PASS" endtime="20170803 20:03:39.151"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="FAIL" timestamp="20170803 20:03:39.152">File '/tmp/fspcibld/27997/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status starttime="20170803 20:03:39.151" status="FAIL" endtime="20170803 20:03:39.152"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:03:39.152">${exist} = False</msg>
<status starttime="20170803 20:03:39.151" status="PASS" endtime="20170803 20:03:39.152"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170803 20:03:39.153">Created file '&lt;a href="file:///tmp/fspcibld/27997/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/27997/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20170803 20:03:39.153" status="PASS" endtime="20170803 20:03:39.153"></status>
</kw>
<status starttime="20170803 20:03:39.152" status="PASS" endtime="20170803 20:03:39.153"></status>
</kw>
<kw library="gen_robot_print" name="Rpvars">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status starttime="20170803 20:03:39.153" status="PASS" endtime="20170803 20:03:39.154"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:39.155">${cur_time} = 2017-08-03 20:03:39:154485</msg>
<status starttime="20170803 20:03:39.154" status="PASS" endtime="20170803 20:03:39.155"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:39.155">${cur_time} = 20170803200339154485</msg>
<status starttime="20170803 20:03:39.155" status="PASS" endtime="20170803 20:03:39.155"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:03:39.155">${cur_time} = 20170803200339154485</msg>
<status starttime="20170803 20:03:39.154" status="PASS" endtime="20170803 20:03:39.155"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170803 20:03:39.156">Appended to file '&lt;a href="file:///tmp/fspcibld/27997/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/27997/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20170803 20:03:39.156" status="PASS" endtime="20170803 20:03:39.156"></status>
</kw>
<status starttime="20170803 20:03:39.112" status="PASS" endtime="20170803 20:03:39.156"></status>
</kw>
<status starttime="20170803 20:03:38.801" status="PASS" endtime="20170803 20:03:39.157"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status starttime="20170803 20:03:38.610" critical="yes" status="PASS" endtime="20170803 20:03:39.157"></status>
</test>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions" type="teardown">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:03:39.158">Delete All Sessions</msg>
<status starttime="20170803 20:03:39.157" status="PASS" endtime="20170803 20:03:39.158"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status starttime="20170803 20:03:38.536" status="PASS" endtime="20170803 20:03:39.158"></status>
</suite>
<status starttime="20170803 20:03:38.534" status="PASS" endtime="20170803 20:03:39.160"></status>
</suite>
<suite name="Test Basic Poweron" id="s1-s2" source="/tmp/fspcibld/27997/obmc-robot/tests/test_basic_poweron.robot">
<test name="Power On Test" id="s1-s2-t1">
<kw library="utils" name="Start SOL Console Logging" type="setup">
<doc>Start system console log to file.</doc>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:39.195">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status starttime="20170803 20:03:39.194" status="PASS" endtime="20170803 20:03:39.195"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:39.195">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status starttime="20170803 20:03:39.195" status="PASS" endtime="20170803 20:03:39.195"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:03:39.196">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status starttime="20170803 20:03:39.194" status="PASS" endtime="20170803 20:03:39.196"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>return_data=${return_data}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:39.197">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status starttime="20170803 20:03:39.197" status="PASS" endtime="20170803 20:03:39.197"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:39.198">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status starttime="20170803 20:03:39.197" status="PASS" endtime="20170803 20:03:39.198"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:03:39.198">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status starttime="20170803 20:03:39.196" status="PASS" endtime="20170803 20:03:39.198"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:39.199">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20170803 20:03:39.199" status="PASS" endtime="20170803 20:03:39.199"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170803 20:03:39.199" status="PASS" endtime="20170803 20:03:39.200"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:39.203">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170803 20:03:39.207">${rc} = 0</msg>
<msg level="INFO" timestamp="20170803 20:03:39.207">${output} = /tmp/fspcibld/27997/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20170803 20:03:39.200" status="PASS" endtime="20170803 20:03:39.207"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170803 20:03:39.209" status="PASS" endtime="20170803 20:03:39.210"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status starttime="20170803 20:03:39.210" status="PASS" endtime="20170803 20:03:39.211"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:39.211">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status starttime="20170803 20:03:39.211" status="PASS" endtime="20170803 20:03:39.212"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:03:39.212">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status starttime="20170803 20:03:39.198" status="PASS" endtime="20170803 20:03:39.212"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:39.213">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status starttime="20170803 20:03:39.212" status="PASS" endtime="20170803 20:03:39.213"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170803 20:03:39.213" status="PASS" endtime="20170803 20:03:39.213"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:39.216">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170803 20:03:39.233">${rc} = 0</msg>
<msg level="INFO" timestamp="20170803 20:03:39.233">${os_con_pid} = </msg>
<status starttime="20170803 20:03:39.213" status="PASS" endtime="20170803 20:03:39.233"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status starttime="20170803 20:03:39.235" status="PASS" endtime="20170803 20:03:39.236"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:39.236">${cmd_buf} = kill -9 </msg>
<status starttime="20170803 20:03:39.236" status="PASS" endtime="20170803 20:03:39.236"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170803 20:03:39.237" status="PASS" endtime="20170803 20:03:39.237"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:39.238">${rc} = None</msg>
<msg level="INFO" timestamp="20170803 20:03:39.238">${output} = None</msg>
<status starttime="20170803 20:03:39.238" status="PASS" endtime="20170803 20:03:39.238"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170803 20:03:39.238" status="PASS" endtime="20170803 20:03:39.239"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="OperatingSystem" name="Copy File">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg level="FAIL" timestamp="20170803 20:03:39.242">Source file '/tmp/9.3.86.161_os_console' does not exist.</msg>
<status starttime="20170803 20:03:39.240" status="FAIL" endtime="20170803 20:03:39.242"></status>
</kw>
<status starttime="20170803 20:03:39.240" status="PASS" endtime="20170803 20:03:39.242"></status>
</kw>
<status starttime="20170803 20:03:39.239" status="PASS" endtime="20170803 20:03:39.242"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:39.243">${output} = </msg>
<status starttime="20170803 20:03:39.242" status="PASS" endtime="20170803 20:03:39.243"></status>
</kw>
<kw library="BuiltIn" name="Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:39.243">${loc_quiet} = 1</msg>
<status starttime="20170803 20:03:39.243" status="PASS" endtime="20170803 20:03:39.243"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="gen_cmd" name="Cmd Fnc">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status starttime="20170803 20:03:39.244" status="PASS" endtime="20170803 20:03:39.307"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:03:39.309">${rc} = 1</msg>
<msg level="INFO" timestamp="20170803 20:03:39.309">${output} = cat: /tmp/9.3.86.161_os_console: No such file or directory
</msg>
<status starttime="20170803 20:03:39.243" status="PASS" endtime="20170803 20:03:39.310"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:03:39.312">${log_output} = cat: /tmp/9.3.86.161_os_console: No such file or directory
</msg>
<status starttime="20170803 20:03:39.196" status="PASS" endtime="20170803 20:03:39.312"></status>
</kw>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170803 20:03:39.319">Created file '&lt;a href="file:///tmp/9.3.86.161_os_console"&gt;/tmp/9.3.86.161_os_console&lt;/a&gt;'.</msg>
<status starttime="20170803 20:03:39.318" status="PASS" endtime="20170803 20:03:39.319"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:39.322">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20170803 20:03:39.321" status="PASS" endtime="20170803 20:03:39.322"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170803 20:03:39.322" status="PASS" endtime="20170803 20:03:39.322"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:39.333">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170803 20:03:39.348">${rc} = 0</msg>
<msg level="INFO" timestamp="20170803 20:03:39.348">${output} = /tmp/fspcibld/27997/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20170803 20:03:39.322" status="PASS" endtime="20170803 20:03:39.349"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170803 20:03:39.360" status="PASS" endtime="20170803 20:03:39.363"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status starttime="20170803 20:03:39.365" status="PASS" endtime="20170803 20:03:39.366"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:39.368">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status starttime="20170803 20:03:39.366" status="PASS" endtime="20170803 20:03:39.368"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:03:39.368">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status starttime="20170803 20:03:39.319" status="PASS" endtime="20170803 20:03:39.368"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:39.370">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console 2&gt;&amp;1 &amp;</msg>
<status starttime="20170803 20:03:39.370" status="PASS" endtime="20170803 20:03:39.370"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170803 20:03:39.371" status="PASS" endtime="20170803 20:03:39.371"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:39.383">Running command 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console 2&gt;&amp;1 &amp;'.</msg>
<msg level="INFO" timestamp="20170803 20:03:39.402">${rc} = 0</msg>
<msg level="INFO" timestamp="20170803 20:03:39.402">${output} = </msg>
<status starttime="20170803 20:03:39.372" status="PASS" endtime="20170803 20:03:39.402"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status starttime="20170803 20:03:39.414" status="PASS" endtime="20170803 20:03:39.416"></status>
</kw>
<status starttime="20170803 20:03:39.193" status="PASS" endtime="20170803 20:03:39.417"></status>
</kw>
<kw library="BuiltIn" name="Repeat Keyword">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:03:39.419">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw library="state_manager" name="Initiate Host PowerOff">
<doc>Initiate host power off.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:39.422">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status starttime="20170803 20:03:39.422" status="PASS" endtime="20170803 20:03:39.422"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:39.424">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status starttime="20170803 20:03:39.423" status="PASS" endtime="20170803 20:03:39.424"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:03:39.432">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:03:39.432" status="PASS" endtime="20170803 20:03:39.433"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:39.433">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:03:39.433" status="PASS" endtime="20170803 20:03:39.433"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:39.434">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:03:39.434" status="PASS" endtime="20170803 20:03:39.434"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:39.435">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:03:39.434" status="PASS" endtime="20170803 20:03:39.435"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:03:39.860">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:03:39.435" status="PASS" endtime="20170803 20:03:39.860"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:03:39.860">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:03:39.860">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:03:39.435" status="PASS" endtime="20170803 20:03:39.860"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:03:39.861">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:03:39.861" status="PASS" endtime="20170803 20:03:39.861"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:03:39.862">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:03:39.861" status="PASS" endtime="20170803 20:03:39.862"></status>
</kw>
<status starttime="20170803 20:03:39.431" status="PASS" endtime="20170803 20:03:39.862"></status>
</kw>
<status starttime="20170803 20:03:39.430" status="PASS" endtime="20170803 20:03:39.862"></status>
</kw>
<status starttime="20170803 20:03:39.425" status="PASS" endtime="20170803 20:03:39.862"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:39.863">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status starttime="20170803 20:03:39.862" status="PASS" endtime="20170803 20:03:39.863"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:39.863">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:03:39.863" status="PASS" endtime="20170803 20:03:39.863"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20170803 20:03:39.864" status="PASS" endtime="20170803 20:03:39.864"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:39.865">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-...</msg>
<status starttime="20170803 20:03:39.865" status="PASS" endtime="20170803 20:03:39.866"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:03:39.866">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20170803 20:03:39.866" status="PASS" endtime="20170803 20:03:39.867"></status>
</kw>
<status starttime="20170803 20:03:39.866" status="PASS" endtime="20170803 20:03:39.867"></status>
</kw>
<status starttime="20170803 20:03:39.864" status="PASS" endtime="20170803 20:03:39.867"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:40.673">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170803 20:03:40.673">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:03:39.867" status="PASS" endtime="20170803 20:03:40.673"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:40.674">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:03:40.674" status="PASS" endtime="20170803 20:03:40.675"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:03:40.676">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:03:40.676" status="PASS" endtime="20170803 20:03:40.676"></status>
</kw>
<status starttime="20170803 20:03:40.675" status="PASS" endtime="20170803 20:03:40.676"></status>
</kw>
<status starttime="20170803 20:03:40.673" status="PASS" endtime="20170803 20:03:40.676"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:03:40.677">Delete All Sessions</msg>
<status starttime="20170803 20:03:40.676" status="PASS" endtime="20170803 20:03:40.677"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:03:40.677">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:03:39.424" status="PASS" endtime="20170803 20:03:40.677"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:03:40.678">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:03:40.677" status="PASS" endtime="20170803 20:03:40.678"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:40.678">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:03:40.678">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:03:40.678">${json} = {u'data': None, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:03:40.678" status="PASS" endtime="20170803 20:03:40.678"></status>
</kw>
<status starttime="20170803 20:03:39.423" status="PASS" endtime="20170803 20:03:40.679"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status starttime="20170803 20:03:40.679" status="PASS" endtime="20170803 20:03:40.679"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:03:40.684">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:03:40.684" status="PASS" endtime="20170803 20:03:40.684"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:40.685">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:03:40.685" status="PASS" endtime="20170803 20:03:40.685"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:40.685">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:03:40.685" status="PASS" endtime="20170803 20:03:40.686"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:40.686">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:03:40.686" status="PASS" endtime="20170803 20:03:40.686"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:03:41.778">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:03:40.687" status="PASS" endtime="20170803 20:03:41.779"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:03:41.779">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:03:41.779">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:03:40.687" status="PASS" endtime="20170803 20:03:41.779"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:03:41.780">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:03:41.779" status="PASS" endtime="20170803 20:03:41.780"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:03:41.780">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:03:41.780" status="PASS" endtime="20170803 20:03:41.780"></status>
</kw>
<status starttime="20170803 20:03:40.683" status="PASS" endtime="20170803 20:03:41.781"></status>
</kw>
<status starttime="20170803 20:03:40.683" status="PASS" endtime="20170803 20:03:41.781"></status>
</kw>
<status starttime="20170803 20:03:40.682" status="PASS" endtime="20170803 20:03:41.781"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:41.781">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170803 20:03:41.781" status="PASS" endtime="20170803 20:03:41.781"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:41.783">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:03:41.783" status="PASS" endtime="20170803 20:03:41.783"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:03:41.784">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:03:41.784" status="PASS" endtime="20170803 20:03:41.784"></status>
</kw>
<status starttime="20170803 20:03:41.784" status="PASS" endtime="20170803 20:03:41.784"></status>
</kw>
<status starttime="20170803 20:03:41.782" status="PASS" endtime="20170803 20:03:41.785"></status>
</kw>
<status starttime="20170803 20:03:41.782" status="PASS" endtime="20170803 20:03:41.785"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:46.053">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:03:46.053">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:03:41.785" status="PASS" endtime="20170803 20:03:46.053"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:46.055">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:03:46.055" status="PASS" endtime="20170803 20:03:46.055"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:03:46.056">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:03:46.056" status="PASS" endtime="20170803 20:03:46.056"></status>
</kw>
<status starttime="20170803 20:03:46.055" status="PASS" endtime="20170803 20:03:46.056"></status>
</kw>
<status starttime="20170803 20:03:46.054" status="PASS" endtime="20170803 20:03:46.056"></status>
</kw>
<status starttime="20170803 20:03:46.054" status="PASS" endtime="20170803 20:03:46.056"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:03:46.057">Delete All Sessions</msg>
<status starttime="20170803 20:03:46.057" status="PASS" endtime="20170803 20:03:46.057"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:03:46.057">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:03:40.681" status="PASS" endtime="20170803 20:03:46.057"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:03:46.058">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:03:46.057" status="PASS" endtime="20170803 20:03:46.058"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:46.058">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:03:46.058">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:03:46.059">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:03:46.058" status="PASS" endtime="20170803 20:03:46.059"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:03:46.059">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170803 20:03:40.681" status="PASS" endtime="20170803 20:03:46.059"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:03:46.059">${power_state} = Off</msg>
<status starttime="20170803 20:03:40.680" status="PASS" endtime="20170803 20:03:46.059"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170803 20:03:46.059" status="PASS" endtime="20170803 20:03:46.060"></status>
</kw>
<status starttime="20170803 20:03:40.680" status="PASS" endtime="20170803 20:03:46.060"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:03:46.064">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:03:46.064" status="PASS" endtime="20170803 20:03:46.064"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:46.065">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:03:46.065" status="PASS" endtime="20170803 20:03:46.065"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:46.066">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:03:46.066" status="PASS" endtime="20170803 20:03:46.066"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:46.067">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:03:46.066" status="PASS" endtime="20170803 20:03:46.067"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:03:46.777">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:03:46.067" status="PASS" endtime="20170803 20:03:46.777"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:03:46.777">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:03:46.778">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:03:46.067" status="PASS" endtime="20170803 20:03:46.778"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:03:46.778">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:03:46.778" status="PASS" endtime="20170803 20:03:46.778"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:03:46.779">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:03:46.779" status="PASS" endtime="20170803 20:03:46.779"></status>
</kw>
<status starttime="20170803 20:03:46.063" status="PASS" endtime="20170803 20:03:46.779"></status>
</kw>
<status starttime="20170803 20:03:46.062" status="PASS" endtime="20170803 20:03:46.779"></status>
</kw>
<status starttime="20170803 20:03:46.062" status="PASS" endtime="20170803 20:03:46.779"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:46.780">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170803 20:03:46.780" status="PASS" endtime="20170803 20:03:46.780"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:46.782">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:03:46.781" status="PASS" endtime="20170803 20:03:46.782"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:03:46.783">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:03:46.783" status="PASS" endtime="20170803 20:03:46.783"></status>
</kw>
<status starttime="20170803 20:03:46.782" status="PASS" endtime="20170803 20:03:46.783"></status>
</kw>
<status starttime="20170803 20:03:46.781" status="PASS" endtime="20170803 20:03:46.783"></status>
</kw>
<status starttime="20170803 20:03:46.780" status="PASS" endtime="20170803 20:03:46.783"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:47.013">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:03:47.013">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:03:46.784" status="PASS" endtime="20170803 20:03:47.013"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:47.015">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:03:47.015" status="PASS" endtime="20170803 20:03:47.015"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:03:47.016">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:03:47.016" status="PASS" endtime="20170803 20:03:47.017"></status>
</kw>
<status starttime="20170803 20:03:47.015" status="PASS" endtime="20170803 20:03:47.017"></status>
</kw>
<status starttime="20170803 20:03:47.014" status="PASS" endtime="20170803 20:03:47.017"></status>
</kw>
<status starttime="20170803 20:03:47.014" status="PASS" endtime="20170803 20:03:47.017"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:03:47.017">Delete All Sessions</msg>
<status starttime="20170803 20:03:47.017" status="PASS" endtime="20170803 20:03:47.017"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:03:47.018">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:03:46.061" status="PASS" endtime="20170803 20:03:47.018"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:03:47.018">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:03:47.018" status="PASS" endtime="20170803 20:03:47.018"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:47.019">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:03:47.019">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:03:47.019">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:03:47.018" status="PASS" endtime="20170803 20:03:47.019"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:03:47.019">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170803 20:03:46.060" status="PASS" endtime="20170803 20:03:47.019"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:03:47.020">${host_state} = Off</msg>
<status starttime="20170803 20:03:46.060" status="PASS" endtime="20170803 20:03:47.020"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170803 20:03:47.020" status="PASS" endtime="20170803 20:03:47.020"></status>
</kw>
<status starttime="20170803 20:03:40.680" status="PASS" endtime="20170803 20:03:47.020"></status>
</kw>
<status starttime="20170803 20:03:40.679" status="PASS" endtime="20170803 20:03:47.020"></status>
</kw>
<status starttime="20170803 20:03:39.421" status="PASS" endtime="20170803 20:03:47.020"></status>
</kw>
<kw library="state_manager" name="Initiate Host Boot">
<doc>Initiate host power on.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:47.021">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status starttime="20170803 20:03:47.021" status="PASS" endtime="20170803 20:03:47.021"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:47.023">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status starttime="20170803 20:03:47.022" status="PASS" endtime="20170803 20:03:47.023"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:03:47.025">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:03:47.025" status="PASS" endtime="20170803 20:03:47.026"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:47.026">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:03:47.026" status="PASS" endtime="20170803 20:03:47.026"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:47.027">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:03:47.027" status="PASS" endtime="20170803 20:03:47.027"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:47.028">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:03:47.027" status="PASS" endtime="20170803 20:03:47.028"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:03:47.587">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:03:47.028" status="PASS" endtime="20170803 20:03:47.587"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:03:47.587">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:03:47.587">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:03:47.028" status="PASS" endtime="20170803 20:03:47.587"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:03:47.588">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:03:47.588" status="PASS" endtime="20170803 20:03:47.588"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:03:47.589">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:03:47.588" status="PASS" endtime="20170803 20:03:47.589"></status>
</kw>
<status starttime="20170803 20:03:47.025" status="PASS" endtime="20170803 20:03:47.589"></status>
</kw>
<status starttime="20170803 20:03:47.024" status="PASS" endtime="20170803 20:03:47.589"></status>
</kw>
<status starttime="20170803 20:03:47.023" status="PASS" endtime="20170803 20:03:47.589"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:47.590">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status starttime="20170803 20:03:47.589" status="PASS" endtime="20170803 20:03:47.590"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:47.590">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:03:47.590" status="PASS" endtime="20170803 20:03:47.590"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20170803 20:03:47.591" status="PASS" endtime="20170803 20:03:47.591"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:47.593">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-T...</msg>
<status starttime="20170803 20:03:47.592" status="PASS" endtime="20170803 20:03:47.593"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:03:47.594">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20170803 20:03:47.593" status="PASS" endtime="20170803 20:03:47.594"></status>
</kw>
<status starttime="20170803 20:03:47.593" status="PASS" endtime="20170803 20:03:47.594"></status>
</kw>
<status starttime="20170803 20:03:47.591" status="PASS" endtime="20170803 20:03:47.594"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:48.252">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170803 20:03:48.253">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:03:47.594" status="PASS" endtime="20170803 20:03:48.253"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:48.254">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:03:48.254" status="PASS" endtime="20170803 20:03:48.254"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:03:48.256">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:03:48.255" status="PASS" endtime="20170803 20:03:48.256"></status>
</kw>
<status starttime="20170803 20:03:48.255" status="PASS" endtime="20170803 20:03:48.256"></status>
</kw>
<status starttime="20170803 20:03:48.253" status="PASS" endtime="20170803 20:03:48.256"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:03:48.256">Delete All Sessions</msg>
<status starttime="20170803 20:03:48.256" status="PASS" endtime="20170803 20:03:48.257"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:03:48.257">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:03:47.023" status="PASS" endtime="20170803 20:03:48.257"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:03:48.257">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:03:48.257" status="PASS" endtime="20170803 20:03:48.258"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:48.258">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:03:48.258">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:03:48.258">${json} = {u'data': None, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:03:48.258" status="PASS" endtime="20170803 20:03:48.258"></status>
</kw>
<status starttime="20170803 20:03:47.022" status="PASS" endtime="20170803 20:03:48.258"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status starttime="20170803 20:03:48.259" status="PASS" endtime="20170803 20:03:48.259"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is Host Running</arg>
</arguments>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:03:48.264">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:03:48.263" status="PASS" endtime="20170803 20:03:48.264"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:48.265">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:03:48.265" status="PASS" endtime="20170803 20:03:48.265"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:48.266">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:03:48.265" status="PASS" endtime="20170803 20:03:48.266"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:48.266">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:03:48.266" status="PASS" endtime="20170803 20:03:48.266"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:03:49.653">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:03:48.267" status="PASS" endtime="20170803 20:03:49.653"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:03:49.653">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:03:49.653">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:03:48.267" status="PASS" endtime="20170803 20:03:49.653"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:03:49.654">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:03:49.654" status="PASS" endtime="20170803 20:03:49.654"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:03:49.655">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:03:49.654" status="PASS" endtime="20170803 20:03:49.655"></status>
</kw>
<status starttime="20170803 20:03:48.263" status="PASS" endtime="20170803 20:03:49.655"></status>
</kw>
<status starttime="20170803 20:03:48.262" status="PASS" endtime="20170803 20:03:49.655"></status>
</kw>
<status starttime="20170803 20:03:48.262" status="PASS" endtime="20170803 20:03:49.655"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:49.656">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170803 20:03:49.655" status="PASS" endtime="20170803 20:03:49.656"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:49.658">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:03:49.657" status="PASS" endtime="20170803 20:03:49.658"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:03:49.659">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:03:49.659" status="PASS" endtime="20170803 20:03:49.660"></status>
</kw>
<status starttime="20170803 20:03:49.658" status="PASS" endtime="20170803 20:03:49.660"></status>
</kw>
<status starttime="20170803 20:03:49.656" status="PASS" endtime="20170803 20:03:49.660"></status>
</kw>
<status starttime="20170803 20:03:49.656" status="PASS" endtime="20170803 20:03:49.660"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:54.018">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:03:54.019">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:03:49.660" status="PASS" endtime="20170803 20:03:54.019"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:54.021">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:03:54.020" status="PASS" endtime="20170803 20:03:54.021"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:03:54.022">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:03:54.021" status="PASS" endtime="20170803 20:03:54.022"></status>
</kw>
<status starttime="20170803 20:03:54.021" status="PASS" endtime="20170803 20:03:54.022"></status>
</kw>
<status starttime="20170803 20:03:54.020" status="PASS" endtime="20170803 20:03:54.022"></status>
</kw>
<status starttime="20170803 20:03:54.019" status="PASS" endtime="20170803 20:03:54.022"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:03:54.022">Delete All Sessions</msg>
<status starttime="20170803 20:03:54.022" status="PASS" endtime="20170803 20:03:54.022"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:03:54.023">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:03:48.261" status="PASS" endtime="20170803 20:03:54.023"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:03:54.023">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:03:54.023" status="PASS" endtime="20170803 20:03:54.023"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:03:54.024">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:03:54.024">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:03:54.024">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:03:54.024" status="PASS" endtime="20170803 20:03:54.024"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:03:54.024">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170803 20:03:48.261" status="PASS" endtime="20170803 20:03:54.024"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:03:54.025">${power_state} = Off</msg>
<status starttime="20170803 20:03:48.260" status="PASS" endtime="20170803 20:03:54.025"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170803 20:03:54.025">On != Off</msg>
<status starttime="20170803 20:03:54.025" status="FAIL" endtime="20170803 20:03:54.025"></status>
</kw>
<status starttime="20170803 20:03:48.260" status="FAIL" endtime="20170803 20:03:54.026"></status>
</kw>
<status starttime="20170803 20:03:48.260" status="FAIL" endtime="20170803 20:03:54.026"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:04.031">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:04:04.031" status="PASS" endtime="20170803 20:04:04.031"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:04.032">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:04:04.032" status="PASS" endtime="20170803 20:04:04.032"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:04.033">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:04:04.032" status="PASS" endtime="20170803 20:04:04.033"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:04.033">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:04:04.033" status="PASS" endtime="20170803 20:04:04.033"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:04.790">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:04:04.034" status="PASS" endtime="20170803 20:04:04.790"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:04:04.790">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:04:04.790">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:04:04.034" status="PASS" endtime="20170803 20:04:04.790"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:04.791">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:04:04.791" status="PASS" endtime="20170803 20:04:04.791"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:04.792">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:04:04.791" status="PASS" endtime="20170803 20:04:04.792"></status>
</kw>
<status starttime="20170803 20:04:04.030" status="PASS" endtime="20170803 20:04:04.792"></status>
</kw>
<status starttime="20170803 20:04:04.030" status="PASS" endtime="20170803 20:04:04.792"></status>
</kw>
<status starttime="20170803 20:04:04.029" status="PASS" endtime="20170803 20:04:04.792"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:04.793">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170803 20:04:04.792" status="PASS" endtime="20170803 20:04:04.793"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:04.795">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:04:04.794" status="PASS" endtime="20170803 20:04:04.795"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:04.796">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:04:04.796" status="PASS" endtime="20170803 20:04:04.796"></status>
</kw>
<status starttime="20170803 20:04:04.795" status="PASS" endtime="20170803 20:04:04.796"></status>
</kw>
<status starttime="20170803 20:04:04.794" status="PASS" endtime="20170803 20:04:04.796"></status>
</kw>
<status starttime="20170803 20:04:04.793" status="PASS" endtime="20170803 20:04:04.796"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:05.798">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:04:05.798">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:04:04.797" status="PASS" endtime="20170803 20:04:05.798"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:05.800">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:04:05.799" status="PASS" endtime="20170803 20:04:05.800"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:05.801">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:04:05.801" status="PASS" endtime="20170803 20:04:05.801"></status>
</kw>
<status starttime="20170803 20:04:05.800" status="PASS" endtime="20170803 20:04:05.801"></status>
</kw>
<status starttime="20170803 20:04:05.799" status="PASS" endtime="20170803 20:04:05.801"></status>
</kw>
<status starttime="20170803 20:04:05.798" status="PASS" endtime="20170803 20:04:05.801"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:04:05.802">Delete All Sessions</msg>
<status starttime="20170803 20:04:05.802" status="PASS" endtime="20170803 20:04:05.802"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:04:05.802">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:04:04.028" status="PASS" endtime="20170803 20:04:05.802"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:05.803">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:04:05.802" status="PASS" endtime="20170803 20:04:05.803"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:05.803">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:04:05.803">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:04:05.803">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:04:05.803" status="PASS" endtime="20170803 20:04:05.803"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:04:05.804">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170803 20:04:04.028" status="PASS" endtime="20170803 20:04:05.804"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:04:05.804">${power_state} = On</msg>
<status starttime="20170803 20:04:04.027" status="PASS" endtime="20170803 20:04:05.804"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170803 20:04:05.804" status="PASS" endtime="20170803 20:04:05.805"></status>
</kw>
<status starttime="20170803 20:04:04.027" status="PASS" endtime="20170803 20:04:05.805"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:05.808">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:04:05.808" status="PASS" endtime="20170803 20:04:05.809"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:05.810">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:04:05.809" status="PASS" endtime="20170803 20:04:05.810"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:05.811">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:04:05.810" status="PASS" endtime="20170803 20:04:05.811"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:05.812">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:04:05.811" status="PASS" endtime="20170803 20:04:05.812"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:06.266">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:04:05.813" status="PASS" endtime="20170803 20:04:06.266"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:04:06.266">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:04:06.266">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:04:05.812" status="PASS" endtime="20170803 20:04:06.266"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:06.267">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:04:06.267" status="PASS" endtime="20170803 20:04:06.267"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:06.268">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:04:06.267" status="PASS" endtime="20170803 20:04:06.268"></status>
</kw>
<status starttime="20170803 20:04:05.807" status="PASS" endtime="20170803 20:04:06.268"></status>
</kw>
<status starttime="20170803 20:04:05.807" status="PASS" endtime="20170803 20:04:06.268"></status>
</kw>
<status starttime="20170803 20:04:05.806" status="PASS" endtime="20170803 20:04:06.268"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:06.269">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170803 20:04:06.268" status="PASS" endtime="20170803 20:04:06.269"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:06.271">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:04:06.270" status="PASS" endtime="20170803 20:04:06.271"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:06.272">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:04:06.272" status="PASS" endtime="20170803 20:04:06.272"></status>
</kw>
<status starttime="20170803 20:04:06.271" status="PASS" endtime="20170803 20:04:06.272"></status>
</kw>
<status starttime="20170803 20:04:06.270" status="PASS" endtime="20170803 20:04:06.272"></status>
</kw>
<status starttime="20170803 20:04:06.269" status="PASS" endtime="20170803 20:04:06.272"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:07.160">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:04:07.160">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:04:06.272" status="PASS" endtime="20170803 20:04:07.160"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:07.162">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:04:07.162" status="PASS" endtime="20170803 20:04:07.162"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:07.163">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:04:07.163" status="PASS" endtime="20170803 20:04:07.163"></status>
</kw>
<status starttime="20170803 20:04:07.162" status="PASS" endtime="20170803 20:04:07.163"></status>
</kw>
<status starttime="20170803 20:04:07.161" status="PASS" endtime="20170803 20:04:07.163"></status>
</kw>
<status starttime="20170803 20:04:07.161" status="PASS" endtime="20170803 20:04:07.163"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:04:07.164">Delete All Sessions</msg>
<status starttime="20170803 20:04:07.164" status="PASS" endtime="20170803 20:04:07.164"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:04:07.164">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:04:05.806" status="PASS" endtime="20170803 20:04:07.164"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:07.165">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:04:07.164" status="PASS" endtime="20170803 20:04:07.165"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:07.165">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:04:07.165">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:04:07.165">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:04:07.165" status="PASS" endtime="20170803 20:04:07.166"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:04:07.166">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170803 20:04:05.805" status="PASS" endtime="20170803 20:04:07.166"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:04:07.166">${host_state} = Running</msg>
<status starttime="20170803 20:04:05.805" status="PASS" endtime="20170803 20:04:07.166"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170803 20:04:07.167" status="PASS" endtime="20170803 20:04:07.167"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:07.173">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:04:07.173" status="PASS" endtime="20170803 20:04:07.173"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:07.174">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:04:07.173" status="PASS" endtime="20170803 20:04:07.174"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:07.174">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:04:07.174" status="PASS" endtime="20170803 20:04:07.174"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:07.175">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:04:07.175" status="PASS" endtime="20170803 20:04:07.175"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:07.530">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:04:07.176" status="PASS" endtime="20170803 20:04:07.530"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:04:07.530">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:04:07.530">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:04:07.175" status="PASS" endtime="20170803 20:04:07.530"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:07.531">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:04:07.531" status="PASS" endtime="20170803 20:04:07.531"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:07.532">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:04:07.531" status="PASS" endtime="20170803 20:04:07.532"></status>
</kw>
<status starttime="20170803 20:04:07.172" status="PASS" endtime="20170803 20:04:07.532"></status>
</kw>
<status starttime="20170803 20:04:07.171" status="PASS" endtime="20170803 20:04:07.532"></status>
</kw>
<status starttime="20170803 20:04:07.170" status="PASS" endtime="20170803 20:04:07.532"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:07.533">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170803 20:04:07.532" status="PASS" endtime="20170803 20:04:07.533"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:07.535">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170803 20:04:07.534" status="PASS" endtime="20170803 20:04:07.535"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:07.535">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170803 20:04:07.535" status="PASS" endtime="20170803 20:04:07.536"></status>
</kw>
<status starttime="20170803 20:04:07.535" status="PASS" endtime="20170803 20:04:07.536"></status>
</kw>
<status starttime="20170803 20:04:07.533" status="PASS" endtime="20170803 20:04:07.536"></status>
</kw>
<status starttime="20170803 20:04:07.533" status="PASS" endtime="20170803 20:04:07.536"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:07.998">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:04:07.998">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:04:07.536" status="PASS" endtime="20170803 20:04:07.998"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:08.001">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:04:08.000" status="PASS" endtime="20170803 20:04:08.001"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:08.002">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:04:08.002" status="PASS" endtime="20170803 20:04:08.002"></status>
</kw>
<status starttime="20170803 20:04:08.001" status="PASS" endtime="20170803 20:04:08.002"></status>
</kw>
<status starttime="20170803 20:04:08.000" status="PASS" endtime="20170803 20:04:08.003"></status>
</kw>
<status starttime="20170803 20:04:07.999" status="PASS" endtime="20170803 20:04:08.003"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:04:08.003">Delete All Sessions</msg>
<status starttime="20170803 20:04:08.003" status="PASS" endtime="20170803 20:04:08.003"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:04:08.003">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:04:07.169" status="PASS" endtime="20170803 20:04:08.003"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:08.004">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:04:08.004" status="PASS" endtime="20170803 20:04:08.004"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:08.005">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:04:08.005">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:04:08.005">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:04:08.004" status="PASS" endtime="20170803 20:04:08.005"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:04:08.005">${state} = Off</msg>
<status starttime="20170803 20:04:07.168" status="PASS" endtime="20170803 20:04:08.005"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:04:08.005">${boot_progress} = Off</msg>
<status starttime="20170803 20:04:07.168" status="PASS" endtime="20170803 20:04:08.005"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170803 20:04:08.006">Off != FW Progress, Starting OS</msg>
<status starttime="20170803 20:04:08.006" status="FAIL" endtime="20170803 20:04:08.006"></status>
</kw>
<status starttime="20170803 20:04:07.167" status="FAIL" endtime="20170803 20:04:08.006"></status>
</kw>
<status starttime="20170803 20:04:04.026" status="FAIL" endtime="20170803 20:04:08.007"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:18.012">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:04:18.011" status="PASS" endtime="20170803 20:04:18.012"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:18.013">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:04:18.012" status="PASS" endtime="20170803 20:04:18.013"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:18.013">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:04:18.013" status="PASS" endtime="20170803 20:04:18.013"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:18.014">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:04:18.013" status="PASS" endtime="20170803 20:04:18.014"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:18.201">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:04:18.015" status="PASS" endtime="20170803 20:04:18.201"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:04:18.201">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:04:18.201">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:04:18.014" status="PASS" endtime="20170803 20:04:18.201"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:18.202">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:04:18.201" status="PASS" endtime="20170803 20:04:18.202"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:18.202">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:04:18.202" status="PASS" endtime="20170803 20:04:18.203"></status>
</kw>
<status starttime="20170803 20:04:18.011" status="PASS" endtime="20170803 20:04:18.203"></status>
</kw>
<status starttime="20170803 20:04:18.010" status="PASS" endtime="20170803 20:04:18.203"></status>
</kw>
<status starttime="20170803 20:04:18.010" status="PASS" endtime="20170803 20:04:18.203"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:18.203">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170803 20:04:18.203" status="PASS" endtime="20170803 20:04:18.203"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:18.205">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:04:18.205" status="PASS" endtime="20170803 20:04:18.206"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:18.206">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:04:18.206" status="PASS" endtime="20170803 20:04:18.207"></status>
</kw>
<status starttime="20170803 20:04:18.206" status="PASS" endtime="20170803 20:04:18.207"></status>
</kw>
<status starttime="20170803 20:04:18.204" status="PASS" endtime="20170803 20:04:18.207"></status>
</kw>
<status starttime="20170803 20:04:18.204" status="PASS" endtime="20170803 20:04:18.207"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:18.288">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:04:18.289">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:04:18.207" status="PASS" endtime="20170803 20:04:18.289"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:18.290">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:04:18.290" status="PASS" endtime="20170803 20:04:18.290"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:18.291">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:04:18.291" status="PASS" endtime="20170803 20:04:18.291"></status>
</kw>
<status starttime="20170803 20:04:18.291" status="PASS" endtime="20170803 20:04:18.291"></status>
</kw>
<status starttime="20170803 20:04:18.289" status="PASS" endtime="20170803 20:04:18.292"></status>
</kw>
<status starttime="20170803 20:04:18.289" status="PASS" endtime="20170803 20:04:18.292"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:04:18.292">Delete All Sessions</msg>
<status starttime="20170803 20:04:18.292" status="PASS" endtime="20170803 20:04:18.292"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:04:18.292">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:04:18.009" status="PASS" endtime="20170803 20:04:18.292"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:18.293">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:04:18.293" status="PASS" endtime="20170803 20:04:18.293"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:18.294">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:04:18.294">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:04:18.294">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:04:18.293" status="PASS" endtime="20170803 20:04:18.294"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:04:18.294">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170803 20:04:18.009" status="PASS" endtime="20170803 20:04:18.294"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:04:18.294">${power_state} = On</msg>
<status starttime="20170803 20:04:18.008" status="PASS" endtime="20170803 20:04:18.294"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170803 20:04:18.295" status="PASS" endtime="20170803 20:04:18.295"></status>
</kw>
<status starttime="20170803 20:04:18.008" status="PASS" endtime="20170803 20:04:18.295"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:18.299">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:04:18.299" status="PASS" endtime="20170803 20:04:18.300"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:18.301">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:04:18.300" status="PASS" endtime="20170803 20:04:18.301"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:18.302">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:04:18.301" status="PASS" endtime="20170803 20:04:18.302"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:18.303">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:04:18.302" status="PASS" endtime="20170803 20:04:18.303"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:18.492">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:04:18.304" status="PASS" endtime="20170803 20:04:18.492"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:04:18.492">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:04:18.492">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:04:18.303" status="PASS" endtime="20170803 20:04:18.492"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:18.493">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:04:18.492" status="PASS" endtime="20170803 20:04:18.493"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:18.493">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:04:18.493" status="PASS" endtime="20170803 20:04:18.493"></status>
</kw>
<status starttime="20170803 20:04:18.298" status="PASS" endtime="20170803 20:04:18.494"></status>
</kw>
<status starttime="20170803 20:04:18.297" status="PASS" endtime="20170803 20:04:18.494"></status>
</kw>
<status starttime="20170803 20:04:18.297" status="PASS" endtime="20170803 20:04:18.494"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:18.494">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170803 20:04:18.494" status="PASS" endtime="20170803 20:04:18.494"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:18.496">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:04:18.496" status="PASS" endtime="20170803 20:04:18.496"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:18.497">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:04:18.497" status="PASS" endtime="20170803 20:04:18.497"></status>
</kw>
<status starttime="20170803 20:04:18.496" status="PASS" endtime="20170803 20:04:18.497"></status>
</kw>
<status starttime="20170803 20:04:18.495" status="PASS" endtime="20170803 20:04:18.498"></status>
</kw>
<status starttime="20170803 20:04:18.495" status="PASS" endtime="20170803 20:04:18.498"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:18.624">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:04:18.624">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:04:18.498" status="PASS" endtime="20170803 20:04:18.624"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:18.626">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:04:18.625" status="PASS" endtime="20170803 20:04:18.626"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:18.626">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:04:18.626" status="PASS" endtime="20170803 20:04:18.627"></status>
</kw>
<status starttime="20170803 20:04:18.626" status="PASS" endtime="20170803 20:04:18.627"></status>
</kw>
<status starttime="20170803 20:04:18.625" status="PASS" endtime="20170803 20:04:18.627"></status>
</kw>
<status starttime="20170803 20:04:18.624" status="PASS" endtime="20170803 20:04:18.627"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:04:18.627">Delete All Sessions</msg>
<status starttime="20170803 20:04:18.627" status="PASS" endtime="20170803 20:04:18.627"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:04:18.628">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:04:18.296" status="PASS" endtime="20170803 20:04:18.628"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:18.628">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:04:18.628" status="PASS" endtime="20170803 20:04:18.628"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:18.629">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:04:18.629">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:04:18.629">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:04:18.629" status="PASS" endtime="20170803 20:04:18.629"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:04:18.629">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170803 20:04:18.296" status="PASS" endtime="20170803 20:04:18.629"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:04:18.630">${host_state} = Running</msg>
<status starttime="20170803 20:04:18.295" status="PASS" endtime="20170803 20:04:18.630"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170803 20:04:18.630" status="PASS" endtime="20170803 20:04:18.631"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:18.637">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:04:18.636" status="PASS" endtime="20170803 20:04:18.637"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:18.638">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:04:18.637" status="PASS" endtime="20170803 20:04:18.638"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:18.639">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:04:18.638" status="PASS" endtime="20170803 20:04:18.639"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:18.640">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:04:18.639" status="PASS" endtime="20170803 20:04:18.640"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:18.923">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:04:18.641" status="PASS" endtime="20170803 20:04:18.923"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:04:18.923">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:04:18.923">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:04:18.640" status="PASS" endtime="20170803 20:04:18.923"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:18.924">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:04:18.924" status="PASS" endtime="20170803 20:04:18.924"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:18.925">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:04:18.925" status="PASS" endtime="20170803 20:04:18.925"></status>
</kw>
<status starttime="20170803 20:04:18.635" status="PASS" endtime="20170803 20:04:18.925"></status>
</kw>
<status starttime="20170803 20:04:18.635" status="PASS" endtime="20170803 20:04:18.925"></status>
</kw>
<status starttime="20170803 20:04:18.634" status="PASS" endtime="20170803 20:04:18.925"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:18.926">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170803 20:04:18.925" status="PASS" endtime="20170803 20:04:18.926"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:18.928">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170803 20:04:18.927" status="PASS" endtime="20170803 20:04:18.928"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:18.929">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170803 20:04:18.929" status="PASS" endtime="20170803 20:04:18.929"></status>
</kw>
<status starttime="20170803 20:04:18.928" status="PASS" endtime="20170803 20:04:18.929"></status>
</kw>
<status starttime="20170803 20:04:18.927" status="PASS" endtime="20170803 20:04:18.929"></status>
</kw>
<status starttime="20170803 20:04:18.926" status="PASS" endtime="20170803 20:04:18.929"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:18.996">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:04:18.996">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:04:18.929" status="PASS" endtime="20170803 20:04:18.996"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:18.998">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:04:18.997" status="PASS" endtime="20170803 20:04:18.998"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:18.999">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:04:18.998" status="PASS" endtime="20170803 20:04:18.999"></status>
</kw>
<status starttime="20170803 20:04:18.998" status="PASS" endtime="20170803 20:04:18.999"></status>
</kw>
<status starttime="20170803 20:04:18.997" status="PASS" endtime="20170803 20:04:18.999"></status>
</kw>
<status starttime="20170803 20:04:18.996" status="PASS" endtime="20170803 20:04:18.999"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:04:19.000">Delete All Sessions</msg>
<status starttime="20170803 20:04:18.999" status="PASS" endtime="20170803 20:04:19.000"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:04:19.000">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:04:18.633" status="PASS" endtime="20170803 20:04:19.000"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:19.000">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:04:19.000" status="PASS" endtime="20170803 20:04:19.001"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:19.001">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:04:19.001">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:04:19.001">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:04:19.001" status="PASS" endtime="20170803 20:04:19.001"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:04:19.002">${state} = Off</msg>
<status starttime="20170803 20:04:18.632" status="PASS" endtime="20170803 20:04:19.002"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:04:19.002">${boot_progress} = Off</msg>
<status starttime="20170803 20:04:18.631" status="PASS" endtime="20170803 20:04:19.002"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170803 20:04:19.003">Off != FW Progress, Starting OS</msg>
<status starttime="20170803 20:04:19.002" status="FAIL" endtime="20170803 20:04:19.003"></status>
</kw>
<status starttime="20170803 20:04:18.631" status="FAIL" endtime="20170803 20:04:19.003"></status>
</kw>
<status starttime="20170803 20:04:18.007" status="FAIL" endtime="20170803 20:04:19.003"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:29.008">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:04:29.007" status="PASS" endtime="20170803 20:04:29.008"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:29.008">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:04:29.008" status="PASS" endtime="20170803 20:04:29.009"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:29.009">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:04:29.009" status="PASS" endtime="20170803 20:04:29.009"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:29.010">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:04:29.009" status="PASS" endtime="20170803 20:04:29.010"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:29.224">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:04:29.010" status="PASS" endtime="20170803 20:04:29.224"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:04:29.224">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:04:29.224">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:04:29.010" status="PASS" endtime="20170803 20:04:29.224"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:29.225">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:04:29.224" status="PASS" endtime="20170803 20:04:29.225"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:29.225">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:04:29.225" status="PASS" endtime="20170803 20:04:29.225"></status>
</kw>
<status starttime="20170803 20:04:29.007" status="PASS" endtime="20170803 20:04:29.226"></status>
</kw>
<status starttime="20170803 20:04:29.006" status="PASS" endtime="20170803 20:04:29.226"></status>
</kw>
<status starttime="20170803 20:04:29.006" status="PASS" endtime="20170803 20:04:29.226"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:29.226">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170803 20:04:29.226" status="PASS" endtime="20170803 20:04:29.226"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:29.228">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:04:29.228" status="PASS" endtime="20170803 20:04:29.228"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:29.229">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:04:29.229" status="PASS" endtime="20170803 20:04:29.229"></status>
</kw>
<status starttime="20170803 20:04:29.228" status="PASS" endtime="20170803 20:04:29.229"></status>
</kw>
<status starttime="20170803 20:04:29.227" status="PASS" endtime="20170803 20:04:29.230"></status>
</kw>
<status starttime="20170803 20:04:29.227" status="PASS" endtime="20170803 20:04:29.230"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:29.300">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:04:29.300">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:04:29.230" status="PASS" endtime="20170803 20:04:29.300"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:29.302">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:04:29.302" status="PASS" endtime="20170803 20:04:29.302"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:29.303">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:04:29.303" status="PASS" endtime="20170803 20:04:29.303"></status>
</kw>
<status starttime="20170803 20:04:29.302" status="PASS" endtime="20170803 20:04:29.303"></status>
</kw>
<status starttime="20170803 20:04:29.301" status="PASS" endtime="20170803 20:04:29.303"></status>
</kw>
<status starttime="20170803 20:04:29.301" status="PASS" endtime="20170803 20:04:29.303"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:04:29.304">Delete All Sessions</msg>
<status starttime="20170803 20:04:29.304" status="PASS" endtime="20170803 20:04:29.304"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:04:29.304">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:04:29.005" status="PASS" endtime="20170803 20:04:29.304"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:29.305">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:04:29.304" status="PASS" endtime="20170803 20:04:29.305"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:29.305">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:04:29.305">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:04:29.306">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:04:29.305" status="PASS" endtime="20170803 20:04:29.306"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:04:29.306">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170803 20:04:29.005" status="PASS" endtime="20170803 20:04:29.306"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:04:29.306">${power_state} = On</msg>
<status starttime="20170803 20:04:29.004" status="PASS" endtime="20170803 20:04:29.306"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170803 20:04:29.306" status="PASS" endtime="20170803 20:04:29.307"></status>
</kw>
<status starttime="20170803 20:04:29.004" status="PASS" endtime="20170803 20:04:29.307"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:29.310">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:04:29.310" status="PASS" endtime="20170803 20:04:29.311"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:29.312">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:04:29.311" status="PASS" endtime="20170803 20:04:29.312"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:29.312">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:04:29.312" status="PASS" endtime="20170803 20:04:29.312"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:29.313">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:04:29.313" status="PASS" endtime="20170803 20:04:29.313"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:29.538">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:04:29.314" status="PASS" endtime="20170803 20:04:29.538"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:04:29.538">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:04:29.538">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:04:29.313" status="PASS" endtime="20170803 20:04:29.539"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:29.539">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:04:29.539" status="PASS" endtime="20170803 20:04:29.539"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:29.540">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:04:29.539" status="PASS" endtime="20170803 20:04:29.540"></status>
</kw>
<status starttime="20170803 20:04:29.309" status="PASS" endtime="20170803 20:04:29.540"></status>
</kw>
<status starttime="20170803 20:04:29.309" status="PASS" endtime="20170803 20:04:29.540"></status>
</kw>
<status starttime="20170803 20:04:29.308" status="PASS" endtime="20170803 20:04:29.540"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:29.541">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170803 20:04:29.541" status="PASS" endtime="20170803 20:04:29.541"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:29.543">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:04:29.542" status="PASS" endtime="20170803 20:04:29.543"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:29.544">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:04:29.544" status="PASS" endtime="20170803 20:04:29.544"></status>
</kw>
<status starttime="20170803 20:04:29.543" status="PASS" endtime="20170803 20:04:29.544"></status>
</kw>
<status starttime="20170803 20:04:29.542" status="PASS" endtime="20170803 20:04:29.544"></status>
</kw>
<status starttime="20170803 20:04:29.541" status="PASS" endtime="20170803 20:04:29.544"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:29.683">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:04:29.683">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:04:29.544" status="PASS" endtime="20170803 20:04:29.683"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:29.685">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:04:29.684" status="PASS" endtime="20170803 20:04:29.685"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:29.685">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:04:29.685" status="PASS" endtime="20170803 20:04:29.686"></status>
</kw>
<status starttime="20170803 20:04:29.685" status="PASS" endtime="20170803 20:04:29.686"></status>
</kw>
<status starttime="20170803 20:04:29.684" status="PASS" endtime="20170803 20:04:29.686"></status>
</kw>
<status starttime="20170803 20:04:29.683" status="PASS" endtime="20170803 20:04:29.686"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:04:29.686">Delete All Sessions</msg>
<status starttime="20170803 20:04:29.686" status="PASS" endtime="20170803 20:04:29.686"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:04:29.687">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:04:29.308" status="PASS" endtime="20170803 20:04:29.687"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:29.687">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:04:29.687" status="PASS" endtime="20170803 20:04:29.687"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:29.688">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:04:29.688">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:04:29.688">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:04:29.687" status="PASS" endtime="20170803 20:04:29.688"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:04:29.688">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170803 20:04:29.307" status="PASS" endtime="20170803 20:04:29.688"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:04:29.689">${host_state} = Running</msg>
<status starttime="20170803 20:04:29.307" status="PASS" endtime="20170803 20:04:29.689"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170803 20:04:29.689" status="PASS" endtime="20170803 20:04:29.689"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:29.693">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:04:29.693" status="PASS" endtime="20170803 20:04:29.694"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:29.694">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:04:29.694" status="PASS" endtime="20170803 20:04:29.694"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:29.695">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:04:29.695" status="PASS" endtime="20170803 20:04:29.695"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:29.696">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:04:29.695" status="PASS" endtime="20170803 20:04:29.696"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:29.892">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:04:29.696" status="PASS" endtime="20170803 20:04:29.892"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:04:29.892">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:04:29.892">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:04:29.696" status="PASS" endtime="20170803 20:04:29.892"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:29.893">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:04:29.893" status="PASS" endtime="20170803 20:04:29.893"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:29.894">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:04:29.893" status="PASS" endtime="20170803 20:04:29.894"></status>
</kw>
<status starttime="20170803 20:04:29.693" status="PASS" endtime="20170803 20:04:29.894"></status>
</kw>
<status starttime="20170803 20:04:29.692" status="PASS" endtime="20170803 20:04:29.894"></status>
</kw>
<status starttime="20170803 20:04:29.692" status="PASS" endtime="20170803 20:04:29.894"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:29.894">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170803 20:04:29.894" status="PASS" endtime="20170803 20:04:29.895"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:29.897">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170803 20:04:29.896" status="PASS" endtime="20170803 20:04:29.897"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:29.898">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170803 20:04:29.897" status="PASS" endtime="20170803 20:04:29.898"></status>
</kw>
<status starttime="20170803 20:04:29.897" status="PASS" endtime="20170803 20:04:29.898"></status>
</kw>
<status starttime="20170803 20:04:29.895" status="PASS" endtime="20170803 20:04:29.898"></status>
</kw>
<status starttime="20170803 20:04:29.895" status="PASS" endtime="20170803 20:04:29.898"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:29.975">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:04:29.975">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:04:29.898" status="PASS" endtime="20170803 20:04:29.975"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:29.977">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:04:29.977" status="PASS" endtime="20170803 20:04:29.977"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:29.978">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:04:29.978" status="PASS" endtime="20170803 20:04:29.978"></status>
</kw>
<status starttime="20170803 20:04:29.977" status="PASS" endtime="20170803 20:04:29.978"></status>
</kw>
<status starttime="20170803 20:04:29.976" status="PASS" endtime="20170803 20:04:29.978"></status>
</kw>
<status starttime="20170803 20:04:29.976" status="PASS" endtime="20170803 20:04:29.978"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:04:29.979">Delete All Sessions</msg>
<status starttime="20170803 20:04:29.979" status="PASS" endtime="20170803 20:04:29.979"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:04:29.979">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:04:29.691" status="PASS" endtime="20170803 20:04:29.979"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:29.980">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:04:29.979" status="PASS" endtime="20170803 20:04:29.980"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:29.980">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:04:29.980">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:04:29.980">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:04:29.980" status="PASS" endtime="20170803 20:04:29.981"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:04:29.981">${state} = Off</msg>
<status starttime="20170803 20:04:29.690" status="PASS" endtime="20170803 20:04:29.981"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:04:29.981">${boot_progress} = Off</msg>
<status starttime="20170803 20:04:29.690" status="PASS" endtime="20170803 20:04:29.981"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170803 20:04:29.982">Off != FW Progress, Starting OS</msg>
<status starttime="20170803 20:04:29.981" status="FAIL" endtime="20170803 20:04:29.982"></status>
</kw>
<status starttime="20170803 20:04:29.689" status="FAIL" endtime="20170803 20:04:29.982"></status>
</kw>
<status starttime="20170803 20:04:29.003" status="FAIL" endtime="20170803 20:04:29.982"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:39.987">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:04:39.987" status="PASS" endtime="20170803 20:04:39.987"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:39.988">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:04:39.988" status="PASS" endtime="20170803 20:04:39.988"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:39.989">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:04:39.988" status="PASS" endtime="20170803 20:04:39.989"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:39.989">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:04:39.989" status="PASS" endtime="20170803 20:04:39.989"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:40.823">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:04:39.990" status="PASS" endtime="20170803 20:04:40.824"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:04:40.824">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:04:40.824">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:04:39.990" status="PASS" endtime="20170803 20:04:40.824"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:40.824">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:04:40.824" status="PASS" endtime="20170803 20:04:40.824"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:40.825">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:04:40.825" status="PASS" endtime="20170803 20:04:40.825"></status>
</kw>
<status starttime="20170803 20:04:39.986" status="PASS" endtime="20170803 20:04:40.825"></status>
</kw>
<status starttime="20170803 20:04:39.986" status="PASS" endtime="20170803 20:04:40.825"></status>
</kw>
<status starttime="20170803 20:04:39.985" status="PASS" endtime="20170803 20:04:40.825"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:40.826">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170803 20:04:40.826" status="PASS" endtime="20170803 20:04:40.826"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:40.828">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:04:40.827" status="PASS" endtime="20170803 20:04:40.828"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:40.829">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:04:40.829" status="PASS" endtime="20170803 20:04:40.829"></status>
</kw>
<status starttime="20170803 20:04:40.828" status="PASS" endtime="20170803 20:04:40.829"></status>
</kw>
<status starttime="20170803 20:04:40.827" status="PASS" endtime="20170803 20:04:40.829"></status>
</kw>
<status starttime="20170803 20:04:40.826" status="PASS" endtime="20170803 20:04:40.829"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:44.750">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:04:44.751">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:04:40.830" status="PASS" endtime="20170803 20:04:44.751"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:44.752">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:04:44.752" status="PASS" endtime="20170803 20:04:44.752"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:44.753">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:04:44.753" status="PASS" endtime="20170803 20:04:44.753"></status>
</kw>
<status starttime="20170803 20:04:44.753" status="PASS" endtime="20170803 20:04:44.754"></status>
</kw>
<status starttime="20170803 20:04:44.751" status="PASS" endtime="20170803 20:04:44.754"></status>
</kw>
<status starttime="20170803 20:04:44.751" status="PASS" endtime="20170803 20:04:44.754"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:04:44.754">Delete All Sessions</msg>
<status starttime="20170803 20:04:44.754" status="PASS" endtime="20170803 20:04:44.754"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:04:44.754">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:04:39.984" status="PASS" endtime="20170803 20:04:44.755"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:44.755">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:04:44.755" status="PASS" endtime="20170803 20:04:44.755"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:44.756">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:04:44.756">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:04:44.756">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:04:44.755" status="PASS" endtime="20170803 20:04:44.756"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:04:44.756">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170803 20:04:39.984" status="PASS" endtime="20170803 20:04:44.756"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:04:44.756">${power_state} = On</msg>
<status starttime="20170803 20:04:39.983" status="PASS" endtime="20170803 20:04:44.757"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170803 20:04:44.757" status="PASS" endtime="20170803 20:04:44.757"></status>
</kw>
<status starttime="20170803 20:04:39.983" status="PASS" endtime="20170803 20:04:44.757"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:44.761">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:04:44.760" status="PASS" endtime="20170803 20:04:44.761"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:44.762">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:04:44.762" status="PASS" endtime="20170803 20:04:44.762"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:44.763">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:04:44.762" status="PASS" endtime="20170803 20:04:44.763"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:44.763">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:04:44.763" status="PASS" endtime="20170803 20:04:44.763"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:44.942">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:04:44.764" status="PASS" endtime="20170803 20:04:44.942"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:04:44.943">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:04:44.943">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:04:44.764" status="PASS" endtime="20170803 20:04:44.943"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:44.943">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:04:44.943" status="PASS" endtime="20170803 20:04:44.943"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:44.944">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:04:44.944" status="PASS" endtime="20170803 20:04:44.944"></status>
</kw>
<status starttime="20170803 20:04:44.760" status="PASS" endtime="20170803 20:04:44.944"></status>
</kw>
<status starttime="20170803 20:04:44.759" status="PASS" endtime="20170803 20:04:44.944"></status>
</kw>
<status starttime="20170803 20:04:44.759" status="PASS" endtime="20170803 20:04:44.944"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:44.945">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170803 20:04:44.945" status="PASS" endtime="20170803 20:04:44.945"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:44.947">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:04:44.946" status="PASS" endtime="20170803 20:04:44.947"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:44.948">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:04:44.948" status="PASS" endtime="20170803 20:04:44.948"></status>
</kw>
<status starttime="20170803 20:04:44.947" status="PASS" endtime="20170803 20:04:44.948"></status>
</kw>
<status starttime="20170803 20:04:44.946" status="PASS" endtime="20170803 20:04:44.948"></status>
</kw>
<status starttime="20170803 20:04:44.945" status="PASS" endtime="20170803 20:04:44.948"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:45.437">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:04:45.438">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:04:44.949" status="PASS" endtime="20170803 20:04:45.438"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:45.439">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:04:45.439" status="PASS" endtime="20170803 20:04:45.439"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:45.441">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:04:45.440" status="PASS" endtime="20170803 20:04:45.441"></status>
</kw>
<status starttime="20170803 20:04:45.440" status="PASS" endtime="20170803 20:04:45.441"></status>
</kw>
<status starttime="20170803 20:04:45.438" status="PASS" endtime="20170803 20:04:45.441"></status>
</kw>
<status starttime="20170803 20:04:45.438" status="PASS" endtime="20170803 20:04:45.441"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:04:45.442">Delete All Sessions</msg>
<status starttime="20170803 20:04:45.441" status="PASS" endtime="20170803 20:04:45.442"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:04:45.442">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:04:44.758" status="PASS" endtime="20170803 20:04:45.442"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:45.443">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:04:45.442" status="PASS" endtime="20170803 20:04:45.443"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:45.443">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:04:45.443">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:04:45.443">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:04:45.443" status="PASS" endtime="20170803 20:04:45.443"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:04:45.444">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170803 20:04:44.758" status="PASS" endtime="20170803 20:04:45.444"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:04:45.444">${host_state} = Running</msg>
<status starttime="20170803 20:04:44.757" status="PASS" endtime="20170803 20:04:45.444"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170803 20:04:45.444" status="PASS" endtime="20170803 20:04:45.445"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:45.449">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:04:45.448" status="PASS" endtime="20170803 20:04:45.449"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:45.450">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:04:45.449" status="PASS" endtime="20170803 20:04:45.450"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:45.451">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:04:45.450" status="PASS" endtime="20170803 20:04:45.451"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:45.451">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:04:45.451" status="PASS" endtime="20170803 20:04:45.451"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:45.632">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:04:45.452" status="PASS" endtime="20170803 20:04:45.633"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:04:45.633">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:04:45.633">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:04:45.451" status="PASS" endtime="20170803 20:04:45.633"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:45.633">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:04:45.633" status="PASS" endtime="20170803 20:04:45.633"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:45.634">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:04:45.634" status="PASS" endtime="20170803 20:04:45.634"></status>
</kw>
<status starttime="20170803 20:04:45.448" status="PASS" endtime="20170803 20:04:45.634"></status>
</kw>
<status starttime="20170803 20:04:45.447" status="PASS" endtime="20170803 20:04:45.634"></status>
</kw>
<status starttime="20170803 20:04:45.447" status="PASS" endtime="20170803 20:04:45.634"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:45.635">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170803 20:04:45.635" status="PASS" endtime="20170803 20:04:45.635"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:45.637">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170803 20:04:45.636" status="PASS" endtime="20170803 20:04:45.637"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:45.638">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170803 20:04:45.638" status="PASS" endtime="20170803 20:04:45.638"></status>
</kw>
<status starttime="20170803 20:04:45.637" status="PASS" endtime="20170803 20:04:45.638"></status>
</kw>
<status starttime="20170803 20:04:45.636" status="PASS" endtime="20170803 20:04:45.638"></status>
</kw>
<status starttime="20170803 20:04:45.635" status="PASS" endtime="20170803 20:04:45.638"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:45.880">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:04:45.880">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:04:45.639" status="PASS" endtime="20170803 20:04:45.880"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:45.882">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:04:45.881" status="PASS" endtime="20170803 20:04:45.882"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:45.883">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:04:45.883" status="PASS" endtime="20170803 20:04:45.883"></status>
</kw>
<status starttime="20170803 20:04:45.882" status="PASS" endtime="20170803 20:04:45.883"></status>
</kw>
<status starttime="20170803 20:04:45.881" status="PASS" endtime="20170803 20:04:45.883"></status>
</kw>
<status starttime="20170803 20:04:45.881" status="PASS" endtime="20170803 20:04:45.883"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:04:45.884">Delete All Sessions</msg>
<status starttime="20170803 20:04:45.884" status="PASS" endtime="20170803 20:04:45.884"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:04:45.884">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:04:45.446" status="PASS" endtime="20170803 20:04:45.884"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:45.885">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:04:45.884" status="PASS" endtime="20170803 20:04:45.885"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:45.885">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:04:45.885">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:04:45.885">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:04:45.885" status="PASS" endtime="20170803 20:04:45.885"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:04:45.886">${state} = Off</msg>
<status starttime="20170803 20:04:45.445" status="PASS" endtime="20170803 20:04:45.886"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:04:45.886">${boot_progress} = Off</msg>
<status starttime="20170803 20:04:45.445" status="PASS" endtime="20170803 20:04:45.886"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170803 20:04:45.887">Off != FW Progress, Starting OS</msg>
<status starttime="20170803 20:04:45.886" status="FAIL" endtime="20170803 20:04:45.887"></status>
</kw>
<status starttime="20170803 20:04:45.445" status="FAIL" endtime="20170803 20:04:45.887"></status>
</kw>
<status starttime="20170803 20:04:39.982" status="FAIL" endtime="20170803 20:04:45.887"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:55.892">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:04:55.891" status="PASS" endtime="20170803 20:04:55.892"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:55.893">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:04:55.892" status="PASS" endtime="20170803 20:04:55.893"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:55.893">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:04:55.893" status="PASS" endtime="20170803 20:04:55.893"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:55.894">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:04:55.894" status="PASS" endtime="20170803 20:04:55.894"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:56.621">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:04:55.895" status="PASS" endtime="20170803 20:04:56.622"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:04:56.622">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:04:56.622">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:04:55.894" status="PASS" endtime="20170803 20:04:56.622"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:56.623">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:04:56.622" status="PASS" endtime="20170803 20:04:56.623"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:56.623">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:04:56.623" status="PASS" endtime="20170803 20:04:56.623"></status>
</kw>
<status starttime="20170803 20:04:55.891" status="PASS" endtime="20170803 20:04:56.623"></status>
</kw>
<status starttime="20170803 20:04:55.890" status="PASS" endtime="20170803 20:04:56.624"></status>
</kw>
<status starttime="20170803 20:04:55.890" status="PASS" endtime="20170803 20:04:56.624"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:56.624">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170803 20:04:56.624" status="PASS" endtime="20170803 20:04:56.624"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:04:56.626">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:04:56.626" status="PASS" endtime="20170803 20:04:56.626"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:04:56.627">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:04:56.627" status="PASS" endtime="20170803 20:04:56.627"></status>
</kw>
<status starttime="20170803 20:04:56.627" status="PASS" endtime="20170803 20:04:56.628"></status>
</kw>
<status starttime="20170803 20:04:56.625" status="PASS" endtime="20170803 20:04:56.628"></status>
</kw>
<status starttime="20170803 20:04:56.625" status="PASS" endtime="20170803 20:04:56.628"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:02.634">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:05:02.634">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:04:56.628" status="PASS" endtime="20170803 20:05:02.634"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:02.636">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:05:02.636" status="PASS" endtime="20170803 20:05:02.636"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:02.637">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:05:02.637" status="PASS" endtime="20170803 20:05:02.637"></status>
</kw>
<status starttime="20170803 20:05:02.636" status="PASS" endtime="20170803 20:05:02.637"></status>
</kw>
<status starttime="20170803 20:05:02.635" status="PASS" endtime="20170803 20:05:02.637"></status>
</kw>
<status starttime="20170803 20:05:02.635" status="PASS" endtime="20170803 20:05:02.637"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:05:02.638">Delete All Sessions</msg>
<status starttime="20170803 20:05:02.638" status="PASS" endtime="20170803 20:05:02.638"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:05:02.638">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:04:55.889" status="PASS" endtime="20170803 20:05:02.638"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:02.639">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:05:02.638" status="PASS" endtime="20170803 20:05:02.639"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:02.639">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:05:02.639">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:05:02.640">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:05:02.639" status="PASS" endtime="20170803 20:05:02.640"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:05:02.640">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170803 20:04:55.889" status="PASS" endtime="20170803 20:05:02.640"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:05:02.640">${power_state} = Off</msg>
<status starttime="20170803 20:04:55.888" status="PASS" endtime="20170803 20:05:02.640"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170803 20:05:02.641">On != Off</msg>
<status starttime="20170803 20:05:02.641" status="FAIL" endtime="20170803 20:05:02.641"></status>
</kw>
<status starttime="20170803 20:04:55.888" status="FAIL" endtime="20170803 20:05:02.641"></status>
</kw>
<status starttime="20170803 20:04:55.887" status="FAIL" endtime="20170803 20:05:02.641"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:12.685">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:05:12.684" status="PASS" endtime="20170803 20:05:12.685"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:12.686">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:05:12.686" status="PASS" endtime="20170803 20:05:12.686"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:12.687">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:05:12.687" status="PASS" endtime="20170803 20:05:12.687"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:12.688">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:05:12.688" status="PASS" endtime="20170803 20:05:12.688"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:13.043">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:05:12.689" status="PASS" endtime="20170803 20:05:13.043"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:05:13.043">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:05:13.043">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:05:12.689" status="PASS" endtime="20170803 20:05:13.043"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:13.044">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:05:13.044" status="PASS" endtime="20170803 20:05:13.044"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:13.045">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:05:13.044" status="PASS" endtime="20170803 20:05:13.045"></status>
</kw>
<status starttime="20170803 20:05:12.646" status="PASS" endtime="20170803 20:05:13.045"></status>
</kw>
<status starttime="20170803 20:05:12.645" status="PASS" endtime="20170803 20:05:13.045"></status>
</kw>
<status starttime="20170803 20:05:12.645" status="PASS" endtime="20170803 20:05:13.045"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:13.046">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170803 20:05:13.045" status="PASS" endtime="20170803 20:05:13.046"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:13.048">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:05:13.047" status="PASS" endtime="20170803 20:05:13.048"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:13.049">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:05:13.048" status="PASS" endtime="20170803 20:05:13.049"></status>
</kw>
<status starttime="20170803 20:05:13.048" status="PASS" endtime="20170803 20:05:13.049"></status>
</kw>
<status starttime="20170803 20:05:13.046" status="PASS" endtime="20170803 20:05:13.049"></status>
</kw>
<status starttime="20170803 20:05:13.046" status="PASS" endtime="20170803 20:05:13.049"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:13.476">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:05:13.477">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:05:13.049" status="PASS" endtime="20170803 20:05:13.477"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:13.479">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:05:13.478" status="PASS" endtime="20170803 20:05:13.479"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:13.480">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:05:13.479" status="PASS" endtime="20170803 20:05:13.480"></status>
</kw>
<status starttime="20170803 20:05:13.479" status="PASS" endtime="20170803 20:05:13.480"></status>
</kw>
<status starttime="20170803 20:05:13.477" status="PASS" endtime="20170803 20:05:13.480"></status>
</kw>
<status starttime="20170803 20:05:13.477" status="PASS" endtime="20170803 20:05:13.480"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:05:13.481">Delete All Sessions</msg>
<status starttime="20170803 20:05:13.480" status="PASS" endtime="20170803 20:05:13.481"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:05:13.481">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:05:12.644" status="PASS" endtime="20170803 20:05:13.481"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:13.481">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:05:13.481" status="PASS" endtime="20170803 20:05:13.482"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:13.482">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:05:13.482">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:05:13.482">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:05:13.482" status="PASS" endtime="20170803 20:05:13.482"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:05:13.483">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170803 20:05:12.643" status="PASS" endtime="20170803 20:05:13.483"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:05:13.483">${power_state} = On</msg>
<status starttime="20170803 20:05:12.643" status="PASS" endtime="20170803 20:05:13.483"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170803 20:05:13.483" status="PASS" endtime="20170803 20:05:13.483"></status>
</kw>
<status starttime="20170803 20:05:12.643" status="PASS" endtime="20170803 20:05:13.484"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:13.487">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:05:13.487" status="PASS" endtime="20170803 20:05:13.487"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:13.488">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:05:13.488" status="PASS" endtime="20170803 20:05:13.488"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:13.488">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:05:13.488" status="PASS" endtime="20170803 20:05:13.489"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:13.489">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:05:13.489" status="PASS" endtime="20170803 20:05:13.489"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:14.131">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:05:13.490" status="PASS" endtime="20170803 20:05:14.131"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:05:14.131">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:05:14.131">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:05:13.489" status="PASS" endtime="20170803 20:05:14.131"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:14.132">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:05:14.132" status="PASS" endtime="20170803 20:05:14.132"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:14.133">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:05:14.132" status="PASS" endtime="20170803 20:05:14.133"></status>
</kw>
<status starttime="20170803 20:05:13.486" status="PASS" endtime="20170803 20:05:14.133"></status>
</kw>
<status starttime="20170803 20:05:13.486" status="PASS" endtime="20170803 20:05:14.133"></status>
</kw>
<status starttime="20170803 20:05:13.485" status="PASS" endtime="20170803 20:05:14.134"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:14.134">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170803 20:05:14.134" status="PASS" endtime="20170803 20:05:14.134"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:14.136">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:05:14.135" status="PASS" endtime="20170803 20:05:14.136"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:14.137">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:05:14.137" status="PASS" endtime="20170803 20:05:14.137"></status>
</kw>
<status starttime="20170803 20:05:14.136" status="PASS" endtime="20170803 20:05:14.137"></status>
</kw>
<status starttime="20170803 20:05:14.135" status="PASS" endtime="20170803 20:05:14.137"></status>
</kw>
<status starttime="20170803 20:05:14.134" status="PASS" endtime="20170803 20:05:14.137"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:14.652">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:05:14.652">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:05:14.138" status="PASS" endtime="20170803 20:05:14.652"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:14.654">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:05:14.653" status="PASS" endtime="20170803 20:05:14.654"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:14.655">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:05:14.654" status="PASS" endtime="20170803 20:05:14.655"></status>
</kw>
<status starttime="20170803 20:05:14.654" status="PASS" endtime="20170803 20:05:14.655"></status>
</kw>
<status starttime="20170803 20:05:14.653" status="PASS" endtime="20170803 20:05:14.655"></status>
</kw>
<status starttime="20170803 20:05:14.652" status="PASS" endtime="20170803 20:05:14.655"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:05:14.655">Delete All Sessions</msg>
<status starttime="20170803 20:05:14.655" status="PASS" endtime="20170803 20:05:14.656"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:05:14.656">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:05:13.485" status="PASS" endtime="20170803 20:05:14.656"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:14.656">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:05:14.656" status="PASS" endtime="20170803 20:05:14.656"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:14.657">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:05:14.657">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:05:14.657">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:05:14.657" status="PASS" endtime="20170803 20:05:14.657"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:05:14.657">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170803 20:05:13.484" status="PASS" endtime="20170803 20:05:14.658"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:05:14.658">${host_state} = Running</msg>
<status starttime="20170803 20:05:13.484" status="PASS" endtime="20170803 20:05:14.658"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170803 20:05:14.658" status="PASS" endtime="20170803 20:05:14.658"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:14.663">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:05:14.662" status="PASS" endtime="20170803 20:05:14.663"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:14.664">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:05:14.663" status="PASS" endtime="20170803 20:05:14.664"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:14.664">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:05:14.664" status="PASS" endtime="20170803 20:05:14.664"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:14.665">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:05:14.664" status="PASS" endtime="20170803 20:05:14.665"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:14.968">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:05:14.666" status="PASS" endtime="20170803 20:05:14.968"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:05:14.968">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:05:14.969">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:05:14.665" status="PASS" endtime="20170803 20:05:14.969"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:14.969">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:05:14.969" status="PASS" endtime="20170803 20:05:14.969"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:14.970">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:05:14.970" status="PASS" endtime="20170803 20:05:14.970"></status>
</kw>
<status starttime="20170803 20:05:14.661" status="PASS" endtime="20170803 20:05:14.970"></status>
</kw>
<status starttime="20170803 20:05:14.661" status="PASS" endtime="20170803 20:05:14.970"></status>
</kw>
<status starttime="20170803 20:05:14.660" status="PASS" endtime="20170803 20:05:14.970"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:14.971">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170803 20:05:14.971" status="PASS" endtime="20170803 20:05:14.971"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:14.973">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170803 20:05:14.972" status="PASS" endtime="20170803 20:05:14.973"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:14.974">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170803 20:05:14.974" status="PASS" endtime="20170803 20:05:14.974"></status>
</kw>
<status starttime="20170803 20:05:14.973" status="PASS" endtime="20170803 20:05:14.974"></status>
</kw>
<status starttime="20170803 20:05:14.972" status="PASS" endtime="20170803 20:05:14.974"></status>
</kw>
<status starttime="20170803 20:05:14.971" status="PASS" endtime="20170803 20:05:14.974"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:15.232">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:05:15.232">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:05:14.975" status="PASS" endtime="20170803 20:05:15.232"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:15.235">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:05:15.234" status="PASS" endtime="20170803 20:05:15.235"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:15.236">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:05:15.236" status="PASS" endtime="20170803 20:05:15.236"></status>
</kw>
<status starttime="20170803 20:05:15.235" status="PASS" endtime="20170803 20:05:15.236"></status>
</kw>
<status starttime="20170803 20:05:15.233" status="PASS" endtime="20170803 20:05:15.237"></status>
</kw>
<status starttime="20170803 20:05:15.233" status="PASS" endtime="20170803 20:05:15.237"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:05:15.237">Delete All Sessions</msg>
<status starttime="20170803 20:05:15.237" status="PASS" endtime="20170803 20:05:15.237"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:05:15.237">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:05:14.660" status="PASS" endtime="20170803 20:05:15.237"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:15.238">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:05:15.238" status="PASS" endtime="20170803 20:05:15.238"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:15.238">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:05:15.239">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:05:15.239">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:05:15.238" status="PASS" endtime="20170803 20:05:15.239"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:05:15.239">${state} = Off</msg>
<status starttime="20170803 20:05:14.659" status="PASS" endtime="20170803 20:05:15.239"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:05:15.239">${boot_progress} = Off</msg>
<status starttime="20170803 20:05:14.659" status="PASS" endtime="20170803 20:05:15.239"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170803 20:05:15.240">Off != FW Progress, Starting OS</msg>
<status starttime="20170803 20:05:15.239" status="FAIL" endtime="20170803 20:05:15.240"></status>
</kw>
<status starttime="20170803 20:05:14.659" status="FAIL" endtime="20170803 20:05:15.240"></status>
</kw>
<status starttime="20170803 20:05:12.642" status="FAIL" endtime="20170803 20:05:15.240"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:25.245">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:05:25.245" status="PASS" endtime="20170803 20:05:25.246"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:25.246">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:05:25.246" status="PASS" endtime="20170803 20:05:25.246"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:25.247">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:05:25.246" status="PASS" endtime="20170803 20:05:25.247"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:25.247">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:05:25.247" status="PASS" endtime="20170803 20:05:25.247"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:25.433">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:05:25.248" status="PASS" endtime="20170803 20:05:25.433"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:05:25.433">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:05:25.433">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:05:25.248" status="PASS" endtime="20170803 20:05:25.433"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:25.434">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:05:25.434" status="PASS" endtime="20170803 20:05:25.434"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:25.435">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:05:25.434" status="PASS" endtime="20170803 20:05:25.435"></status>
</kw>
<status starttime="20170803 20:05:25.244" status="PASS" endtime="20170803 20:05:25.435"></status>
</kw>
<status starttime="20170803 20:05:25.244" status="PASS" endtime="20170803 20:05:25.435"></status>
</kw>
<status starttime="20170803 20:05:25.243" status="PASS" endtime="20170803 20:05:25.435"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:25.436">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170803 20:05:25.435" status="PASS" endtime="20170803 20:05:25.436"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:25.438">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:05:25.437" status="PASS" endtime="20170803 20:05:25.438"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:25.439">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:05:25.438" status="PASS" endtime="20170803 20:05:25.439"></status>
</kw>
<status starttime="20170803 20:05:25.438" status="PASS" endtime="20170803 20:05:25.439"></status>
</kw>
<status starttime="20170803 20:05:25.436" status="PASS" endtime="20170803 20:05:25.439"></status>
</kw>
<status starttime="20170803 20:05:25.436" status="PASS" endtime="20170803 20:05:25.439"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:25.542">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:05:25.543">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:05:25.439" status="PASS" endtime="20170803 20:05:25.543"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:25.544">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:05:25.544" status="PASS" endtime="20170803 20:05:25.544"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:25.545">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:05:25.545" status="PASS" endtime="20170803 20:05:25.545"></status>
</kw>
<status starttime="20170803 20:05:25.545" status="PASS" endtime="20170803 20:05:25.545"></status>
</kw>
<status starttime="20170803 20:05:25.543" status="PASS" endtime="20170803 20:05:25.546"></status>
</kw>
<status starttime="20170803 20:05:25.543" status="PASS" endtime="20170803 20:05:25.546"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:05:25.546">Delete All Sessions</msg>
<status starttime="20170803 20:05:25.546" status="PASS" endtime="20170803 20:05:25.546"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:05:25.546">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:05:25.243" status="PASS" endtime="20170803 20:05:25.546"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:25.547">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:05:25.547" status="PASS" endtime="20170803 20:05:25.547"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:25.548">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:05:25.548">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:05:25.548">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:05:25.547" status="PASS" endtime="20170803 20:05:25.548"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:05:25.548">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170803 20:05:25.242" status="PASS" endtime="20170803 20:05:25.548"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:05:25.548">${power_state} = On</msg>
<status starttime="20170803 20:05:25.242" status="PASS" endtime="20170803 20:05:25.548"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170803 20:05:25.549" status="PASS" endtime="20170803 20:05:25.549"></status>
</kw>
<status starttime="20170803 20:05:25.241" status="PASS" endtime="20170803 20:05:25.549"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:25.553">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:05:25.552" status="PASS" endtime="20170803 20:05:25.553"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:25.554">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:05:25.554" status="PASS" endtime="20170803 20:05:25.554"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:25.555">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:05:25.554" status="PASS" endtime="20170803 20:05:25.555"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:25.555">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:05:25.555" status="PASS" endtime="20170803 20:05:25.555"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:25.736">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:05:25.556" status="PASS" endtime="20170803 20:05:25.736"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:05:25.736">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:05:25.736">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:05:25.555" status="PASS" endtime="20170803 20:05:25.736"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:25.737">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:05:25.737" status="PASS" endtime="20170803 20:05:25.737"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:25.738">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:05:25.737" status="PASS" endtime="20170803 20:05:25.738"></status>
</kw>
<status starttime="20170803 20:05:25.552" status="PASS" endtime="20170803 20:05:25.738"></status>
</kw>
<status starttime="20170803 20:05:25.551" status="PASS" endtime="20170803 20:05:25.738"></status>
</kw>
<status starttime="20170803 20:05:25.551" status="PASS" endtime="20170803 20:05:25.738"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:25.739">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170803 20:05:25.738" status="PASS" endtime="20170803 20:05:25.739"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:25.741">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:05:25.740" status="PASS" endtime="20170803 20:05:25.741"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:25.742">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:05:25.741" status="PASS" endtime="20170803 20:05:25.742"></status>
</kw>
<status starttime="20170803 20:05:25.741" status="PASS" endtime="20170803 20:05:25.742"></status>
</kw>
<status starttime="20170803 20:05:25.739" status="PASS" endtime="20170803 20:05:25.742"></status>
</kw>
<status starttime="20170803 20:05:25.739" status="PASS" endtime="20170803 20:05:25.742"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:25.854">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:05:25.854">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:05:25.742" status="PASS" endtime="20170803 20:05:25.854"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:25.856">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:05:25.856" status="PASS" endtime="20170803 20:05:25.856"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:25.857">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:05:25.857" status="PASS" endtime="20170803 20:05:25.857"></status>
</kw>
<status starttime="20170803 20:05:25.856" status="PASS" endtime="20170803 20:05:25.857"></status>
</kw>
<status starttime="20170803 20:05:25.855" status="PASS" endtime="20170803 20:05:25.857"></status>
</kw>
<status starttime="20170803 20:05:25.855" status="PASS" endtime="20170803 20:05:25.857"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:05:25.858">Delete All Sessions</msg>
<status starttime="20170803 20:05:25.858" status="PASS" endtime="20170803 20:05:25.858"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:05:25.858">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:05:25.550" status="PASS" endtime="20170803 20:05:25.858"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:25.859">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:05:25.858" status="PASS" endtime="20170803 20:05:25.859"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:25.859">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:05:25.859">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:05:25.859">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:05:25.859" status="PASS" endtime="20170803 20:05:25.859"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:05:25.860">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170803 20:05:25.550" status="PASS" endtime="20170803 20:05:25.860"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:05:25.860">${host_state} = Running</msg>
<status starttime="20170803 20:05:25.549" status="PASS" endtime="20170803 20:05:25.860"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170803 20:05:25.860" status="PASS" endtime="20170803 20:05:25.861"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:25.865">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:05:25.864" status="PASS" endtime="20170803 20:05:25.865"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:25.866">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:05:25.865" status="PASS" endtime="20170803 20:05:25.866"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:25.866">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:05:25.866" status="PASS" endtime="20170803 20:05:25.866"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:25.867">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:05:25.867" status="PASS" endtime="20170803 20:05:25.867"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:26.061">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:05:25.868" status="PASS" endtime="20170803 20:05:26.061"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:05:26.061">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:05:26.061">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:05:25.867" status="PASS" endtime="20170803 20:05:26.061"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:26.062">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:05:26.062" status="PASS" endtime="20170803 20:05:26.062"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:26.063">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:05:26.062" status="PASS" endtime="20170803 20:05:26.063"></status>
</kw>
<status starttime="20170803 20:05:25.864" status="PASS" endtime="20170803 20:05:26.063"></status>
</kw>
<status starttime="20170803 20:05:25.864" status="PASS" endtime="20170803 20:05:26.063"></status>
</kw>
<status starttime="20170803 20:05:25.863" status="PASS" endtime="20170803 20:05:26.063"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:26.064">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170803 20:05:26.063" status="PASS" endtime="20170803 20:05:26.064"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:26.066">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170803 20:05:26.065" status="PASS" endtime="20170803 20:05:26.066"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:26.067">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170803 20:05:26.067" status="PASS" endtime="20170803 20:05:26.067"></status>
</kw>
<status starttime="20170803 20:05:26.066" status="PASS" endtime="20170803 20:05:26.067"></status>
</kw>
<status starttime="20170803 20:05:26.064" status="PASS" endtime="20170803 20:05:26.067"></status>
</kw>
<status starttime="20170803 20:05:26.064" status="PASS" endtime="20170803 20:05:26.067"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:26.177">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:05:26.177">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:05:26.068" status="PASS" endtime="20170803 20:05:26.177"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:26.179">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:05:26.178" status="PASS" endtime="20170803 20:05:26.179"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:26.179">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:05:26.179" status="PASS" endtime="20170803 20:05:26.180"></status>
</kw>
<status starttime="20170803 20:05:26.179" status="PASS" endtime="20170803 20:05:26.180"></status>
</kw>
<status starttime="20170803 20:05:26.178" status="PASS" endtime="20170803 20:05:26.180"></status>
</kw>
<status starttime="20170803 20:05:26.177" status="PASS" endtime="20170803 20:05:26.180"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:05:26.180">Delete All Sessions</msg>
<status starttime="20170803 20:05:26.180" status="PASS" endtime="20170803 20:05:26.181"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:05:26.181">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:05:25.862" status="PASS" endtime="20170803 20:05:26.181"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:26.181">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:05:26.181" status="PASS" endtime="20170803 20:05:26.181"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:26.182">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:05:26.182">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:05:26.182">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:05:26.182" status="PASS" endtime="20170803 20:05:26.182"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:05:26.183">${state} = Off</msg>
<status starttime="20170803 20:05:25.862" status="PASS" endtime="20170803 20:05:26.183"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:05:26.183">${boot_progress} = Off</msg>
<status starttime="20170803 20:05:25.861" status="PASS" endtime="20170803 20:05:26.183"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170803 20:05:26.183">Off != FW Progress, Starting OS</msg>
<status starttime="20170803 20:05:26.183" status="FAIL" endtime="20170803 20:05:26.184"></status>
</kw>
<status starttime="20170803 20:05:25.861" status="FAIL" endtime="20170803 20:05:26.184"></status>
</kw>
<status starttime="20170803 20:05:25.241" status="FAIL" endtime="20170803 20:05:26.184"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:36.189">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:05:36.189" status="PASS" endtime="20170803 20:05:36.189"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:36.190">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:05:36.190" status="PASS" endtime="20170803 20:05:36.190"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:36.191">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:05:36.190" status="PASS" endtime="20170803 20:05:36.191"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:36.192">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:05:36.191" status="PASS" endtime="20170803 20:05:36.192"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:36.369">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:05:36.192" status="PASS" endtime="20170803 20:05:36.370"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:05:36.370">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:05:36.370">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:05:36.192" status="PASS" endtime="20170803 20:05:36.370"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:36.370">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:05:36.370" status="PASS" endtime="20170803 20:05:36.370"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:36.371">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:05:36.371" status="PASS" endtime="20170803 20:05:36.371"></status>
</kw>
<status starttime="20170803 20:05:36.188" status="PASS" endtime="20170803 20:05:36.371"></status>
</kw>
<status starttime="20170803 20:05:36.188" status="PASS" endtime="20170803 20:05:36.371"></status>
</kw>
<status starttime="20170803 20:05:36.187" status="PASS" endtime="20170803 20:05:36.372"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:36.372">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170803 20:05:36.372" status="PASS" endtime="20170803 20:05:36.372"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:36.374">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:05:36.373" status="PASS" endtime="20170803 20:05:36.374"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:36.375">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:05:36.375" status="PASS" endtime="20170803 20:05:36.375"></status>
</kw>
<status starttime="20170803 20:05:36.374" status="PASS" endtime="20170803 20:05:36.375"></status>
</kw>
<status starttime="20170803 20:05:36.373" status="PASS" endtime="20170803 20:05:36.375"></status>
</kw>
<status starttime="20170803 20:05:36.372" status="PASS" endtime="20170803 20:05:36.376"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:36.439">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:05:36.439">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:05:36.376" status="PASS" endtime="20170803 20:05:36.439"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:36.440">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:05:36.440" status="PASS" endtime="20170803 20:05:36.441"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:36.441">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:05:36.441" status="PASS" endtime="20170803 20:05:36.442"></status>
</kw>
<status starttime="20170803 20:05:36.441" status="PASS" endtime="20170803 20:05:36.442"></status>
</kw>
<status starttime="20170803 20:05:36.440" status="PASS" endtime="20170803 20:05:36.442"></status>
</kw>
<status starttime="20170803 20:05:36.439" status="PASS" endtime="20170803 20:05:36.442"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:05:36.442">Delete All Sessions</msg>
<status starttime="20170803 20:05:36.442" status="PASS" endtime="20170803 20:05:36.442"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:05:36.443">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:05:36.186" status="PASS" endtime="20170803 20:05:36.443"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:36.443">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:05:36.443" status="PASS" endtime="20170803 20:05:36.443"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:36.444">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:05:36.444">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:05:36.444">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:05:36.443" status="PASS" endtime="20170803 20:05:36.444"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:05:36.444">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170803 20:05:36.186" status="PASS" endtime="20170803 20:05:36.444"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:05:36.445">${power_state} = On</msg>
<status starttime="20170803 20:05:36.185" status="PASS" endtime="20170803 20:05:36.445"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170803 20:05:36.445" status="PASS" endtime="20170803 20:05:36.445"></status>
</kw>
<status starttime="20170803 20:05:36.185" status="PASS" endtime="20170803 20:05:36.445"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:36.449">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:05:36.449" status="PASS" endtime="20170803 20:05:36.449"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:36.450">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:05:36.450" status="PASS" endtime="20170803 20:05:36.450"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:36.451">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:05:36.450" status="PASS" endtime="20170803 20:05:36.451"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:36.451">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:05:36.451" status="PASS" endtime="20170803 20:05:36.451"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:36.664">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:05:36.452" status="PASS" endtime="20170803 20:05:36.665"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:05:36.665">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:05:36.665">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:05:36.452" status="PASS" endtime="20170803 20:05:36.665"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:36.665">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:05:36.665" status="PASS" endtime="20170803 20:05:36.665"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:36.666">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:05:36.666" status="PASS" endtime="20170803 20:05:36.666"></status>
</kw>
<status starttime="20170803 20:05:36.448" status="PASS" endtime="20170803 20:05:36.666"></status>
</kw>
<status starttime="20170803 20:05:36.447" status="PASS" endtime="20170803 20:05:36.666"></status>
</kw>
<status starttime="20170803 20:05:36.447" status="PASS" endtime="20170803 20:05:36.666"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:36.667">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170803 20:05:36.667" status="PASS" endtime="20170803 20:05:36.667"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:36.669">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:05:36.668" status="PASS" endtime="20170803 20:05:36.669"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:36.670">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:05:36.670" status="PASS" endtime="20170803 20:05:36.670"></status>
</kw>
<status starttime="20170803 20:05:36.669" status="PASS" endtime="20170803 20:05:36.670"></status>
</kw>
<status starttime="20170803 20:05:36.668" status="PASS" endtime="20170803 20:05:36.670"></status>
</kw>
<status starttime="20170803 20:05:36.667" status="PASS" endtime="20170803 20:05:36.670"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:36.848">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:05:36.848">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:05:36.671" status="PASS" endtime="20170803 20:05:36.848"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:36.850">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:05:36.849" status="PASS" endtime="20170803 20:05:36.850"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:36.851">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:05:36.851" status="PASS" endtime="20170803 20:05:36.851"></status>
</kw>
<status starttime="20170803 20:05:36.850" status="PASS" endtime="20170803 20:05:36.851"></status>
</kw>
<status starttime="20170803 20:05:36.849" status="PASS" endtime="20170803 20:05:36.851"></status>
</kw>
<status starttime="20170803 20:05:36.848" status="PASS" endtime="20170803 20:05:36.851"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:05:36.852">Delete All Sessions</msg>
<status starttime="20170803 20:05:36.852" status="PASS" endtime="20170803 20:05:36.852"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:05:36.852">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:05:36.446" status="PASS" endtime="20170803 20:05:36.852"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:36.853">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:05:36.852" status="PASS" endtime="20170803 20:05:36.853"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:36.853">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:05:36.853">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:05:36.853">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:05:36.853" status="PASS" endtime="20170803 20:05:36.854"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:05:36.854">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170803 20:05:36.446" status="PASS" endtime="20170803 20:05:36.854"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:05:36.854">${host_state} = Running</msg>
<status starttime="20170803 20:05:36.445" status="PASS" endtime="20170803 20:05:36.854"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170803 20:05:36.854" status="PASS" endtime="20170803 20:05:36.855"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:36.859">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:05:36.858" status="PASS" endtime="20170803 20:05:36.859"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:36.859">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:05:36.859" status="PASS" endtime="20170803 20:05:36.860"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:36.860">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:05:36.860" status="PASS" endtime="20170803 20:05:36.860"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:36.861">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:05:36.860" status="PASS" endtime="20170803 20:05:36.861"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:37.068">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:05:36.861" status="PASS" endtime="20170803 20:05:37.068"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:05:37.068">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:05:37.068">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:05:36.861" status="PASS" endtime="20170803 20:05:37.069"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:37.069">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:05:37.069" status="PASS" endtime="20170803 20:05:37.069"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:37.070">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:05:37.070" status="PASS" endtime="20170803 20:05:37.070"></status>
</kw>
<status starttime="20170803 20:05:36.858" status="PASS" endtime="20170803 20:05:37.070"></status>
</kw>
<status starttime="20170803 20:05:36.857" status="PASS" endtime="20170803 20:05:37.070"></status>
</kw>
<status starttime="20170803 20:05:36.857" status="PASS" endtime="20170803 20:05:37.070"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:37.071">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170803 20:05:37.071" status="PASS" endtime="20170803 20:05:37.071"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:37.073">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170803 20:05:37.073" status="PASS" endtime="20170803 20:05:37.073"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:37.074">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170803 20:05:37.074" status="PASS" endtime="20170803 20:05:37.074"></status>
</kw>
<status starttime="20170803 20:05:37.073" status="PASS" endtime="20170803 20:05:37.075"></status>
</kw>
<status starttime="20170803 20:05:37.072" status="PASS" endtime="20170803 20:05:37.075"></status>
</kw>
<status starttime="20170803 20:05:37.071" status="PASS" endtime="20170803 20:05:37.075"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:37.158">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:05:37.158">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:05:37.075" status="PASS" endtime="20170803 20:05:37.158"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:37.160">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:05:37.159" status="PASS" endtime="20170803 20:05:37.160"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:37.161">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:05:37.161" status="PASS" endtime="20170803 20:05:37.161"></status>
</kw>
<status starttime="20170803 20:05:37.160" status="PASS" endtime="20170803 20:05:37.161"></status>
</kw>
<status starttime="20170803 20:05:37.159" status="PASS" endtime="20170803 20:05:37.161"></status>
</kw>
<status starttime="20170803 20:05:37.159" status="PASS" endtime="20170803 20:05:37.161"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:05:37.162">Delete All Sessions</msg>
<status starttime="20170803 20:05:37.162" status="PASS" endtime="20170803 20:05:37.162"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:05:37.162">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:05:36.856" status="PASS" endtime="20170803 20:05:37.162"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:37.163">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:05:37.162" status="PASS" endtime="20170803 20:05:37.163"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:37.163">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:05:37.163">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:05:37.163">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:05:37.163" status="PASS" endtime="20170803 20:05:37.163"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:05:37.164">${state} = Off</msg>
<status starttime="20170803 20:05:36.855" status="PASS" endtime="20170803 20:05:37.164"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:05:37.164">${boot_progress} = Off</msg>
<status starttime="20170803 20:05:36.855" status="PASS" endtime="20170803 20:05:37.164"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170803 20:05:37.165">Off != FW Progress, Starting OS</msg>
<status starttime="20170803 20:05:37.164" status="FAIL" endtime="20170803 20:05:37.165"></status>
</kw>
<status starttime="20170803 20:05:36.855" status="FAIL" endtime="20170803 20:05:37.165"></status>
</kw>
<status starttime="20170803 20:05:36.184" status="FAIL" endtime="20170803 20:05:37.166"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:47.171">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:05:47.170" status="PASS" endtime="20170803 20:05:47.171"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:47.172">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:05:47.172" status="PASS" endtime="20170803 20:05:47.172"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:47.173">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:05:47.172" status="PASS" endtime="20170803 20:05:47.173"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:47.173">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:05:47.173" status="PASS" endtime="20170803 20:05:47.173"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:47.545">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:05:47.174" status="PASS" endtime="20170803 20:05:47.545"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:05:47.545">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:05:47.545">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:05:47.173" status="PASS" endtime="20170803 20:05:47.545"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:47.546">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:05:47.546" status="PASS" endtime="20170803 20:05:47.546"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:47.547">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:05:47.546" status="PASS" endtime="20170803 20:05:47.547"></status>
</kw>
<status starttime="20170803 20:05:47.169" status="PASS" endtime="20170803 20:05:47.547"></status>
</kw>
<status starttime="20170803 20:05:47.169" status="PASS" endtime="20170803 20:05:47.547"></status>
</kw>
<status starttime="20170803 20:05:47.168" status="PASS" endtime="20170803 20:05:47.547"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:47.548">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170803 20:05:47.547" status="PASS" endtime="20170803 20:05:47.548"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:47.550">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:05:47.549" status="PASS" endtime="20170803 20:05:47.550"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:47.550">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:05:47.550" status="PASS" endtime="20170803 20:05:47.551"></status>
</kw>
<status starttime="20170803 20:05:47.550" status="PASS" endtime="20170803 20:05:47.551"></status>
</kw>
<status starttime="20170803 20:05:47.548" status="PASS" endtime="20170803 20:05:47.551"></status>
</kw>
<status starttime="20170803 20:05:47.548" status="PASS" endtime="20170803 20:05:47.551"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:51.591">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:05:51.591">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:05:47.551" status="PASS" endtime="20170803 20:05:51.591"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:51.593">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:05:51.593" status="PASS" endtime="20170803 20:05:51.593"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:51.594">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:05:51.594" status="PASS" endtime="20170803 20:05:51.595"></status>
</kw>
<status starttime="20170803 20:05:51.593" status="PASS" endtime="20170803 20:05:51.595"></status>
</kw>
<status starttime="20170803 20:05:51.592" status="PASS" endtime="20170803 20:05:51.595"></status>
</kw>
<status starttime="20170803 20:05:51.592" status="PASS" endtime="20170803 20:05:51.595"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:05:51.595">Delete All Sessions</msg>
<status starttime="20170803 20:05:51.595" status="PASS" endtime="20170803 20:05:51.595"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:05:51.595">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:05:47.168" status="PASS" endtime="20170803 20:05:51.596"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:51.596">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:05:51.596" status="PASS" endtime="20170803 20:05:51.596"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:51.597">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:05:51.597">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:05:51.597">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:05:51.596" status="PASS" endtime="20170803 20:05:51.597"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:05:51.597">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170803 20:05:47.167" status="PASS" endtime="20170803 20:05:51.597"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:05:51.598">${power_state} = On</msg>
<status starttime="20170803 20:05:47.167" status="PASS" endtime="20170803 20:05:51.598"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170803 20:05:51.598" status="PASS" endtime="20170803 20:05:51.598"></status>
</kw>
<status starttime="20170803 20:05:47.166" status="PASS" endtime="20170803 20:05:51.598"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:51.602">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:05:51.601" status="PASS" endtime="20170803 20:05:51.602"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:51.603">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:05:51.602" status="PASS" endtime="20170803 20:05:51.603"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:51.603">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:05:51.603" status="PASS" endtime="20170803 20:05:51.603"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:51.604">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:05:51.604" status="PASS" endtime="20170803 20:05:51.604"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:52.353">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:05:51.605" status="PASS" endtime="20170803 20:05:52.353"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:05:52.353">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:05:52.353">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:05:51.604" status="PASS" endtime="20170803 20:05:52.353"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:52.354">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:05:52.354" status="PASS" endtime="20170803 20:05:52.354"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:52.355">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:05:52.354" status="PASS" endtime="20170803 20:05:52.355"></status>
</kw>
<status starttime="20170803 20:05:51.601" status="PASS" endtime="20170803 20:05:52.355"></status>
</kw>
<status starttime="20170803 20:05:51.600" status="PASS" endtime="20170803 20:05:52.355"></status>
</kw>
<status starttime="20170803 20:05:51.600" status="PASS" endtime="20170803 20:05:52.355"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:52.356">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170803 20:05:52.355" status="PASS" endtime="20170803 20:05:52.356"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:52.358">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:05:52.357" status="PASS" endtime="20170803 20:05:52.358"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:52.359">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:05:52.359" status="PASS" endtime="20170803 20:05:52.359"></status>
</kw>
<status starttime="20170803 20:05:52.358" status="PASS" endtime="20170803 20:05:52.359"></status>
</kw>
<status starttime="20170803 20:05:52.356" status="PASS" endtime="20170803 20:05:52.359"></status>
</kw>
<status starttime="20170803 20:05:52.356" status="PASS" endtime="20170803 20:05:52.359"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:52.508">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:05:52.508">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:05:52.360" status="PASS" endtime="20170803 20:05:52.508"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:52.510">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:05:52.509" status="PASS" endtime="20170803 20:05:52.510"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:52.510">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:05:52.510" status="PASS" endtime="20170803 20:05:52.511"></status>
</kw>
<status starttime="20170803 20:05:52.510" status="PASS" endtime="20170803 20:05:52.511"></status>
</kw>
<status starttime="20170803 20:05:52.509" status="PASS" endtime="20170803 20:05:52.511"></status>
</kw>
<status starttime="20170803 20:05:52.508" status="PASS" endtime="20170803 20:05:52.511"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:05:52.511">Delete All Sessions</msg>
<status starttime="20170803 20:05:52.511" status="PASS" endtime="20170803 20:05:52.511"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:05:52.512">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:05:51.599" status="PASS" endtime="20170803 20:05:52.512"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:52.512">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:05:52.512" status="PASS" endtime="20170803 20:05:52.512"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:52.513">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:05:52.513">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:05:52.513">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:05:52.513" status="PASS" endtime="20170803 20:05:52.513"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:05:52.513">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170803 20:05:51.599" status="PASS" endtime="20170803 20:05:52.513"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:05:52.514">${host_state} = Running</msg>
<status starttime="20170803 20:05:51.598" status="PASS" endtime="20170803 20:05:52.514"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170803 20:05:52.514" status="PASS" endtime="20170803 20:05:52.514"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:52.518">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:05:52.518" status="PASS" endtime="20170803 20:05:52.518"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:52.519">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:05:52.519" status="PASS" endtime="20170803 20:05:52.519"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:52.520">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:05:52.519" status="PASS" endtime="20170803 20:05:52.520"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:52.520">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:05:52.520" status="PASS" endtime="20170803 20:05:52.520"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:52.781">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:05:52.521" status="PASS" endtime="20170803 20:05:52.781"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:05:52.781">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:05:52.782">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:05:52.520" status="PASS" endtime="20170803 20:05:52.782"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:52.782">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:05:52.782" status="PASS" endtime="20170803 20:05:52.782"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:52.783">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:05:52.783" status="PASS" endtime="20170803 20:05:52.783"></status>
</kw>
<status starttime="20170803 20:05:52.517" status="PASS" endtime="20170803 20:05:52.783"></status>
</kw>
<status starttime="20170803 20:05:52.517" status="PASS" endtime="20170803 20:05:52.783"></status>
</kw>
<status starttime="20170803 20:05:52.516" status="PASS" endtime="20170803 20:05:52.783"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:52.784">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170803 20:05:52.784" status="PASS" endtime="20170803 20:05:52.784"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:52.786">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170803 20:05:52.785" status="PASS" endtime="20170803 20:05:52.786"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:52.788">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170803 20:05:52.787" status="PASS" endtime="20170803 20:05:52.788"></status>
</kw>
<status starttime="20170803 20:05:52.787" status="PASS" endtime="20170803 20:05:52.788"></status>
</kw>
<status starttime="20170803 20:05:52.785" status="PASS" endtime="20170803 20:05:52.788"></status>
</kw>
<status starttime="20170803 20:05:52.784" status="PASS" endtime="20170803 20:05:52.788"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:52.867">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:05:52.867">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:05:52.788" status="PASS" endtime="20170803 20:05:52.867"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:52.869">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:05:52.868" status="PASS" endtime="20170803 20:05:52.869"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:52.870">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:05:52.870" status="PASS" endtime="20170803 20:05:52.870"></status>
</kw>
<status starttime="20170803 20:05:52.869" status="PASS" endtime="20170803 20:05:52.870"></status>
</kw>
<status starttime="20170803 20:05:52.868" status="PASS" endtime="20170803 20:05:52.870"></status>
</kw>
<status starttime="20170803 20:05:52.867" status="PASS" endtime="20170803 20:05:52.871"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:05:52.871">Delete All Sessions</msg>
<status starttime="20170803 20:05:52.871" status="PASS" endtime="20170803 20:05:52.871"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:05:52.871">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:05:52.516" status="PASS" endtime="20170803 20:05:52.871"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:05:52.872">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:05:52.872" status="PASS" endtime="20170803 20:05:52.872"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:05:52.872">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:05:52.873">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:05:52.873">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:05:52.872" status="PASS" endtime="20170803 20:05:52.873"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:05:52.873">${state} = Off</msg>
<status starttime="20170803 20:05:52.515" status="PASS" endtime="20170803 20:05:52.873"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:05:52.873">${boot_progress} = Off</msg>
<status starttime="20170803 20:05:52.515" status="PASS" endtime="20170803 20:05:52.873"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170803 20:05:52.874">Off != FW Progress, Starting OS</msg>
<status starttime="20170803 20:05:52.873" status="FAIL" endtime="20170803 20:05:52.874"></status>
</kw>
<status starttime="20170803 20:05:52.514" status="FAIL" endtime="20170803 20:05:52.874"></status>
</kw>
<status starttime="20170803 20:05:47.166" status="FAIL" endtime="20170803 20:05:52.874"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:02.879">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:06:02.879" status="PASS" endtime="20170803 20:06:02.880"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:02.880">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:06:02.880" status="PASS" endtime="20170803 20:06:02.880"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:02.881">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:06:02.881" status="PASS" endtime="20170803 20:06:02.881"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:02.882">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:06:02.881" status="PASS" endtime="20170803 20:06:02.882"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:03.718">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:06:02.882" status="PASS" endtime="20170803 20:06:03.719"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:06:03.719">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:06:03.719">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:06:02.882" status="PASS" endtime="20170803 20:06:03.719"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:03.720">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:06:03.719" status="PASS" endtime="20170803 20:06:03.720"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:03.720">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:06:03.720" status="PASS" endtime="20170803 20:06:03.720"></status>
</kw>
<status starttime="20170803 20:06:02.879" status="PASS" endtime="20170803 20:06:03.720"></status>
</kw>
<status starttime="20170803 20:06:02.878" status="PASS" endtime="20170803 20:06:03.721"></status>
</kw>
<status starttime="20170803 20:06:02.877" status="PASS" endtime="20170803 20:06:03.721"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:03.721">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170803 20:06:03.721" status="PASS" endtime="20170803 20:06:03.721"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:03.723">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:06:03.723" status="PASS" endtime="20170803 20:06:03.723"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:03.724">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:06:03.724" status="PASS" endtime="20170803 20:06:03.724"></status>
</kw>
<status starttime="20170803 20:06:03.724" status="PASS" endtime="20170803 20:06:03.724"></status>
</kw>
<status starttime="20170803 20:06:03.722" status="PASS" endtime="20170803 20:06:03.725"></status>
</kw>
<status starttime="20170803 20:06:03.722" status="PASS" endtime="20170803 20:06:03.725"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:08.167">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:06:08.167">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:06:03.725" status="PASS" endtime="20170803 20:06:08.167"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:08.170">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:06:08.169" status="PASS" endtime="20170803 20:06:08.170"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:08.171">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:06:08.170" status="PASS" endtime="20170803 20:06:08.171"></status>
</kw>
<status starttime="20170803 20:06:08.170" status="PASS" endtime="20170803 20:06:08.171"></status>
</kw>
<status starttime="20170803 20:06:08.168" status="PASS" endtime="20170803 20:06:08.171"></status>
</kw>
<status starttime="20170803 20:06:08.167" status="PASS" endtime="20170803 20:06:08.171"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:06:08.172">Delete All Sessions</msg>
<status starttime="20170803 20:06:08.171" status="PASS" endtime="20170803 20:06:08.172"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:06:08.172">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:06:02.876" status="PASS" endtime="20170803 20:06:08.172"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:08.172">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:06:08.172" status="PASS" endtime="20170803 20:06:08.173"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:08.173">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:06:08.173">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:06:08.173">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:06:08.173" status="PASS" endtime="20170803 20:06:08.173"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:06:08.174">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170803 20:06:02.876" status="PASS" endtime="20170803 20:06:08.174"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:06:08.174">${power_state} = Off</msg>
<status starttime="20170803 20:06:02.876" status="PASS" endtime="20170803 20:06:08.174"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170803 20:06:08.175">On != Off</msg>
<status starttime="20170803 20:06:08.174" status="FAIL" endtime="20170803 20:06:08.175"></status>
</kw>
<status starttime="20170803 20:06:02.875" status="FAIL" endtime="20170803 20:06:08.175"></status>
</kw>
<status starttime="20170803 20:06:02.875" status="FAIL" endtime="20170803 20:06:08.175"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:18.180">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:06:18.179" status="PASS" endtime="20170803 20:06:18.180"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:18.181">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:06:18.180" status="PASS" endtime="20170803 20:06:18.181"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:18.181">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:06:18.181" status="PASS" endtime="20170803 20:06:18.181"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:18.182">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:06:18.182" status="PASS" endtime="20170803 20:06:18.182"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:18.934">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:06:18.183" status="PASS" endtime="20170803 20:06:18.934"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:06:18.934">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:06:18.934">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:06:18.182" status="PASS" endtime="20170803 20:06:18.934"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:18.935">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:06:18.935" status="PASS" endtime="20170803 20:06:18.935"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:18.936">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:06:18.935" status="PASS" endtime="20170803 20:06:18.936"></status>
</kw>
<status starttime="20170803 20:06:18.179" status="PASS" endtime="20170803 20:06:18.936"></status>
</kw>
<status starttime="20170803 20:06:18.178" status="PASS" endtime="20170803 20:06:18.936"></status>
</kw>
<status starttime="20170803 20:06:18.178" status="PASS" endtime="20170803 20:06:18.936"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:18.937">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170803 20:06:18.936" status="PASS" endtime="20170803 20:06:18.937"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:18.939">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:06:18.938" status="PASS" endtime="20170803 20:06:18.939"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:18.940">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:06:18.939" status="PASS" endtime="20170803 20:06:18.940"></status>
</kw>
<status starttime="20170803 20:06:18.939" status="PASS" endtime="20170803 20:06:18.940"></status>
</kw>
<status starttime="20170803 20:06:18.937" status="PASS" endtime="20170803 20:06:18.940"></status>
</kw>
<status starttime="20170803 20:06:18.937" status="PASS" endtime="20170803 20:06:18.940"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:19.971">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:06:19.971">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:06:18.940" status="PASS" endtime="20170803 20:06:19.971"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:19.973">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:06:19.972" status="PASS" endtime="20170803 20:06:19.973"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:19.974">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:06:19.974" status="PASS" endtime="20170803 20:06:19.974"></status>
</kw>
<status starttime="20170803 20:06:19.973" status="PASS" endtime="20170803 20:06:19.974"></status>
</kw>
<status starttime="20170803 20:06:19.972" status="PASS" endtime="20170803 20:06:19.974"></status>
</kw>
<status starttime="20170803 20:06:19.971" status="PASS" endtime="20170803 20:06:19.974"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:06:19.975">Delete All Sessions</msg>
<status starttime="20170803 20:06:19.974" status="PASS" endtime="20170803 20:06:19.975"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:06:19.975">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:06:18.177" status="PASS" endtime="20170803 20:06:19.975"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:19.975">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:06:19.975" status="PASS" endtime="20170803 20:06:19.976"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:19.976">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:06:19.976">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:06:19.976">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:06:19.976" status="PASS" endtime="20170803 20:06:19.976"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:06:19.977">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170803 20:06:18.177" status="PASS" endtime="20170803 20:06:19.977"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:06:19.977">${power_state} = On</msg>
<status starttime="20170803 20:06:18.176" status="PASS" endtime="20170803 20:06:19.977"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170803 20:06:19.978" status="PASS" endtime="20170803 20:06:19.978"></status>
</kw>
<status starttime="20170803 20:06:18.176" status="PASS" endtime="20170803 20:06:19.978"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:19.983">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:06:19.983" status="PASS" endtime="20170803 20:06:19.984"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:19.985">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:06:19.985" status="PASS" endtime="20170803 20:06:19.985"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:19.986">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:06:19.985" status="PASS" endtime="20170803 20:06:19.986"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:19.987">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:06:19.986" status="PASS" endtime="20170803 20:06:19.987"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:20.677">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:06:19.988" status="PASS" endtime="20170803 20:06:20.677"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:06:20.678">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:06:20.678">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:06:19.987" status="PASS" endtime="20170803 20:06:20.678"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:20.678">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:06:20.678" status="PASS" endtime="20170803 20:06:20.678"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:20.679">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:06:20.679" status="PASS" endtime="20170803 20:06:20.679"></status>
</kw>
<status starttime="20170803 20:06:19.982" status="PASS" endtime="20170803 20:06:20.679"></status>
</kw>
<status starttime="20170803 20:06:19.981" status="PASS" endtime="20170803 20:06:20.679"></status>
</kw>
<status starttime="20170803 20:06:19.981" status="PASS" endtime="20170803 20:06:20.679"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:20.680">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170803 20:06:20.680" status="PASS" endtime="20170803 20:06:20.680"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:20.682">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:06:20.681" status="PASS" endtime="20170803 20:06:20.682"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:20.683">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:06:20.683" status="PASS" endtime="20170803 20:06:20.683"></status>
</kw>
<status starttime="20170803 20:06:20.682" status="PASS" endtime="20170803 20:06:20.683"></status>
</kw>
<status starttime="20170803 20:06:20.681" status="PASS" endtime="20170803 20:06:20.683"></status>
</kw>
<status starttime="20170803 20:06:20.680" status="PASS" endtime="20170803 20:06:20.683"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:21.385">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:06:21.385">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:06:20.684" status="PASS" endtime="20170803 20:06:21.385"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:21.387">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:06:21.386" status="PASS" endtime="20170803 20:06:21.387"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:21.388">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:06:21.387" status="PASS" endtime="20170803 20:06:21.388"></status>
</kw>
<status starttime="20170803 20:06:21.387" status="PASS" endtime="20170803 20:06:21.388"></status>
</kw>
<status starttime="20170803 20:06:21.386" status="PASS" endtime="20170803 20:06:21.388"></status>
</kw>
<status starttime="20170803 20:06:21.385" status="PASS" endtime="20170803 20:06:21.388"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:06:21.388">Delete All Sessions</msg>
<status starttime="20170803 20:06:21.388" status="PASS" endtime="20170803 20:06:21.388"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:06:21.389">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:06:19.980" status="PASS" endtime="20170803 20:06:21.389"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:21.389">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:06:21.389" status="PASS" endtime="20170803 20:06:21.390"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:21.390">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:06:21.390">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:06:21.390">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:06:21.390" status="PASS" endtime="20170803 20:06:21.390"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:06:21.391">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170803 20:06:19.979" status="PASS" endtime="20170803 20:06:21.391"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:06:21.391">${host_state} = Running</msg>
<status starttime="20170803 20:06:19.978" status="PASS" endtime="20170803 20:06:21.391"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170803 20:06:21.391" status="PASS" endtime="20170803 20:06:21.391"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:21.396">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:06:21.395" status="PASS" endtime="20170803 20:06:21.396"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:21.397">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:06:21.396" status="PASS" endtime="20170803 20:06:21.397"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:21.397">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:06:21.397" status="PASS" endtime="20170803 20:06:21.397"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:21.398">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:06:21.398" status="PASS" endtime="20170803 20:06:21.398"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:21.779">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:06:21.399" status="PASS" endtime="20170803 20:06:21.780"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:06:21.780">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:06:21.780">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:06:21.398" status="PASS" endtime="20170803 20:06:21.780"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:21.780">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:06:21.780" status="PASS" endtime="20170803 20:06:21.781"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:21.781">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:06:21.781" status="PASS" endtime="20170803 20:06:21.781"></status>
</kw>
<status starttime="20170803 20:06:21.395" status="PASS" endtime="20170803 20:06:21.781"></status>
</kw>
<status starttime="20170803 20:06:21.394" status="PASS" endtime="20170803 20:06:21.781"></status>
</kw>
<status starttime="20170803 20:06:21.394" status="PASS" endtime="20170803 20:06:21.782"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:21.782">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170803 20:06:21.782" status="PASS" endtime="20170803 20:06:21.782"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:21.784">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170803 20:06:21.784" status="PASS" endtime="20170803 20:06:21.784"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:21.785">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170803 20:06:21.785" status="PASS" endtime="20170803 20:06:21.785"></status>
</kw>
<status starttime="20170803 20:06:21.785" status="PASS" endtime="20170803 20:06:21.786"></status>
</kw>
<status starttime="20170803 20:06:21.783" status="PASS" endtime="20170803 20:06:21.786"></status>
</kw>
<status starttime="20170803 20:06:21.783" status="PASS" endtime="20170803 20:06:21.786"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:22.242">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:06:22.243">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:06:21.786" status="PASS" endtime="20170803 20:06:22.243"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:22.245">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:06:22.244" status="PASS" endtime="20170803 20:06:22.245"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:22.246">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:06:22.245" status="PASS" endtime="20170803 20:06:22.246"></status>
</kw>
<status starttime="20170803 20:06:22.245" status="PASS" endtime="20170803 20:06:22.246"></status>
</kw>
<status starttime="20170803 20:06:22.244" status="PASS" endtime="20170803 20:06:22.246"></status>
</kw>
<status starttime="20170803 20:06:22.243" status="PASS" endtime="20170803 20:06:22.246"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:06:22.246">Delete All Sessions</msg>
<status starttime="20170803 20:06:22.246" status="PASS" endtime="20170803 20:06:22.246"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:06:22.247">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:06:21.393" status="PASS" endtime="20170803 20:06:22.247"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:22.247">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:06:22.247" status="PASS" endtime="20170803 20:06:22.247"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:22.248">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:06:22.248">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:06:22.248">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:06:22.248" status="PASS" endtime="20170803 20:06:22.248"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:06:22.248">${state} = Off</msg>
<status starttime="20170803 20:06:21.392" status="PASS" endtime="20170803 20:06:22.248"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:06:22.249">${boot_progress} = Off</msg>
<status starttime="20170803 20:06:21.392" status="PASS" endtime="20170803 20:06:22.249"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170803 20:06:22.249">Off != FW Progress, Starting OS</msg>
<status starttime="20170803 20:06:22.249" status="FAIL" endtime="20170803 20:06:22.249"></status>
</kw>
<status starttime="20170803 20:06:21.392" status="FAIL" endtime="20170803 20:06:22.249"></status>
</kw>
<status starttime="20170803 20:06:18.175" status="FAIL" endtime="20170803 20:06:22.250"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:32.254">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:06:32.254" status="PASS" endtime="20170803 20:06:32.255"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:32.256">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:06:32.255" status="PASS" endtime="20170803 20:06:32.256"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:32.256">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:06:32.256" status="PASS" endtime="20170803 20:06:32.256"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:32.257">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:06:32.257" status="PASS" endtime="20170803 20:06:32.257"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:32.500">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:06:32.258" status="PASS" endtime="20170803 20:06:32.500"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:06:32.500">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:06:32.500">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:06:32.257" status="PASS" endtime="20170803 20:06:32.500"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:32.501">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:06:32.501" status="PASS" endtime="20170803 20:06:32.501"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:32.502">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:06:32.501" status="PASS" endtime="20170803 20:06:32.502"></status>
</kw>
<status starttime="20170803 20:06:32.254" status="PASS" endtime="20170803 20:06:32.502"></status>
</kw>
<status starttime="20170803 20:06:32.253" status="PASS" endtime="20170803 20:06:32.502"></status>
</kw>
<status starttime="20170803 20:06:32.253" status="PASS" endtime="20170803 20:06:32.502"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:32.503">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170803 20:06:32.503" status="PASS" endtime="20170803 20:06:32.503"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:32.505">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:06:32.504" status="PASS" endtime="20170803 20:06:32.505"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:32.507">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:06:32.506" status="PASS" endtime="20170803 20:06:32.507"></status>
</kw>
<status starttime="20170803 20:06:32.506" status="PASS" endtime="20170803 20:06:32.507"></status>
</kw>
<status starttime="20170803 20:06:32.504" status="PASS" endtime="20170803 20:06:32.507"></status>
</kw>
<status starttime="20170803 20:06:32.503" status="PASS" endtime="20170803 20:06:32.507"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:32.594">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:06:32.594">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:06:32.507" status="PASS" endtime="20170803 20:06:32.594"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:32.596">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:06:32.595" status="PASS" endtime="20170803 20:06:32.596"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:32.597">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:06:32.597" status="PASS" endtime="20170803 20:06:32.597"></status>
</kw>
<status starttime="20170803 20:06:32.596" status="PASS" endtime="20170803 20:06:32.597"></status>
</kw>
<status starttime="20170803 20:06:32.595" status="PASS" endtime="20170803 20:06:32.597"></status>
</kw>
<status starttime="20170803 20:06:32.594" status="PASS" endtime="20170803 20:06:32.597"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:06:32.598">Delete All Sessions</msg>
<status starttime="20170803 20:06:32.597" status="PASS" endtime="20170803 20:06:32.598"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:06:32.598">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:06:32.252" status="PASS" endtime="20170803 20:06:32.598"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:32.598">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:06:32.598" status="PASS" endtime="20170803 20:06:32.599"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:32.599">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:06:32.599">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:06:32.599">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:06:32.599" status="PASS" endtime="20170803 20:06:32.599"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:06:32.600">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170803 20:06:32.251" status="PASS" endtime="20170803 20:06:32.600"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:06:32.600">${power_state} = On</msg>
<status starttime="20170803 20:06:32.251" status="PASS" endtime="20170803 20:06:32.600"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170803 20:06:32.600" status="PASS" endtime="20170803 20:06:32.600"></status>
</kw>
<status starttime="20170803 20:06:32.251" status="PASS" endtime="20170803 20:06:32.601"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:32.607">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:06:32.604" status="PASS" endtime="20170803 20:06:32.607"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:32.608">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:06:32.608" status="PASS" endtime="20170803 20:06:32.609"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:32.609">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:06:32.609" status="PASS" endtime="20170803 20:06:32.609"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:32.610">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:06:32.610" status="PASS" endtime="20170803 20:06:32.610"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:32.808">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:06:32.612" status="PASS" endtime="20170803 20:06:32.808"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:06:32.808">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:06:32.808">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:06:32.611" status="PASS" endtime="20170803 20:06:32.809"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:32.809">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:06:32.809" status="PASS" endtime="20170803 20:06:32.809"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:32.810">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:06:32.809" status="PASS" endtime="20170803 20:06:32.810"></status>
</kw>
<status starttime="20170803 20:06:32.603" status="PASS" endtime="20170803 20:06:32.810"></status>
</kw>
<status starttime="20170803 20:06:32.603" status="PASS" endtime="20170803 20:06:32.810"></status>
</kw>
<status starttime="20170803 20:06:32.602" status="PASS" endtime="20170803 20:06:32.810"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:32.811">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170803 20:06:32.810" status="PASS" endtime="20170803 20:06:32.811"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:32.813">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:06:32.812" status="PASS" endtime="20170803 20:06:32.813"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:32.814">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:06:32.814" status="PASS" endtime="20170803 20:06:32.815"></status>
</kw>
<status starttime="20170803 20:06:32.813" status="PASS" endtime="20170803 20:06:32.815"></status>
</kw>
<status starttime="20170803 20:06:32.812" status="PASS" endtime="20170803 20:06:32.815"></status>
</kw>
<status starttime="20170803 20:06:32.811" status="PASS" endtime="20170803 20:06:32.815"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:32.921">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:06:32.921">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:06:32.815" status="PASS" endtime="20170803 20:06:32.921"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:32.923">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:06:32.923" status="PASS" endtime="20170803 20:06:32.923"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:32.924">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:06:32.924" status="PASS" endtime="20170803 20:06:32.924"></status>
</kw>
<status starttime="20170803 20:06:32.923" status="PASS" endtime="20170803 20:06:32.924"></status>
</kw>
<status starttime="20170803 20:06:32.922" status="PASS" endtime="20170803 20:06:32.924"></status>
</kw>
<status starttime="20170803 20:06:32.922" status="PASS" endtime="20170803 20:06:32.924"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:06:32.925">Delete All Sessions</msg>
<status starttime="20170803 20:06:32.925" status="PASS" endtime="20170803 20:06:32.925"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:06:32.925">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:06:32.602" status="PASS" endtime="20170803 20:06:32.925"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:32.926">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:06:32.925" status="PASS" endtime="20170803 20:06:32.926"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:32.926">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:06:32.926">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:06:32.926">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:06:32.926" status="PASS" endtime="20170803 20:06:32.927"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:06:32.927">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170803 20:06:32.601" status="PASS" endtime="20170803 20:06:32.927"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:06:32.927">${host_state} = Running</msg>
<status starttime="20170803 20:06:32.601" status="PASS" endtime="20170803 20:06:32.927"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170803 20:06:32.927" status="PASS" endtime="20170803 20:06:32.928"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:32.932">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:06:32.932" status="PASS" endtime="20170803 20:06:32.932"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:32.933">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:06:32.933" status="PASS" endtime="20170803 20:06:32.933"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:32.934">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:06:32.933" status="PASS" endtime="20170803 20:06:32.934"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:32.934">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:06:32.934" status="PASS" endtime="20170803 20:06:32.934"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:33.120">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:06:32.935" status="PASS" endtime="20170803 20:06:33.120"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:06:33.120">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:06:33.120">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:06:32.935" status="PASS" endtime="20170803 20:06:33.120"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:33.121">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:06:33.120" status="PASS" endtime="20170803 20:06:33.121"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:33.121">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:06:33.121" status="PASS" endtime="20170803 20:06:33.121"></status>
</kw>
<status starttime="20170803 20:06:32.931" status="PASS" endtime="20170803 20:06:33.122"></status>
</kw>
<status starttime="20170803 20:06:32.931" status="PASS" endtime="20170803 20:06:33.122"></status>
</kw>
<status starttime="20170803 20:06:32.930" status="PASS" endtime="20170803 20:06:33.122"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:33.122">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170803 20:06:33.122" status="PASS" endtime="20170803 20:06:33.122"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:33.124">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170803 20:06:33.124" status="PASS" endtime="20170803 20:06:33.124"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:33.126">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170803 20:06:33.125" status="PASS" endtime="20170803 20:06:33.126"></status>
</kw>
<status starttime="20170803 20:06:33.125" status="PASS" endtime="20170803 20:06:33.126"></status>
</kw>
<status starttime="20170803 20:06:33.123" status="PASS" endtime="20170803 20:06:33.126"></status>
</kw>
<status starttime="20170803 20:06:33.123" status="PASS" endtime="20170803 20:06:33.126"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:33.264">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:06:33.264">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:06:33.126" status="PASS" endtime="20170803 20:06:33.264"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:33.266">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:06:33.266" status="PASS" endtime="20170803 20:06:33.266"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:33.267">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:06:33.267" status="PASS" endtime="20170803 20:06:33.267"></status>
</kw>
<status starttime="20170803 20:06:33.266" status="PASS" endtime="20170803 20:06:33.267"></status>
</kw>
<status starttime="20170803 20:06:33.265" status="PASS" endtime="20170803 20:06:33.267"></status>
</kw>
<status starttime="20170803 20:06:33.265" status="PASS" endtime="20170803 20:06:33.267"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:06:33.268">Delete All Sessions</msg>
<status starttime="20170803 20:06:33.268" status="PASS" endtime="20170803 20:06:33.268"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:06:33.268">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:06:32.929" status="PASS" endtime="20170803 20:06:33.268"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:33.269">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:06:33.268" status="PASS" endtime="20170803 20:06:33.269"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:33.269">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:06:33.269">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:06:33.269">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:06:33.269" status="PASS" endtime="20170803 20:06:33.270"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:06:33.270">${state} = Off</msg>
<status starttime="20170803 20:06:32.929" status="PASS" endtime="20170803 20:06:33.270"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:06:33.270">${boot_progress} = Off</msg>
<status starttime="20170803 20:06:32.928" status="PASS" endtime="20170803 20:06:33.270"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170803 20:06:33.271">Off != FW Progress, Starting OS</msg>
<status starttime="20170803 20:06:33.270" status="FAIL" endtime="20170803 20:06:33.271"></status>
</kw>
<status starttime="20170803 20:06:32.928" status="FAIL" endtime="20170803 20:06:33.271"></status>
</kw>
<status starttime="20170803 20:06:32.250" status="FAIL" endtime="20170803 20:06:33.271"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:43.276">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:06:43.276" status="PASS" endtime="20170803 20:06:43.276"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:43.277">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:06:43.277" status="PASS" endtime="20170803 20:06:43.277"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:43.278">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:06:43.277" status="PASS" endtime="20170803 20:06:43.278"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:43.278">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:06:43.278" status="PASS" endtime="20170803 20:06:43.278"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:43.549">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:06:43.279" status="PASS" endtime="20170803 20:06:43.549"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:06:43.549">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:06:43.549">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:06:43.279" status="PASS" endtime="20170803 20:06:43.549"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:43.549">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:06:43.549" status="PASS" endtime="20170803 20:06:43.550"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:43.550">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:06:43.550" status="PASS" endtime="20170803 20:06:43.550"></status>
</kw>
<status starttime="20170803 20:06:43.275" status="PASS" endtime="20170803 20:06:43.550"></status>
</kw>
<status starttime="20170803 20:06:43.275" status="PASS" endtime="20170803 20:06:43.551"></status>
</kw>
<status starttime="20170803 20:06:43.274" status="PASS" endtime="20170803 20:06:43.551"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:43.551">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170803 20:06:43.551" status="PASS" endtime="20170803 20:06:43.551"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:43.553">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:06:43.553" status="PASS" endtime="20170803 20:06:43.553"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:43.554">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:06:43.554" status="PASS" endtime="20170803 20:06:43.554"></status>
</kw>
<status starttime="20170803 20:06:43.554" status="PASS" endtime="20170803 20:06:43.555"></status>
</kw>
<status starttime="20170803 20:06:43.552" status="PASS" endtime="20170803 20:06:43.555"></status>
</kw>
<status starttime="20170803 20:06:43.552" status="PASS" endtime="20170803 20:06:43.555"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:43.632">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:06:43.632">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:06:43.555" status="PASS" endtime="20170803 20:06:43.632"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:43.634">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:06:43.633" status="PASS" endtime="20170803 20:06:43.634"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:43.634">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:06:43.634" status="PASS" endtime="20170803 20:06:43.635"></status>
</kw>
<status starttime="20170803 20:06:43.634" status="PASS" endtime="20170803 20:06:43.635"></status>
</kw>
<status starttime="20170803 20:06:43.633" status="PASS" endtime="20170803 20:06:43.635"></status>
</kw>
<status starttime="20170803 20:06:43.632" status="PASS" endtime="20170803 20:06:43.635"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:06:43.635">Delete All Sessions</msg>
<status starttime="20170803 20:06:43.635" status="PASS" endtime="20170803 20:06:43.635"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:06:43.635">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:06:43.274" status="PASS" endtime="20170803 20:06:43.636"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:43.636">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:06:43.636" status="PASS" endtime="20170803 20:06:43.636"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:43.637">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:06:43.637">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:06:43.637">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:06:43.636" status="PASS" endtime="20170803 20:06:43.637"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:06:43.637">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170803 20:06:43.273" status="PASS" endtime="20170803 20:06:43.637"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:06:43.637">${power_state} = On</msg>
<status starttime="20170803 20:06:43.273" status="PASS" endtime="20170803 20:06:43.638"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170803 20:06:43.638" status="PASS" endtime="20170803 20:06:43.638"></status>
</kw>
<status starttime="20170803 20:06:43.272" status="PASS" endtime="20170803 20:06:43.638"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:43.642">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:06:43.641" status="PASS" endtime="20170803 20:06:43.642"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:43.643">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:06:43.643" status="PASS" endtime="20170803 20:06:43.643"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:43.644">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:06:43.643" status="PASS" endtime="20170803 20:06:43.644"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:43.644">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:06:43.644" status="PASS" endtime="20170803 20:06:43.644"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:43.843">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:06:43.645" status="PASS" endtime="20170803 20:06:43.843"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:06:43.843">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:06:43.843">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:06:43.645" status="PASS" endtime="20170803 20:06:43.843"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:43.844">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:06:43.843" status="PASS" endtime="20170803 20:06:43.844"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:43.844">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:06:43.844" status="PASS" endtime="20170803 20:06:43.845"></status>
</kw>
<status starttime="20170803 20:06:43.641" status="PASS" endtime="20170803 20:06:43.845"></status>
</kw>
<status starttime="20170803 20:06:43.640" status="PASS" endtime="20170803 20:06:43.845"></status>
</kw>
<status starttime="20170803 20:06:43.640" status="PASS" endtime="20170803 20:06:43.845"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:43.845">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170803 20:06:43.845" status="PASS" endtime="20170803 20:06:43.845"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:43.847">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:06:43.847" status="PASS" endtime="20170803 20:06:43.848"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:43.848">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:06:43.848" status="PASS" endtime="20170803 20:06:43.849"></status>
</kw>
<status starttime="20170803 20:06:43.848" status="PASS" endtime="20170803 20:06:43.849"></status>
</kw>
<status starttime="20170803 20:06:43.846" status="PASS" endtime="20170803 20:06:43.849"></status>
</kw>
<status starttime="20170803 20:06:43.846" status="PASS" endtime="20170803 20:06:43.849"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:43.955">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:06:43.955">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:06:43.849" status="PASS" endtime="20170803 20:06:43.955"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:43.957">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:06:43.957" status="PASS" endtime="20170803 20:06:43.957"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:43.958">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:06:43.958" status="PASS" endtime="20170803 20:06:43.958"></status>
</kw>
<status starttime="20170803 20:06:43.957" status="PASS" endtime="20170803 20:06:43.958"></status>
</kw>
<status starttime="20170803 20:06:43.956" status="PASS" endtime="20170803 20:06:43.958"></status>
</kw>
<status starttime="20170803 20:06:43.956" status="PASS" endtime="20170803 20:06:43.958"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:06:43.959">Delete All Sessions</msg>
<status starttime="20170803 20:06:43.959" status="PASS" endtime="20170803 20:06:43.959"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:06:43.959">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:06:43.639" status="PASS" endtime="20170803 20:06:43.959"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:43.960">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:06:43.959" status="PASS" endtime="20170803 20:06:43.960"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:43.960">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:06:43.960">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:06:43.961">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:06:43.960" status="PASS" endtime="20170803 20:06:43.961"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:06:43.961">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170803 20:06:43.639" status="PASS" endtime="20170803 20:06:43.961"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:06:43.961">${host_state} = Running</msg>
<status starttime="20170803 20:06:43.638" status="PASS" endtime="20170803 20:06:43.961"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170803 20:06:43.961" status="PASS" endtime="20170803 20:06:43.962"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:43.966">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:06:43.966" status="PASS" endtime="20170803 20:06:43.966"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:43.967">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:06:43.967" status="PASS" endtime="20170803 20:06:43.967"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:43.968">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:06:43.967" status="PASS" endtime="20170803 20:06:43.968"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:43.968">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:06:43.968" status="PASS" endtime="20170803 20:06:43.968"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:44.179">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:06:43.969" status="PASS" endtime="20170803 20:06:44.179"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:06:44.179">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:06:44.179">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:06:43.969" status="PASS" endtime="20170803 20:06:44.179"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:44.180">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:06:44.180" status="PASS" endtime="20170803 20:06:44.180"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:44.181">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:06:44.180" status="PASS" endtime="20170803 20:06:44.181"></status>
</kw>
<status starttime="20170803 20:06:43.965" status="PASS" endtime="20170803 20:06:44.181"></status>
</kw>
<status starttime="20170803 20:06:43.965" status="PASS" endtime="20170803 20:06:44.181"></status>
</kw>
<status starttime="20170803 20:06:43.964" status="PASS" endtime="20170803 20:06:44.181"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:44.182">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170803 20:06:44.181" status="PASS" endtime="20170803 20:06:44.182"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:44.184">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170803 20:06:44.183" status="PASS" endtime="20170803 20:06:44.184"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:44.185">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170803 20:06:44.185" status="PASS" endtime="20170803 20:06:44.185"></status>
</kw>
<status starttime="20170803 20:06:44.184" status="PASS" endtime="20170803 20:06:44.185"></status>
</kw>
<status starttime="20170803 20:06:44.182" status="PASS" endtime="20170803 20:06:44.185"></status>
</kw>
<status starttime="20170803 20:06:44.182" status="PASS" endtime="20170803 20:06:44.185"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:44.268">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:06:44.268">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:06:44.186" status="PASS" endtime="20170803 20:06:44.268"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:44.270">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:06:44.269" status="PASS" endtime="20170803 20:06:44.270"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:44.271">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:06:44.271" status="PASS" endtime="20170803 20:06:44.271"></status>
</kw>
<status starttime="20170803 20:06:44.270" status="PASS" endtime="20170803 20:06:44.271"></status>
</kw>
<status starttime="20170803 20:06:44.269" status="PASS" endtime="20170803 20:06:44.271"></status>
</kw>
<status starttime="20170803 20:06:44.268" status="PASS" endtime="20170803 20:06:44.271"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:06:44.272">Delete All Sessions</msg>
<status starttime="20170803 20:06:44.271" status="PASS" endtime="20170803 20:06:44.272"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:06:44.272">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:06:43.963" status="PASS" endtime="20170803 20:06:44.272"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:44.272">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:06:44.272" status="PASS" endtime="20170803 20:06:44.273"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:44.273">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:06:44.273">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:06:44.273">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:06:44.273" status="PASS" endtime="20170803 20:06:44.273"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:06:44.274">${state} = Off</msg>
<status starttime="20170803 20:06:43.963" status="PASS" endtime="20170803 20:06:44.274"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:06:44.274">${boot_progress} = Off</msg>
<status starttime="20170803 20:06:43.962" status="PASS" endtime="20170803 20:06:44.274"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170803 20:06:44.274">Off != FW Progress, Starting OS</msg>
<status starttime="20170803 20:06:44.274" status="FAIL" endtime="20170803 20:06:44.275"></status>
</kw>
<status starttime="20170803 20:06:43.962" status="FAIL" endtime="20170803 20:06:44.275"></status>
</kw>
<status starttime="20170803 20:06:43.272" status="FAIL" endtime="20170803 20:06:44.275"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:54.280">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:06:54.279" status="PASS" endtime="20170803 20:06:54.280"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:54.281">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:06:54.280" status="PASS" endtime="20170803 20:06:54.281"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:54.281">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:06:54.281" status="PASS" endtime="20170803 20:06:54.281"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:54.282">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:06:54.281" status="PASS" endtime="20170803 20:06:54.282"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:55.004">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:06:54.283" status="PASS" endtime="20170803 20:06:55.004"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:06:55.004">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:06:55.004">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:06:54.282" status="PASS" endtime="20170803 20:06:55.004"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:55.005">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:06:55.004" status="PASS" endtime="20170803 20:06:55.005"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:55.005">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:06:55.005" status="PASS" endtime="20170803 20:06:55.005"></status>
</kw>
<status starttime="20170803 20:06:54.279" status="PASS" endtime="20170803 20:06:55.006"></status>
</kw>
<status starttime="20170803 20:06:54.278" status="PASS" endtime="20170803 20:06:55.006"></status>
</kw>
<status starttime="20170803 20:06:54.278" status="PASS" endtime="20170803 20:06:55.006"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:55.006">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170803 20:06:55.006" status="PASS" endtime="20170803 20:06:55.006"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:55.008">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:06:55.008" status="PASS" endtime="20170803 20:06:55.008"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:55.009">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:06:55.009" status="PASS" endtime="20170803 20:06:55.009"></status>
</kw>
<status starttime="20170803 20:06:55.009" status="PASS" endtime="20170803 20:06:55.010"></status>
</kw>
<status starttime="20170803 20:06:55.007" status="PASS" endtime="20170803 20:06:55.010"></status>
</kw>
<status starttime="20170803 20:06:55.007" status="PASS" endtime="20170803 20:06:55.010"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:59.033">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:06:59.033">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:06:55.010" status="PASS" endtime="20170803 20:06:59.033"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:59.035">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:06:59.035" status="PASS" endtime="20170803 20:06:59.035"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:59.036">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:06:59.036" status="PASS" endtime="20170803 20:06:59.036"></status>
</kw>
<status starttime="20170803 20:06:59.035" status="PASS" endtime="20170803 20:06:59.036"></status>
</kw>
<status starttime="20170803 20:06:59.034" status="PASS" endtime="20170803 20:06:59.037"></status>
</kw>
<status starttime="20170803 20:06:59.034" status="PASS" endtime="20170803 20:06:59.037"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:06:59.037">Delete All Sessions</msg>
<status starttime="20170803 20:06:59.037" status="PASS" endtime="20170803 20:06:59.037"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:06:59.037">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:06:54.277" status="PASS" endtime="20170803 20:06:59.037"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:59.038">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:06:59.038" status="PASS" endtime="20170803 20:06:59.038"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:59.038">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:06:59.039">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:06:59.039">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:06:59.038" status="PASS" endtime="20170803 20:06:59.039"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:06:59.039">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170803 20:06:54.277" status="PASS" endtime="20170803 20:06:59.039"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:06:59.039">${power_state} = On</msg>
<status starttime="20170803 20:06:54.276" status="PASS" endtime="20170803 20:06:59.039"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170803 20:06:59.040" status="PASS" endtime="20170803 20:06:59.040"></status>
</kw>
<status starttime="20170803 20:06:54.276" status="PASS" endtime="20170803 20:06:59.040"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:59.044">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:06:59.043" status="PASS" endtime="20170803 20:06:59.044"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:59.045">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:06:59.045" status="PASS" endtime="20170803 20:06:59.045"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:59.046">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:06:59.045" status="PASS" endtime="20170803 20:06:59.046"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:59.046">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:06:59.046" status="PASS" endtime="20170803 20:06:59.046"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:59.598">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:06:59.047" status="PASS" endtime="20170803 20:06:59.598"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:06:59.598">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:06:59.598">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:06:59.047" status="PASS" endtime="20170803 20:06:59.598"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:59.599">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:06:59.599" status="PASS" endtime="20170803 20:06:59.599"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:59.600">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:06:59.599" status="PASS" endtime="20170803 20:06:59.600"></status>
</kw>
<status starttime="20170803 20:06:59.043" status="PASS" endtime="20170803 20:06:59.600"></status>
</kw>
<status starttime="20170803 20:06:59.042" status="PASS" endtime="20170803 20:06:59.600"></status>
</kw>
<status starttime="20170803 20:06:59.042" status="PASS" endtime="20170803 20:06:59.600"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:59.601">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170803 20:06:59.600" status="PASS" endtime="20170803 20:06:59.601"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:59.603">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:06:59.602" status="PASS" endtime="20170803 20:06:59.603"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:59.604">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:06:59.603" status="PASS" endtime="20170803 20:06:59.604"></status>
</kw>
<status starttime="20170803 20:06:59.603" status="PASS" endtime="20170803 20:06:59.604"></status>
</kw>
<status starttime="20170803 20:06:59.601" status="PASS" endtime="20170803 20:06:59.604"></status>
</kw>
<status starttime="20170803 20:06:59.601" status="PASS" endtime="20170803 20:06:59.604"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:59.693">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:06:59.693">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:06:59.604" status="PASS" endtime="20170803 20:06:59.693"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:59.695">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:06:59.694" status="PASS" endtime="20170803 20:06:59.695"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:59.696">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:06:59.696" status="PASS" endtime="20170803 20:06:59.696"></status>
</kw>
<status starttime="20170803 20:06:59.695" status="PASS" endtime="20170803 20:06:59.696"></status>
</kw>
<status starttime="20170803 20:06:59.694" status="PASS" endtime="20170803 20:06:59.696"></status>
</kw>
<status starttime="20170803 20:06:59.694" status="PASS" endtime="20170803 20:06:59.696"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:06:59.697">Delete All Sessions</msg>
<status starttime="20170803 20:06:59.697" status="PASS" endtime="20170803 20:06:59.697"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:06:59.697">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:06:59.041" status="PASS" endtime="20170803 20:06:59.697"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:59.698">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:06:59.697" status="PASS" endtime="20170803 20:06:59.698"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:59.698">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:06:59.698">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:06:59.698">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:06:59.698" status="PASS" endtime="20170803 20:06:59.698"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:06:59.699">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170803 20:06:59.041" status="PASS" endtime="20170803 20:06:59.699"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:06:59.699">${host_state} = Running</msg>
<status starttime="20170803 20:06:59.040" status="PASS" endtime="20170803 20:06:59.699"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170803 20:06:59.699" status="PASS" endtime="20170803 20:06:59.700"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:06:59.704">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:06:59.704" status="PASS" endtime="20170803 20:06:59.704"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:59.705">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:06:59.705" status="PASS" endtime="20170803 20:06:59.705"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:59.705">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:06:59.705" status="PASS" endtime="20170803 20:06:59.706"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:06:59.706">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:06:59.706" status="PASS" endtime="20170803 20:06:59.706"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:07:00.451">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:06:59.707" status="PASS" endtime="20170803 20:07:00.451"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:07:00.451">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:07:00.451">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:06:59.706" status="PASS" endtime="20170803 20:07:00.451"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:07:00.452">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:07:00.452" status="PASS" endtime="20170803 20:07:00.452"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:07:00.453">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:07:00.453" status="PASS" endtime="20170803 20:07:00.453"></status>
</kw>
<status starttime="20170803 20:06:59.703" status="PASS" endtime="20170803 20:07:00.453"></status>
</kw>
<status starttime="20170803 20:06:59.703" status="PASS" endtime="20170803 20:07:00.454"></status>
</kw>
<status starttime="20170803 20:06:59.702" status="PASS" endtime="20170803 20:07:00.454"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:00.455">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170803 20:07:00.454" status="PASS" endtime="20170803 20:07:00.455"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:00.458">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170803 20:07:00.457" status="PASS" endtime="20170803 20:07:00.458"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:07:00.459">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170803 20:07:00.459" status="PASS" endtime="20170803 20:07:00.459"></status>
</kw>
<status starttime="20170803 20:07:00.458" status="PASS" endtime="20170803 20:07:00.460"></status>
</kw>
<status starttime="20170803 20:07:00.456" status="PASS" endtime="20170803 20:07:00.460"></status>
</kw>
<status starttime="20170803 20:07:00.455" status="PASS" endtime="20170803 20:07:00.460"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:00.527">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:07:00.527">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:07:00.460" status="PASS" endtime="20170803 20:07:00.527"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:00.529">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:07:00.528" status="PASS" endtime="20170803 20:07:00.529"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:07:00.529">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:07:00.529" status="PASS" endtime="20170803 20:07:00.530"></status>
</kw>
<status starttime="20170803 20:07:00.529" status="PASS" endtime="20170803 20:07:00.530"></status>
</kw>
<status starttime="20170803 20:07:00.528" status="PASS" endtime="20170803 20:07:00.530"></status>
</kw>
<status starttime="20170803 20:07:00.527" status="PASS" endtime="20170803 20:07:00.530"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:07:00.530">Delete All Sessions</msg>
<status starttime="20170803 20:07:00.530" status="PASS" endtime="20170803 20:07:00.530"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:07:00.530">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:06:59.701" status="PASS" endtime="20170803 20:07:00.531"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:07:00.531">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:07:00.531" status="PASS" endtime="20170803 20:07:00.531"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:00.532">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:07:00.532">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:07:00.532">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:07:00.531" status="PASS" endtime="20170803 20:07:00.532"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:07:00.532">${state} = Off</msg>
<status starttime="20170803 20:06:59.701" status="PASS" endtime="20170803 20:07:00.532"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:07:00.532">${boot_progress} = Off</msg>
<status starttime="20170803 20:06:59.700" status="PASS" endtime="20170803 20:07:00.532"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170803 20:07:00.533">Off != FW Progress, Starting OS</msg>
<status starttime="20170803 20:07:00.533" status="FAIL" endtime="20170803 20:07:00.533"></status>
</kw>
<status starttime="20170803 20:06:59.700" status="FAIL" endtime="20170803 20:07:00.533"></status>
</kw>
<status starttime="20170803 20:06:54.275" status="FAIL" endtime="20170803 20:07:00.533"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:07:10.539">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:07:10.539" status="PASS" endtime="20170803 20:07:10.539"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:10.540">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:07:10.540" status="PASS" endtime="20170803 20:07:10.540"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:10.541">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:07:10.540" status="PASS" endtime="20170803 20:07:10.541"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:10.541">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:07:10.541" status="PASS" endtime="20170803 20:07:10.541"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:07:12.302">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:07:10.542" status="PASS" endtime="20170803 20:07:12.302"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:07:12.302">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:07:12.302">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:07:10.542" status="PASS" endtime="20170803 20:07:12.302"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:07:12.303">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:07:12.302" status="PASS" endtime="20170803 20:07:12.303"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:07:12.304">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:07:12.303" status="PASS" endtime="20170803 20:07:12.304"></status>
</kw>
<status starttime="20170803 20:07:10.538" status="PASS" endtime="20170803 20:07:12.304"></status>
</kw>
<status starttime="20170803 20:07:10.538" status="PASS" endtime="20170803 20:07:12.304"></status>
</kw>
<status starttime="20170803 20:07:10.537" status="PASS" endtime="20170803 20:07:12.304"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:12.304">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170803 20:07:12.304" status="PASS" endtime="20170803 20:07:12.305"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:12.307">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:07:12.306" status="PASS" endtime="20170803 20:07:12.307"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:07:12.307">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:07:12.307" status="PASS" endtime="20170803 20:07:12.308"></status>
</kw>
<status starttime="20170803 20:07:12.307" status="PASS" endtime="20170803 20:07:12.308"></status>
</kw>
<status starttime="20170803 20:07:12.305" status="PASS" endtime="20170803 20:07:12.308"></status>
</kw>
<status starttime="20170803 20:07:12.305" status="PASS" endtime="20170803 20:07:12.308"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:18.366">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:07:18.367">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:07:12.308" status="PASS" endtime="20170803 20:07:18.367"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:18.368">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:07:18.368" status="PASS" endtime="20170803 20:07:18.369"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:07:18.369">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:07:18.369" status="PASS" endtime="20170803 20:07:18.370"></status>
</kw>
<status starttime="20170803 20:07:18.369" status="PASS" endtime="20170803 20:07:18.370"></status>
</kw>
<status starttime="20170803 20:07:18.367" status="PASS" endtime="20170803 20:07:18.370"></status>
</kw>
<status starttime="20170803 20:07:18.367" status="PASS" endtime="20170803 20:07:18.370"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:07:18.370">Delete All Sessions</msg>
<status starttime="20170803 20:07:18.370" status="PASS" endtime="20170803 20:07:18.370"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:07:18.370">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:07:10.536" status="PASS" endtime="20170803 20:07:18.371"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:07:18.371">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:07:18.371" status="PASS" endtime="20170803 20:07:18.371"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:18.372">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:07:18.372">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:07:18.372">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:07:18.371" status="PASS" endtime="20170803 20:07:18.372"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:07:18.372">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170803 20:07:10.536" status="PASS" endtime="20170803 20:07:18.372"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:07:18.373">${power_state} = Off</msg>
<status starttime="20170803 20:07:10.535" status="PASS" endtime="20170803 20:07:18.373"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170803 20:07:18.373">On != Off</msg>
<status starttime="20170803 20:07:18.373" status="FAIL" endtime="20170803 20:07:18.373"></status>
</kw>
<status starttime="20170803 20:07:10.535" status="FAIL" endtime="20170803 20:07:18.374"></status>
</kw>
<status starttime="20170803 20:07:10.534" status="FAIL" endtime="20170803 20:07:18.374"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:07:28.382">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:07:28.381" status="PASS" endtime="20170803 20:07:28.382"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:28.383">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:07:28.382" status="PASS" endtime="20170803 20:07:28.383"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:28.383">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:07:28.383" status="PASS" endtime="20170803 20:07:28.383"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:28.384">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:07:28.384" status="PASS" endtime="20170803 20:07:28.384"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:07:29.838">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:07:28.385" status="PASS" endtime="20170803 20:07:29.839"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:07:29.839">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:07:29.839">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:07:28.385" status="PASS" endtime="20170803 20:07:29.839"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:07:29.839">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:07:29.839" status="PASS" endtime="20170803 20:07:29.839"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:07:29.840">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:07:29.840" status="PASS" endtime="20170803 20:07:29.840"></status>
</kw>
<status starttime="20170803 20:07:28.381" status="PASS" endtime="20170803 20:07:29.840"></status>
</kw>
<status starttime="20170803 20:07:28.380" status="PASS" endtime="20170803 20:07:29.840"></status>
</kw>
<status starttime="20170803 20:07:28.377" status="PASS" endtime="20170803 20:07:29.841"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:29.841">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170803 20:07:29.841" status="PASS" endtime="20170803 20:07:29.841"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:29.843">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:07:29.842" status="PASS" endtime="20170803 20:07:29.843"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:07:29.844">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:07:29.844" status="PASS" endtime="20170803 20:07:29.844"></status>
</kw>
<status starttime="20170803 20:07:29.843" status="PASS" endtime="20170803 20:07:29.844"></status>
</kw>
<status starttime="20170803 20:07:29.842" status="PASS" endtime="20170803 20:07:29.845"></status>
</kw>
<status starttime="20170803 20:07:29.841" status="PASS" endtime="20170803 20:07:29.845"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:30.418">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:07:30.418">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:07:29.845" status="PASS" endtime="20170803 20:07:30.418"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:30.420">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:07:30.419" status="PASS" endtime="20170803 20:07:30.420"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:07:30.421">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:07:30.421" status="PASS" endtime="20170803 20:07:30.421"></status>
</kw>
<status starttime="20170803 20:07:30.421" status="PASS" endtime="20170803 20:07:30.421"></status>
</kw>
<status starttime="20170803 20:07:30.419" status="PASS" endtime="20170803 20:07:30.422"></status>
</kw>
<status starttime="20170803 20:07:30.419" status="PASS" endtime="20170803 20:07:30.422"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:07:30.422">Delete All Sessions</msg>
<status starttime="20170803 20:07:30.422" status="PASS" endtime="20170803 20:07:30.422"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:07:30.422">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:07:28.376" status="PASS" endtime="20170803 20:07:30.422"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:07:30.423">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:07:30.423" status="PASS" endtime="20170803 20:07:30.423"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:30.424">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:07:30.424">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:07:30.424">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:07:30.423" status="PASS" endtime="20170803 20:07:30.424"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:07:30.424">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170803 20:07:28.375" status="PASS" endtime="20170803 20:07:30.424"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:07:30.424">${power_state} = On</msg>
<status starttime="20170803 20:07:28.375" status="PASS" endtime="20170803 20:07:30.424"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170803 20:07:30.425" status="PASS" endtime="20170803 20:07:30.425"></status>
</kw>
<status starttime="20170803 20:07:28.375" status="PASS" endtime="20170803 20:07:30.425"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:07:30.429">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:07:30.428" status="PASS" endtime="20170803 20:07:30.429"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:30.430">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:07:30.429" status="PASS" endtime="20170803 20:07:30.430"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:30.430">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:07:30.430" status="PASS" endtime="20170803 20:07:30.430"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:30.431">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:07:30.430" status="PASS" endtime="20170803 20:07:30.431"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:07:31.055">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:07:30.432" status="PASS" endtime="20170803 20:07:31.055"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:07:31.055">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:07:31.055">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:07:30.431" status="PASS" endtime="20170803 20:07:31.056"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:07:31.056">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:07:31.056" status="PASS" endtime="20170803 20:07:31.056"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:07:31.057">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:07:31.057" status="PASS" endtime="20170803 20:07:31.057"></status>
</kw>
<status starttime="20170803 20:07:30.428" status="PASS" endtime="20170803 20:07:31.057"></status>
</kw>
<status starttime="20170803 20:07:30.427" status="PASS" endtime="20170803 20:07:31.057"></status>
</kw>
<status starttime="20170803 20:07:30.427" status="PASS" endtime="20170803 20:07:31.057"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:31.058">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170803 20:07:31.057" status="PASS" endtime="20170803 20:07:31.058"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:31.060">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:07:31.059" status="PASS" endtime="20170803 20:07:31.060"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:07:31.061">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:07:31.061" status="PASS" endtime="20170803 20:07:31.061"></status>
</kw>
<status starttime="20170803 20:07:31.060" status="PASS" endtime="20170803 20:07:31.061"></status>
</kw>
<status starttime="20170803 20:07:31.059" status="PASS" endtime="20170803 20:07:31.062"></status>
</kw>
<status starttime="20170803 20:07:31.058" status="PASS" endtime="20170803 20:07:31.062"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:31.735">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:07:31.735">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:07:31.062" status="PASS" endtime="20170803 20:07:31.735"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:31.737">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:07:31.736" status="PASS" endtime="20170803 20:07:31.737"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:07:31.738">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:07:31.737" status="PASS" endtime="20170803 20:07:31.738"></status>
</kw>
<status starttime="20170803 20:07:31.737" status="PASS" endtime="20170803 20:07:31.738"></status>
</kw>
<status starttime="20170803 20:07:31.736" status="PASS" endtime="20170803 20:07:31.738"></status>
</kw>
<status starttime="20170803 20:07:31.735" status="PASS" endtime="20170803 20:07:31.738"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:07:31.738">Delete All Sessions</msg>
<status starttime="20170803 20:07:31.738" status="PASS" endtime="20170803 20:07:31.739"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:07:31.739">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:07:30.426" status="PASS" endtime="20170803 20:07:31.739"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:07:31.739">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:07:31.739" status="PASS" endtime="20170803 20:07:31.739"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:31.740">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:07:31.740">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:07:31.740">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:07:31.740" status="PASS" endtime="20170803 20:07:31.740"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:07:31.740">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170803 20:07:30.426" status="PASS" endtime="20170803 20:07:31.740"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:07:31.741">${host_state} = Running</msg>
<status starttime="20170803 20:07:30.425" status="PASS" endtime="20170803 20:07:31.741"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170803 20:07:31.741" status="PASS" endtime="20170803 20:07:31.741"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:07:31.745">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:07:31.745" status="PASS" endtime="20170803 20:07:31.745"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:31.746">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:07:31.746" status="PASS" endtime="20170803 20:07:31.746"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:31.747">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:07:31.746" status="PASS" endtime="20170803 20:07:31.747"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:31.747">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:07:31.747" status="PASS" endtime="20170803 20:07:31.747"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:07:32.178">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:07:31.748" status="PASS" endtime="20170803 20:07:32.178"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:07:32.178">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:07:32.178">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:07:31.748" status="PASS" endtime="20170803 20:07:32.178"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:07:32.179">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:07:32.179" status="PASS" endtime="20170803 20:07:32.179"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:07:32.180">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:07:32.179" status="PASS" endtime="20170803 20:07:32.180"></status>
</kw>
<status starttime="20170803 20:07:31.744" status="PASS" endtime="20170803 20:07:32.180"></status>
</kw>
<status starttime="20170803 20:07:31.744" status="PASS" endtime="20170803 20:07:32.180"></status>
</kw>
<status starttime="20170803 20:07:31.743" status="PASS" endtime="20170803 20:07:32.180"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:32.181">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170803 20:07:32.180" status="PASS" endtime="20170803 20:07:32.181"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:32.183">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170803 20:07:32.182" status="PASS" endtime="20170803 20:07:32.183"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:07:32.184">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170803 20:07:32.183" status="PASS" endtime="20170803 20:07:32.184"></status>
</kw>
<status starttime="20170803 20:07:32.183" status="PASS" endtime="20170803 20:07:32.184"></status>
</kw>
<status starttime="20170803 20:07:32.181" status="PASS" endtime="20170803 20:07:32.184"></status>
</kw>
<status starttime="20170803 20:07:32.181" status="PASS" endtime="20170803 20:07:32.184"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:32.470">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:07:32.470">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:07:32.184" status="PASS" endtime="20170803 20:07:32.470"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:32.472">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:07:32.471" status="PASS" endtime="20170803 20:07:32.472"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:07:32.473">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:07:32.472" status="PASS" endtime="20170803 20:07:32.473"></status>
</kw>
<status starttime="20170803 20:07:32.472" status="PASS" endtime="20170803 20:07:32.473"></status>
</kw>
<status starttime="20170803 20:07:32.471" status="PASS" endtime="20170803 20:07:32.473"></status>
</kw>
<status starttime="20170803 20:07:32.470" status="PASS" endtime="20170803 20:07:32.473"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:07:32.473">Delete All Sessions</msg>
<status starttime="20170803 20:07:32.473" status="PASS" endtime="20170803 20:07:32.474"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:07:32.474">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:07:31.743" status="PASS" endtime="20170803 20:07:32.474"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:07:32.474">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:07:32.474" status="PASS" endtime="20170803 20:07:32.475"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:32.475">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:07:32.475">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:07:32.475">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:07:32.475" status="PASS" endtime="20170803 20:07:32.475"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:07:32.476">${state} = Off</msg>
<status starttime="20170803 20:07:31.742" status="PASS" endtime="20170803 20:07:32.476"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:07:32.476">${boot_progress} = Off</msg>
<status starttime="20170803 20:07:31.742" status="PASS" endtime="20170803 20:07:32.476"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170803 20:07:32.476">Off != FW Progress, Starting OS</msg>
<status starttime="20170803 20:07:32.476" status="FAIL" endtime="20170803 20:07:32.476"></status>
</kw>
<status starttime="20170803 20:07:31.741" status="FAIL" endtime="20170803 20:07:32.477"></status>
</kw>
<status starttime="20170803 20:07:28.374" status="FAIL" endtime="20170803 20:07:32.477"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:07:42.482">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:07:42.482" status="PASS" endtime="20170803 20:07:42.483"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:42.483">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:07:42.483" status="PASS" endtime="20170803 20:07:42.483"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:42.484">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:07:42.483" status="PASS" endtime="20170803 20:07:42.484"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:42.484">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:07:42.484" status="PASS" endtime="20170803 20:07:42.485"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:07:42.745">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:07:42.485" status="PASS" endtime="20170803 20:07:42.745"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:07:42.745">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:07:42.745">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:07:42.485" status="PASS" endtime="20170803 20:07:42.745"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:07:42.746">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:07:42.745" status="PASS" endtime="20170803 20:07:42.746"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:07:42.746">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:07:42.746" status="PASS" endtime="20170803 20:07:42.747"></status>
</kw>
<status starttime="20170803 20:07:42.481" status="PASS" endtime="20170803 20:07:42.747"></status>
</kw>
<status starttime="20170803 20:07:42.480" status="PASS" endtime="20170803 20:07:42.747"></status>
</kw>
<status starttime="20170803 20:07:42.480" status="PASS" endtime="20170803 20:07:42.747"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:42.747">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170803 20:07:42.747" status="PASS" endtime="20170803 20:07:42.747"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:42.750">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:07:42.749" status="PASS" endtime="20170803 20:07:42.750"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:07:42.751">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:07:42.750" status="PASS" endtime="20170803 20:07:42.751"></status>
</kw>
<status starttime="20170803 20:07:42.750" status="PASS" endtime="20170803 20:07:42.751"></status>
</kw>
<status starttime="20170803 20:07:42.748" status="PASS" endtime="20170803 20:07:42.751"></status>
</kw>
<status starttime="20170803 20:07:42.748" status="PASS" endtime="20170803 20:07:42.751"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:42.818">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:07:42.818">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:07:42.751" status="PASS" endtime="20170803 20:07:42.818"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:42.820">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:07:42.819" status="PASS" endtime="20170803 20:07:42.820"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:07:42.821">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:07:42.821" status="PASS" endtime="20170803 20:07:42.821"></status>
</kw>
<status starttime="20170803 20:07:42.820" status="PASS" endtime="20170803 20:07:42.821"></status>
</kw>
<status starttime="20170803 20:07:42.819" status="PASS" endtime="20170803 20:07:42.821"></status>
</kw>
<status starttime="20170803 20:07:42.818" status="PASS" endtime="20170803 20:07:42.821"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:07:42.822">Delete All Sessions</msg>
<status starttime="20170803 20:07:42.822" status="PASS" endtime="20170803 20:07:42.822"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:07:42.822">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:07:42.479" status="PASS" endtime="20170803 20:07:42.822"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:07:42.823">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:07:42.822" status="PASS" endtime="20170803 20:07:42.823"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:42.823">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:07:42.823">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:07:42.823">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:07:42.823" status="PASS" endtime="20170803 20:07:42.823"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:07:42.824">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170803 20:07:42.478" status="PASS" endtime="20170803 20:07:42.824"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:07:42.824">${power_state} = On</msg>
<status starttime="20170803 20:07:42.478" status="PASS" endtime="20170803 20:07:42.824"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170803 20:07:42.824" status="PASS" endtime="20170803 20:07:42.825"></status>
</kw>
<status starttime="20170803 20:07:42.478" status="PASS" endtime="20170803 20:07:42.825"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:07:42.828">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:07:42.828" status="PASS" endtime="20170803 20:07:42.829"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:42.829">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:07:42.829" status="PASS" endtime="20170803 20:07:42.829"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:42.830">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:07:42.830" status="PASS" endtime="20170803 20:07:42.830"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:42.831">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:07:42.830" status="PASS" endtime="20170803 20:07:42.831"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:07:43.038">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:07:42.831" status="PASS" endtime="20170803 20:07:43.038"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:07:43.039">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:07:43.039">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:07:42.831" status="PASS" endtime="20170803 20:07:43.039"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:07:43.039">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:07:43.039" status="PASS" endtime="20170803 20:07:43.039"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:07:43.040">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:07:43.040" status="PASS" endtime="20170803 20:07:43.040"></status>
</kw>
<status starttime="20170803 20:07:42.827" status="PASS" endtime="20170803 20:07:43.040"></status>
</kw>
<status starttime="20170803 20:07:42.827" status="PASS" endtime="20170803 20:07:43.040"></status>
</kw>
<status starttime="20170803 20:07:42.826" status="PASS" endtime="20170803 20:07:43.040"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:43.041">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170803 20:07:43.041" status="PASS" endtime="20170803 20:07:43.041"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:43.043">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:07:43.042" status="PASS" endtime="20170803 20:07:43.043"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:07:43.044">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:07:43.044" status="PASS" endtime="20170803 20:07:43.045"></status>
</kw>
<status starttime="20170803 20:07:43.044" status="PASS" endtime="20170803 20:07:43.045"></status>
</kw>
<status starttime="20170803 20:07:43.042" status="PASS" endtime="20170803 20:07:43.045"></status>
</kw>
<status starttime="20170803 20:07:43.041" status="PASS" endtime="20170803 20:07:43.045"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:43.144">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:07:43.144">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:07:43.045" status="PASS" endtime="20170803 20:07:43.144"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:43.146">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:07:43.146" status="PASS" endtime="20170803 20:07:43.146"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:07:43.147">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:07:43.147" status="PASS" endtime="20170803 20:07:43.147"></status>
</kw>
<status starttime="20170803 20:07:43.146" status="PASS" endtime="20170803 20:07:43.147"></status>
</kw>
<status starttime="20170803 20:07:43.145" status="PASS" endtime="20170803 20:07:43.147"></status>
</kw>
<status starttime="20170803 20:07:43.145" status="PASS" endtime="20170803 20:07:43.147"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:07:43.148">Delete All Sessions</msg>
<status starttime="20170803 20:07:43.148" status="PASS" endtime="20170803 20:07:43.148"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:07:43.148">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:07:42.826" status="PASS" endtime="20170803 20:07:43.148"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:07:43.149">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:07:43.148" status="PASS" endtime="20170803 20:07:43.149"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:43.149">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:07:43.149">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:07:43.150">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:07:43.149" status="PASS" endtime="20170803 20:07:43.150"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:07:43.150">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170803 20:07:42.825" status="PASS" endtime="20170803 20:07:43.150"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:07:43.150">${host_state} = Running</msg>
<status starttime="20170803 20:07:42.825" status="PASS" endtime="20170803 20:07:43.150"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170803 20:07:43.150" status="PASS" endtime="20170803 20:07:43.151"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:07:43.155">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:07:43.154" status="PASS" endtime="20170803 20:07:43.155"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:43.156">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:07:43.155" status="PASS" endtime="20170803 20:07:43.156"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:43.156">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:07:43.156" status="PASS" endtime="20170803 20:07:43.156"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:43.157">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:07:43.157" status="PASS" endtime="20170803 20:07:43.157"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:07:43.348">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:07:43.158" status="PASS" endtime="20170803 20:07:43.348"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:07:43.348">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:07:43.348">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:07:43.157" status="PASS" endtime="20170803 20:07:43.348"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:07:43.349">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:07:43.349" status="PASS" endtime="20170803 20:07:43.349"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:07:43.350">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:07:43.349" status="PASS" endtime="20170803 20:07:43.350"></status>
</kw>
<status starttime="20170803 20:07:43.154" status="PASS" endtime="20170803 20:07:43.350"></status>
</kw>
<status starttime="20170803 20:07:43.153" status="PASS" endtime="20170803 20:07:43.350"></status>
</kw>
<status starttime="20170803 20:07:43.153" status="PASS" endtime="20170803 20:07:43.350"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:43.351">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170803 20:07:43.350" status="PASS" endtime="20170803 20:07:43.351"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:43.353">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170803 20:07:43.352" status="PASS" endtime="20170803 20:07:43.353"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:07:43.353">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170803 20:07:43.353" status="PASS" endtime="20170803 20:07:43.354"></status>
</kw>
<status starttime="20170803 20:07:43.353" status="PASS" endtime="20170803 20:07:43.354"></status>
</kw>
<status starttime="20170803 20:07:43.351" status="PASS" endtime="20170803 20:07:43.354"></status>
</kw>
<status starttime="20170803 20:07:43.351" status="PASS" endtime="20170803 20:07:43.354"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:43.420">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:07:43.421">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:07:43.354" status="PASS" endtime="20170803 20:07:43.421"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:43.422">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:07:43.422" status="PASS" endtime="20170803 20:07:43.423"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:07:43.423">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:07:43.423" status="PASS" endtime="20170803 20:07:43.423"></status>
</kw>
<status starttime="20170803 20:07:43.423" status="PASS" endtime="20170803 20:07:43.424"></status>
</kw>
<status starttime="20170803 20:07:43.421" status="PASS" endtime="20170803 20:07:43.424"></status>
</kw>
<status starttime="20170803 20:07:43.421" status="PASS" endtime="20170803 20:07:43.424"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:07:43.424">Delete All Sessions</msg>
<status starttime="20170803 20:07:43.424" status="PASS" endtime="20170803 20:07:43.424"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:07:43.424">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:07:43.152" status="PASS" endtime="20170803 20:07:43.425"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:07:43.425">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:07:43.425" status="PASS" endtime="20170803 20:07:43.425"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:43.426">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:07:43.426">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:07:43.426">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:07:43.426" status="PASS" endtime="20170803 20:07:43.426"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:07:43.426">${state} = Off</msg>
<status starttime="20170803 20:07:43.152" status="PASS" endtime="20170803 20:07:43.426"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:07:43.426">${boot_progress} = Off</msg>
<status starttime="20170803 20:07:43.151" status="PASS" endtime="20170803 20:07:43.427"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170803 20:07:43.427">Off != FW Progress, Starting OS</msg>
<status starttime="20170803 20:07:43.427" status="FAIL" endtime="20170803 20:07:43.427"></status>
</kw>
<status starttime="20170803 20:07:43.151" status="FAIL" endtime="20170803 20:07:43.427"></status>
</kw>
<status starttime="20170803 20:07:42.477" status="FAIL" endtime="20170803 20:07:43.428"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:07:53.435">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:07:53.434" status="PASS" endtime="20170803 20:07:53.436"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:53.437">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:07:53.436" status="PASS" endtime="20170803 20:07:53.437"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:53.438">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:07:53.437" status="PASS" endtime="20170803 20:07:53.438"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:53.439">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:07:53.438" status="PASS" endtime="20170803 20:07:53.439"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:07:53.638">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:07:53.440" status="PASS" endtime="20170803 20:07:53.638"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:07:53.638">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:07:53.638">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:07:53.439" status="PASS" endtime="20170803 20:07:53.639"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:07:53.639">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:07:53.639" status="PASS" endtime="20170803 20:07:53.639"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:07:53.640">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:07:53.639" status="PASS" endtime="20170803 20:07:53.640"></status>
</kw>
<status starttime="20170803 20:07:53.433" status="PASS" endtime="20170803 20:07:53.640"></status>
</kw>
<status starttime="20170803 20:07:53.432" status="PASS" endtime="20170803 20:07:53.640"></status>
</kw>
<status starttime="20170803 20:07:53.431" status="PASS" endtime="20170803 20:07:53.640"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:53.641">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170803 20:07:53.640" status="PASS" endtime="20170803 20:07:53.641"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:53.644">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:07:53.643" status="PASS" endtime="20170803 20:07:53.644"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:07:53.645">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:07:53.645" status="PASS" endtime="20170803 20:07:53.646"></status>
</kw>
<status starttime="20170803 20:07:53.644" status="PASS" endtime="20170803 20:07:53.646"></status>
</kw>
<status starttime="20170803 20:07:53.642" status="PASS" endtime="20170803 20:07:53.646"></status>
</kw>
<status starttime="20170803 20:07:53.641" status="PASS" endtime="20170803 20:07:53.646"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:53.710">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:07:53.711">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:07:53.646" status="PASS" endtime="20170803 20:07:53.711"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:53.713">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:07:53.712" status="PASS" endtime="20170803 20:07:53.713"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:07:53.714">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:07:53.713" status="PASS" endtime="20170803 20:07:53.714"></status>
</kw>
<status starttime="20170803 20:07:53.713" status="PASS" endtime="20170803 20:07:53.714"></status>
</kw>
<status starttime="20170803 20:07:53.711" status="PASS" endtime="20170803 20:07:53.714"></status>
</kw>
<status starttime="20170803 20:07:53.711" status="PASS" endtime="20170803 20:07:53.714"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:07:53.714">Delete All Sessions</msg>
<status starttime="20170803 20:07:53.714" status="PASS" endtime="20170803 20:07:53.714"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:07:53.715">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:07:53.430" status="PASS" endtime="20170803 20:07:53.715"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:07:53.715">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:07:53.715" status="PASS" endtime="20170803 20:07:53.715"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:53.716">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:07:53.716">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:07:53.716">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:07:53.716" status="PASS" endtime="20170803 20:07:53.716"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:07:53.716">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170803 20:07:53.429" status="PASS" endtime="20170803 20:07:53.716"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:07:53.717">${power_state} = On</msg>
<status starttime="20170803 20:07:53.429" status="PASS" endtime="20170803 20:07:53.717"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170803 20:07:53.717" status="PASS" endtime="20170803 20:07:53.717"></status>
</kw>
<status starttime="20170803 20:07:53.429" status="PASS" endtime="20170803 20:07:53.717"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:07:53.721">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:07:53.721" status="PASS" endtime="20170803 20:07:53.721"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:53.722">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:07:53.722" status="PASS" endtime="20170803 20:07:53.722"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:53.722">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:07:53.722" status="PASS" endtime="20170803 20:07:53.722"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:53.723">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:07:53.723" status="PASS" endtime="20170803 20:07:53.723"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:07:54.005">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:07:53.724" status="PASS" endtime="20170803 20:07:54.006"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:07:54.006">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:07:54.006">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:07:53.723" status="PASS" endtime="20170803 20:07:54.006"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:07:54.006">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:07:54.006" status="PASS" endtime="20170803 20:07:54.007"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:07:54.007">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:07:54.007" status="PASS" endtime="20170803 20:07:54.007"></status>
</kw>
<status starttime="20170803 20:07:53.720" status="PASS" endtime="20170803 20:07:54.007"></status>
</kw>
<status starttime="20170803 20:07:53.720" status="PASS" endtime="20170803 20:07:54.007"></status>
</kw>
<status starttime="20170803 20:07:53.719" status="PASS" endtime="20170803 20:07:54.008"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:54.008">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170803 20:07:54.008" status="PASS" endtime="20170803 20:07:54.008"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:54.010">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:07:54.009" status="PASS" endtime="20170803 20:07:54.011"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:07:54.011">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:07:54.011" status="PASS" endtime="20170803 20:07:54.012"></status>
</kw>
<status starttime="20170803 20:07:54.011" status="PASS" endtime="20170803 20:07:54.012"></status>
</kw>
<status starttime="20170803 20:07:54.009" status="PASS" endtime="20170803 20:07:54.012"></status>
</kw>
<status starttime="20170803 20:07:54.008" status="PASS" endtime="20170803 20:07:54.012"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:54.127">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:07:54.127">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:07:54.012" status="PASS" endtime="20170803 20:07:54.127"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:54.129">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:07:54.129" status="PASS" endtime="20170803 20:07:54.129"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:07:54.130">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:07:54.130" status="PASS" endtime="20170803 20:07:54.130"></status>
</kw>
<status starttime="20170803 20:07:54.129" status="PASS" endtime="20170803 20:07:54.130"></status>
</kw>
<status starttime="20170803 20:07:54.128" status="PASS" endtime="20170803 20:07:54.130"></status>
</kw>
<status starttime="20170803 20:07:54.128" status="PASS" endtime="20170803 20:07:54.131"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:07:54.131">Delete All Sessions</msg>
<status starttime="20170803 20:07:54.131" status="PASS" endtime="20170803 20:07:54.131"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:07:54.131">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:07:53.718" status="PASS" endtime="20170803 20:07:54.131"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:07:54.132">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:07:54.131" status="PASS" endtime="20170803 20:07:54.132"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:54.132">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:07:54.132">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:07:54.133">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:07:54.132" status="PASS" endtime="20170803 20:07:54.133"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:07:54.133">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170803 20:07:53.718" status="PASS" endtime="20170803 20:07:54.133"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:07:54.133">${host_state} = Running</msg>
<status starttime="20170803 20:07:53.718" status="PASS" endtime="20170803 20:07:54.133"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170803 20:07:54.133" status="PASS" endtime="20170803 20:07:54.134"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:07:54.138">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:07:54.137" status="PASS" endtime="20170803 20:07:54.138"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:54.139">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:07:54.138" status="PASS" endtime="20170803 20:07:54.139"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:54.139">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:07:54.139" status="PASS" endtime="20170803 20:07:54.139"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:54.140">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:07:54.140" status="PASS" endtime="20170803 20:07:54.140"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:07:54.327">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:07:54.141" status="PASS" endtime="20170803 20:07:54.328"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:07:54.328">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:07:54.328">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:07:54.140" status="PASS" endtime="20170803 20:07:54.328"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:07:54.328">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:07:54.328" status="PASS" endtime="20170803 20:07:54.328"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:07:54.329">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:07:54.329" status="PASS" endtime="20170803 20:07:54.329"></status>
</kw>
<status starttime="20170803 20:07:54.137" status="PASS" endtime="20170803 20:07:54.329"></status>
</kw>
<status starttime="20170803 20:07:54.137" status="PASS" endtime="20170803 20:07:54.329"></status>
</kw>
<status starttime="20170803 20:07:54.136" status="PASS" endtime="20170803 20:07:54.329"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:54.330">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170803 20:07:54.330" status="PASS" endtime="20170803 20:07:54.330"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:54.332">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170803 20:07:54.331" status="PASS" endtime="20170803 20:07:54.332"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:07:54.333">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170803 20:07:54.333" status="PASS" endtime="20170803 20:07:54.333"></status>
</kw>
<status starttime="20170803 20:07:54.332" status="PASS" endtime="20170803 20:07:54.333"></status>
</kw>
<status starttime="20170803 20:07:54.331" status="PASS" endtime="20170803 20:07:54.333"></status>
</kw>
<status starttime="20170803 20:07:54.330" status="PASS" endtime="20170803 20:07:54.333"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:54.418">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:07:54.418">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:07:54.334" status="PASS" endtime="20170803 20:07:54.418"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:54.420">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:07:54.419" status="PASS" endtime="20170803 20:07:54.420"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:07:54.421">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:07:54.420" status="PASS" endtime="20170803 20:07:54.421"></status>
</kw>
<status starttime="20170803 20:07:54.420" status="PASS" endtime="20170803 20:07:54.421"></status>
</kw>
<status starttime="20170803 20:07:54.419" status="PASS" endtime="20170803 20:07:54.421"></status>
</kw>
<status starttime="20170803 20:07:54.418" status="PASS" endtime="20170803 20:07:54.421"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:07:54.421">Delete All Sessions</msg>
<status starttime="20170803 20:07:54.421" status="PASS" endtime="20170803 20:07:54.422"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:07:54.422">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:07:54.135" status="PASS" endtime="20170803 20:07:54.422"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:07:54.422">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:07:54.422" status="PASS" endtime="20170803 20:07:54.422"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:07:54.423">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:07:54.423">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:07:54.423">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:07:54.423" status="PASS" endtime="20170803 20:07:54.423"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:07:54.424">${state} = Off</msg>
<status starttime="20170803 20:07:54.135" status="PASS" endtime="20170803 20:07:54.424"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:07:54.424">${boot_progress} = Off</msg>
<status starttime="20170803 20:07:54.134" status="PASS" endtime="20170803 20:07:54.424"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170803 20:07:54.424">Off != FW Progress, Starting OS</msg>
<status starttime="20170803 20:07:54.424" status="FAIL" endtime="20170803 20:07:54.425"></status>
</kw>
<status starttime="20170803 20:07:54.134" status="FAIL" endtime="20170803 20:07:54.425"></status>
</kw>
<status starttime="20170803 20:07:53.428" status="FAIL" endtime="20170803 20:07:54.425"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:04.434">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:08:04.433" status="PASS" endtime="20170803 20:08:04.434"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:04.435">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:08:04.435" status="PASS" endtime="20170803 20:08:04.435"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:04.435">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:08:04.435" status="PASS" endtime="20170803 20:08:04.436"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:04.436">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:08:04.436" status="PASS" endtime="20170803 20:08:04.436"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:04.628">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:08:04.437" status="PASS" endtime="20170803 20:08:04.628"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:08:04.628">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:08:04.629">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:08:04.437" status="PASS" endtime="20170803 20:08:04.629"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:04.629">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:08:04.629" status="PASS" endtime="20170803 20:08:04.629"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:04.630">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:08:04.630" status="PASS" endtime="20170803 20:08:04.630"></status>
</kw>
<status starttime="20170803 20:08:04.433" status="PASS" endtime="20170803 20:08:04.630"></status>
</kw>
<status starttime="20170803 20:08:04.432" status="PASS" endtime="20170803 20:08:04.630"></status>
</kw>
<status starttime="20170803 20:08:04.428" status="PASS" endtime="20170803 20:08:04.630"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:04.631">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170803 20:08:04.631" status="PASS" endtime="20170803 20:08:04.631"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:04.633">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:08:04.632" status="PASS" endtime="20170803 20:08:04.633"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:04.634">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:08:04.634" status="PASS" endtime="20170803 20:08:04.634"></status>
</kw>
<status starttime="20170803 20:08:04.633" status="PASS" endtime="20170803 20:08:04.634"></status>
</kw>
<status starttime="20170803 20:08:04.632" status="PASS" endtime="20170803 20:08:04.634"></status>
</kw>
<status starttime="20170803 20:08:04.631" status="PASS" endtime="20170803 20:08:04.634"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:04.711">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:08:04.711">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:08:04.635" status="PASS" endtime="20170803 20:08:04.711"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:04.713">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:08:04.713" status="PASS" endtime="20170803 20:08:04.713"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:04.714">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:08:04.714" status="PASS" endtime="20170803 20:08:04.715"></status>
</kw>
<status starttime="20170803 20:08:04.714" status="PASS" endtime="20170803 20:08:04.715"></status>
</kw>
<status starttime="20170803 20:08:04.712" status="PASS" endtime="20170803 20:08:04.715"></status>
</kw>
<status starttime="20170803 20:08:04.712" status="PASS" endtime="20170803 20:08:04.715"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:08:04.715">Delete All Sessions</msg>
<status starttime="20170803 20:08:04.715" status="PASS" endtime="20170803 20:08:04.715"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:08:04.715">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:08:04.427" status="PASS" endtime="20170803 20:08:04.716"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:04.716">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:08:04.716" status="PASS" endtime="20170803 20:08:04.716"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:04.717">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:08:04.717">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:08:04.717">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:08:04.716" status="PASS" endtime="20170803 20:08:04.717"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:08:04.717">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170803 20:08:04.427" status="PASS" endtime="20170803 20:08:04.717"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:08:04.717">${power_state} = On</msg>
<status starttime="20170803 20:08:04.426" status="PASS" endtime="20170803 20:08:04.718"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170803 20:08:04.718" status="PASS" endtime="20170803 20:08:04.718"></status>
</kw>
<status starttime="20170803 20:08:04.426" status="PASS" endtime="20170803 20:08:04.718"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:04.722">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:08:04.721" status="PASS" endtime="20170803 20:08:04.722"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:04.723">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:08:04.722" status="PASS" endtime="20170803 20:08:04.723"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:04.723">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:08:04.723" status="PASS" endtime="20170803 20:08:04.723"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:04.724">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:08:04.723" status="PASS" endtime="20170803 20:08:04.724"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:04.997">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:08:04.725" status="PASS" endtime="20170803 20:08:04.997"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:08:04.997">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:08:04.997">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:08:04.724" status="PASS" endtime="20170803 20:08:04.997"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:04.998">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:08:04.997" status="PASS" endtime="20170803 20:08:04.998"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:04.998">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:08:04.998" status="PASS" endtime="20170803 20:08:04.998"></status>
</kw>
<status starttime="20170803 20:08:04.721" status="PASS" endtime="20170803 20:08:04.998"></status>
</kw>
<status starttime="20170803 20:08:04.720" status="PASS" endtime="20170803 20:08:04.998"></status>
</kw>
<status starttime="20170803 20:08:04.720" status="PASS" endtime="20170803 20:08:04.999"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:04.999">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170803 20:08:04.999" status="PASS" endtime="20170803 20:08:04.999"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:05.002">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:08:05.001" status="PASS" endtime="20170803 20:08:05.002"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:05.003">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:08:05.002" status="PASS" endtime="20170803 20:08:05.003"></status>
</kw>
<status starttime="20170803 20:08:05.002" status="PASS" endtime="20170803 20:08:05.003"></status>
</kw>
<status starttime="20170803 20:08:05.000" status="PASS" endtime="20170803 20:08:05.003"></status>
</kw>
<status starttime="20170803 20:08:04.999" status="PASS" endtime="20170803 20:08:05.003"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:05.118">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:08:05.118">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:08:05.003" status="PASS" endtime="20170803 20:08:05.118"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:05.120">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:08:05.119" status="PASS" endtime="20170803 20:08:05.120"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:05.121">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:08:05.120" status="PASS" endtime="20170803 20:08:05.121"></status>
</kw>
<status starttime="20170803 20:08:05.120" status="PASS" endtime="20170803 20:08:05.121"></status>
</kw>
<status starttime="20170803 20:08:05.119" status="PASS" endtime="20170803 20:08:05.121"></status>
</kw>
<status starttime="20170803 20:08:05.118" status="PASS" endtime="20170803 20:08:05.121"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:08:05.121">Delete All Sessions</msg>
<status starttime="20170803 20:08:05.121" status="PASS" endtime="20170803 20:08:05.121"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:08:05.122">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:08:04.719" status="PASS" endtime="20170803 20:08:05.122"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:05.122">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:08:05.122" status="PASS" endtime="20170803 20:08:05.122"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:05.123">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:08:05.123">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:08:05.123">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:08:05.123" status="PASS" endtime="20170803 20:08:05.123"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:08:05.123">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170803 20:08:04.719" status="PASS" endtime="20170803 20:08:05.123"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:08:05.124">${host_state} = Quiesced</msg>
<status starttime="20170803 20:08:04.718" status="PASS" endtime="20170803 20:08:05.124"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170803 20:08:05.124">Running != Quiesced</msg>
<status starttime="20170803 20:08:05.124" status="FAIL" endtime="20170803 20:08:05.125"></status>
</kw>
<status starttime="20170803 20:08:04.425" status="FAIL" endtime="20170803 20:08:05.125"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:15.130">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:08:15.129" status="PASS" endtime="20170803 20:08:15.130"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:15.130">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:08:15.130" status="PASS" endtime="20170803 20:08:15.131"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:15.131">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:08:15.131" status="PASS" endtime="20170803 20:08:15.131"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:15.132">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:08:15.131" status="PASS" endtime="20170803 20:08:15.132"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:15.328">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:08:15.133" status="PASS" endtime="20170803 20:08:15.328"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:08:15.329">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:08:15.329">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:08:15.133" status="PASS" endtime="20170803 20:08:15.329"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:15.329">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:08:15.329" status="PASS" endtime="20170803 20:08:15.329"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:15.330">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:08:15.330" status="PASS" endtime="20170803 20:08:15.330"></status>
</kw>
<status starttime="20170803 20:08:15.129" status="PASS" endtime="20170803 20:08:15.330"></status>
</kw>
<status starttime="20170803 20:08:15.128" status="PASS" endtime="20170803 20:08:15.330"></status>
</kw>
<status starttime="20170803 20:08:15.128" status="PASS" endtime="20170803 20:08:15.331"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:15.331">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170803 20:08:15.331" status="PASS" endtime="20170803 20:08:15.331"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:15.333">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:08:15.333" status="PASS" endtime="20170803 20:08:15.333"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:15.334">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:08:15.334" status="PASS" endtime="20170803 20:08:15.334"></status>
</kw>
<status starttime="20170803 20:08:15.334" status="PASS" endtime="20170803 20:08:15.334"></status>
</kw>
<status starttime="20170803 20:08:15.332" status="PASS" endtime="20170803 20:08:15.335"></status>
</kw>
<status starttime="20170803 20:08:15.331" status="PASS" endtime="20170803 20:08:15.335"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:15.410">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:08:15.410">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:08:15.335" status="PASS" endtime="20170803 20:08:15.410"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:15.412">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:08:15.412" status="PASS" endtime="20170803 20:08:15.412"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:15.413">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:08:15.413" status="PASS" endtime="20170803 20:08:15.413"></status>
</kw>
<status starttime="20170803 20:08:15.412" status="PASS" endtime="20170803 20:08:15.413"></status>
</kw>
<status starttime="20170803 20:08:15.411" status="PASS" endtime="20170803 20:08:15.413"></status>
</kw>
<status starttime="20170803 20:08:15.411" status="PASS" endtime="20170803 20:08:15.413"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:08:15.414">Delete All Sessions</msg>
<status starttime="20170803 20:08:15.414" status="PASS" endtime="20170803 20:08:15.414"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:08:15.414">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:08:15.127" status="PASS" endtime="20170803 20:08:15.414"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:15.415">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:08:15.414" status="PASS" endtime="20170803 20:08:15.415"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:15.415">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:08:15.415">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:08:15.416">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:08:15.415" status="PASS" endtime="20170803 20:08:15.416"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:08:15.416">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170803 20:08:15.126" status="PASS" endtime="20170803 20:08:15.416"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:08:15.416">${power_state} = On</msg>
<status starttime="20170803 20:08:15.126" status="PASS" endtime="20170803 20:08:15.416"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170803 20:08:15.416" status="PASS" endtime="20170803 20:08:15.417"></status>
</kw>
<status starttime="20170803 20:08:15.126" status="PASS" endtime="20170803 20:08:15.417"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:15.421">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:08:15.421" status="PASS" endtime="20170803 20:08:15.421"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:15.422">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:08:15.422" status="PASS" endtime="20170803 20:08:15.422"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:15.423">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:08:15.422" status="PASS" endtime="20170803 20:08:15.423"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:15.424">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:08:15.423" status="PASS" endtime="20170803 20:08:15.424"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:15.699">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:08:15.425" status="PASS" endtime="20170803 20:08:15.699"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:08:15.700">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:08:15.700">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:08:15.424" status="PASS" endtime="20170803 20:08:15.700"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:15.700">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:08:15.700" status="PASS" endtime="20170803 20:08:15.700"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:15.701">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:08:15.701" status="PASS" endtime="20170803 20:08:15.701"></status>
</kw>
<status starttime="20170803 20:08:15.420" status="PASS" endtime="20170803 20:08:15.701"></status>
</kw>
<status starttime="20170803 20:08:15.419" status="PASS" endtime="20170803 20:08:15.701"></status>
</kw>
<status starttime="20170803 20:08:15.419" status="PASS" endtime="20170803 20:08:15.701"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:15.702">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170803 20:08:15.702" status="PASS" endtime="20170803 20:08:15.702"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:15.704">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:08:15.703" status="PASS" endtime="20170803 20:08:15.704"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:15.705">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:08:15.705" status="PASS" endtime="20170803 20:08:15.705"></status>
</kw>
<status starttime="20170803 20:08:15.704" status="PASS" endtime="20170803 20:08:15.706"></status>
</kw>
<status starttime="20170803 20:08:15.703" status="PASS" endtime="20170803 20:08:15.706"></status>
</kw>
<status starttime="20170803 20:08:15.702" status="PASS" endtime="20170803 20:08:15.706"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:15.809">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:08:15.809">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:08:15.706" status="PASS" endtime="20170803 20:08:15.809"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:15.811">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:08:15.810" status="PASS" endtime="20170803 20:08:15.811"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:15.812">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:08:15.812" status="PASS" endtime="20170803 20:08:15.812"></status>
</kw>
<status starttime="20170803 20:08:15.811" status="PASS" endtime="20170803 20:08:15.812"></status>
</kw>
<status starttime="20170803 20:08:15.810" status="PASS" endtime="20170803 20:08:15.812"></status>
</kw>
<status starttime="20170803 20:08:15.809" status="PASS" endtime="20170803 20:08:15.813"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:08:15.813">Delete All Sessions</msg>
<status starttime="20170803 20:08:15.813" status="PASS" endtime="20170803 20:08:15.813"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:08:15.813">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:08:15.418" status="PASS" endtime="20170803 20:08:15.813"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:15.814">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:08:15.813" status="PASS" endtime="20170803 20:08:15.814"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:15.814">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:08:15.814">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:08:15.815">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:08:15.814" status="PASS" endtime="20170803 20:08:15.815"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:08:15.815">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170803 20:08:15.417" status="PASS" endtime="20170803 20:08:15.815"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:08:15.815">${host_state} = Quiesced</msg>
<status starttime="20170803 20:08:15.417" status="PASS" endtime="20170803 20:08:15.815"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170803 20:08:15.816">Running != Quiesced</msg>
<status starttime="20170803 20:08:15.816" status="FAIL" endtime="20170803 20:08:15.816"></status>
</kw>
<status starttime="20170803 20:08:15.125" status="FAIL" endtime="20170803 20:08:15.816"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:25.821">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:08:25.820" status="PASS" endtime="20170803 20:08:25.821"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:25.822">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:08:25.821" status="PASS" endtime="20170803 20:08:25.822"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:25.822">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:08:25.822" status="PASS" endtime="20170803 20:08:25.822"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:25.823">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:08:25.823" status="PASS" endtime="20170803 20:08:25.823"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:26.048">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:08:25.824" status="PASS" endtime="20170803 20:08:26.048"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:08:26.048">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:08:26.048">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:08:25.823" status="PASS" endtime="20170803 20:08:26.048"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:26.049">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:08:26.049" status="PASS" endtime="20170803 20:08:26.049"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:26.050">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:08:26.049" status="PASS" endtime="20170803 20:08:26.050"></status>
</kw>
<status starttime="20170803 20:08:25.820" status="PASS" endtime="20170803 20:08:26.050"></status>
</kw>
<status starttime="20170803 20:08:25.820" status="PASS" endtime="20170803 20:08:26.050"></status>
</kw>
<status starttime="20170803 20:08:25.819" status="PASS" endtime="20170803 20:08:26.050"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:26.051">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170803 20:08:26.050" status="PASS" endtime="20170803 20:08:26.051"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:26.053">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:08:26.052" status="PASS" endtime="20170803 20:08:26.053"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:26.054">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:08:26.054" status="PASS" endtime="20170803 20:08:26.054"></status>
</kw>
<status starttime="20170803 20:08:26.053" status="PASS" endtime="20170803 20:08:26.054"></status>
</kw>
<status starttime="20170803 20:08:26.052" status="PASS" endtime="20170803 20:08:26.054"></status>
</kw>
<status starttime="20170803 20:08:26.051" status="PASS" endtime="20170803 20:08:26.055"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:26.119">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:08:26.119">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:08:26.055" status="PASS" endtime="20170803 20:08:26.119"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:26.121">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:08:26.120" status="PASS" endtime="20170803 20:08:26.121"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:26.122">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:08:26.121" status="PASS" endtime="20170803 20:08:26.122"></status>
</kw>
<status starttime="20170803 20:08:26.121" status="PASS" endtime="20170803 20:08:26.122"></status>
</kw>
<status starttime="20170803 20:08:26.120" status="PASS" endtime="20170803 20:08:26.122"></status>
</kw>
<status starttime="20170803 20:08:26.119" status="PASS" endtime="20170803 20:08:26.122"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:08:26.122">Delete All Sessions</msg>
<status starttime="20170803 20:08:26.122" status="PASS" endtime="20170803 20:08:26.123"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:08:26.123">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:08:25.818" status="PASS" endtime="20170803 20:08:26.123"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:26.123">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:08:26.123" status="PASS" endtime="20170803 20:08:26.123"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:26.124">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:08:26.124">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:08:26.124">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:08:26.124" status="PASS" endtime="20170803 20:08:26.124"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:08:26.124">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170803 20:08:25.818" status="PASS" endtime="20170803 20:08:26.124"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:08:26.125">${power_state} = On</msg>
<status starttime="20170803 20:08:25.817" status="PASS" endtime="20170803 20:08:26.125"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170803 20:08:26.125" status="PASS" endtime="20170803 20:08:26.125"></status>
</kw>
<status starttime="20170803 20:08:25.817" status="PASS" endtime="20170803 20:08:26.125"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:26.129">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:08:26.129" status="PASS" endtime="20170803 20:08:26.130"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:26.130">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:08:26.130" status="PASS" endtime="20170803 20:08:26.130"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:26.131">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:08:26.131" status="PASS" endtime="20170803 20:08:26.131"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:26.132">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:08:26.131" status="PASS" endtime="20170803 20:08:26.132"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:26.318">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:08:26.132" status="PASS" endtime="20170803 20:08:26.318"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:08:26.318">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:08:26.318">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:08:26.132" status="PASS" endtime="20170803 20:08:26.318"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:26.319">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:08:26.318" status="PASS" endtime="20170803 20:08:26.319"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:26.319">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:08:26.319" status="PASS" endtime="20170803 20:08:26.319"></status>
</kw>
<status starttime="20170803 20:08:26.128" status="PASS" endtime="20170803 20:08:26.320"></status>
</kw>
<status starttime="20170803 20:08:26.128" status="PASS" endtime="20170803 20:08:26.320"></status>
</kw>
<status starttime="20170803 20:08:26.127" status="PASS" endtime="20170803 20:08:26.320"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:26.320">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170803 20:08:26.320" status="PASS" endtime="20170803 20:08:26.320"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:26.322">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:08:26.322" status="PASS" endtime="20170803 20:08:26.322"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:26.323">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:08:26.323" status="PASS" endtime="20170803 20:08:26.323"></status>
</kw>
<status starttime="20170803 20:08:26.323" status="PASS" endtime="20170803 20:08:26.324"></status>
</kw>
<status starttime="20170803 20:08:26.321" status="PASS" endtime="20170803 20:08:26.324"></status>
</kw>
<status starttime="20170803 20:08:26.321" status="PASS" endtime="20170803 20:08:26.324"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:26.413">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:08:26.413">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:08:26.324" status="PASS" endtime="20170803 20:08:26.413"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:26.415">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:08:26.415" status="PASS" endtime="20170803 20:08:26.415"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:26.416">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:08:26.416" status="PASS" endtime="20170803 20:08:26.416"></status>
</kw>
<status starttime="20170803 20:08:26.415" status="PASS" endtime="20170803 20:08:26.416"></status>
</kw>
<status starttime="20170803 20:08:26.414" status="PASS" endtime="20170803 20:08:26.416"></status>
</kw>
<status starttime="20170803 20:08:26.414" status="PASS" endtime="20170803 20:08:26.416"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:08:26.417">Delete All Sessions</msg>
<status starttime="20170803 20:08:26.417" status="PASS" endtime="20170803 20:08:26.417"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:08:26.417">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:08:26.127" status="PASS" endtime="20170803 20:08:26.417"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:26.418">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:08:26.417" status="PASS" endtime="20170803 20:08:26.418"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:26.418">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:08:26.418">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:08:26.419">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:08:26.418" status="PASS" endtime="20170803 20:08:26.419"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:08:26.419">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170803 20:08:26.126" status="PASS" endtime="20170803 20:08:26.419"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:08:26.419">${host_state} = Quiesced</msg>
<status starttime="20170803 20:08:26.126" status="PASS" endtime="20170803 20:08:26.419"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170803 20:08:26.420">Running != Quiesced</msg>
<status starttime="20170803 20:08:26.419" status="FAIL" endtime="20170803 20:08:26.420"></status>
</kw>
<status starttime="20170803 20:08:25.817" status="FAIL" endtime="20170803 20:08:26.420"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:36.426">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:08:36.425" status="PASS" endtime="20170803 20:08:36.426"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:36.426">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:08:36.426" status="PASS" endtime="20170803 20:08:36.427"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:36.427">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:08:36.427" status="PASS" endtime="20170803 20:08:36.427"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:36.428">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:08:36.427" status="PASS" endtime="20170803 20:08:36.428"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:36.650">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:08:36.429" status="PASS" endtime="20170803 20:08:36.650"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:08:36.650">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:08:36.650">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:08:36.428" status="PASS" endtime="20170803 20:08:36.650"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:36.651">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:08:36.650" status="PASS" endtime="20170803 20:08:36.651"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:36.651">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:08:36.651" status="PASS" endtime="20170803 20:08:36.651"></status>
</kw>
<status starttime="20170803 20:08:36.425" status="PASS" endtime="20170803 20:08:36.651"></status>
</kw>
<status starttime="20170803 20:08:36.424" status="PASS" endtime="20170803 20:08:36.652"></status>
</kw>
<status starttime="20170803 20:08:36.423" status="PASS" endtime="20170803 20:08:36.652"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:36.652">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170803 20:08:36.652" status="PASS" endtime="20170803 20:08:36.652"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:36.654">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:08:36.654" status="PASS" endtime="20170803 20:08:36.654"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:36.655">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:08:36.655" status="PASS" endtime="20170803 20:08:36.656"></status>
</kw>
<status starttime="20170803 20:08:36.654" status="PASS" endtime="20170803 20:08:36.656"></status>
</kw>
<status starttime="20170803 20:08:36.653" status="PASS" endtime="20170803 20:08:36.656"></status>
</kw>
<status starttime="20170803 20:08:36.653" status="PASS" endtime="20170803 20:08:36.656"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:36.720">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:08:36.720">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:08:36.656" status="PASS" endtime="20170803 20:08:36.720"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:36.722">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:08:36.722" status="PASS" endtime="20170803 20:08:36.722"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:36.723">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:08:36.723" status="PASS" endtime="20170803 20:08:36.723"></status>
</kw>
<status starttime="20170803 20:08:36.722" status="PASS" endtime="20170803 20:08:36.723"></status>
</kw>
<status starttime="20170803 20:08:36.721" status="PASS" endtime="20170803 20:08:36.723"></status>
</kw>
<status starttime="20170803 20:08:36.721" status="PASS" endtime="20170803 20:08:36.723"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:08:36.724">Delete All Sessions</msg>
<status starttime="20170803 20:08:36.724" status="PASS" endtime="20170803 20:08:36.724"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:08:36.724">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:08:36.423" status="PASS" endtime="20170803 20:08:36.724"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:36.725">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:08:36.724" status="PASS" endtime="20170803 20:08:36.725"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:36.725">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:08:36.725">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:08:36.725">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:08:36.725" status="PASS" endtime="20170803 20:08:36.725"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:08:36.726">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170803 20:08:36.422" status="PASS" endtime="20170803 20:08:36.726"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:08:36.726">${power_state} = On</msg>
<status starttime="20170803 20:08:36.421" status="PASS" endtime="20170803 20:08:36.726"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170803 20:08:36.726" status="PASS" endtime="20170803 20:08:36.727"></status>
</kw>
<status starttime="20170803 20:08:36.421" status="PASS" endtime="20170803 20:08:36.727"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:36.730">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:08:36.730" status="PASS" endtime="20170803 20:08:36.731"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:36.731">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:08:36.731" status="PASS" endtime="20170803 20:08:36.731"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:36.732">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:08:36.731" status="PASS" endtime="20170803 20:08:36.732"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:36.732">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:08:36.732" status="PASS" endtime="20170803 20:08:36.733"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:36.913">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:08:36.733" status="PASS" endtime="20170803 20:08:36.913"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:08:36.913">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:08:36.913">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:08:36.733" status="PASS" endtime="20170803 20:08:36.913"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:36.914">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:08:36.913" status="PASS" endtime="20170803 20:08:36.914"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:36.914">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:08:36.914" status="PASS" endtime="20170803 20:08:36.914"></status>
</kw>
<status starttime="20170803 20:08:36.729" status="PASS" endtime="20170803 20:08:36.914"></status>
</kw>
<status starttime="20170803 20:08:36.729" status="PASS" endtime="20170803 20:08:36.914"></status>
</kw>
<status starttime="20170803 20:08:36.728" status="PASS" endtime="20170803 20:08:36.915"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:36.915">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170803 20:08:36.915" status="PASS" endtime="20170803 20:08:36.915"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:36.917">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:08:36.917" status="PASS" endtime="20170803 20:08:36.917"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:36.918">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:08:36.918" status="PASS" endtime="20170803 20:08:36.918"></status>
</kw>
<status starttime="20170803 20:08:36.917" status="PASS" endtime="20170803 20:08:36.918"></status>
</kw>
<status starttime="20170803 20:08:36.916" status="PASS" endtime="20170803 20:08:36.919"></status>
</kw>
<status starttime="20170803 20:08:36.916" status="PASS" endtime="20170803 20:08:36.919"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:37.026">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:08:37.026">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:08:36.919" status="PASS" endtime="20170803 20:08:37.026"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:37.028">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:08:37.027" status="PASS" endtime="20170803 20:08:37.028"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:37.029">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:08:37.028" status="PASS" endtime="20170803 20:08:37.029"></status>
</kw>
<status starttime="20170803 20:08:37.028" status="PASS" endtime="20170803 20:08:37.029"></status>
</kw>
<status starttime="20170803 20:08:37.027" status="PASS" endtime="20170803 20:08:37.029"></status>
</kw>
<status starttime="20170803 20:08:37.026" status="PASS" endtime="20170803 20:08:37.029"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:08:37.029">Delete All Sessions</msg>
<status starttime="20170803 20:08:37.029" status="PASS" endtime="20170803 20:08:37.029"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:08:37.030">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:08:36.728" status="PASS" endtime="20170803 20:08:37.030"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:37.030">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:08:37.030" status="PASS" endtime="20170803 20:08:37.030"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:37.031">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:08:37.031">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:08:37.031">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:08:37.031" status="PASS" endtime="20170803 20:08:37.031"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:08:37.031">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170803 20:08:36.727" status="PASS" endtime="20170803 20:08:37.031"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:08:37.032">${host_state} = Quiesced</msg>
<status starttime="20170803 20:08:36.727" status="PASS" endtime="20170803 20:08:37.032"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170803 20:08:37.032">Running != Quiesced</msg>
<status starttime="20170803 20:08:37.032" status="FAIL" endtime="20170803 20:08:37.032"></status>
</kw>
<status starttime="20170803 20:08:36.420" status="FAIL" endtime="20170803 20:08:37.033"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:47.038">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:08:47.038" status="PASS" endtime="20170803 20:08:47.038"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:47.039">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:08:47.039" status="PASS" endtime="20170803 20:08:47.039"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:47.040">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:08:47.039" status="PASS" endtime="20170803 20:08:47.040"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:47.040">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:08:47.040" status="PASS" endtime="20170803 20:08:47.040"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:47.219">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:08:47.041" status="PASS" endtime="20170803 20:08:47.220"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:08:47.220">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:08:47.220">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:08:47.041" status="PASS" endtime="20170803 20:08:47.220"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:47.221">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:08:47.220" status="PASS" endtime="20170803 20:08:47.221"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:47.221">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:08:47.221" status="PASS" endtime="20170803 20:08:47.221"></status>
</kw>
<status starttime="20170803 20:08:47.037" status="PASS" endtime="20170803 20:08:47.221"></status>
</kw>
<status starttime="20170803 20:08:47.036" status="PASS" endtime="20170803 20:08:47.221"></status>
</kw>
<status starttime="20170803 20:08:47.036" status="PASS" endtime="20170803 20:08:47.222"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:47.222">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170803 20:08:47.222" status="PASS" endtime="20170803 20:08:47.222"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:47.224">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:08:47.224" status="PASS" endtime="20170803 20:08:47.224"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:47.225">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:08:47.225" status="PASS" endtime="20170803 20:08:47.225"></status>
</kw>
<status starttime="20170803 20:08:47.224" status="PASS" endtime="20170803 20:08:47.225"></status>
</kw>
<status starttime="20170803 20:08:47.223" status="PASS" endtime="20170803 20:08:47.226"></status>
</kw>
<status starttime="20170803 20:08:47.222" status="PASS" endtime="20170803 20:08:47.226"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:47.289">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:08:47.289">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:08:47.226" status="PASS" endtime="20170803 20:08:47.289"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:47.291">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:08:47.291" status="PASS" endtime="20170803 20:08:47.291"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:47.295">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:08:47.295" status="PASS" endtime="20170803 20:08:47.295"></status>
</kw>
<status starttime="20170803 20:08:47.292" status="PASS" endtime="20170803 20:08:47.295"></status>
</kw>
<status starttime="20170803 20:08:47.290" status="PASS" endtime="20170803 20:08:47.295"></status>
</kw>
<status starttime="20170803 20:08:47.290" status="PASS" endtime="20170803 20:08:47.295"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:08:47.296">Delete All Sessions</msg>
<status starttime="20170803 20:08:47.296" status="PASS" endtime="20170803 20:08:47.296"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:08:47.296">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:08:47.035" status="PASS" endtime="20170803 20:08:47.296"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:47.297">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:08:47.296" status="PASS" endtime="20170803 20:08:47.297"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:47.298">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:08:47.298">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:08:47.298">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:08:47.297" status="PASS" endtime="20170803 20:08:47.298"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:08:47.298">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170803 20:08:47.034" status="PASS" endtime="20170803 20:08:47.298"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:08:47.298">${power_state} = On</msg>
<status starttime="20170803 20:08:47.034" status="PASS" endtime="20170803 20:08:47.298"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170803 20:08:47.299" status="PASS" endtime="20170803 20:08:47.299"></status>
</kw>
<status starttime="20170803 20:08:47.034" status="PASS" endtime="20170803 20:08:47.299"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:47.303">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:08:47.302" status="PASS" endtime="20170803 20:08:47.303"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:47.303">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:08:47.303" status="PASS" endtime="20170803 20:08:47.304"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:47.304">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:08:47.304" status="PASS" endtime="20170803 20:08:47.304"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:47.305">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:08:47.304" status="PASS" endtime="20170803 20:08:47.305"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:47.534">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:08:47.306" status="PASS" endtime="20170803 20:08:47.534"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:08:47.534">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:08:47.534">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:08:47.306" status="PASS" endtime="20170803 20:08:47.534"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:47.535">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:08:47.535" status="PASS" endtime="20170803 20:08:47.535"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:47.536">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:08:47.535" status="PASS" endtime="20170803 20:08:47.536"></status>
</kw>
<status starttime="20170803 20:08:47.302" status="PASS" endtime="20170803 20:08:47.536"></status>
</kw>
<status starttime="20170803 20:08:47.301" status="PASS" endtime="20170803 20:08:47.536"></status>
</kw>
<status starttime="20170803 20:08:47.301" status="PASS" endtime="20170803 20:08:47.536"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:47.537">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170803 20:08:47.536" status="PASS" endtime="20170803 20:08:47.537"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:47.539">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:08:47.538" status="PASS" endtime="20170803 20:08:47.539"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:47.540">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:08:47.540" status="PASS" endtime="20170803 20:08:47.540"></status>
</kw>
<status starttime="20170803 20:08:47.540" status="PASS" endtime="20170803 20:08:47.541"></status>
</kw>
<status starttime="20170803 20:08:47.537" status="PASS" endtime="20170803 20:08:47.541"></status>
</kw>
<status starttime="20170803 20:08:47.537" status="PASS" endtime="20170803 20:08:47.541"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:47.673">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:08:47.673">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:08:47.541" status="PASS" endtime="20170803 20:08:47.673"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:47.675">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:08:47.675" status="PASS" endtime="20170803 20:08:47.675"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:47.676">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:08:47.676" status="PASS" endtime="20170803 20:08:47.676"></status>
</kw>
<status starttime="20170803 20:08:47.675" status="PASS" endtime="20170803 20:08:47.676"></status>
</kw>
<status starttime="20170803 20:08:47.674" status="PASS" endtime="20170803 20:08:47.676"></status>
</kw>
<status starttime="20170803 20:08:47.674" status="PASS" endtime="20170803 20:08:47.676"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:08:47.677">Delete All Sessions</msg>
<status starttime="20170803 20:08:47.677" status="PASS" endtime="20170803 20:08:47.677"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:08:47.677">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:08:47.300" status="PASS" endtime="20170803 20:08:47.677"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:47.678">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:08:47.677" status="PASS" endtime="20170803 20:08:47.678"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:47.678">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:08:47.678">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:08:47.679">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:08:47.678" status="PASS" endtime="20170803 20:08:47.679"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:08:47.679">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170803 20:08:47.300" status="PASS" endtime="20170803 20:08:47.679"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:08:47.679">${host_state} = Quiesced</msg>
<status starttime="20170803 20:08:47.299" status="PASS" endtime="20170803 20:08:47.679"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170803 20:08:47.680">Running != Quiesced</msg>
<status starttime="20170803 20:08:47.679" status="FAIL" endtime="20170803 20:08:47.680"></status>
</kw>
<status starttime="20170803 20:08:47.033" status="FAIL" endtime="20170803 20:08:47.680"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:57.685">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:08:57.685" status="PASS" endtime="20170803 20:08:57.686"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:57.686">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:08:57.686" status="PASS" endtime="20170803 20:08:57.686"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:57.687">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:08:57.686" status="PASS" endtime="20170803 20:08:57.687"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:57.688">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:08:57.687" status="PASS" endtime="20170803 20:08:57.688"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:57.892">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:08:57.689" status="PASS" endtime="20170803 20:08:57.892"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:08:57.892">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:08:57.892">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:08:57.688" status="PASS" endtime="20170803 20:08:57.892"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:57.893">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:08:57.892" status="PASS" endtime="20170803 20:08:57.893"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:57.893">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:08:57.893" status="PASS" endtime="20170803 20:08:57.894"></status>
</kw>
<status starttime="20170803 20:08:57.684" status="PASS" endtime="20170803 20:08:57.894"></status>
</kw>
<status starttime="20170803 20:08:57.684" status="PASS" endtime="20170803 20:08:57.894"></status>
</kw>
<status starttime="20170803 20:08:57.683" status="PASS" endtime="20170803 20:08:57.894"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:57.894">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170803 20:08:57.894" status="PASS" endtime="20170803 20:08:57.894"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:57.897">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:08:57.896" status="PASS" endtime="20170803 20:08:57.897"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:57.897">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:08:57.897" status="PASS" endtime="20170803 20:08:57.898"></status>
</kw>
<status starttime="20170803 20:08:57.897" status="PASS" endtime="20170803 20:08:57.898"></status>
</kw>
<status starttime="20170803 20:08:57.895" status="PASS" endtime="20170803 20:08:57.898"></status>
</kw>
<status starttime="20170803 20:08:57.895" status="PASS" endtime="20170803 20:08:57.898"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:57.971">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:08:57.971">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:08:57.898" status="PASS" endtime="20170803 20:08:57.971"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:57.973">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:08:57.972" status="PASS" endtime="20170803 20:08:57.973"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:57.974">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:08:57.973" status="PASS" endtime="20170803 20:08:57.974"></status>
</kw>
<status starttime="20170803 20:08:57.973" status="PASS" endtime="20170803 20:08:57.974"></status>
</kw>
<status starttime="20170803 20:08:57.972" status="PASS" endtime="20170803 20:08:57.974"></status>
</kw>
<status starttime="20170803 20:08:57.971" status="PASS" endtime="20170803 20:08:57.974"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:08:57.974">Delete All Sessions</msg>
<status starttime="20170803 20:08:57.974" status="PASS" endtime="20170803 20:08:57.975"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:08:57.975">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:08:57.683" status="PASS" endtime="20170803 20:08:57.975"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:57.975">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:08:57.975" status="PASS" endtime="20170803 20:08:57.976"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:57.976">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:08:57.976">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:08:57.976">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:08:57.976" status="PASS" endtime="20170803 20:08:57.976"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:08:57.977">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170803 20:08:57.682" status="PASS" endtime="20170803 20:08:57.977"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:08:57.977">${power_state} = On</msg>
<status starttime="20170803 20:08:57.682" status="PASS" endtime="20170803 20:08:57.977"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170803 20:08:57.977" status="PASS" endtime="20170803 20:08:57.977"></status>
</kw>
<status starttime="20170803 20:08:57.681" status="PASS" endtime="20170803 20:08:57.977"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:57.981">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:08:57.981" status="PASS" endtime="20170803 20:08:57.982"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:57.982">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:08:57.982" status="PASS" endtime="20170803 20:08:57.982"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:57.983">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:08:57.983" status="PASS" endtime="20170803 20:08:57.983"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:57.984">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:08:57.983" status="PASS" endtime="20170803 20:08:57.984"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:58.176">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:08:57.984" status="PASS" endtime="20170803 20:08:58.177"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:08:58.177">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:08:58.177">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:08:57.984" status="PASS" endtime="20170803 20:08:58.177"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:58.177">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:08:58.177" status="PASS" endtime="20170803 20:08:58.177"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:58.178">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:08:58.178" status="PASS" endtime="20170803 20:08:58.178"></status>
</kw>
<status starttime="20170803 20:08:57.981" status="PASS" endtime="20170803 20:08:58.178"></status>
</kw>
<status starttime="20170803 20:08:57.980" status="PASS" endtime="20170803 20:08:58.178"></status>
</kw>
<status starttime="20170803 20:08:57.979" status="PASS" endtime="20170803 20:08:58.178"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:58.179">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170803 20:08:58.179" status="PASS" endtime="20170803 20:08:58.179"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:58.181">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:08:58.181" status="PASS" endtime="20170803 20:08:58.181"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:58.182">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:08:58.182" status="PASS" endtime="20170803 20:08:58.182"></status>
</kw>
<status starttime="20170803 20:08:58.181" status="PASS" endtime="20170803 20:08:58.182"></status>
</kw>
<status starttime="20170803 20:08:58.180" status="PASS" endtime="20170803 20:08:58.182"></status>
</kw>
<status starttime="20170803 20:08:58.179" status="PASS" endtime="20170803 20:08:58.183"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:58.288">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:08:58.288">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:08:58.183" status="PASS" endtime="20170803 20:08:58.288"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:58.290">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:08:58.289" status="PASS" endtime="20170803 20:08:58.290"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:58.291">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:08:58.291" status="PASS" endtime="20170803 20:08:58.291"></status>
</kw>
<status starttime="20170803 20:08:58.290" status="PASS" endtime="20170803 20:08:58.291"></status>
</kw>
<status starttime="20170803 20:08:58.289" status="PASS" endtime="20170803 20:08:58.291"></status>
</kw>
<status starttime="20170803 20:08:58.288" status="PASS" endtime="20170803 20:08:58.291"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:08:58.292">Delete All Sessions</msg>
<status starttime="20170803 20:08:58.292" status="PASS" endtime="20170803 20:08:58.292"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:08:58.292">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:08:57.979" status="PASS" endtime="20170803 20:08:58.292"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:08:58.293">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:08:58.292" status="PASS" endtime="20170803 20:08:58.293"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:08:58.293">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:08:58.293">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:08:58.293">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:08:58.293" status="PASS" endtime="20170803 20:08:58.293"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:08:58.294">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170803 20:08:57.978" status="PASS" endtime="20170803 20:08:58.294"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:08:58.294">${host_state} = Quiesced</msg>
<status starttime="20170803 20:08:57.978" status="PASS" endtime="20170803 20:08:58.294"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170803 20:08:58.295">Running != Quiesced</msg>
<status starttime="20170803 20:08:58.294" status="FAIL" endtime="20170803 20:08:58.295"></status>
</kw>
<status starttime="20170803 20:08:57.681" status="FAIL" endtime="20170803 20:08:58.295"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:09:08.300">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:09:08.300" status="PASS" endtime="20170803 20:09:08.301"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:08.301">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:09:08.301" status="PASS" endtime="20170803 20:09:08.301"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:08.302">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:09:08.301" status="PASS" endtime="20170803 20:09:08.302"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:08.302">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:09:08.302" status="PASS" endtime="20170803 20:09:08.302"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:09:08.525">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:09:08.303" status="PASS" endtime="20170803 20:09:08.525"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:09:08.526">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:09:08.526">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:09:08.303" status="PASS" endtime="20170803 20:09:08.526"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:09:08.526">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:09:08.526" status="PASS" endtime="20170803 20:09:08.526"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:09:08.527">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:09:08.527" status="PASS" endtime="20170803 20:09:08.527"></status>
</kw>
<status starttime="20170803 20:09:08.299" status="PASS" endtime="20170803 20:09:08.527"></status>
</kw>
<status starttime="20170803 20:09:08.299" status="PASS" endtime="20170803 20:09:08.527"></status>
</kw>
<status starttime="20170803 20:09:08.298" status="PASS" endtime="20170803 20:09:08.527"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:08.528">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170803 20:09:08.528" status="PASS" endtime="20170803 20:09:08.528"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:08.530">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:09:08.529" status="PASS" endtime="20170803 20:09:08.530"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:09:08.531">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:09:08.531" status="PASS" endtime="20170803 20:09:08.531"></status>
</kw>
<status starttime="20170803 20:09:08.530" status="PASS" endtime="20170803 20:09:08.531"></status>
</kw>
<status starttime="20170803 20:09:08.529" status="PASS" endtime="20170803 20:09:08.531"></status>
</kw>
<status starttime="20170803 20:09:08.528" status="PASS" endtime="20170803 20:09:08.531"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:08.603">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:09:08.604">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:09:08.532" status="PASS" endtime="20170803 20:09:08.604"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:08.605">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:09:08.605" status="PASS" endtime="20170803 20:09:08.605"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:09:08.606">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:09:08.606" status="PASS" endtime="20170803 20:09:08.606"></status>
</kw>
<status starttime="20170803 20:09:08.605" status="PASS" endtime="20170803 20:09:08.607"></status>
</kw>
<status starttime="20170803 20:09:08.604" status="PASS" endtime="20170803 20:09:08.607"></status>
</kw>
<status starttime="20170803 20:09:08.604" status="PASS" endtime="20170803 20:09:08.607"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:09:08.607">Delete All Sessions</msg>
<status starttime="20170803 20:09:08.607" status="PASS" endtime="20170803 20:09:08.607"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:09:08.607">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:09:08.297" status="PASS" endtime="20170803 20:09:08.607"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:09:08.608">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:09:08.608" status="PASS" endtime="20170803 20:09:08.608"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:08.609">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:09:08.609">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:09:08.609">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:09:08.608" status="PASS" endtime="20170803 20:09:08.609"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:09:08.609">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170803 20:09:08.297" status="PASS" endtime="20170803 20:09:08.609"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:09:08.609">${power_state} = On</msg>
<status starttime="20170803 20:09:08.297" status="PASS" endtime="20170803 20:09:08.609"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170803 20:09:08.610" status="PASS" endtime="20170803 20:09:08.610"></status>
</kw>
<status starttime="20170803 20:09:08.296" status="PASS" endtime="20170803 20:09:08.610"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:09:08.614">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:09:08.613" status="PASS" endtime="20170803 20:09:08.614"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:08.615">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:09:08.615" status="PASS" endtime="20170803 20:09:08.615"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:08.615">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:09:08.615" status="PASS" endtime="20170803 20:09:08.616"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:08.616">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:09:08.616" status="PASS" endtime="20170803 20:09:08.616"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:09:08.800">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:09:08.617" status="PASS" endtime="20170803 20:09:08.800"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:09:08.800">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:09:08.801">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:09:08.617" status="PASS" endtime="20170803 20:09:08.801"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:09:08.801">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:09:08.801" status="PASS" endtime="20170803 20:09:08.801"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:09:08.802">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:09:08.801" status="PASS" endtime="20170803 20:09:08.802"></status>
</kw>
<status starttime="20170803 20:09:08.613" status="PASS" endtime="20170803 20:09:08.802"></status>
</kw>
<status starttime="20170803 20:09:08.612" status="PASS" endtime="20170803 20:09:08.802"></status>
</kw>
<status starttime="20170803 20:09:08.612" status="PASS" endtime="20170803 20:09:08.802"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:08.803">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170803 20:09:08.803" status="PASS" endtime="20170803 20:09:08.803"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:08.805">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:09:08.804" status="PASS" endtime="20170803 20:09:08.805"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:09:08.806">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:09:08.806" status="PASS" endtime="20170803 20:09:08.806"></status>
</kw>
<status starttime="20170803 20:09:08.805" status="PASS" endtime="20170803 20:09:08.806"></status>
</kw>
<status starttime="20170803 20:09:08.804" status="PASS" endtime="20170803 20:09:08.806"></status>
</kw>
<status starttime="20170803 20:09:08.803" status="PASS" endtime="20170803 20:09:08.806"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:08.896">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:09:08.897">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:09:08.807" status="PASS" endtime="20170803 20:09:08.897"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:08.898">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:09:08.898" status="PASS" endtime="20170803 20:09:08.898"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:09:08.899">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:09:08.899" status="PASS" endtime="20170803 20:09:08.899"></status>
</kw>
<status starttime="20170803 20:09:08.898" status="PASS" endtime="20170803 20:09:08.899"></status>
</kw>
<status starttime="20170803 20:09:08.897" status="PASS" endtime="20170803 20:09:08.900"></status>
</kw>
<status starttime="20170803 20:09:08.897" status="PASS" endtime="20170803 20:09:08.900"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:09:08.900">Delete All Sessions</msg>
<status starttime="20170803 20:09:08.900" status="PASS" endtime="20170803 20:09:08.900"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:09:08.900">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:09:08.611" status="PASS" endtime="20170803 20:09:08.900"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:09:08.901">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:09:08.901" status="PASS" endtime="20170803 20:09:08.901"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:08.901">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:09:08.902">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:09:08.902">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:09:08.901" status="PASS" endtime="20170803 20:09:08.902"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:09:08.902">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170803 20:09:08.611" status="PASS" endtime="20170803 20:09:08.902"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:09:08.902">${host_state} = Quiesced</msg>
<status starttime="20170803 20:09:08.610" status="PASS" endtime="20170803 20:09:08.902"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170803 20:09:08.903">Running != Quiesced</msg>
<status starttime="20170803 20:09:08.903" status="FAIL" endtime="20170803 20:09:08.903"></status>
</kw>
<status starttime="20170803 20:09:08.295" status="FAIL" endtime="20170803 20:09:08.903"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:09:18.910">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:09:18.910" status="PASS" endtime="20170803 20:09:18.911"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:18.911">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:09:18.911" status="PASS" endtime="20170803 20:09:18.911"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:18.912">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:09:18.912" status="PASS" endtime="20170803 20:09:18.912"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:18.913">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:09:18.912" status="PASS" endtime="20170803 20:09:18.913"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:09:19.163">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:09:18.913" status="PASS" endtime="20170803 20:09:19.163"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:09:19.163">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:09:19.163">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:09:18.913" status="PASS" endtime="20170803 20:09:19.163"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:09:19.164">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:09:19.164" status="PASS" endtime="20170803 20:09:19.164"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:09:19.165">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:09:19.165" status="PASS" endtime="20170803 20:09:19.165"></status>
</kw>
<status starttime="20170803 20:09:18.909" status="PASS" endtime="20170803 20:09:19.166"></status>
</kw>
<status starttime="20170803 20:09:18.909" status="PASS" endtime="20170803 20:09:19.166"></status>
</kw>
<status starttime="20170803 20:09:18.908" status="PASS" endtime="20170803 20:09:19.166"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:19.167">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170803 20:09:19.166" status="PASS" endtime="20170803 20:09:19.167"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:19.170">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:09:19.169" status="PASS" endtime="20170803 20:09:19.170"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:09:19.171">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:09:19.171" status="PASS" endtime="20170803 20:09:19.172"></status>
</kw>
<status starttime="20170803 20:09:19.170" status="PASS" endtime="20170803 20:09:19.172"></status>
</kw>
<status starttime="20170803 20:09:19.168" status="PASS" endtime="20170803 20:09:19.172"></status>
</kw>
<status starttime="20170803 20:09:19.167" status="PASS" endtime="20170803 20:09:19.172"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:19.235">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:09:19.235">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:09:19.172" status="PASS" endtime="20170803 20:09:19.236"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:19.237">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:09:19.237" status="PASS" endtime="20170803 20:09:19.237"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:09:19.238">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:09:19.238" status="PASS" endtime="20170803 20:09:19.238"></status>
</kw>
<status starttime="20170803 20:09:19.238" status="PASS" endtime="20170803 20:09:19.239"></status>
</kw>
<status starttime="20170803 20:09:19.236" status="PASS" endtime="20170803 20:09:19.239"></status>
</kw>
<status starttime="20170803 20:09:19.236" status="PASS" endtime="20170803 20:09:19.239"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:09:19.239">Delete All Sessions</msg>
<status starttime="20170803 20:09:19.239" status="PASS" endtime="20170803 20:09:19.239"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:09:19.239">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:09:18.908" status="PASS" endtime="20170803 20:09:19.239"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:09:19.240">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:09:19.240" status="PASS" endtime="20170803 20:09:19.240"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:19.241">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:09:19.241">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:09:19.241">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:09:19.240" status="PASS" endtime="20170803 20:09:19.241"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:09:19.241">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170803 20:09:18.906" status="PASS" endtime="20170803 20:09:19.241"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:09:19.241">${power_state} = On</msg>
<status starttime="20170803 20:09:18.905" status="PASS" endtime="20170803 20:09:19.241"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170803 20:09:19.242" status="PASS" endtime="20170803 20:09:19.242"></status>
</kw>
<status starttime="20170803 20:09:18.905" status="PASS" endtime="20170803 20:09:19.242"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:09:19.246">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:09:19.245" status="PASS" endtime="20170803 20:09:19.246"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:19.246">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:09:19.246" status="PASS" endtime="20170803 20:09:19.247"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:19.247">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:09:19.247" status="PASS" endtime="20170803 20:09:19.247"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:19.248">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:09:19.247" status="PASS" endtime="20170803 20:09:19.248"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:09:19.429">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:09:19.248" status="PASS" endtime="20170803 20:09:19.429"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:09:19.430">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:09:19.430">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:09:19.248" status="PASS" endtime="20170803 20:09:19.430"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:09:19.430">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:09:19.430" status="PASS" endtime="20170803 20:09:19.430"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:09:19.431">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:09:19.431" status="PASS" endtime="20170803 20:09:19.431"></status>
</kw>
<status starttime="20170803 20:09:19.245" status="PASS" endtime="20170803 20:09:19.431"></status>
</kw>
<status starttime="20170803 20:09:19.244" status="PASS" endtime="20170803 20:09:19.431"></status>
</kw>
<status starttime="20170803 20:09:19.244" status="PASS" endtime="20170803 20:09:19.431"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:19.432">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170803 20:09:19.432" status="PASS" endtime="20170803 20:09:19.432"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:19.434">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:09:19.433" status="PASS" endtime="20170803 20:09:19.434"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:09:19.435">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:09:19.435" status="PASS" endtime="20170803 20:09:19.435"></status>
</kw>
<status starttime="20170803 20:09:19.434" status="PASS" endtime="20170803 20:09:19.435"></status>
</kw>
<status starttime="20170803 20:09:19.433" status="PASS" endtime="20170803 20:09:19.435"></status>
</kw>
<status starttime="20170803 20:09:19.432" status="PASS" endtime="20170803 20:09:19.435"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:19.538">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:09:19.538">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:09:19.436" status="PASS" endtime="20170803 20:09:19.538"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:19.540">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:09:19.539" status="PASS" endtime="20170803 20:09:19.540"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:09:19.541">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:09:19.541" status="PASS" endtime="20170803 20:09:19.541"></status>
</kw>
<status starttime="20170803 20:09:19.540" status="PASS" endtime="20170803 20:09:19.541"></status>
</kw>
<status starttime="20170803 20:09:19.539" status="PASS" endtime="20170803 20:09:19.541"></status>
</kw>
<status starttime="20170803 20:09:19.538" status="PASS" endtime="20170803 20:09:19.541"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:09:19.542">Delete All Sessions</msg>
<status starttime="20170803 20:09:19.541" status="PASS" endtime="20170803 20:09:19.542"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:09:19.542">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:09:19.243" status="PASS" endtime="20170803 20:09:19.542"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:09:19.543">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:09:19.542" status="PASS" endtime="20170803 20:09:19.543"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:19.543">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:09:19.543">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:09:19.543">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:09:19.543" status="PASS" endtime="20170803 20:09:19.543"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:09:19.544">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170803 20:09:19.243" status="PASS" endtime="20170803 20:09:19.544"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:09:19.544">${host_state} = Quiesced</msg>
<status starttime="20170803 20:09:19.242" status="PASS" endtime="20170803 20:09:19.544"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170803 20:09:19.545">Running != Quiesced</msg>
<status starttime="20170803 20:09:19.544" status="FAIL" endtime="20170803 20:09:19.545"></status>
</kw>
<status starttime="20170803 20:09:18.904" status="FAIL" endtime="20170803 20:09:19.545"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:09:29.550">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:09:29.550" status="PASS" endtime="20170803 20:09:29.551"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:29.551">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:09:29.551" status="PASS" endtime="20170803 20:09:29.551"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:29.552">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:09:29.552" status="PASS" endtime="20170803 20:09:29.552"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:29.553">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:09:29.552" status="PASS" endtime="20170803 20:09:29.553"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:09:29.766">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:09:29.553" status="PASS" endtime="20170803 20:09:29.766"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:09:29.766">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:09:29.766">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:09:29.553" status="PASS" endtime="20170803 20:09:29.766"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:09:29.767">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:09:29.766" status="PASS" endtime="20170803 20:09:29.767"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:09:29.767">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:09:29.767" status="PASS" endtime="20170803 20:09:29.767"></status>
</kw>
<status starttime="20170803 20:09:29.549" status="PASS" endtime="20170803 20:09:29.767"></status>
</kw>
<status starttime="20170803 20:09:29.549" status="PASS" endtime="20170803 20:09:29.768"></status>
</kw>
<status starttime="20170803 20:09:29.548" status="PASS" endtime="20170803 20:09:29.768"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:29.768">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170803 20:09:29.768" status="PASS" endtime="20170803 20:09:29.768"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:29.770">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:09:29.770" status="PASS" endtime="20170803 20:09:29.770"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:09:29.771">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:09:29.771" status="PASS" endtime="20170803 20:09:29.771"></status>
</kw>
<status starttime="20170803 20:09:29.770" status="PASS" endtime="20170803 20:09:29.771"></status>
</kw>
<status starttime="20170803 20:09:29.769" status="PASS" endtime="20170803 20:09:29.772"></status>
</kw>
<status starttime="20170803 20:09:29.769" status="PASS" endtime="20170803 20:09:29.772"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:29.889">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:09:29.889">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:09:29.772" status="PASS" endtime="20170803 20:09:29.889"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:29.891">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:09:29.891" status="PASS" endtime="20170803 20:09:29.891"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:09:29.892">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:09:29.892" status="PASS" endtime="20170803 20:09:29.893"></status>
</kw>
<status starttime="20170803 20:09:29.891" status="PASS" endtime="20170803 20:09:29.893"></status>
</kw>
<status starttime="20170803 20:09:29.890" status="PASS" endtime="20170803 20:09:29.893"></status>
</kw>
<status starttime="20170803 20:09:29.890" status="PASS" endtime="20170803 20:09:29.893"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:09:29.893">Delete All Sessions</msg>
<status starttime="20170803 20:09:29.893" status="PASS" endtime="20170803 20:09:29.893"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:09:29.893">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:09:29.547" status="PASS" endtime="20170803 20:09:29.893"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:09:29.894">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:09:29.894" status="PASS" endtime="20170803 20:09:29.894"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:29.895">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:09:29.895">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:09:29.895">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:09:29.894" status="PASS" endtime="20170803 20:09:29.895"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:09:29.895">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170803 20:09:29.547" status="PASS" endtime="20170803 20:09:29.895"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:09:29.895">${power_state} = On</msg>
<status starttime="20170803 20:09:29.546" status="PASS" endtime="20170803 20:09:29.895"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170803 20:09:29.896" status="PASS" endtime="20170803 20:09:29.896"></status>
</kw>
<status starttime="20170803 20:09:29.546" status="PASS" endtime="20170803 20:09:29.896"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:09:29.900">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:09:29.900" status="PASS" endtime="20170803 20:09:29.900"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:29.901">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:09:29.901" status="PASS" endtime="20170803 20:09:29.901"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:29.901">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:09:29.901" status="PASS" endtime="20170803 20:09:29.902"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:29.902">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:09:29.902" status="PASS" endtime="20170803 20:09:29.902"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:09:30.120">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:09:29.903" status="PASS" endtime="20170803 20:09:30.120"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:09:30.120">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:09:30.120">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:09:29.902" status="PASS" endtime="20170803 20:09:30.120"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:09:30.121">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:09:30.121" status="PASS" endtime="20170803 20:09:30.121"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:09:30.122">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:09:30.121" status="PASS" endtime="20170803 20:09:30.122"></status>
</kw>
<status starttime="20170803 20:09:29.899" status="PASS" endtime="20170803 20:09:30.122"></status>
</kw>
<status starttime="20170803 20:09:29.899" status="PASS" endtime="20170803 20:09:30.122"></status>
</kw>
<status starttime="20170803 20:09:29.898" status="PASS" endtime="20170803 20:09:30.122"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:30.123">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170803 20:09:30.122" status="PASS" endtime="20170803 20:09:30.123"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:30.128">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:09:30.124" status="PASS" endtime="20170803 20:09:30.128"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:09:30.129">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:09:30.129" status="PASS" endtime="20170803 20:09:30.129"></status>
</kw>
<status starttime="20170803 20:09:30.128" status="PASS" endtime="20170803 20:09:30.129"></status>
</kw>
<status starttime="20170803 20:09:30.123" status="PASS" endtime="20170803 20:09:30.129"></status>
</kw>
<status starttime="20170803 20:09:30.123" status="PASS" endtime="20170803 20:09:30.129"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:30.239">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:09:30.239">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:09:30.129" status="PASS" endtime="20170803 20:09:30.239"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:30.241">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:09:30.240" status="PASS" endtime="20170803 20:09:30.241"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:09:30.242">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:09:30.241" status="PASS" endtime="20170803 20:09:30.242"></status>
</kw>
<status starttime="20170803 20:09:30.241" status="PASS" endtime="20170803 20:09:30.242"></status>
</kw>
<status starttime="20170803 20:09:30.240" status="PASS" endtime="20170803 20:09:30.242"></status>
</kw>
<status starttime="20170803 20:09:30.239" status="PASS" endtime="20170803 20:09:30.242"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:09:30.242">Delete All Sessions</msg>
<status starttime="20170803 20:09:30.242" status="PASS" endtime="20170803 20:09:30.242"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:09:30.243">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:09:29.897" status="PASS" endtime="20170803 20:09:30.243"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:09:30.243">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:09:30.243" status="PASS" endtime="20170803 20:09:30.243"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:30.244">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:09:30.244">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:09:30.244">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:09:30.244" status="PASS" endtime="20170803 20:09:30.244"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:09:30.244">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170803 20:09:29.897" status="PASS" endtime="20170803 20:09:30.244"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:09:30.245">${host_state} = Quiesced</msg>
<status starttime="20170803 20:09:29.896" status="PASS" endtime="20170803 20:09:30.245"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170803 20:09:30.245">Running != Quiesced</msg>
<status starttime="20170803 20:09:30.245" status="FAIL" endtime="20170803 20:09:30.245"></status>
</kw>
<status starttime="20170803 20:09:29.545" status="FAIL" endtime="20170803 20:09:30.246"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:09:40.251">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:09:40.251" status="PASS" endtime="20170803 20:09:40.252"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:40.252">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:09:40.252" status="PASS" endtime="20170803 20:09:40.252"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:40.253">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:09:40.253" status="PASS" endtime="20170803 20:09:40.253"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:40.254">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:09:40.253" status="PASS" endtime="20170803 20:09:40.254"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:09:40.472">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:09:40.255" status="PASS" endtime="20170803 20:09:40.472"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:09:40.473">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:09:40.473">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:09:40.254" status="PASS" endtime="20170803 20:09:40.473"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:09:40.473">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:09:40.473" status="PASS" endtime="20170803 20:09:40.473"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:09:40.474">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:09:40.474" status="PASS" endtime="20170803 20:09:40.474"></status>
</kw>
<status starttime="20170803 20:09:40.250" status="PASS" endtime="20170803 20:09:40.474"></status>
</kw>
<status starttime="20170803 20:09:40.250" status="PASS" endtime="20170803 20:09:40.474"></status>
</kw>
<status starttime="20170803 20:09:40.249" status="PASS" endtime="20170803 20:09:40.475"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:40.475">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170803 20:09:40.475" status="PASS" endtime="20170803 20:09:40.475"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:40.477">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:09:40.477" status="PASS" endtime="20170803 20:09:40.477"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:09:40.478">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:09:40.478" status="PASS" endtime="20170803 20:09:40.478"></status>
</kw>
<status starttime="20170803 20:09:40.478" status="PASS" endtime="20170803 20:09:40.478"></status>
</kw>
<status starttime="20170803 20:09:40.476" status="PASS" endtime="20170803 20:09:40.479"></status>
</kw>
<status starttime="20170803 20:09:40.475" status="PASS" endtime="20170803 20:09:40.479"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:40.566">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:09:40.566">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:09:40.479" status="PASS" endtime="20170803 20:09:40.566"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:40.568">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:09:40.567" status="PASS" endtime="20170803 20:09:40.568"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:09:40.568">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:09:40.568" status="PASS" endtime="20170803 20:09:40.569"></status>
</kw>
<status starttime="20170803 20:09:40.568" status="PASS" endtime="20170803 20:09:40.569"></status>
</kw>
<status starttime="20170803 20:09:40.567" status="PASS" endtime="20170803 20:09:40.569"></status>
</kw>
<status starttime="20170803 20:09:40.566" status="PASS" endtime="20170803 20:09:40.569"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:09:40.569">Delete All Sessions</msg>
<status starttime="20170803 20:09:40.569" status="PASS" endtime="20170803 20:09:40.569"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:09:40.570">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:09:40.249" status="PASS" endtime="20170803 20:09:40.570"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:09:40.570">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:09:40.570" status="PASS" endtime="20170803 20:09:40.570"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:40.571">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:09:40.571">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:09:40.571">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:09:40.570" status="PASS" endtime="20170803 20:09:40.571"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:09:40.571">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170803 20:09:40.247" status="PASS" endtime="20170803 20:09:40.571"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:09:40.572">${power_state} = On</msg>
<status starttime="20170803 20:09:40.247" status="PASS" endtime="20170803 20:09:40.572"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170803 20:09:40.572" status="PASS" endtime="20170803 20:09:40.572"></status>
</kw>
<status starttime="20170803 20:09:40.247" status="PASS" endtime="20170803 20:09:40.572"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:09:40.576">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:09:40.576" status="PASS" endtime="20170803 20:09:40.577"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:40.577">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:09:40.577" status="PASS" endtime="20170803 20:09:40.577"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:40.578">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:09:40.578" status="PASS" endtime="20170803 20:09:40.578"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:40.579">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:09:40.578" status="PASS" endtime="20170803 20:09:40.579"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:09:40.876">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:09:40.579" status="PASS" endtime="20170803 20:09:40.876"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:09:40.877">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:09:40.877">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:09:40.579" status="PASS" endtime="20170803 20:09:40.877"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:09:40.877">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:09:40.877" status="PASS" endtime="20170803 20:09:40.877"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:09:40.878">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:09:40.878" status="PASS" endtime="20170803 20:09:40.878"></status>
</kw>
<status starttime="20170803 20:09:40.575" status="PASS" endtime="20170803 20:09:40.878"></status>
</kw>
<status starttime="20170803 20:09:40.574" status="PASS" endtime="20170803 20:09:40.878"></status>
</kw>
<status starttime="20170803 20:09:40.574" status="PASS" endtime="20170803 20:09:40.878"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:40.879">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170803 20:09:40.879" status="PASS" endtime="20170803 20:09:40.879"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:40.881">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:09:40.880" status="PASS" endtime="20170803 20:09:40.881"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:09:40.882">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:09:40.882" status="PASS" endtime="20170803 20:09:40.882"></status>
</kw>
<status starttime="20170803 20:09:40.881" status="PASS" endtime="20170803 20:09:40.882"></status>
</kw>
<status starttime="20170803 20:09:40.880" status="PASS" endtime="20170803 20:09:40.882"></status>
</kw>
<status starttime="20170803 20:09:40.879" status="PASS" endtime="20170803 20:09:40.882"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:40.973">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:09:40.973">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:09:40.883" status="PASS" endtime="20170803 20:09:40.974"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:40.975">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:09:40.975" status="PASS" endtime="20170803 20:09:40.975"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:09:40.977">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:09:40.976" status="PASS" endtime="20170803 20:09:40.977"></status>
</kw>
<status starttime="20170803 20:09:40.975" status="PASS" endtime="20170803 20:09:40.977"></status>
</kw>
<status starttime="20170803 20:09:40.974" status="PASS" endtime="20170803 20:09:40.977"></status>
</kw>
<status starttime="20170803 20:09:40.974" status="PASS" endtime="20170803 20:09:40.977"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:09:40.977">Delete All Sessions</msg>
<status starttime="20170803 20:09:40.977" status="PASS" endtime="20170803 20:09:40.978"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:09:40.978">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:09:40.573" status="PASS" endtime="20170803 20:09:40.978"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:09:40.978">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:09:40.978" status="PASS" endtime="20170803 20:09:40.978"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:40.979">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:09:40.979">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:09:40.979">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:09:40.979" status="PASS" endtime="20170803 20:09:40.979"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:09:40.979">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170803 20:09:40.573" status="PASS" endtime="20170803 20:09:40.979"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:09:40.980">${host_state} = Quiesced</msg>
<status starttime="20170803 20:09:40.572" status="PASS" endtime="20170803 20:09:40.980"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170803 20:09:40.980">Running != Quiesced</msg>
<status starttime="20170803 20:09:40.980" status="FAIL" endtime="20170803 20:09:40.980"></status>
</kw>
<status starttime="20170803 20:09:40.246" status="FAIL" endtime="20170803 20:09:40.981"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:09:50.985">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:09:50.985" status="PASS" endtime="20170803 20:09:50.986"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:50.986">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:09:50.986" status="PASS" endtime="20170803 20:09:50.987"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:50.987">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:09:50.987" status="PASS" endtime="20170803 20:09:50.987"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:50.988">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:09:50.987" status="PASS" endtime="20170803 20:09:50.988"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:09:51.166">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:09:50.989" status="PASS" endtime="20170803 20:09:51.166"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:09:51.166">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:09:51.166">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:09:50.988" status="PASS" endtime="20170803 20:09:51.167"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:09:51.167">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:09:51.167" status="PASS" endtime="20170803 20:09:51.167"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:09:51.168">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:09:51.168" status="PASS" endtime="20170803 20:09:51.168"></status>
</kw>
<status starttime="20170803 20:09:50.985" status="PASS" endtime="20170803 20:09:51.168"></status>
</kw>
<status starttime="20170803 20:09:50.984" status="PASS" endtime="20170803 20:09:51.168"></status>
</kw>
<status starttime="20170803 20:09:50.984" status="PASS" endtime="20170803 20:09:51.168"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:51.169">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170803 20:09:51.169" status="PASS" endtime="20170803 20:09:51.169"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:51.171">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:09:51.171" status="PASS" endtime="20170803 20:09:51.171"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:09:51.172">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:09:51.172" status="PASS" endtime="20170803 20:09:51.172"></status>
</kw>
<status starttime="20170803 20:09:51.171" status="PASS" endtime="20170803 20:09:51.172"></status>
</kw>
<status starttime="20170803 20:09:51.170" status="PASS" endtime="20170803 20:09:51.173"></status>
</kw>
<status starttime="20170803 20:09:51.169" status="PASS" endtime="20170803 20:09:51.173"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:51.261">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:09:51.261">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:09:51.173" status="PASS" endtime="20170803 20:09:51.261"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:51.263">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:09:51.262" status="PASS" endtime="20170803 20:09:51.263"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:09:51.264">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:09:51.263" status="PASS" endtime="20170803 20:09:51.264"></status>
</kw>
<status starttime="20170803 20:09:51.263" status="PASS" endtime="20170803 20:09:51.264"></status>
</kw>
<status starttime="20170803 20:09:51.262" status="PASS" endtime="20170803 20:09:51.264"></status>
</kw>
<status starttime="20170803 20:09:51.261" status="PASS" endtime="20170803 20:09:51.264"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:09:51.264">Delete All Sessions</msg>
<status starttime="20170803 20:09:51.264" status="PASS" endtime="20170803 20:09:51.264"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:09:51.265">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:09:50.983" status="PASS" endtime="20170803 20:09:51.265"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:09:51.265">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:09:51.265" status="PASS" endtime="20170803 20:09:51.265"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:51.266">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:09:51.266">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:09:51.266">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:09:51.266" status="PASS" endtime="20170803 20:09:51.266"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:09:51.266">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170803 20:09:50.982" status="PASS" endtime="20170803 20:09:51.266"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:09:51.267">${power_state} = On</msg>
<status starttime="20170803 20:09:50.982" status="PASS" endtime="20170803 20:09:51.267"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170803 20:09:51.267" status="PASS" endtime="20170803 20:09:51.267"></status>
</kw>
<status starttime="20170803 20:09:50.982" status="PASS" endtime="20170803 20:09:51.267"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:09:51.271">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:09:51.271" status="PASS" endtime="20170803 20:09:51.272"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:51.272">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:09:51.272" status="PASS" endtime="20170803 20:09:51.272"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:51.273">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:09:51.272" status="PASS" endtime="20170803 20:09:51.273"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:51.273">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:09:51.273" status="PASS" endtime="20170803 20:09:51.274"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:09:51.499">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:09:51.274" status="PASS" endtime="20170803 20:09:51.499"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:09:51.499">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:09:51.499">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:09:51.274" status="PASS" endtime="20170803 20:09:51.499"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:09:51.500">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:09:51.499" status="PASS" endtime="20170803 20:09:51.500"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:09:51.500">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:09:51.500" status="PASS" endtime="20170803 20:09:51.500"></status>
</kw>
<status starttime="20170803 20:09:51.270" status="PASS" endtime="20170803 20:09:51.501"></status>
</kw>
<status starttime="20170803 20:09:51.270" status="PASS" endtime="20170803 20:09:51.501"></status>
</kw>
<status starttime="20170803 20:09:51.269" status="PASS" endtime="20170803 20:09:51.501"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:51.501">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170803 20:09:51.501" status="PASS" endtime="20170803 20:09:51.501"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:51.503">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:09:51.503" status="PASS" endtime="20170803 20:09:51.503"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:09:51.504">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:09:51.504" status="PASS" endtime="20170803 20:09:51.504"></status>
</kw>
<status starttime="20170803 20:09:51.504" status="PASS" endtime="20170803 20:09:51.505"></status>
</kw>
<status starttime="20170803 20:09:51.502" status="PASS" endtime="20170803 20:09:51.505"></status>
</kw>
<status starttime="20170803 20:09:51.502" status="PASS" endtime="20170803 20:09:51.505"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:51.655">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:09:51.655">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:09:51.505" status="PASS" endtime="20170803 20:09:51.655"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:51.656">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:09:51.656" status="PASS" endtime="20170803 20:09:51.657"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:09:51.658">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:09:51.657" status="PASS" endtime="20170803 20:09:51.658"></status>
</kw>
<status starttime="20170803 20:09:51.657" status="PASS" endtime="20170803 20:09:51.658"></status>
</kw>
<status starttime="20170803 20:09:51.655" status="PASS" endtime="20170803 20:09:51.658"></status>
</kw>
<status starttime="20170803 20:09:51.655" status="PASS" endtime="20170803 20:09:51.658"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:09:51.658">Delete All Sessions</msg>
<status starttime="20170803 20:09:51.658" status="PASS" endtime="20170803 20:09:51.658"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:09:51.659">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:09:51.268" status="PASS" endtime="20170803 20:09:51.659"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:09:51.659">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:09:51.659" status="PASS" endtime="20170803 20:09:51.659"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:09:51.660">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:09:51.660">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:09:51.660">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:09:51.660" status="PASS" endtime="20170803 20:09:51.660"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:09:51.660">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170803 20:09:51.268" status="PASS" endtime="20170803 20:09:51.660"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:09:51.661">${host_state} = Quiesced</msg>
<status starttime="20170803 20:09:51.268" status="PASS" endtime="20170803 20:09:51.661"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170803 20:09:51.661">Running != Quiesced</msg>
<status starttime="20170803 20:09:51.661" status="FAIL" endtime="20170803 20:09:51.662"></status>
</kw>
<status starttime="20170803 20:09:50.981" status="FAIL" endtime="20170803 20:09:51.662"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:01.667">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:10:01.667" status="PASS" endtime="20170803 20:10:01.667"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:01.668">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:10:01.668" status="PASS" endtime="20170803 20:10:01.668"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:01.669">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:10:01.668" status="PASS" endtime="20170803 20:10:01.669"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:01.669">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:10:01.669" status="PASS" endtime="20170803 20:10:01.669"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:01.854">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:10:01.670" status="PASS" endtime="20170803 20:10:01.854"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:10:01.854">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:10:01.854">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:10:01.670" status="PASS" endtime="20170803 20:10:01.854"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:01.855">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:10:01.855" status="PASS" endtime="20170803 20:10:01.855"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:01.856">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:10:01.855" status="PASS" endtime="20170803 20:10:01.856"></status>
</kw>
<status starttime="20170803 20:10:01.666" status="PASS" endtime="20170803 20:10:01.856"></status>
</kw>
<status starttime="20170803 20:10:01.666" status="PASS" endtime="20170803 20:10:01.856"></status>
</kw>
<status starttime="20170803 20:10:01.665" status="PASS" endtime="20170803 20:10:01.856"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:01.857">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170803 20:10:01.856" status="PASS" endtime="20170803 20:10:01.857"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:01.859">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:10:01.858" status="PASS" endtime="20170803 20:10:01.859"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:01.860">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:10:01.859" status="PASS" endtime="20170803 20:10:01.860"></status>
</kw>
<status starttime="20170803 20:10:01.859" status="PASS" endtime="20170803 20:10:01.860"></status>
</kw>
<status starttime="20170803 20:10:01.857" status="PASS" endtime="20170803 20:10:01.860"></status>
</kw>
<status starttime="20170803 20:10:01.857" status="PASS" endtime="20170803 20:10:01.860"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:01.923">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:10:01.923">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:10:01.861" status="PASS" endtime="20170803 20:10:01.923"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:01.925">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:10:01.925" status="PASS" endtime="20170803 20:10:01.925"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:01.926">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:10:01.926" status="PASS" endtime="20170803 20:10:01.926"></status>
</kw>
<status starttime="20170803 20:10:01.925" status="PASS" endtime="20170803 20:10:01.926"></status>
</kw>
<status starttime="20170803 20:10:01.924" status="PASS" endtime="20170803 20:10:01.927"></status>
</kw>
<status starttime="20170803 20:10:01.924" status="PASS" endtime="20170803 20:10:01.927"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:10:01.927">Delete All Sessions</msg>
<status starttime="20170803 20:10:01.927" status="PASS" endtime="20170803 20:10:01.927"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:10:01.928">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:10:01.665" status="PASS" endtime="20170803 20:10:01.928"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:01.929">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:10:01.928" status="PASS" endtime="20170803 20:10:01.929"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:01.929">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:10:01.930">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:10:01.930">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:10:01.929" status="PASS" endtime="20170803 20:10:01.930"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:10:01.930">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170803 20:10:01.664" status="PASS" endtime="20170803 20:10:01.930"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:10:01.931">${power_state} = On</msg>
<status starttime="20170803 20:10:01.663" status="PASS" endtime="20170803 20:10:01.931"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170803 20:10:01.931" status="PASS" endtime="20170803 20:10:01.931"></status>
</kw>
<status starttime="20170803 20:10:01.663" status="PASS" endtime="20170803 20:10:01.932"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:01.935">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:10:01.935" status="PASS" endtime="20170803 20:10:01.936"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:01.936">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:10:01.936" status="PASS" endtime="20170803 20:10:01.936"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:01.937">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:10:01.937" status="PASS" endtime="20170803 20:10:01.937"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:01.938">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:10:01.937" status="PASS" endtime="20170803 20:10:01.938"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:02.131">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:10:01.938" status="PASS" endtime="20170803 20:10:02.131"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:10:02.131">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:10:02.131">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:10:01.938" status="PASS" endtime="20170803 20:10:02.132"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:02.132">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:10:02.132" status="PASS" endtime="20170803 20:10:02.132"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:02.133">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:10:02.132" status="PASS" endtime="20170803 20:10:02.133"></status>
</kw>
<status starttime="20170803 20:10:01.935" status="PASS" endtime="20170803 20:10:02.133"></status>
</kw>
<status starttime="20170803 20:10:01.934" status="PASS" endtime="20170803 20:10:02.133"></status>
</kw>
<status starttime="20170803 20:10:01.934" status="PASS" endtime="20170803 20:10:02.133"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:02.134">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170803 20:10:02.133" status="PASS" endtime="20170803 20:10:02.134"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:02.136">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:10:02.135" status="PASS" endtime="20170803 20:10:02.136"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:02.137">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:10:02.137" status="PASS" endtime="20170803 20:10:02.137"></status>
</kw>
<status starttime="20170803 20:10:02.136" status="PASS" endtime="20170803 20:10:02.137"></status>
</kw>
<status starttime="20170803 20:10:02.135" status="PASS" endtime="20170803 20:10:02.137"></status>
</kw>
<status starttime="20170803 20:10:02.134" status="PASS" endtime="20170803 20:10:02.137"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:02.245">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:10:02.245">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:10:02.137" status="PASS" endtime="20170803 20:10:02.245"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:02.247">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:10:02.246" status="PASS" endtime="20170803 20:10:02.247"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:02.248">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:10:02.248" status="PASS" endtime="20170803 20:10:02.248"></status>
</kw>
<status starttime="20170803 20:10:02.247" status="PASS" endtime="20170803 20:10:02.248"></status>
</kw>
<status starttime="20170803 20:10:02.246" status="PASS" endtime="20170803 20:10:02.248"></status>
</kw>
<status starttime="20170803 20:10:02.245" status="PASS" endtime="20170803 20:10:02.248"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:10:02.249">Delete All Sessions</msg>
<status starttime="20170803 20:10:02.249" status="PASS" endtime="20170803 20:10:02.249"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:10:02.249">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:10:01.933" status="PASS" endtime="20170803 20:10:02.249"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:02.250">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:10:02.249" status="PASS" endtime="20170803 20:10:02.250"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:02.250">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:10:02.250">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:10:02.250">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:10:02.250" status="PASS" endtime="20170803 20:10:02.250"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:10:02.251">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170803 20:10:01.932" status="PASS" endtime="20170803 20:10:02.251"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:10:02.251">${host_state} = Quiesced</msg>
<status starttime="20170803 20:10:01.932" status="PASS" endtime="20170803 20:10:02.251"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170803 20:10:02.252">Running != Quiesced</msg>
<status starttime="20170803 20:10:02.251" status="FAIL" endtime="20170803 20:10:02.252"></status>
</kw>
<status starttime="20170803 20:10:01.662" status="FAIL" endtime="20170803 20:10:02.252"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:12.257">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:10:12.257" status="PASS" endtime="20170803 20:10:12.258"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:12.258">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:10:12.258" status="PASS" endtime="20170803 20:10:12.258"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:12.259">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:10:12.258" status="PASS" endtime="20170803 20:10:12.259"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:12.260">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:10:12.259" status="PASS" endtime="20170803 20:10:12.260"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:12.445">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:10:12.261" status="PASS" endtime="20170803 20:10:12.445"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:10:12.446">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:10:12.446">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:10:12.260" status="PASS" endtime="20170803 20:10:12.446"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:12.446">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:10:12.446" status="PASS" endtime="20170803 20:10:12.446"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:12.447">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:10:12.447" status="PASS" endtime="20170803 20:10:12.447"></status>
</kw>
<status starttime="20170803 20:10:12.256" status="PASS" endtime="20170803 20:10:12.448"></status>
</kw>
<status starttime="20170803 20:10:12.255" status="PASS" endtime="20170803 20:10:12.448"></status>
</kw>
<status starttime="20170803 20:10:12.255" status="PASS" endtime="20170803 20:10:12.448"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:12.449">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170803 20:10:12.448" status="PASS" endtime="20170803 20:10:12.449"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:12.452">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:10:12.451" status="PASS" endtime="20170803 20:10:12.452"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:12.453">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:10:12.453" status="PASS" endtime="20170803 20:10:12.453"></status>
</kw>
<status starttime="20170803 20:10:12.452" status="PASS" endtime="20170803 20:10:12.454"></status>
</kw>
<status starttime="20170803 20:10:12.450" status="PASS" endtime="20170803 20:10:12.454"></status>
</kw>
<status starttime="20170803 20:10:12.449" status="PASS" endtime="20170803 20:10:12.454"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:12.520">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:10:12.520">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:10:12.454" status="PASS" endtime="20170803 20:10:12.520"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:12.522">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:10:12.521" status="PASS" endtime="20170803 20:10:12.522"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:12.523">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:10:12.523" status="PASS" endtime="20170803 20:10:12.523"></status>
</kw>
<status starttime="20170803 20:10:12.522" status="PASS" endtime="20170803 20:10:12.523"></status>
</kw>
<status starttime="20170803 20:10:12.521" status="PASS" endtime="20170803 20:10:12.523"></status>
</kw>
<status starttime="20170803 20:10:12.520" status="PASS" endtime="20170803 20:10:12.523"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:10:12.524">Delete All Sessions</msg>
<status starttime="20170803 20:10:12.524" status="PASS" endtime="20170803 20:10:12.524"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:10:12.524">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:10:12.254" status="PASS" endtime="20170803 20:10:12.524"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:12.525">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:10:12.524" status="PASS" endtime="20170803 20:10:12.525"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:12.525">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:10:12.525">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:10:12.525">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:10:12.525" status="PASS" endtime="20170803 20:10:12.525"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:10:12.526">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170803 20:10:12.254" status="PASS" endtime="20170803 20:10:12.526"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:10:12.526">${power_state} = On</msg>
<status starttime="20170803 20:10:12.253" status="PASS" endtime="20170803 20:10:12.526"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170803 20:10:12.526" status="PASS" endtime="20170803 20:10:12.527"></status>
</kw>
<status starttime="20170803 20:10:12.253" status="PASS" endtime="20170803 20:10:12.527"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:12.530">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:10:12.530" status="PASS" endtime="20170803 20:10:12.531"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:12.531">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:10:12.531" status="PASS" endtime="20170803 20:10:12.531"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:12.532">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:10:12.531" status="PASS" endtime="20170803 20:10:12.532"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:12.532">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:10:12.532" status="PASS" endtime="20170803 20:10:12.533"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:12.723">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:10:12.533" status="PASS" endtime="20170803 20:10:12.723"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:10:12.723">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:10:12.723">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:10:12.533" status="PASS" endtime="20170803 20:10:12.724"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:12.724">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:10:12.724" status="PASS" endtime="20170803 20:10:12.724"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:12.725">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:10:12.724" status="PASS" endtime="20170803 20:10:12.725"></status>
</kw>
<status starttime="20170803 20:10:12.529" status="PASS" endtime="20170803 20:10:12.725"></status>
</kw>
<status starttime="20170803 20:10:12.529" status="PASS" endtime="20170803 20:10:12.725"></status>
</kw>
<status starttime="20170803 20:10:12.529" status="PASS" endtime="20170803 20:10:12.725"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:12.726">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170803 20:10:12.726" status="PASS" endtime="20170803 20:10:12.726"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:12.728">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:10:12.727" status="PASS" endtime="20170803 20:10:12.729"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:12.729">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:10:12.729" status="PASS" endtime="20170803 20:10:12.730"></status>
</kw>
<status starttime="20170803 20:10:12.729" status="PASS" endtime="20170803 20:10:12.730"></status>
</kw>
<status starttime="20170803 20:10:12.727" status="PASS" endtime="20170803 20:10:12.730"></status>
</kw>
<status starttime="20170803 20:10:12.726" status="PASS" endtime="20170803 20:10:12.730"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:12.820">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:10:12.820">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:10:12.730" status="PASS" endtime="20170803 20:10:12.820"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:12.822">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:10:12.821" status="PASS" endtime="20170803 20:10:12.822"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:12.823">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:10:12.822" status="PASS" endtime="20170803 20:10:12.823"></status>
</kw>
<status starttime="20170803 20:10:12.822" status="PASS" endtime="20170803 20:10:12.823"></status>
</kw>
<status starttime="20170803 20:10:12.821" status="PASS" endtime="20170803 20:10:12.823"></status>
</kw>
<status starttime="20170803 20:10:12.820" status="PASS" endtime="20170803 20:10:12.823"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:10:12.823">Delete All Sessions</msg>
<status starttime="20170803 20:10:12.823" status="PASS" endtime="20170803 20:10:12.823"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:10:12.824">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:10:12.528" status="PASS" endtime="20170803 20:10:12.824"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:12.824">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:10:12.824" status="PASS" endtime="20170803 20:10:12.824"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:12.825">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:10:12.825">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:10:12.825">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:10:12.825" status="PASS" endtime="20170803 20:10:12.825"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:10:12.825">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170803 20:10:12.527" status="PASS" endtime="20170803 20:10:12.825"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:10:12.826">${host_state} = Quiesced</msg>
<status starttime="20170803 20:10:12.527" status="PASS" endtime="20170803 20:10:12.826"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170803 20:10:12.826">Running != Quiesced</msg>
<status starttime="20170803 20:10:12.826" status="FAIL" endtime="20170803 20:10:12.826"></status>
</kw>
<status starttime="20170803 20:10:12.252" status="FAIL" endtime="20170803 20:10:12.827"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:22.832">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:10:22.831" status="PASS" endtime="20170803 20:10:22.832"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:22.837">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:10:22.832" status="PASS" endtime="20170803 20:10:22.837"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:22.838">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:10:22.837" status="PASS" endtime="20170803 20:10:22.838"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:22.838">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:10:22.838" status="PASS" endtime="20170803 20:10:22.838"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:23.147">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:10:22.839" status="PASS" endtime="20170803 20:10:23.148"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:10:23.148">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:10:23.148">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:10:22.839" status="PASS" endtime="20170803 20:10:23.148"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:23.148">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:10:23.148" status="PASS" endtime="20170803 20:10:23.149"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:23.149">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:10:23.149" status="PASS" endtime="20170803 20:10:23.149"></status>
</kw>
<status starttime="20170803 20:10:22.831" status="PASS" endtime="20170803 20:10:23.149"></status>
</kw>
<status starttime="20170803 20:10:22.830" status="PASS" endtime="20170803 20:10:23.149"></status>
</kw>
<status starttime="20170803 20:10:22.830" status="PASS" endtime="20170803 20:10:23.150"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:23.150">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170803 20:10:23.150" status="PASS" endtime="20170803 20:10:23.150"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:23.152">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:10:23.152" status="PASS" endtime="20170803 20:10:23.152"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:23.153">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:10:23.153" status="PASS" endtime="20170803 20:10:23.153"></status>
</kw>
<status starttime="20170803 20:10:23.152" status="PASS" endtime="20170803 20:10:23.153"></status>
</kw>
<status starttime="20170803 20:10:23.151" status="PASS" endtime="20170803 20:10:23.153"></status>
</kw>
<status starttime="20170803 20:10:23.150" status="PASS" endtime="20170803 20:10:23.154"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:23.225">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:10:23.225">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:10:23.154" status="PASS" endtime="20170803 20:10:23.225"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:23.227">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:10:23.226" status="PASS" endtime="20170803 20:10:23.227"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:23.228">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:10:23.227" status="PASS" endtime="20170803 20:10:23.228"></status>
</kw>
<status starttime="20170803 20:10:23.227" status="PASS" endtime="20170803 20:10:23.228"></status>
</kw>
<status starttime="20170803 20:10:23.226" status="PASS" endtime="20170803 20:10:23.228"></status>
</kw>
<status starttime="20170803 20:10:23.225" status="PASS" endtime="20170803 20:10:23.228"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:10:23.228">Delete All Sessions</msg>
<status starttime="20170803 20:10:23.228" status="PASS" endtime="20170803 20:10:23.228"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:10:23.229">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:10:22.829" status="PASS" endtime="20170803 20:10:23.229"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:23.229">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:10:23.229" status="PASS" endtime="20170803 20:10:23.229"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:23.230">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:10:23.230">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:10:23.230">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:10:23.230" status="PASS" endtime="20170803 20:10:23.230"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:10:23.230">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170803 20:10:22.828" status="PASS" endtime="20170803 20:10:23.230"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:10:23.231">${power_state} = On</msg>
<status starttime="20170803 20:10:22.828" status="PASS" endtime="20170803 20:10:23.231"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170803 20:10:23.231" status="PASS" endtime="20170803 20:10:23.231"></status>
</kw>
<status starttime="20170803 20:10:22.828" status="PASS" endtime="20170803 20:10:23.231"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:23.235">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:10:23.235" status="PASS" endtime="20170803 20:10:23.236"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:23.236">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:10:23.236" status="PASS" endtime="20170803 20:10:23.236"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:23.237">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:10:23.236" status="PASS" endtime="20170803 20:10:23.237"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:23.237">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:10:23.237" status="PASS" endtime="20170803 20:10:23.238"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:23.424">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:10:23.238" status="PASS" endtime="20170803 20:10:23.424"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:10:23.424">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:10:23.424">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:10:23.238" status="PASS" endtime="20170803 20:10:23.424"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:23.425">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:10:23.425" status="PASS" endtime="20170803 20:10:23.425"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:23.426">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:10:23.425" status="PASS" endtime="20170803 20:10:23.426"></status>
</kw>
<status starttime="20170803 20:10:23.234" status="PASS" endtime="20170803 20:10:23.426"></status>
</kw>
<status starttime="20170803 20:10:23.234" status="PASS" endtime="20170803 20:10:23.426"></status>
</kw>
<status starttime="20170803 20:10:23.233" status="PASS" endtime="20170803 20:10:23.426"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:23.427">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170803 20:10:23.426" status="PASS" endtime="20170803 20:10:23.427"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:23.429">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:10:23.428" status="PASS" endtime="20170803 20:10:23.429"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:23.430">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:10:23.429" status="PASS" endtime="20170803 20:10:23.430"></status>
</kw>
<status starttime="20170803 20:10:23.429" status="PASS" endtime="20170803 20:10:23.430"></status>
</kw>
<status starttime="20170803 20:10:23.427" status="PASS" endtime="20170803 20:10:23.430"></status>
</kw>
<status starttime="20170803 20:10:23.427" status="PASS" endtime="20170803 20:10:23.430"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:23.534">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:10:23.534">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:10:23.430" status="PASS" endtime="20170803 20:10:23.534"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:23.536">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:10:23.535" status="PASS" endtime="20170803 20:10:23.536"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:23.537">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:10:23.536" status="PASS" endtime="20170803 20:10:23.537"></status>
</kw>
<status starttime="20170803 20:10:23.536" status="PASS" endtime="20170803 20:10:23.537"></status>
</kw>
<status starttime="20170803 20:10:23.534" status="PASS" endtime="20170803 20:10:23.537"></status>
</kw>
<status starttime="20170803 20:10:23.534" status="PASS" endtime="20170803 20:10:23.537"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:10:23.537">Delete All Sessions</msg>
<status starttime="20170803 20:10:23.537" status="PASS" endtime="20170803 20:10:23.538"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:10:23.538">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:10:23.232" status="PASS" endtime="20170803 20:10:23.538"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:23.538">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:10:23.538" status="PASS" endtime="20170803 20:10:23.538"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:23.539">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:10:23.539">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:10:23.539">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:10:23.539" status="PASS" endtime="20170803 20:10:23.539"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:10:23.539">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170803 20:10:23.232" status="PASS" endtime="20170803 20:10:23.540"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:10:23.540">${host_state} = Quiesced</msg>
<status starttime="20170803 20:10:23.232" status="PASS" endtime="20170803 20:10:23.540"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170803 20:10:23.540">Running != Quiesced</msg>
<status starttime="20170803 20:10:23.540" status="FAIL" endtime="20170803 20:10:23.541"></status>
</kw>
<status starttime="20170803 20:10:22.827" status="FAIL" endtime="20170803 20:10:23.541"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:33.546">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:10:33.545" status="PASS" endtime="20170803 20:10:33.546"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:33.547">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:10:33.546" status="PASS" endtime="20170803 20:10:33.547"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:33.547">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:10:33.547" status="PASS" endtime="20170803 20:10:33.547"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:33.548">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:10:33.548" status="PASS" endtime="20170803 20:10:33.548"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:33.804">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:10:33.549" status="PASS" endtime="20170803 20:10:33.805"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:10:33.805">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:10:33.805">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:10:33.548" status="PASS" endtime="20170803 20:10:33.805"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:33.805">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:10:33.805" status="PASS" endtime="20170803 20:10:33.805"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:33.806">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:10:33.806" status="PASS" endtime="20170803 20:10:33.806"></status>
</kw>
<status starttime="20170803 20:10:33.545" status="PASS" endtime="20170803 20:10:33.806"></status>
</kw>
<status starttime="20170803 20:10:33.544" status="PASS" endtime="20170803 20:10:33.806"></status>
</kw>
<status starttime="20170803 20:10:33.544" status="PASS" endtime="20170803 20:10:33.806"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:33.807">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170803 20:10:33.807" status="PASS" endtime="20170803 20:10:33.807"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:33.809">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:10:33.809" status="PASS" endtime="20170803 20:10:33.809"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:33.810">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:10:33.810" status="PASS" endtime="20170803 20:10:33.810"></status>
</kw>
<status starttime="20170803 20:10:33.809" status="PASS" endtime="20170803 20:10:33.810"></status>
</kw>
<status starttime="20170803 20:10:33.808" status="PASS" endtime="20170803 20:10:33.810"></status>
</kw>
<status starttime="20170803 20:10:33.807" status="PASS" endtime="20170803 20:10:33.810"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:33.901">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:10:33.901">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:10:33.811" status="PASS" endtime="20170803 20:10:33.901"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:33.903">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:10:33.903" status="PASS" endtime="20170803 20:10:33.903"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:33.904">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:10:33.904" status="PASS" endtime="20170803 20:10:33.904"></status>
</kw>
<status starttime="20170803 20:10:33.903" status="PASS" endtime="20170803 20:10:33.904"></status>
</kw>
<status starttime="20170803 20:10:33.902" status="PASS" endtime="20170803 20:10:33.904"></status>
</kw>
<status starttime="20170803 20:10:33.902" status="PASS" endtime="20170803 20:10:33.904"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:10:33.905">Delete All Sessions</msg>
<status starttime="20170803 20:10:33.905" status="PASS" endtime="20170803 20:10:33.905"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:10:33.905">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:10:33.543" status="PASS" endtime="20170803 20:10:33.905"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:33.906">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:10:33.905" status="PASS" endtime="20170803 20:10:33.906"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:33.906">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:10:33.906">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:10:33.907">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:10:33.906" status="PASS" endtime="20170803 20:10:33.907"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:10:33.907">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170803 20:10:33.543" status="PASS" endtime="20170803 20:10:33.907"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:10:33.907">${power_state} = On</msg>
<status starttime="20170803 20:10:33.542" status="PASS" endtime="20170803 20:10:33.907"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170803 20:10:33.908" status="PASS" endtime="20170803 20:10:33.908"></status>
</kw>
<status starttime="20170803 20:10:33.542" status="PASS" endtime="20170803 20:10:33.908"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:33.912">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:10:33.911" status="PASS" endtime="20170803 20:10:33.912"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:33.913">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:10:33.913" status="PASS" endtime="20170803 20:10:33.913"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:33.914">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:10:33.913" status="PASS" endtime="20170803 20:10:33.914"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:33.914">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:10:33.914" status="PASS" endtime="20170803 20:10:33.914"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:34.091">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:10:33.915" status="PASS" endtime="20170803 20:10:34.091"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:10:34.091">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:10:34.091">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:10:33.915" status="PASS" endtime="20170803 20:10:34.091"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:34.092">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:10:34.091" status="PASS" endtime="20170803 20:10:34.092"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:34.092">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:10:34.092" status="PASS" endtime="20170803 20:10:34.093"></status>
</kw>
<status starttime="20170803 20:10:33.911" status="PASS" endtime="20170803 20:10:34.093"></status>
</kw>
<status starttime="20170803 20:10:33.910" status="PASS" endtime="20170803 20:10:34.093"></status>
</kw>
<status starttime="20170803 20:10:33.910" status="PASS" endtime="20170803 20:10:34.093"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:34.093">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170803 20:10:34.093" status="PASS" endtime="20170803 20:10:34.094"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:34.096">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:10:34.095" status="PASS" endtime="20170803 20:10:34.096"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:34.097">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:10:34.096" status="PASS" endtime="20170803 20:10:34.097"></status>
</kw>
<status starttime="20170803 20:10:34.096" status="PASS" endtime="20170803 20:10:34.097"></status>
</kw>
<status starttime="20170803 20:10:34.094" status="PASS" endtime="20170803 20:10:34.097"></status>
</kw>
<status starttime="20170803 20:10:34.094" status="PASS" endtime="20170803 20:10:34.097"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:34.212">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:10:34.212">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:10:34.097" status="PASS" endtime="20170803 20:10:34.212"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:34.214">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:10:34.214" status="PASS" endtime="20170803 20:10:34.214"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:34.215">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:10:34.215" status="PASS" endtime="20170803 20:10:34.215"></status>
</kw>
<status starttime="20170803 20:10:34.214" status="PASS" endtime="20170803 20:10:34.215"></status>
</kw>
<status starttime="20170803 20:10:34.213" status="PASS" endtime="20170803 20:10:34.215"></status>
</kw>
<status starttime="20170803 20:10:34.213" status="PASS" endtime="20170803 20:10:34.216"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:10:34.216">Delete All Sessions</msg>
<status starttime="20170803 20:10:34.216" status="PASS" endtime="20170803 20:10:34.216"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:10:34.216">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:10:33.909" status="PASS" endtime="20170803 20:10:34.216"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:34.217">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:10:34.216" status="PASS" endtime="20170803 20:10:34.217"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:34.217">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:10:34.217">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:10:34.218">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:10:34.217" status="PASS" endtime="20170803 20:10:34.218"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:10:34.218">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170803 20:10:33.909" status="PASS" endtime="20170803 20:10:34.218"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:10:34.218">${host_state} = Quiesced</msg>
<status starttime="20170803 20:10:33.908" status="PASS" endtime="20170803 20:10:34.218"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170803 20:10:34.219">Running != Quiesced</msg>
<status starttime="20170803 20:10:34.219" status="FAIL" endtime="20170803 20:10:34.219"></status>
</kw>
<status starttime="20170803 20:10:33.541" status="FAIL" endtime="20170803 20:10:34.219"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:44.224">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:10:44.224" status="PASS" endtime="20170803 20:10:44.225"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:44.225">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:10:44.225" status="PASS" endtime="20170803 20:10:44.225"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:44.226">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:10:44.226" status="PASS" endtime="20170803 20:10:44.226"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:44.227">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:10:44.226" status="PASS" endtime="20170803 20:10:44.227"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:44.453">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:10:44.227" status="PASS" endtime="20170803 20:10:44.453"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:10:44.453">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:10:44.453">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:10:44.227" status="PASS" endtime="20170803 20:10:44.453"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:44.454">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:10:44.453" status="PASS" endtime="20170803 20:10:44.454"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:44.454">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:10:44.454" status="PASS" endtime="20170803 20:10:44.454"></status>
</kw>
<status starttime="20170803 20:10:44.224" status="PASS" endtime="20170803 20:10:44.454"></status>
</kw>
<status starttime="20170803 20:10:44.223" status="PASS" endtime="20170803 20:10:44.454"></status>
</kw>
<status starttime="20170803 20:10:44.223" status="PASS" endtime="20170803 20:10:44.455"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:44.455">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170803 20:10:44.455" status="PASS" endtime="20170803 20:10:44.455"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:44.457">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:10:44.457" status="PASS" endtime="20170803 20:10:44.457"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:44.458">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:10:44.458" status="PASS" endtime="20170803 20:10:44.459"></status>
</kw>
<status starttime="20170803 20:10:44.458" status="PASS" endtime="20170803 20:10:44.459"></status>
</kw>
<status starttime="20170803 20:10:44.456" status="PASS" endtime="20170803 20:10:44.459"></status>
</kw>
<status starttime="20170803 20:10:44.456" status="PASS" endtime="20170803 20:10:44.459"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:44.606">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:10:44.606">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:10:44.459" status="PASS" endtime="20170803 20:10:44.606"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:44.607">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:10:44.607" status="PASS" endtime="20170803 20:10:44.607"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:44.609">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:10:44.608" status="PASS" endtime="20170803 20:10:44.609"></status>
</kw>
<status starttime="20170803 20:10:44.608" status="PASS" endtime="20170803 20:10:44.609"></status>
</kw>
<status starttime="20170803 20:10:44.606" status="PASS" endtime="20170803 20:10:44.609"></status>
</kw>
<status starttime="20170803 20:10:44.606" status="PASS" endtime="20170803 20:10:44.609"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:10:44.609">Delete All Sessions</msg>
<status starttime="20170803 20:10:44.609" status="PASS" endtime="20170803 20:10:44.609"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:10:44.610">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:10:44.222" status="PASS" endtime="20170803 20:10:44.610"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:44.610">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:10:44.610" status="PASS" endtime="20170803 20:10:44.610"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:44.611">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:10:44.611">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:10:44.611">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:10:44.611" status="PASS" endtime="20170803 20:10:44.611"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:10:44.611">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170803 20:10:44.221" status="PASS" endtime="20170803 20:10:44.611"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:10:44.612">${power_state} = On</msg>
<status starttime="20170803 20:10:44.220" status="PASS" endtime="20170803 20:10:44.612"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170803 20:10:44.612" status="PASS" endtime="20170803 20:10:44.612"></status>
</kw>
<status starttime="20170803 20:10:44.220" status="PASS" endtime="20170803 20:10:44.613"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:44.616">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:10:44.616" status="PASS" endtime="20170803 20:10:44.616"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:44.617">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:10:44.617" status="PASS" endtime="20170803 20:10:44.617"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:44.618">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:10:44.617" status="PASS" endtime="20170803 20:10:44.618"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:44.618">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:10:44.618" status="PASS" endtime="20170803 20:10:44.618"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:44.811">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:10:44.619" status="PASS" endtime="20170803 20:10:44.811"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:10:44.811">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:10:44.811">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:10:44.619" status="PASS" endtime="20170803 20:10:44.811"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:44.812">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:10:44.811" status="PASS" endtime="20170803 20:10:44.812"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:44.812">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:10:44.812" status="PASS" endtime="20170803 20:10:44.813"></status>
</kw>
<status starttime="20170803 20:10:44.615" status="PASS" endtime="20170803 20:10:44.813"></status>
</kw>
<status starttime="20170803 20:10:44.615" status="PASS" endtime="20170803 20:10:44.813"></status>
</kw>
<status starttime="20170803 20:10:44.614" status="PASS" endtime="20170803 20:10:44.813"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:44.814">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170803 20:10:44.813" status="PASS" endtime="20170803 20:10:44.814"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:44.816">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:10:44.815" status="PASS" endtime="20170803 20:10:44.816"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:44.816">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:10:44.816" status="PASS" endtime="20170803 20:10:44.817"></status>
</kw>
<status starttime="20170803 20:10:44.816" status="PASS" endtime="20170803 20:10:44.817"></status>
</kw>
<status starttime="20170803 20:10:44.814" status="PASS" endtime="20170803 20:10:44.817"></status>
</kw>
<status starttime="20170803 20:10:44.814" status="PASS" endtime="20170803 20:10:44.817"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:44.906">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:10:44.906">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:10:44.817" status="PASS" endtime="20170803 20:10:44.907"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:44.908">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:10:44.908" status="PASS" endtime="20170803 20:10:44.909"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:44.909">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:10:44.909" status="PASS" endtime="20170803 20:10:44.910"></status>
</kw>
<status starttime="20170803 20:10:44.909" status="PASS" endtime="20170803 20:10:44.910"></status>
</kw>
<status starttime="20170803 20:10:44.907" status="PASS" endtime="20170803 20:10:44.910"></status>
</kw>
<status starttime="20170803 20:10:44.907" status="PASS" endtime="20170803 20:10:44.910"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:10:44.910">Delete All Sessions</msg>
<status starttime="20170803 20:10:44.910" status="PASS" endtime="20170803 20:10:44.910"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:10:44.910">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:10:44.614" status="PASS" endtime="20170803 20:10:44.911"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:44.911">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:10:44.911" status="PASS" endtime="20170803 20:10:44.911"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:44.912">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:10:44.912">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:10:44.912">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:10:44.911" status="PASS" endtime="20170803 20:10:44.912"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:10:44.912">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170803 20:10:44.613" status="PASS" endtime="20170803 20:10:44.912"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:10:44.912">${host_state} = Quiesced</msg>
<status starttime="20170803 20:10:44.613" status="PASS" endtime="20170803 20:10:44.913"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170803 20:10:44.913">Running != Quiesced</msg>
<status starttime="20170803 20:10:44.913" status="FAIL" endtime="20170803 20:10:44.913"></status>
</kw>
<status starttime="20170803 20:10:44.220" status="FAIL" endtime="20170803 20:10:44.913"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:54.919">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:10:54.919" status="PASS" endtime="20170803 20:10:54.920"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:54.920">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:10:54.920" status="PASS" endtime="20170803 20:10:54.920"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:54.921">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:10:54.921" status="PASS" endtime="20170803 20:10:54.921"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:54.922">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:10:54.921" status="PASS" endtime="20170803 20:10:54.922"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:55.195">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:10:54.922" status="PASS" endtime="20170803 20:10:55.195"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:10:55.195">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:10:55.195">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:10:54.922" status="PASS" endtime="20170803 20:10:55.195"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:55.196">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:10:55.196" status="PASS" endtime="20170803 20:10:55.196"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:55.197">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:10:55.196" status="PASS" endtime="20170803 20:10:55.197"></status>
</kw>
<status starttime="20170803 20:10:54.918" status="PASS" endtime="20170803 20:10:55.197"></status>
</kw>
<status starttime="20170803 20:10:54.918" status="PASS" endtime="20170803 20:10:55.197"></status>
</kw>
<status starttime="20170803 20:10:54.917" status="PASS" endtime="20170803 20:10:55.197"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:55.198">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170803 20:10:55.197" status="PASS" endtime="20170803 20:10:55.198"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:55.200">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:10:55.199" status="PASS" endtime="20170803 20:10:55.200"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:55.201">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:10:55.200" status="PASS" endtime="20170803 20:10:55.201"></status>
</kw>
<status starttime="20170803 20:10:55.200" status="PASS" endtime="20170803 20:10:55.201"></status>
</kw>
<status starttime="20170803 20:10:55.198" status="PASS" endtime="20170803 20:10:55.201"></status>
</kw>
<status starttime="20170803 20:10:55.198" status="PASS" endtime="20170803 20:10:55.201"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:55.290">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:10:55.290">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:10:55.201" status="PASS" endtime="20170803 20:10:55.290"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:55.292">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:10:55.291" status="PASS" endtime="20170803 20:10:55.292"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:55.293">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:10:55.293" status="PASS" endtime="20170803 20:10:55.293"></status>
</kw>
<status starttime="20170803 20:10:55.292" status="PASS" endtime="20170803 20:10:55.293"></status>
</kw>
<status starttime="20170803 20:10:55.291" status="PASS" endtime="20170803 20:10:55.293"></status>
</kw>
<status starttime="20170803 20:10:55.290" status="PASS" endtime="20170803 20:10:55.293"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:10:55.294">Delete All Sessions</msg>
<status starttime="20170803 20:10:55.294" status="PASS" endtime="20170803 20:10:55.294"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:10:55.294">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:10:54.916" status="PASS" endtime="20170803 20:10:55.294"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:55.295">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:10:55.294" status="PASS" endtime="20170803 20:10:55.295"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:55.295">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:10:55.295">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:10:55.295">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:10:55.295" status="PASS" endtime="20170803 20:10:55.295"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:10:55.296">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170803 20:10:54.915" status="PASS" endtime="20170803 20:10:55.296"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:10:55.296">${power_state} = On</msg>
<status starttime="20170803 20:10:54.915" status="PASS" endtime="20170803 20:10:55.296"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170803 20:10:55.296" status="PASS" endtime="20170803 20:10:55.297"></status>
</kw>
<status starttime="20170803 20:10:54.914" status="PASS" endtime="20170803 20:10:55.297"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:55.300">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:10:55.300" status="PASS" endtime="20170803 20:10:55.301"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:55.301">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:10:55.301" status="PASS" endtime="20170803 20:10:55.301"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:55.302">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:10:55.301" status="PASS" endtime="20170803 20:10:55.302"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:55.302">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:10:55.302" status="PASS" endtime="20170803 20:10:55.302"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:55.483">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:10:55.303" status="PASS" endtime="20170803 20:10:55.483"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:10:55.483">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:10:55.483">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:10:55.303" status="PASS" endtime="20170803 20:10:55.483"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:55.484">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:10:55.484" status="PASS" endtime="20170803 20:10:55.484"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:55.485">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:10:55.484" status="PASS" endtime="20170803 20:10:55.485"></status>
</kw>
<status starttime="20170803 20:10:55.299" status="PASS" endtime="20170803 20:10:55.485"></status>
</kw>
<status starttime="20170803 20:10:55.299" status="PASS" endtime="20170803 20:10:55.485"></status>
</kw>
<status starttime="20170803 20:10:55.298" status="PASS" endtime="20170803 20:10:55.485"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:55.486">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170803 20:10:55.485" status="PASS" endtime="20170803 20:10:55.486"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:55.488">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:10:55.487" status="PASS" endtime="20170803 20:10:55.488"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:55.489">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:10:55.489" status="PASS" endtime="20170803 20:10:55.489"></status>
</kw>
<status starttime="20170803 20:10:55.488" status="PASS" endtime="20170803 20:10:55.489"></status>
</kw>
<status starttime="20170803 20:10:55.486" status="PASS" endtime="20170803 20:10:55.489"></status>
</kw>
<status starttime="20170803 20:10:55.486" status="PASS" endtime="20170803 20:10:55.490"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:55.579">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:10:55.579">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:10:55.490" status="PASS" endtime="20170803 20:10:55.579"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:55.581">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:10:55.580" status="PASS" endtime="20170803 20:10:55.581"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:55.582">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:10:55.582" status="PASS" endtime="20170803 20:10:55.582"></status>
</kw>
<status starttime="20170803 20:10:55.581" status="PASS" endtime="20170803 20:10:55.582"></status>
</kw>
<status starttime="20170803 20:10:55.580" status="PASS" endtime="20170803 20:10:55.582"></status>
</kw>
<status starttime="20170803 20:10:55.579" status="PASS" endtime="20170803 20:10:55.582"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:10:55.583">Delete All Sessions</msg>
<status starttime="20170803 20:10:55.582" status="PASS" endtime="20170803 20:10:55.583"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:10:55.583">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:10:55.298" status="PASS" endtime="20170803 20:10:55.583"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:10:55.583">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:10:55.583" status="PASS" endtime="20170803 20:10:55.583"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:10:55.584">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:10:55.584">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:10:55.584">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:10:55.584" status="PASS" endtime="20170803 20:10:55.584"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:10:55.584">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170803 20:10:55.297" status="PASS" endtime="20170803 20:10:55.585"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:10:55.585">${host_state} = Quiesced</msg>
<status starttime="20170803 20:10:55.297" status="PASS" endtime="20170803 20:10:55.585"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170803 20:10:55.586">Running != Quiesced</msg>
<status starttime="20170803 20:10:55.585" status="FAIL" endtime="20170803 20:10:55.586"></status>
</kw>
<status starttime="20170803 20:10:54.914" status="FAIL" endtime="20170803 20:10:55.586"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:05.591">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:11:05.590" status="PASS" endtime="20170803 20:11:05.591"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:05.592">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:11:05.591" status="PASS" endtime="20170803 20:11:05.592"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:05.592">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:11:05.592" status="PASS" endtime="20170803 20:11:05.592"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:05.593">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:11:05.593" status="PASS" endtime="20170803 20:11:05.593"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:05.770">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:11:05.594" status="PASS" endtime="20170803 20:11:05.771"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:11:05.771">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:11:05.771">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:11:05.594" status="PASS" endtime="20170803 20:11:05.771"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:05.771">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:11:05.771" status="PASS" endtime="20170803 20:11:05.771"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:05.772">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:11:05.772" status="PASS" endtime="20170803 20:11:05.772"></status>
</kw>
<status starttime="20170803 20:11:05.590" status="PASS" endtime="20170803 20:11:05.772"></status>
</kw>
<status starttime="20170803 20:11:05.589" status="PASS" endtime="20170803 20:11:05.772"></status>
</kw>
<status starttime="20170803 20:11:05.589" status="PASS" endtime="20170803 20:11:05.772"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:05.773">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170803 20:11:05.773" status="PASS" endtime="20170803 20:11:05.773"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:05.775">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:11:05.774" status="PASS" endtime="20170803 20:11:05.775"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:05.776">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:11:05.776" status="PASS" endtime="20170803 20:11:05.776"></status>
</kw>
<status starttime="20170803 20:11:05.775" status="PASS" endtime="20170803 20:11:05.776"></status>
</kw>
<status starttime="20170803 20:11:05.774" status="PASS" endtime="20170803 20:11:05.776"></status>
</kw>
<status starttime="20170803 20:11:05.773" status="PASS" endtime="20170803 20:11:05.776"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:05.859">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:11:05.859">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:11:05.777" status="PASS" endtime="20170803 20:11:05.859"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:05.861">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:11:05.860" status="PASS" endtime="20170803 20:11:05.861"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:05.861">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:11:05.861" status="PASS" endtime="20170803 20:11:05.862"></status>
</kw>
<status starttime="20170803 20:11:05.861" status="PASS" endtime="20170803 20:11:05.862"></status>
</kw>
<status starttime="20170803 20:11:05.860" status="PASS" endtime="20170803 20:11:05.862"></status>
</kw>
<status starttime="20170803 20:11:05.859" status="PASS" endtime="20170803 20:11:05.862"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:11:05.862">Delete All Sessions</msg>
<status starttime="20170803 20:11:05.862" status="PASS" endtime="20170803 20:11:05.862"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:11:05.862">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:11:05.588" status="PASS" endtime="20170803 20:11:05.863"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:05.863">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:11:05.863" status="PASS" endtime="20170803 20:11:05.863"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:05.864">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:11:05.864">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:11:05.864">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:11:05.863" status="PASS" endtime="20170803 20:11:05.864"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:11:05.864">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170803 20:11:05.587" status="PASS" endtime="20170803 20:11:05.864"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:11:05.864">${power_state} = On</msg>
<status starttime="20170803 20:11:05.587" status="PASS" endtime="20170803 20:11:05.865"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170803 20:11:05.865" status="PASS" endtime="20170803 20:11:05.865"></status>
</kw>
<status starttime="20170803 20:11:05.587" status="PASS" endtime="20170803 20:11:05.865"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:05.872">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:11:05.871" status="PASS" endtime="20170803 20:11:05.872"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:05.873">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:11:05.872" status="PASS" endtime="20170803 20:11:05.873"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:05.873">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:11:05.873" status="PASS" endtime="20170803 20:11:05.873"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:05.874">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:11:05.874" status="PASS" endtime="20170803 20:11:05.874"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:06.202">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:11:05.875" status="PASS" endtime="20170803 20:11:06.203"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:11:06.203">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:11:06.203">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:11:05.874" status="PASS" endtime="20170803 20:11:06.203"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:06.203">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:11:06.203" status="PASS" endtime="20170803 20:11:06.203"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:06.204">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:11:06.204" status="PASS" endtime="20170803 20:11:06.204"></status>
</kw>
<status starttime="20170803 20:11:05.871" status="PASS" endtime="20170803 20:11:06.204"></status>
</kw>
<status starttime="20170803 20:11:05.867" status="PASS" endtime="20170803 20:11:06.204"></status>
</kw>
<status starttime="20170803 20:11:05.867" status="PASS" endtime="20170803 20:11:06.204"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:06.205">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170803 20:11:06.205" status="PASS" endtime="20170803 20:11:06.205"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:06.207">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:11:06.206" status="PASS" endtime="20170803 20:11:06.207"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:06.208">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:11:06.208" status="PASS" endtime="20170803 20:11:06.208"></status>
</kw>
<status starttime="20170803 20:11:06.207" status="PASS" endtime="20170803 20:11:06.208"></status>
</kw>
<status starttime="20170803 20:11:06.206" status="PASS" endtime="20170803 20:11:06.208"></status>
</kw>
<status starttime="20170803 20:11:06.205" status="PASS" endtime="20170803 20:11:06.209"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:06.325">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:11:06.325">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:11:06.209" status="PASS" endtime="20170803 20:11:06.325"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:06.327">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:11:06.326" status="PASS" endtime="20170803 20:11:06.327"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:06.329">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:11:06.328" status="PASS" endtime="20170803 20:11:06.329"></status>
</kw>
<status starttime="20170803 20:11:06.328" status="PASS" endtime="20170803 20:11:06.329"></status>
</kw>
<status starttime="20170803 20:11:06.326" status="PASS" endtime="20170803 20:11:06.329"></status>
</kw>
<status starttime="20170803 20:11:06.326" status="PASS" endtime="20170803 20:11:06.329"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:11:06.329">Delete All Sessions</msg>
<status starttime="20170803 20:11:06.329" status="PASS" endtime="20170803 20:11:06.330"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:11:06.330">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:11:05.866" status="PASS" endtime="20170803 20:11:06.330"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:06.330">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:11:06.330" status="PASS" endtime="20170803 20:11:06.330"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:06.331">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:11:06.331">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:11:06.331">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:11:06.331" status="PASS" endtime="20170803 20:11:06.331"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:11:06.332">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170803 20:11:05.866" status="PASS" endtime="20170803 20:11:06.332"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:11:06.332">${host_state} = Quiesced</msg>
<status starttime="20170803 20:11:05.865" status="PASS" endtime="20170803 20:11:06.332"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170803 20:11:06.333">Running != Quiesced</msg>
<status starttime="20170803 20:11:06.332" status="FAIL" endtime="20170803 20:11:06.333"></status>
</kw>
<status starttime="20170803 20:11:05.586" status="FAIL" endtime="20170803 20:11:06.333"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:16.337">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:11:16.337" status="PASS" endtime="20170803 20:11:16.338"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:16.338">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:11:16.338" status="PASS" endtime="20170803 20:11:16.338"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:16.339">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:11:16.339" status="PASS" endtime="20170803 20:11:16.339"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:16.340">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:11:16.339" status="PASS" endtime="20170803 20:11:16.340"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:16.516">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:11:16.340" status="PASS" endtime="20170803 20:11:16.516"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:11:16.516">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:11:16.516">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:11:16.340" status="PASS" endtime="20170803 20:11:16.516"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:16.517">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:11:16.517" status="PASS" endtime="20170803 20:11:16.517"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:16.518">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:11:16.517" status="PASS" endtime="20170803 20:11:16.518"></status>
</kw>
<status starttime="20170803 20:11:16.337" status="PASS" endtime="20170803 20:11:16.518"></status>
</kw>
<status starttime="20170803 20:11:16.336" status="PASS" endtime="20170803 20:11:16.518"></status>
</kw>
<status starttime="20170803 20:11:16.336" status="PASS" endtime="20170803 20:11:16.518"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:16.519">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170803 20:11:16.518" status="PASS" endtime="20170803 20:11:16.519"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:16.521">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:11:16.520" status="PASS" endtime="20170803 20:11:16.521"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:16.522">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:11:16.521" status="PASS" endtime="20170803 20:11:16.522"></status>
</kw>
<status starttime="20170803 20:11:16.521" status="PASS" endtime="20170803 20:11:16.522"></status>
</kw>
<status starttime="20170803 20:11:16.519" status="PASS" endtime="20170803 20:11:16.522"></status>
</kw>
<status starttime="20170803 20:11:16.519" status="PASS" endtime="20170803 20:11:16.522"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:16.613">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:11:16.613">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:11:16.522" status="PASS" endtime="20170803 20:11:16.613"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:16.615">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:11:16.614" status="PASS" endtime="20170803 20:11:16.615"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:16.616">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:11:16.615" status="PASS" endtime="20170803 20:11:16.616"></status>
</kw>
<status starttime="20170803 20:11:16.615" status="PASS" endtime="20170803 20:11:16.616"></status>
</kw>
<status starttime="20170803 20:11:16.614" status="PASS" endtime="20170803 20:11:16.616"></status>
</kw>
<status starttime="20170803 20:11:16.613" status="PASS" endtime="20170803 20:11:16.616"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:11:16.616">Delete All Sessions</msg>
<status starttime="20170803 20:11:16.616" status="PASS" endtime="20170803 20:11:16.617"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:11:16.617">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:11:16.335" status="PASS" endtime="20170803 20:11:16.617"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:16.617">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:11:16.617" status="PASS" endtime="20170803 20:11:16.617"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:16.618">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:11:16.618">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:11:16.618">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:11:16.618" status="PASS" endtime="20170803 20:11:16.618"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:11:16.618">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170803 20:11:16.334" status="PASS" endtime="20170803 20:11:16.618"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:11:16.619">${power_state} = On</msg>
<status starttime="20170803 20:11:16.334" status="PASS" endtime="20170803 20:11:16.619"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170803 20:11:16.619" status="PASS" endtime="20170803 20:11:16.619"></status>
</kw>
<status starttime="20170803 20:11:16.334" status="PASS" endtime="20170803 20:11:16.619"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:16.623">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:11:16.623" status="PASS" endtime="20170803 20:11:16.624"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:16.624">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:11:16.624" status="PASS" endtime="20170803 20:11:16.624"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:16.625">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:11:16.625" status="PASS" endtime="20170803 20:11:16.625"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:16.626">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:11:16.625" status="PASS" endtime="20170803 20:11:16.626"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:16.866">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:11:16.626" status="PASS" endtime="20170803 20:11:16.866"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:11:16.866">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:11:16.866">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:11:16.626" status="PASS" endtime="20170803 20:11:16.866"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:16.867">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:11:16.866" status="PASS" endtime="20170803 20:11:16.867"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:16.867">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:11:16.867" status="PASS" endtime="20170803 20:11:16.867"></status>
</kw>
<status starttime="20170803 20:11:16.622" status="PASS" endtime="20170803 20:11:16.868"></status>
</kw>
<status starttime="20170803 20:11:16.622" status="PASS" endtime="20170803 20:11:16.868"></status>
</kw>
<status starttime="20170803 20:11:16.621" status="PASS" endtime="20170803 20:11:16.868"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:16.868">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170803 20:11:16.868" status="PASS" endtime="20170803 20:11:16.868"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:16.870">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:11:16.870" status="PASS" endtime="20170803 20:11:16.871"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:16.871">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:11:16.871" status="PASS" endtime="20170803 20:11:16.871"></status>
</kw>
<status starttime="20170803 20:11:16.871" status="PASS" endtime="20170803 20:11:16.872"></status>
</kw>
<status starttime="20170803 20:11:16.869" status="PASS" endtime="20170803 20:11:16.872"></status>
</kw>
<status starttime="20170803 20:11:16.869" status="PASS" endtime="20170803 20:11:16.872"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:17.066">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:11:17.066">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:11:16.872" status="PASS" endtime="20170803 20:11:17.066"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:17.068">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:11:17.068" status="PASS" endtime="20170803 20:11:17.068"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:17.069">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:11:17.069" status="PASS" endtime="20170803 20:11:17.069"></status>
</kw>
<status starttime="20170803 20:11:17.068" status="PASS" endtime="20170803 20:11:17.069"></status>
</kw>
<status starttime="20170803 20:11:17.067" status="PASS" endtime="20170803 20:11:17.069"></status>
</kw>
<status starttime="20170803 20:11:17.067" status="PASS" endtime="20170803 20:11:17.070"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:11:17.070">Delete All Sessions</msg>
<status starttime="20170803 20:11:17.070" status="PASS" endtime="20170803 20:11:17.070"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:11:17.070">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:11:16.621" status="PASS" endtime="20170803 20:11:17.070"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:17.071">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:11:17.071" status="PASS" endtime="20170803 20:11:17.071"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:17.072">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:11:17.072">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:11:17.072">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:11:17.071" status="PASS" endtime="20170803 20:11:17.072"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:11:17.072">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170803 20:11:16.620" status="PASS" endtime="20170803 20:11:17.072"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:11:17.072">${host_state} = Quiesced</msg>
<status starttime="20170803 20:11:16.620" status="PASS" endtime="20170803 20:11:17.072"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170803 20:11:17.073">Running != Quiesced</msg>
<status starttime="20170803 20:11:17.073" status="FAIL" endtime="20170803 20:11:17.073"></status>
</kw>
<status starttime="20170803 20:11:16.333" status="FAIL" endtime="20170803 20:11:17.073"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:27.078">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:11:27.078" status="PASS" endtime="20170803 20:11:27.079"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:27.079">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:11:27.079" status="PASS" endtime="20170803 20:11:27.079"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:27.080">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:11:27.080" status="PASS" endtime="20170803 20:11:27.080"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:27.081">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:11:27.080" status="PASS" endtime="20170803 20:11:27.081"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:27.281">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:11:27.081" status="PASS" endtime="20170803 20:11:27.281"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:11:27.281">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:11:27.281">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:11:27.081" status="PASS" endtime="20170803 20:11:27.281"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:27.282">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:11:27.281" status="PASS" endtime="20170803 20:11:27.282"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:27.283">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:11:27.282" status="PASS" endtime="20170803 20:11:27.283"></status>
</kw>
<status starttime="20170803 20:11:27.077" status="PASS" endtime="20170803 20:11:27.283"></status>
</kw>
<status starttime="20170803 20:11:27.077" status="PASS" endtime="20170803 20:11:27.283"></status>
</kw>
<status starttime="20170803 20:11:27.076" status="PASS" endtime="20170803 20:11:27.283"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:27.284">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170803 20:11:27.283" status="PASS" endtime="20170803 20:11:27.284"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:27.286">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:11:27.285" status="PASS" endtime="20170803 20:11:27.286"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:27.287">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:11:27.286" status="PASS" endtime="20170803 20:11:27.287"></status>
</kw>
<status starttime="20170803 20:11:27.286" status="PASS" endtime="20170803 20:11:27.287"></status>
</kw>
<status starttime="20170803 20:11:27.284" status="PASS" endtime="20170803 20:11:27.287"></status>
</kw>
<status starttime="20170803 20:11:27.284" status="PASS" endtime="20170803 20:11:27.287"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:27.362">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:11:27.362">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:11:27.288" status="PASS" endtime="20170803 20:11:27.362"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:27.364">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:11:27.363" status="PASS" endtime="20170803 20:11:27.364"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:27.365">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:11:27.364" status="PASS" endtime="20170803 20:11:27.365"></status>
</kw>
<status starttime="20170803 20:11:27.364" status="PASS" endtime="20170803 20:11:27.365"></status>
</kw>
<status starttime="20170803 20:11:27.363" status="PASS" endtime="20170803 20:11:27.365"></status>
</kw>
<status starttime="20170803 20:11:27.362" status="PASS" endtime="20170803 20:11:27.365"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:11:27.365">Delete All Sessions</msg>
<status starttime="20170803 20:11:27.365" status="PASS" endtime="20170803 20:11:27.365"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:11:27.366">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:11:27.076" status="PASS" endtime="20170803 20:11:27.366"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:27.366">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:11:27.366" status="PASS" endtime="20170803 20:11:27.366"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:27.367">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:11:27.367">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:11:27.367">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:11:27.367" status="PASS" endtime="20170803 20:11:27.367"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:11:27.367">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170803 20:11:27.075" status="PASS" endtime="20170803 20:11:27.367"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:11:27.368">${power_state} = On</msg>
<status starttime="20170803 20:11:27.074" status="PASS" endtime="20170803 20:11:27.368"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170803 20:11:27.368" status="PASS" endtime="20170803 20:11:27.368"></status>
</kw>
<status starttime="20170803 20:11:27.074" status="PASS" endtime="20170803 20:11:27.368"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:27.372">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:11:27.372" status="PASS" endtime="20170803 20:11:27.372"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:27.373">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:11:27.373" status="PASS" endtime="20170803 20:11:27.373"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:27.374">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:11:27.373" status="PASS" endtime="20170803 20:11:27.374"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:27.374">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:11:27.374" status="PASS" endtime="20170803 20:11:27.374"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:27.588">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:11:27.375" status="PASS" endtime="20170803 20:11:27.588"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:11:27.588">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:11:27.589">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:11:27.374" status="PASS" endtime="20170803 20:11:27.589"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:27.589">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:11:27.589" status="PASS" endtime="20170803 20:11:27.589"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:27.590">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:11:27.590" status="PASS" endtime="20170803 20:11:27.590"></status>
</kw>
<status starttime="20170803 20:11:27.371" status="PASS" endtime="20170803 20:11:27.590"></status>
</kw>
<status starttime="20170803 20:11:27.371" status="PASS" endtime="20170803 20:11:27.590"></status>
</kw>
<status starttime="20170803 20:11:27.370" status="PASS" endtime="20170803 20:11:27.590"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:27.591">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170803 20:11:27.591" status="PASS" endtime="20170803 20:11:27.591"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:27.593">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:11:27.592" status="PASS" endtime="20170803 20:11:27.593"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:27.594">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:11:27.594" status="PASS" endtime="20170803 20:11:27.594"></status>
</kw>
<status starttime="20170803 20:11:27.593" status="PASS" endtime="20170803 20:11:27.594"></status>
</kw>
<status starttime="20170803 20:11:27.592" status="PASS" endtime="20170803 20:11:27.594"></status>
</kw>
<status starttime="20170803 20:11:27.591" status="PASS" endtime="20170803 20:11:27.594"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:27.707">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:11:27.707">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:11:27.594" status="PASS" endtime="20170803 20:11:27.707"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:27.709">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:11:27.709" status="PASS" endtime="20170803 20:11:27.709"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:27.710">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:11:27.710" status="PASS" endtime="20170803 20:11:27.710"></status>
</kw>
<status starttime="20170803 20:11:27.710" status="PASS" endtime="20170803 20:11:27.711"></status>
</kw>
<status starttime="20170803 20:11:27.708" status="PASS" endtime="20170803 20:11:27.711"></status>
</kw>
<status starttime="20170803 20:11:27.707" status="PASS" endtime="20170803 20:11:27.711"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:11:27.711">Delete All Sessions</msg>
<status starttime="20170803 20:11:27.711" status="PASS" endtime="20170803 20:11:27.711"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:11:27.711">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:11:27.369" status="PASS" endtime="20170803 20:11:27.711"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:27.712">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:11:27.712" status="PASS" endtime="20170803 20:11:27.712"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:27.713">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:11:27.713">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:11:27.713">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:11:27.712" status="PASS" endtime="20170803 20:11:27.713"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:11:27.713">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170803 20:11:27.369" status="PASS" endtime="20170803 20:11:27.713"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:11:27.713">${host_state} = Quiesced</msg>
<status starttime="20170803 20:11:27.368" status="PASS" endtime="20170803 20:11:27.713"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170803 20:11:27.714">Running != Quiesced</msg>
<status starttime="20170803 20:11:27.714" status="FAIL" endtime="20170803 20:11:27.714"></status>
</kw>
<status starttime="20170803 20:11:27.074" status="FAIL" endtime="20170803 20:11:27.714"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:37.719">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:11:37.719" status="PASS" endtime="20170803 20:11:37.720"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:37.720">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:11:37.720" status="PASS" endtime="20170803 20:11:37.720"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:37.721">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:11:37.721" status="PASS" endtime="20170803 20:11:37.721"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:37.722">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:11:37.721" status="PASS" endtime="20170803 20:11:37.722"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:37.927">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:11:37.722" status="PASS" endtime="20170803 20:11:37.927"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:11:37.927">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:11:37.927">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:11:37.722" status="PASS" endtime="20170803 20:11:37.927"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:37.928">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:11:37.927" status="PASS" endtime="20170803 20:11:37.928"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:37.928">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:11:37.928" status="PASS" endtime="20170803 20:11:37.929"></status>
</kw>
<status starttime="20170803 20:11:37.718" status="PASS" endtime="20170803 20:11:37.929"></status>
</kw>
<status starttime="20170803 20:11:37.718" status="PASS" endtime="20170803 20:11:37.929"></status>
</kw>
<status starttime="20170803 20:11:37.717" status="PASS" endtime="20170803 20:11:37.929"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:37.929">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170803 20:11:37.929" status="PASS" endtime="20170803 20:11:37.930"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:37.932">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:11:37.931" status="PASS" endtime="20170803 20:11:37.932"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:37.932">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:11:37.932" status="PASS" endtime="20170803 20:11:37.933"></status>
</kw>
<status starttime="20170803 20:11:37.932" status="PASS" endtime="20170803 20:11:37.933"></status>
</kw>
<status starttime="20170803 20:11:37.930" status="PASS" endtime="20170803 20:11:37.933"></status>
</kw>
<status starttime="20170803 20:11:37.930" status="PASS" endtime="20170803 20:11:37.933"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:37.997">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:11:37.998">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:11:37.933" status="PASS" endtime="20170803 20:11:37.998"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:37.999">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:11:37.999" status="PASS" endtime="20170803 20:11:37.999"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:38.001">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:11:38.000" status="PASS" endtime="20170803 20:11:38.001"></status>
</kw>
<status starttime="20170803 20:11:38.000" status="PASS" endtime="20170803 20:11:38.001"></status>
</kw>
<status starttime="20170803 20:11:37.998" status="PASS" endtime="20170803 20:11:38.001"></status>
</kw>
<status starttime="20170803 20:11:37.998" status="PASS" endtime="20170803 20:11:38.001"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:11:38.002">Delete All Sessions</msg>
<status starttime="20170803 20:11:38.001" status="PASS" endtime="20170803 20:11:38.002"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:11:38.002">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:11:37.716" status="PASS" endtime="20170803 20:11:38.002"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:38.002">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:11:38.002" status="PASS" endtime="20170803 20:11:38.003"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:38.003">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:11:38.003">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:11:38.003">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:11:38.003" status="PASS" endtime="20170803 20:11:38.003"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:11:38.003">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170803 20:11:37.716" status="PASS" endtime="20170803 20:11:38.004"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:11:38.004">${power_state} = On</msg>
<status starttime="20170803 20:11:37.716" status="PASS" endtime="20170803 20:11:38.004"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170803 20:11:38.004" status="PASS" endtime="20170803 20:11:38.004"></status>
</kw>
<status starttime="20170803 20:11:37.715" status="PASS" endtime="20170803 20:11:38.005"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:38.008">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:11:38.008" status="PASS" endtime="20170803 20:11:38.008"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:38.009">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:11:38.009" status="PASS" endtime="20170803 20:11:38.009"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:38.010">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:11:38.009" status="PASS" endtime="20170803 20:11:38.010"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:38.010">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:11:38.010" status="PASS" endtime="20170803 20:11:38.010"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:38.197">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:11:38.011" status="PASS" endtime="20170803 20:11:38.198"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:11:38.198">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:11:38.198">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:11:38.011" status="PASS" endtime="20170803 20:11:38.198"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:38.199">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:11:38.198" status="PASS" endtime="20170803 20:11:38.199"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:38.199">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:11:38.199" status="PASS" endtime="20170803 20:11:38.199"></status>
</kw>
<status starttime="20170803 20:11:38.007" status="PASS" endtime="20170803 20:11:38.199"></status>
</kw>
<status starttime="20170803 20:11:38.007" status="PASS" endtime="20170803 20:11:38.200"></status>
</kw>
<status starttime="20170803 20:11:38.006" status="PASS" endtime="20170803 20:11:38.200"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:38.200">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170803 20:11:38.200" status="PASS" endtime="20170803 20:11:38.200"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:38.203">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:11:38.202" status="PASS" endtime="20170803 20:11:38.203"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:38.204">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:11:38.203" status="PASS" endtime="20170803 20:11:38.204"></status>
</kw>
<status starttime="20170803 20:11:38.203" status="PASS" endtime="20170803 20:11:38.204"></status>
</kw>
<status starttime="20170803 20:11:38.201" status="PASS" endtime="20170803 20:11:38.204"></status>
</kw>
<status starttime="20170803 20:11:38.201" status="PASS" endtime="20170803 20:11:38.204"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:38.294">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:11:38.294">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:11:38.204" status="PASS" endtime="20170803 20:11:38.294"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:38.296">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:11:38.295" status="PASS" endtime="20170803 20:11:38.296"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:38.297">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:11:38.297" status="PASS" endtime="20170803 20:11:38.297"></status>
</kw>
<status starttime="20170803 20:11:38.296" status="PASS" endtime="20170803 20:11:38.297"></status>
</kw>
<status starttime="20170803 20:11:38.295" status="PASS" endtime="20170803 20:11:38.297"></status>
</kw>
<status starttime="20170803 20:11:38.295" status="PASS" endtime="20170803 20:11:38.297"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:11:38.298">Delete All Sessions</msg>
<status starttime="20170803 20:11:38.298" status="PASS" endtime="20170803 20:11:38.298"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:11:38.298">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:11:38.006" status="PASS" endtime="20170803 20:11:38.298"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:38.299">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:11:38.298" status="PASS" endtime="20170803 20:11:38.299"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:38.299">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:11:38.299">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:11:38.299">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:11:38.299" status="PASS" endtime="20170803 20:11:38.299"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:11:38.300">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170803 20:11:38.005" status="PASS" endtime="20170803 20:11:38.300"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:11:38.300">${host_state} = Quiesced</msg>
<status starttime="20170803 20:11:38.005" status="PASS" endtime="20170803 20:11:38.300"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170803 20:11:38.301">Running != Quiesced</msg>
<status starttime="20170803 20:11:38.300" status="FAIL" endtime="20170803 20:11:38.301"></status>
</kw>
<status starttime="20170803 20:11:37.715" status="FAIL" endtime="20170803 20:11:38.301"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:48.306">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:11:48.305" status="PASS" endtime="20170803 20:11:48.306"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:48.307">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:11:48.306" status="PASS" endtime="20170803 20:11:48.307"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:48.307">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:11:48.307" status="PASS" endtime="20170803 20:11:48.307"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:48.308">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:11:48.308" status="PASS" endtime="20170803 20:11:48.308"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:48.586">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:11:48.309" status="PASS" endtime="20170803 20:11:48.586"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:11:48.586">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:11:48.586">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:11:48.309" status="PASS" endtime="20170803 20:11:48.586"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:48.587">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:11:48.587" status="PASS" endtime="20170803 20:11:48.587"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:48.588">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:11:48.587" status="PASS" endtime="20170803 20:11:48.588"></status>
</kw>
<status starttime="20170803 20:11:48.305" status="PASS" endtime="20170803 20:11:48.588"></status>
</kw>
<status starttime="20170803 20:11:48.304" status="PASS" endtime="20170803 20:11:48.588"></status>
</kw>
<status starttime="20170803 20:11:48.304" status="PASS" endtime="20170803 20:11:48.588"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:48.588">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170803 20:11:48.588" status="PASS" endtime="20170803 20:11:48.589"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:48.591">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:11:48.590" status="PASS" endtime="20170803 20:11:48.591"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:48.592">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:11:48.591" status="PASS" endtime="20170803 20:11:48.592"></status>
</kw>
<status starttime="20170803 20:11:48.591" status="PASS" endtime="20170803 20:11:48.592"></status>
</kw>
<status starttime="20170803 20:11:48.589" status="PASS" endtime="20170803 20:11:48.592"></status>
</kw>
<status starttime="20170803 20:11:48.589" status="PASS" endtime="20170803 20:11:48.592"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:48.671">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:11:48.671">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:11:48.592" status="PASS" endtime="20170803 20:11:48.671"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:48.673">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:11:48.672" status="PASS" endtime="20170803 20:11:48.673"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:48.674">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:11:48.673" status="PASS" endtime="20170803 20:11:48.674"></status>
</kw>
<status starttime="20170803 20:11:48.673" status="PASS" endtime="20170803 20:11:48.674"></status>
</kw>
<status starttime="20170803 20:11:48.672" status="PASS" endtime="20170803 20:11:48.674"></status>
</kw>
<status starttime="20170803 20:11:48.671" status="PASS" endtime="20170803 20:11:48.674"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:11:48.674">Delete All Sessions</msg>
<status starttime="20170803 20:11:48.674" status="PASS" endtime="20170803 20:11:48.675"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:11:48.675">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:11:48.303" status="PASS" endtime="20170803 20:11:48.675"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:48.675">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:11:48.675" status="PASS" endtime="20170803 20:11:48.675"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:48.676">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:11:48.676">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:11:48.676">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:11:48.676" status="PASS" endtime="20170803 20:11:48.676"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:11:48.677">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170803 20:11:48.303" status="PASS" endtime="20170803 20:11:48.677"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:11:48.677">${power_state} = On</msg>
<status starttime="20170803 20:11:48.302" status="PASS" endtime="20170803 20:11:48.677"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170803 20:11:48.677" status="PASS" endtime="20170803 20:11:48.677"></status>
</kw>
<status starttime="20170803 20:11:48.302" status="PASS" endtime="20170803 20:11:48.678"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:48.681">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:11:48.681" status="PASS" endtime="20170803 20:11:48.682"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:48.682">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:11:48.682" status="PASS" endtime="20170803 20:11:48.682"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:48.683">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:11:48.683" status="PASS" endtime="20170803 20:11:48.683"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:48.684">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:11:48.684" status="PASS" endtime="20170803 20:11:48.684"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:48.877">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:11:48.685" status="PASS" endtime="20170803 20:11:48.877"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:11:48.877">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:11:48.877">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:11:48.685" status="PASS" endtime="20170803 20:11:48.877"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:48.878">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:11:48.877" status="PASS" endtime="20170803 20:11:48.878"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:48.878">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:11:48.878" status="PASS" endtime="20170803 20:11:48.879"></status>
</kw>
<status starttime="20170803 20:11:48.681" status="PASS" endtime="20170803 20:11:48.879"></status>
</kw>
<status starttime="20170803 20:11:48.680" status="PASS" endtime="20170803 20:11:48.879"></status>
</kw>
<status starttime="20170803 20:11:48.679" status="PASS" endtime="20170803 20:11:48.879"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:48.879">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170803 20:11:48.879" status="PASS" endtime="20170803 20:11:48.879"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:48.881">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:11:48.881" status="PASS" endtime="20170803 20:11:48.882"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:48.882">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:11:48.882" status="PASS" endtime="20170803 20:11:48.883"></status>
</kw>
<status starttime="20170803 20:11:48.882" status="PASS" endtime="20170803 20:11:48.883"></status>
</kw>
<status starttime="20170803 20:11:48.880" status="PASS" endtime="20170803 20:11:48.883"></status>
</kw>
<status starttime="20170803 20:11:48.880" status="PASS" endtime="20170803 20:11:48.883"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:48.971">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:11:48.971">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:11:48.883" status="PASS" endtime="20170803 20:11:48.971"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:48.977">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:11:48.973" status="PASS" endtime="20170803 20:11:48.977"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:48.978">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:11:48.978" status="PASS" endtime="20170803 20:11:48.978"></status>
</kw>
<status starttime="20170803 20:11:48.977" status="PASS" endtime="20170803 20:11:48.978"></status>
</kw>
<status starttime="20170803 20:11:48.972" status="PASS" endtime="20170803 20:11:48.979"></status>
</kw>
<status starttime="20170803 20:11:48.972" status="PASS" endtime="20170803 20:11:48.979"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:11:48.979">Delete All Sessions</msg>
<status starttime="20170803 20:11:48.979" status="PASS" endtime="20170803 20:11:48.979"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:11:48.979">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:11:48.679" status="PASS" endtime="20170803 20:11:48.979"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:48.980">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:11:48.980" status="PASS" endtime="20170803 20:11:48.980"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:48.981">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:11:48.981">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:11:48.981">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:11:48.980" status="PASS" endtime="20170803 20:11:48.981"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:11:48.981">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170803 20:11:48.678" status="PASS" endtime="20170803 20:11:48.981"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:11:48.981">${host_state} = Quiesced</msg>
<status starttime="20170803 20:11:48.678" status="PASS" endtime="20170803 20:11:48.981"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170803 20:11:48.982">Running != Quiesced</msg>
<status starttime="20170803 20:11:48.982" status="FAIL" endtime="20170803 20:11:48.982"></status>
</kw>
<status starttime="20170803 20:11:48.301" status="FAIL" endtime="20170803 20:11:48.982"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:58.987">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:11:58.987" status="PASS" endtime="20170803 20:11:58.988"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:58.988">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:11:58.988" status="PASS" endtime="20170803 20:11:58.988"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:58.989">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:11:58.988" status="PASS" endtime="20170803 20:11:58.989"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:58.990">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:11:58.989" status="PASS" endtime="20170803 20:11:58.990"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:59.292">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:11:58.990" status="PASS" endtime="20170803 20:11:59.293"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:11:59.293">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:11:59.293">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:11:58.990" status="PASS" endtime="20170803 20:11:59.293"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:59.293">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:11:59.293" status="PASS" endtime="20170803 20:11:59.294"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:59.294">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:11:59.294" status="PASS" endtime="20170803 20:11:59.294"></status>
</kw>
<status starttime="20170803 20:11:58.986" status="PASS" endtime="20170803 20:11:59.294"></status>
</kw>
<status starttime="20170803 20:11:58.986" status="PASS" endtime="20170803 20:11:59.294"></status>
</kw>
<status starttime="20170803 20:11:58.985" status="PASS" endtime="20170803 20:11:59.295"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:59.295">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170803 20:11:59.295" status="PASS" endtime="20170803 20:11:59.295"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:59.297">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:11:59.296" status="PASS" endtime="20170803 20:11:59.297"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:59.298">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:11:59.298" status="PASS" endtime="20170803 20:11:59.298"></status>
</kw>
<status starttime="20170803 20:11:59.297" status="PASS" endtime="20170803 20:11:59.298"></status>
</kw>
<status starttime="20170803 20:11:59.296" status="PASS" endtime="20170803 20:11:59.298"></status>
</kw>
<status starttime="20170803 20:11:59.295" status="PASS" endtime="20170803 20:11:59.298"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:59.364">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:11:59.364">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:11:59.299" status="PASS" endtime="20170803 20:11:59.364"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:59.366">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:11:59.365" status="PASS" endtime="20170803 20:11:59.366"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:59.367">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:11:59.366" status="PASS" endtime="20170803 20:11:59.367"></status>
</kw>
<status starttime="20170803 20:11:59.366" status="PASS" endtime="20170803 20:11:59.367"></status>
</kw>
<status starttime="20170803 20:11:59.365" status="PASS" endtime="20170803 20:11:59.367"></status>
</kw>
<status starttime="20170803 20:11:59.364" status="PASS" endtime="20170803 20:11:59.367"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:11:59.367">Delete All Sessions</msg>
<status starttime="20170803 20:11:59.367" status="PASS" endtime="20170803 20:11:59.368"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:11:59.368">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:11:58.985" status="PASS" endtime="20170803 20:11:59.368"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:59.368">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:11:59.368" status="PASS" endtime="20170803 20:11:59.369"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:59.369">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:11:59.369">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:11:59.369">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:11:59.369" status="PASS" endtime="20170803 20:11:59.369"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:11:59.370">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170803 20:11:58.984" status="PASS" endtime="20170803 20:11:59.370"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:11:59.370">${power_state} = On</msg>
<status starttime="20170803 20:11:58.984" status="PASS" endtime="20170803 20:11:59.370"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170803 20:11:59.370" status="PASS" endtime="20170803 20:11:59.370"></status>
</kw>
<status starttime="20170803 20:11:58.983" status="PASS" endtime="20170803 20:11:59.371"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:59.374">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:11:59.374" status="PASS" endtime="20170803 20:11:59.375"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:59.375">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:11:59.375" status="PASS" endtime="20170803 20:11:59.375"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:59.376">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:11:59.376" status="PASS" endtime="20170803 20:11:59.376"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:59.377">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:11:59.376" status="PASS" endtime="20170803 20:11:59.377"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:59.598">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:11:59.377" status="PASS" endtime="20170803 20:11:59.598"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:11:59.598">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:11:59.598">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:11:59.377" status="PASS" endtime="20170803 20:11:59.598"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:59.599">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:11:59.598" status="PASS" endtime="20170803 20:11:59.599"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:59.599">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:11:59.599" status="PASS" endtime="20170803 20:11:59.599"></status>
</kw>
<status starttime="20170803 20:11:59.373" status="PASS" endtime="20170803 20:11:59.600"></status>
</kw>
<status starttime="20170803 20:11:59.373" status="PASS" endtime="20170803 20:11:59.600"></status>
</kw>
<status starttime="20170803 20:11:59.372" status="PASS" endtime="20170803 20:11:59.600"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:59.600">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170803 20:11:59.600" status="PASS" endtime="20170803 20:11:59.600"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:59.603">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:11:59.602" status="PASS" endtime="20170803 20:11:59.603"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:59.604">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:11:59.604" status="PASS" endtime="20170803 20:11:59.604"></status>
</kw>
<status starttime="20170803 20:11:59.603" status="PASS" endtime="20170803 20:11:59.604"></status>
</kw>
<status starttime="20170803 20:11:59.601" status="PASS" endtime="20170803 20:11:59.604"></status>
</kw>
<status starttime="20170803 20:11:59.601" status="PASS" endtime="20170803 20:11:59.604"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:59.694">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:11:59.694">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:11:59.605" status="PASS" endtime="20170803 20:11:59.694"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:59.696">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:11:59.695" status="PASS" endtime="20170803 20:11:59.696"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:59.697">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:11:59.696" status="PASS" endtime="20170803 20:11:59.697"></status>
</kw>
<status starttime="20170803 20:11:59.696" status="PASS" endtime="20170803 20:11:59.697"></status>
</kw>
<status starttime="20170803 20:11:59.695" status="PASS" endtime="20170803 20:11:59.697"></status>
</kw>
<status starttime="20170803 20:11:59.694" status="PASS" endtime="20170803 20:11:59.697"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:11:59.697">Delete All Sessions</msg>
<status starttime="20170803 20:11:59.697" status="PASS" endtime="20170803 20:11:59.697"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:11:59.698">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:11:59.372" status="PASS" endtime="20170803 20:11:59.698"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:11:59.698">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:11:59.698" status="PASS" endtime="20170803 20:11:59.698"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:11:59.699">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:11:59.699">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:11:59.699">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:11:59.699" status="PASS" endtime="20170803 20:11:59.699"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:11:59.699">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170803 20:11:59.371" status="PASS" endtime="20170803 20:11:59.699"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:11:59.700">${host_state} = Quiesced</msg>
<status starttime="20170803 20:11:59.371" status="PASS" endtime="20170803 20:11:59.700"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170803 20:11:59.700">Running != Quiesced</msg>
<status starttime="20170803 20:11:59.700" status="FAIL" endtime="20170803 20:11:59.700"></status>
</kw>
<status starttime="20170803 20:11:58.983" status="FAIL" endtime="20170803 20:11:59.701"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:12:09.706">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:12:09.706" status="PASS" endtime="20170803 20:12:09.706"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:09.707">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:12:09.707" status="PASS" endtime="20170803 20:12:09.707"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:09.708">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:12:09.707" status="PASS" endtime="20170803 20:12:09.708"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:09.708">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:12:09.708" status="PASS" endtime="20170803 20:12:09.708"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:12:10.001">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:12:09.709" status="PASS" endtime="20170803 20:12:10.001"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:12:10.001">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:12:10.001">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:12:09.709" status="PASS" endtime="20170803 20:12:10.001"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:12:10.002">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:12:10.001" status="PASS" endtime="20170803 20:12:10.002"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:12:10.002">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:12:10.002" status="PASS" endtime="20170803 20:12:10.002"></status>
</kw>
<status starttime="20170803 20:12:09.705" status="PASS" endtime="20170803 20:12:10.003"></status>
</kw>
<status starttime="20170803 20:12:09.705" status="PASS" endtime="20170803 20:12:10.003"></status>
</kw>
<status starttime="20170803 20:12:09.704" status="PASS" endtime="20170803 20:12:10.003"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:10.003">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170803 20:12:10.003" status="PASS" endtime="20170803 20:12:10.003"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:10.005">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:12:10.005" status="PASS" endtime="20170803 20:12:10.005"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:12:10.006">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:12:10.006" status="PASS" endtime="20170803 20:12:10.007"></status>
</kw>
<status starttime="20170803 20:12:10.006" status="PASS" endtime="20170803 20:12:10.007"></status>
</kw>
<status starttime="20170803 20:12:10.004" status="PASS" endtime="20170803 20:12:10.007"></status>
</kw>
<status starttime="20170803 20:12:10.004" status="PASS" endtime="20170803 20:12:10.007"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:10.072">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:12:10.072">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:12:10.007" status="PASS" endtime="20170803 20:12:10.072"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:10.074">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:12:10.073" status="PASS" endtime="20170803 20:12:10.074"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:12:10.075">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:12:10.074" status="PASS" endtime="20170803 20:12:10.075"></status>
</kw>
<status starttime="20170803 20:12:10.074" status="PASS" endtime="20170803 20:12:10.075"></status>
</kw>
<status starttime="20170803 20:12:10.073" status="PASS" endtime="20170803 20:12:10.075"></status>
</kw>
<status starttime="20170803 20:12:10.072" status="PASS" endtime="20170803 20:12:10.075"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:12:10.076">Delete All Sessions</msg>
<status starttime="20170803 20:12:10.075" status="PASS" endtime="20170803 20:12:10.076"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:12:10.076">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:12:09.703" status="PASS" endtime="20170803 20:12:10.076"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:12:10.076">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:12:10.076" status="PASS" endtime="20170803 20:12:10.077"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:10.077">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:12:10.077">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:12:10.077">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:12:10.077" status="PASS" endtime="20170803 20:12:10.077"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:12:10.078">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170803 20:12:09.702" status="PASS" endtime="20170803 20:12:10.078"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:12:10.078">${power_state} = On</msg>
<status starttime="20170803 20:12:09.702" status="PASS" endtime="20170803 20:12:10.078"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170803 20:12:10.078" status="PASS" endtime="20170803 20:12:10.078"></status>
</kw>
<status starttime="20170803 20:12:09.702" status="PASS" endtime="20170803 20:12:10.079"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:12:10.082">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:12:10.082" status="PASS" endtime="20170803 20:12:10.082"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:10.083">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:12:10.083" status="PASS" endtime="20170803 20:12:10.083"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:10.084">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:12:10.083" status="PASS" endtime="20170803 20:12:10.084"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:10.084">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:12:10.084" status="PASS" endtime="20170803 20:12:10.084"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:12:10.266">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:12:10.085" status="PASS" endtime="20170803 20:12:10.266"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:12:10.266">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:12:10.266">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:12:10.085" status="PASS" endtime="20170803 20:12:10.266"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:12:10.267">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:12:10.266" status="PASS" endtime="20170803 20:12:10.267"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:12:10.267">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:12:10.267" status="PASS" endtime="20170803 20:12:10.267"></status>
</kw>
<status starttime="20170803 20:12:10.081" status="PASS" endtime="20170803 20:12:10.268"></status>
</kw>
<status starttime="20170803 20:12:10.081" status="PASS" endtime="20170803 20:12:10.268"></status>
</kw>
<status starttime="20170803 20:12:10.080" status="PASS" endtime="20170803 20:12:10.268"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:10.268">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170803 20:12:10.268" status="PASS" endtime="20170803 20:12:10.268"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:10.271">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:12:10.270" status="PASS" endtime="20170803 20:12:10.271"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:12:10.271">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:12:10.271" status="PASS" endtime="20170803 20:12:10.272"></status>
</kw>
<status starttime="20170803 20:12:10.271" status="PASS" endtime="20170803 20:12:10.272"></status>
</kw>
<status starttime="20170803 20:12:10.269" status="PASS" endtime="20170803 20:12:10.272"></status>
</kw>
<status starttime="20170803 20:12:10.269" status="PASS" endtime="20170803 20:12:10.272"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:10.362">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:12:10.362">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:12:10.272" status="PASS" endtime="20170803 20:12:10.362"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:10.364">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:12:10.363" status="PASS" endtime="20170803 20:12:10.364"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:12:10.365">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:12:10.364" status="PASS" endtime="20170803 20:12:10.365"></status>
</kw>
<status starttime="20170803 20:12:10.364" status="PASS" endtime="20170803 20:12:10.365"></status>
</kw>
<status starttime="20170803 20:12:10.363" status="PASS" endtime="20170803 20:12:10.365"></status>
</kw>
<status starttime="20170803 20:12:10.362" status="PASS" endtime="20170803 20:12:10.365"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:12:10.365">Delete All Sessions</msg>
<status starttime="20170803 20:12:10.365" status="PASS" endtime="20170803 20:12:10.366"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:12:10.366">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:12:10.080" status="PASS" endtime="20170803 20:12:10.366"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:12:10.366">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:12:10.366" status="PASS" endtime="20170803 20:12:10.366"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:10.367">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:12:10.367">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:12:10.367">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:12:10.367" status="PASS" endtime="20170803 20:12:10.367"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:12:10.367">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170803 20:12:10.079" status="PASS" endtime="20170803 20:12:10.367"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:12:10.368">${host_state} = Quiesced</msg>
<status starttime="20170803 20:12:10.079" status="PASS" endtime="20170803 20:12:10.368"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170803 20:12:10.368">Running != Quiesced</msg>
<status starttime="20170803 20:12:10.368" status="FAIL" endtime="20170803 20:12:10.368"></status>
</kw>
<status starttime="20170803 20:12:09.701" status="FAIL" endtime="20170803 20:12:10.369"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:12:20.374">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:12:20.374" status="PASS" endtime="20170803 20:12:20.374"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:20.375">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:12:20.375" status="PASS" endtime="20170803 20:12:20.375"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:20.376">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:12:20.375" status="PASS" endtime="20170803 20:12:20.376"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:20.376">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:12:20.376" status="PASS" endtime="20170803 20:12:20.376"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:12:20.557">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:12:20.377" status="PASS" endtime="20170803 20:12:20.558"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:12:20.558">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:12:20.558">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:12:20.377" status="PASS" endtime="20170803 20:12:20.558"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:12:20.558">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:12:20.558" status="PASS" endtime="20170803 20:12:20.559"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:12:20.559">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:12:20.559" status="PASS" endtime="20170803 20:12:20.559"></status>
</kw>
<status starttime="20170803 20:12:20.373" status="PASS" endtime="20170803 20:12:20.559"></status>
</kw>
<status starttime="20170803 20:12:20.372" status="PASS" endtime="20170803 20:12:20.559"></status>
</kw>
<status starttime="20170803 20:12:20.372" status="PASS" endtime="20170803 20:12:20.560"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:20.560">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170803 20:12:20.560" status="PASS" endtime="20170803 20:12:20.560"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:20.562">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:12:20.562" status="PASS" endtime="20170803 20:12:20.562"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:12:20.563">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:12:20.563" status="PASS" endtime="20170803 20:12:20.563"></status>
</kw>
<status starttime="20170803 20:12:20.563" status="PASS" endtime="20170803 20:12:20.564"></status>
</kw>
<status starttime="20170803 20:12:20.561" status="PASS" endtime="20170803 20:12:20.564"></status>
</kw>
<status starttime="20170803 20:12:20.561" status="PASS" endtime="20170803 20:12:20.564"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:20.627">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:12:20.627">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:12:20.564" status="PASS" endtime="20170803 20:12:20.627"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:20.630">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:12:20.629" status="PASS" endtime="20170803 20:12:20.630"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:12:20.632">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:12:20.631" status="PASS" endtime="20170803 20:12:20.632"></status>
</kw>
<status starttime="20170803 20:12:20.630" status="PASS" endtime="20170803 20:12:20.632"></status>
</kw>
<status starttime="20170803 20:12:20.628" status="PASS" endtime="20170803 20:12:20.632"></status>
</kw>
<status starttime="20170803 20:12:20.628" status="PASS" endtime="20170803 20:12:20.632"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:12:20.633">Delete All Sessions</msg>
<status starttime="20170803 20:12:20.632" status="PASS" endtime="20170803 20:12:20.633"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:12:20.633">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:12:20.371" status="PASS" endtime="20170803 20:12:20.633"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:12:20.634">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:12:20.633" status="PASS" endtime="20170803 20:12:20.634"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:20.634">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:12:20.634">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:12:20.634">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:12:20.634" status="PASS" endtime="20170803 20:12:20.634"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:12:20.635">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170803 20:12:20.370" status="PASS" endtime="20170803 20:12:20.635"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:12:20.635">${power_state} = On</msg>
<status starttime="20170803 20:12:20.370" status="PASS" endtime="20170803 20:12:20.635"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170803 20:12:20.635" status="PASS" endtime="20170803 20:12:20.635"></status>
</kw>
<status starttime="20170803 20:12:20.370" status="PASS" endtime="20170803 20:12:20.636"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:12:20.639">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:12:20.639" status="PASS" endtime="20170803 20:12:20.639"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:20.640">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:12:20.640" status="PASS" endtime="20170803 20:12:20.640"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:20.641">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:12:20.640" status="PASS" endtime="20170803 20:12:20.641"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:20.641">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:12:20.641" status="PASS" endtime="20170803 20:12:20.641"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:12:20.936">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:12:20.642" status="PASS" endtime="20170803 20:12:20.936"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:12:20.936">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:12:20.936">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:12:20.642" status="PASS" endtime="20170803 20:12:20.936"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:12:20.937">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:12:20.936" status="PASS" endtime="20170803 20:12:20.937"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:12:20.938">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:12:20.937" status="PASS" endtime="20170803 20:12:20.938"></status>
</kw>
<status starttime="20170803 20:12:20.638" status="PASS" endtime="20170803 20:12:20.938"></status>
</kw>
<status starttime="20170803 20:12:20.638" status="PASS" endtime="20170803 20:12:20.938"></status>
</kw>
<status starttime="20170803 20:12:20.637" status="PASS" endtime="20170803 20:12:20.938"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:20.939">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170803 20:12:20.938" status="PASS" endtime="20170803 20:12:20.939"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:20.941">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:12:20.940" status="PASS" endtime="20170803 20:12:20.941"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:12:20.942">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:12:20.942" status="PASS" endtime="20170803 20:12:20.942"></status>
</kw>
<status starttime="20170803 20:12:20.941" status="PASS" endtime="20170803 20:12:20.942"></status>
</kw>
<status starttime="20170803 20:12:20.939" status="PASS" endtime="20170803 20:12:20.942"></status>
</kw>
<status starttime="20170803 20:12:20.939" status="PASS" endtime="20170803 20:12:20.942"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:21.037">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:12:21.037">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:12:20.943" status="PASS" endtime="20170803 20:12:21.037"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:21.039">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:12:21.038" status="PASS" endtime="20170803 20:12:21.039"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:12:21.040">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:12:21.040" status="PASS" endtime="20170803 20:12:21.040"></status>
</kw>
<status starttime="20170803 20:12:21.039" status="PASS" endtime="20170803 20:12:21.040"></status>
</kw>
<status starttime="20170803 20:12:21.038" status="PASS" endtime="20170803 20:12:21.040"></status>
</kw>
<status starttime="20170803 20:12:21.037" status="PASS" endtime="20170803 20:12:21.040"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:12:21.041">Delete All Sessions</msg>
<status starttime="20170803 20:12:21.041" status="PASS" endtime="20170803 20:12:21.041"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:12:21.041">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:12:20.637" status="PASS" endtime="20170803 20:12:21.041"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:12:21.042">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:12:21.041" status="PASS" endtime="20170803 20:12:21.042"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:21.042">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:12:21.043">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:12:21.043">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:12:21.042" status="PASS" endtime="20170803 20:12:21.043"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:12:21.043">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170803 20:12:20.636" status="PASS" endtime="20170803 20:12:21.043"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:12:21.043">${host_state} = Quiesced</msg>
<status starttime="20170803 20:12:20.636" status="PASS" endtime="20170803 20:12:21.043"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170803 20:12:21.044">Running != Quiesced</msg>
<status starttime="20170803 20:12:21.044" status="FAIL" endtime="20170803 20:12:21.044"></status>
</kw>
<status starttime="20170803 20:12:20.369" status="FAIL" endtime="20170803 20:12:21.044"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:12:31.051">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:12:31.051" status="PASS" endtime="20170803 20:12:31.052"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:31.052">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:12:31.052" status="PASS" endtime="20170803 20:12:31.052"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:31.053">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:12:31.053" status="PASS" endtime="20170803 20:12:31.053"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:31.055">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:12:31.054" status="PASS" endtime="20170803 20:12:31.055"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:12:31.259">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:12:31.056" status="PASS" endtime="20170803 20:12:31.259"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:12:31.260">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:12:31.260">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:12:31.055" status="PASS" endtime="20170803 20:12:31.260"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:12:31.260">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:12:31.260" status="PASS" endtime="20170803 20:12:31.260"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:12:31.261">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:12:31.261" status="PASS" endtime="20170803 20:12:31.261"></status>
</kw>
<status starttime="20170803 20:12:31.050" status="PASS" endtime="20170803 20:12:31.261"></status>
</kw>
<status starttime="20170803 20:12:31.049" status="PASS" endtime="20170803 20:12:31.261"></status>
</kw>
<status starttime="20170803 20:12:31.048" status="PASS" endtime="20170803 20:12:31.262"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:31.262">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170803 20:12:31.262" status="PASS" endtime="20170803 20:12:31.262"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:31.264">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:12:31.263" status="PASS" endtime="20170803 20:12:31.264"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:12:31.265">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:12:31.265" status="PASS" endtime="20170803 20:12:31.265"></status>
</kw>
<status starttime="20170803 20:12:31.264" status="PASS" endtime="20170803 20:12:31.265"></status>
</kw>
<status starttime="20170803 20:12:31.263" status="PASS" endtime="20170803 20:12:31.265"></status>
</kw>
<status starttime="20170803 20:12:31.262" status="PASS" endtime="20170803 20:12:31.265"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:31.331">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:12:31.331">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:12:31.266" status="PASS" endtime="20170803 20:12:31.331"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:31.333">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:12:31.332" status="PASS" endtime="20170803 20:12:31.333"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:12:31.334">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:12:31.334" status="PASS" endtime="20170803 20:12:31.334"></status>
</kw>
<status starttime="20170803 20:12:31.333" status="PASS" endtime="20170803 20:12:31.334"></status>
</kw>
<status starttime="20170803 20:12:31.332" status="PASS" endtime="20170803 20:12:31.334"></status>
</kw>
<status starttime="20170803 20:12:31.331" status="PASS" endtime="20170803 20:12:31.334"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:12:31.335">Delete All Sessions</msg>
<status starttime="20170803 20:12:31.335" status="PASS" endtime="20170803 20:12:31.335"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:12:31.335">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:12:31.047" status="PASS" endtime="20170803 20:12:31.335"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:12:31.336">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:12:31.335" status="PASS" endtime="20170803 20:12:31.336"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:31.336">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:12:31.336">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:12:31.336">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:12:31.336" status="PASS" endtime="20170803 20:12:31.336"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:12:31.337">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170803 20:12:31.046" status="PASS" endtime="20170803 20:12:31.337"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:12:31.337">${power_state} = On</msg>
<status starttime="20170803 20:12:31.046" status="PASS" endtime="20170803 20:12:31.337"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170803 20:12:31.337" status="PASS" endtime="20170803 20:12:31.338"></status>
</kw>
<status starttime="20170803 20:12:31.045" status="PASS" endtime="20170803 20:12:31.338"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:12:31.342">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:12:31.341" status="PASS" endtime="20170803 20:12:31.342"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:31.342">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:12:31.342" status="PASS" endtime="20170803 20:12:31.343"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:31.343">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:12:31.343" status="PASS" endtime="20170803 20:12:31.343"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:31.344">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:12:31.343" status="PASS" endtime="20170803 20:12:31.344"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:12:31.559">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:12:31.345" status="PASS" endtime="20170803 20:12:31.559"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:12:31.560">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:12:31.560">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:12:31.344" status="PASS" endtime="20170803 20:12:31.560"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:12:31.560">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:12:31.560" status="PASS" endtime="20170803 20:12:31.560"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:12:31.561">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:12:31.561" status="PASS" endtime="20170803 20:12:31.561"></status>
</kw>
<status starttime="20170803 20:12:31.341" status="PASS" endtime="20170803 20:12:31.561"></status>
</kw>
<status starttime="20170803 20:12:31.340" status="PASS" endtime="20170803 20:12:31.561"></status>
</kw>
<status starttime="20170803 20:12:31.339" status="PASS" endtime="20170803 20:12:31.561"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:31.562">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170803 20:12:31.562" status="PASS" endtime="20170803 20:12:31.562"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:31.564">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:12:31.563" status="PASS" endtime="20170803 20:12:31.564"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:12:31.565">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:12:31.565" status="PASS" endtime="20170803 20:12:31.565"></status>
</kw>
<status starttime="20170803 20:12:31.564" status="PASS" endtime="20170803 20:12:31.565"></status>
</kw>
<status starttime="20170803 20:12:31.563" status="PASS" endtime="20170803 20:12:31.565"></status>
</kw>
<status starttime="20170803 20:12:31.562" status="PASS" endtime="20170803 20:12:31.565"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:31.694">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:12:31.694">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:12:31.566" status="PASS" endtime="20170803 20:12:31.694"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:31.696">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:12:31.695" status="PASS" endtime="20170803 20:12:31.696"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:12:31.697">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:12:31.697" status="PASS" endtime="20170803 20:12:31.697"></status>
</kw>
<status starttime="20170803 20:12:31.696" status="PASS" endtime="20170803 20:12:31.697"></status>
</kw>
<status starttime="20170803 20:12:31.695" status="PASS" endtime="20170803 20:12:31.698"></status>
</kw>
<status starttime="20170803 20:12:31.694" status="PASS" endtime="20170803 20:12:31.698"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:12:31.698">Delete All Sessions</msg>
<status starttime="20170803 20:12:31.698" status="PASS" endtime="20170803 20:12:31.698"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:12:31.698">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:12:31.339" status="PASS" endtime="20170803 20:12:31.698"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:12:31.699">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:12:31.699" status="PASS" endtime="20170803 20:12:31.699"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:31.700">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:12:31.700">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:12:31.700">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:12:31.699" status="PASS" endtime="20170803 20:12:31.700"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:12:31.700">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170803 20:12:31.338" status="PASS" endtime="20170803 20:12:31.700"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:12:31.700">${host_state} = Quiesced</msg>
<status starttime="20170803 20:12:31.338" status="PASS" endtime="20170803 20:12:31.701"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170803 20:12:31.701">Running != Quiesced</msg>
<status starttime="20170803 20:12:31.701" status="FAIL" endtime="20170803 20:12:31.701"></status>
</kw>
<status starttime="20170803 20:12:31.045" status="FAIL" endtime="20170803 20:12:31.701"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:12:41.708">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:12:41.707" status="PASS" endtime="20170803 20:12:41.708"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:41.709">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:12:41.708" status="PASS" endtime="20170803 20:12:41.709"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:41.709">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:12:41.709" status="PASS" endtime="20170803 20:12:41.709"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:41.710">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:12:41.709" status="PASS" endtime="20170803 20:12:41.710"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:12:41.893">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:12:41.711" status="PASS" endtime="20170803 20:12:41.893"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:12:41.893">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:12:41.893">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:12:41.710" status="PASS" endtime="20170803 20:12:41.893"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:12:41.894">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:12:41.893" status="PASS" endtime="20170803 20:12:41.894"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:12:41.894">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:12:41.894" status="PASS" endtime="20170803 20:12:41.894"></status>
</kw>
<status starttime="20170803 20:12:41.707" status="PASS" endtime="20170803 20:12:41.894"></status>
</kw>
<status starttime="20170803 20:12:41.706" status="PASS" endtime="20170803 20:12:41.895"></status>
</kw>
<status starttime="20170803 20:12:41.706" status="PASS" endtime="20170803 20:12:41.895"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:41.895">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170803 20:12:41.895" status="PASS" endtime="20170803 20:12:41.895"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:41.897">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:12:41.897" status="PASS" endtime="20170803 20:12:41.897"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:12:41.898">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:12:41.898" status="PASS" endtime="20170803 20:12:41.898"></status>
</kw>
<status starttime="20170803 20:12:41.897" status="PASS" endtime="20170803 20:12:41.898"></status>
</kw>
<status starttime="20170803 20:12:41.896" status="PASS" endtime="20170803 20:12:41.899"></status>
</kw>
<status starttime="20170803 20:12:41.895" status="PASS" endtime="20170803 20:12:41.899"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:41.994">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:12:41.994">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:12:41.899" status="PASS" endtime="20170803 20:12:41.994"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:41.995">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:12:41.995" status="PASS" endtime="20170803 20:12:41.996"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:12:41.996">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:12:41.996" status="PASS" endtime="20170803 20:12:41.997"></status>
</kw>
<status starttime="20170803 20:12:41.996" status="PASS" endtime="20170803 20:12:41.997"></status>
</kw>
<status starttime="20170803 20:12:41.995" status="PASS" endtime="20170803 20:12:41.997"></status>
</kw>
<status starttime="20170803 20:12:41.994" status="PASS" endtime="20170803 20:12:41.997"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:12:41.997">Delete All Sessions</msg>
<status starttime="20170803 20:12:41.997" status="PASS" endtime="20170803 20:12:41.997"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:12:41.997">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:12:41.704" status="PASS" endtime="20170803 20:12:41.998"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:12:41.998">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:12:41.998" status="PASS" endtime="20170803 20:12:41.998"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:41.999">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:12:41.999">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:12:41.999">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:12:41.998" status="PASS" endtime="20170803 20:12:41.999"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:12:41.999">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170803 20:12:41.704" status="PASS" endtime="20170803 20:12:41.999"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:12:41.999">${power_state} = On</msg>
<status starttime="20170803 20:12:41.703" status="PASS" endtime="20170803 20:12:42.000"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170803 20:12:42.000" status="PASS" endtime="20170803 20:12:42.000"></status>
</kw>
<status starttime="20170803 20:12:41.703" status="PASS" endtime="20170803 20:12:42.000"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:12:42.004">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:12:42.003" status="PASS" endtime="20170803 20:12:42.005"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:42.005">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:12:42.005" status="PASS" endtime="20170803 20:12:42.005"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:42.006">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:12:42.005" status="PASS" endtime="20170803 20:12:42.006"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:42.006">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:12:42.006" status="PASS" endtime="20170803 20:12:42.006"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:12:42.194">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:12:42.007" status="PASS" endtime="20170803 20:12:42.194"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:12:42.195">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:12:42.195">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:12:42.007" status="PASS" endtime="20170803 20:12:42.195"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:12:42.195">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:12:42.195" status="PASS" endtime="20170803 20:12:42.195"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:12:42.196">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:12:42.196" status="PASS" endtime="20170803 20:12:42.196"></status>
</kw>
<status starttime="20170803 20:12:42.003" status="PASS" endtime="20170803 20:12:42.196"></status>
</kw>
<status starttime="20170803 20:12:42.003" status="PASS" endtime="20170803 20:12:42.196"></status>
</kw>
<status starttime="20170803 20:12:42.002" status="PASS" endtime="20170803 20:12:42.196"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:42.197">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170803 20:12:42.197" status="PASS" endtime="20170803 20:12:42.197"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:42.199">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:12:42.198" status="PASS" endtime="20170803 20:12:42.199"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:12:42.200">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:12:42.200" status="PASS" endtime="20170803 20:12:42.200"></status>
</kw>
<status starttime="20170803 20:12:42.199" status="PASS" endtime="20170803 20:12:42.200"></status>
</kw>
<status starttime="20170803 20:12:42.198" status="PASS" endtime="20170803 20:12:42.200"></status>
</kw>
<status starttime="20170803 20:12:42.197" status="PASS" endtime="20170803 20:12:42.200"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:42.307">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:12:42.307">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:12:42.201" status="PASS" endtime="20170803 20:12:42.307"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:42.309">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:12:42.308" status="PASS" endtime="20170803 20:12:42.309"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:12:42.310">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:12:42.310" status="PASS" endtime="20170803 20:12:42.310"></status>
</kw>
<status starttime="20170803 20:12:42.309" status="PASS" endtime="20170803 20:12:42.310"></status>
</kw>
<status starttime="20170803 20:12:42.308" status="PASS" endtime="20170803 20:12:42.310"></status>
</kw>
<status starttime="20170803 20:12:42.307" status="PASS" endtime="20170803 20:12:42.310"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:12:42.311">Delete All Sessions</msg>
<status starttime="20170803 20:12:42.311" status="PASS" endtime="20170803 20:12:42.311"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:12:42.311">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:12:42.001" status="PASS" endtime="20170803 20:12:42.311"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:12:42.312">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:12:42.311" status="PASS" endtime="20170803 20:12:42.312"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:42.312">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:12:42.312">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:12:42.313">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:12:42.312" status="PASS" endtime="20170803 20:12:42.313"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:12:42.313">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170803 20:12:42.001" status="PASS" endtime="20170803 20:12:42.313"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:12:42.313">${host_state} = Quiesced</msg>
<status starttime="20170803 20:12:42.000" status="PASS" endtime="20170803 20:12:42.313"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170803 20:12:42.314">Running != Quiesced</msg>
<status starttime="20170803 20:12:42.313" status="FAIL" endtime="20170803 20:12:42.314"></status>
</kw>
<status starttime="20170803 20:12:41.702" status="FAIL" endtime="20170803 20:12:42.314"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:12:52.319">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:12:52.319" status="PASS" endtime="20170803 20:12:52.320"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:52.320">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:12:52.320" status="PASS" endtime="20170803 20:12:52.320"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:52.321">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:12:52.320" status="PASS" endtime="20170803 20:12:52.321"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:52.321">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:12:52.321" status="PASS" endtime="20170803 20:12:52.321"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:12:52.504">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:12:52.322" status="PASS" endtime="20170803 20:12:52.504"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:12:52.505">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:12:52.505">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:12:52.322" status="PASS" endtime="20170803 20:12:52.505"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:12:52.505">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:12:52.505" status="PASS" endtime="20170803 20:12:52.505"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:12:52.506">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:12:52.506" status="PASS" endtime="20170803 20:12:52.506"></status>
</kw>
<status starttime="20170803 20:12:52.318" status="PASS" endtime="20170803 20:12:52.506"></status>
</kw>
<status starttime="20170803 20:12:52.318" status="PASS" endtime="20170803 20:12:52.506"></status>
</kw>
<status starttime="20170803 20:12:52.317" status="PASS" endtime="20170803 20:12:52.506"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:52.507">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170803 20:12:52.507" status="PASS" endtime="20170803 20:12:52.507"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:52.509">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:12:52.508" status="PASS" endtime="20170803 20:12:52.509"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:12:52.510">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:12:52.510" status="PASS" endtime="20170803 20:12:52.511"></status>
</kw>
<status starttime="20170803 20:12:52.509" status="PASS" endtime="20170803 20:12:52.511"></status>
</kw>
<status starttime="20170803 20:12:52.508" status="PASS" endtime="20170803 20:12:52.511"></status>
</kw>
<status starttime="20170803 20:12:52.507" status="PASS" endtime="20170803 20:12:52.511"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:52.576">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:12:52.576">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:12:52.511" status="PASS" endtime="20170803 20:12:52.576"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:52.578">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:12:52.577" status="PASS" endtime="20170803 20:12:52.578"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:12:52.579">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:12:52.579" status="PASS" endtime="20170803 20:12:52.579"></status>
</kw>
<status starttime="20170803 20:12:52.578" status="PASS" endtime="20170803 20:12:52.579"></status>
</kw>
<status starttime="20170803 20:12:52.577" status="PASS" endtime="20170803 20:12:52.579"></status>
</kw>
<status starttime="20170803 20:12:52.576" status="PASS" endtime="20170803 20:12:52.579"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:12:52.580">Delete All Sessions</msg>
<status starttime="20170803 20:12:52.579" status="PASS" endtime="20170803 20:12:52.580"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:12:52.580">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:12:52.317" status="PASS" endtime="20170803 20:12:52.580"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:12:52.580">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:12:52.580" status="PASS" endtime="20170803 20:12:52.581"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:52.581">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:12:52.581">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:12:52.581">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:12:52.581" status="PASS" endtime="20170803 20:12:52.581"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:12:52.582">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170803 20:12:52.316" status="PASS" endtime="20170803 20:12:52.582"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:12:52.582">${power_state} = On</msg>
<status starttime="20170803 20:12:52.315" status="PASS" endtime="20170803 20:12:52.582"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170803 20:12:52.582" status="PASS" endtime="20170803 20:12:52.582"></status>
</kw>
<status starttime="20170803 20:12:52.315" status="PASS" endtime="20170803 20:12:52.583"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:12:52.587">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:12:52.586" status="PASS" endtime="20170803 20:12:52.587"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:52.588">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:12:52.587" status="PASS" endtime="20170803 20:12:52.588"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:52.588">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:12:52.588" status="PASS" endtime="20170803 20:12:52.588"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:52.589">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:12:52.589" status="PASS" endtime="20170803 20:12:52.589"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:12:52.776">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:12:52.590" status="PASS" endtime="20170803 20:12:52.776"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:12:52.776">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:12:52.776">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:12:52.589" status="PASS" endtime="20170803 20:12:52.776"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:12:52.777">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:12:52.777" status="PASS" endtime="20170803 20:12:52.777"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:12:52.778">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:12:52.777" status="PASS" endtime="20170803 20:12:52.778"></status>
</kw>
<status starttime="20170803 20:12:52.586" status="PASS" endtime="20170803 20:12:52.778"></status>
</kw>
<status starttime="20170803 20:12:52.585" status="PASS" endtime="20170803 20:12:52.778"></status>
</kw>
<status starttime="20170803 20:12:52.584" status="PASS" endtime="20170803 20:12:52.778"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:52.779">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170803 20:12:52.778" status="PASS" endtime="20170803 20:12:52.779"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:52.781">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:12:52.780" status="PASS" endtime="20170803 20:12:52.781"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:12:52.782">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:12:52.781" status="PASS" endtime="20170803 20:12:52.782"></status>
</kw>
<status starttime="20170803 20:12:52.781" status="PASS" endtime="20170803 20:12:52.782"></status>
</kw>
<status starttime="20170803 20:12:52.779" status="PASS" endtime="20170803 20:12:52.782"></status>
</kw>
<status starttime="20170803 20:12:52.779" status="PASS" endtime="20170803 20:12:52.782"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:52.900">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:12:52.900">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:12:52.782" status="PASS" endtime="20170803 20:12:52.900"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:52.902">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:12:52.902" status="PASS" endtime="20170803 20:12:52.902"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:12:52.903">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:12:52.903" status="PASS" endtime="20170803 20:12:52.903"></status>
</kw>
<status starttime="20170803 20:12:52.902" status="PASS" endtime="20170803 20:12:52.903"></status>
</kw>
<status starttime="20170803 20:12:52.901" status="PASS" endtime="20170803 20:12:52.903"></status>
</kw>
<status starttime="20170803 20:12:52.901" status="PASS" endtime="20170803 20:12:52.903"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:12:52.904">Delete All Sessions</msg>
<status starttime="20170803 20:12:52.904" status="PASS" endtime="20170803 20:12:52.904"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:12:52.904">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:12:52.584" status="PASS" endtime="20170803 20:12:52.904"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:12:52.905">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:12:52.904" status="PASS" endtime="20170803 20:12:52.905"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:12:52.905">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:12:52.905">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:12:52.905">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:12:52.905" status="PASS" endtime="20170803 20:12:52.906"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:12:52.906">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170803 20:12:52.583" status="PASS" endtime="20170803 20:12:52.906"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:12:52.906">${host_state} = Quiesced</msg>
<status starttime="20170803 20:12:52.583" status="PASS" endtime="20170803 20:12:52.906"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170803 20:12:52.907">Running != Quiesced</msg>
<status starttime="20170803 20:12:52.906" status="FAIL" endtime="20170803 20:12:52.907"></status>
</kw>
<status starttime="20170803 20:12:52.314" status="FAIL" endtime="20170803 20:12:52.907"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:02.914">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:13:02.913" status="PASS" endtime="20170803 20:13:02.914"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:02.915">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:13:02.914" status="PASS" endtime="20170803 20:13:02.915"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:02.915">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:13:02.915" status="PASS" endtime="20170803 20:13:02.915"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:02.916">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:13:02.916" status="PASS" endtime="20170803 20:13:02.916"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:03.153">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:13:02.917" status="PASS" endtime="20170803 20:13:03.153"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:13:03.154">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:13:03.154">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:13:02.916" status="PASS" endtime="20170803 20:13:03.154"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:03.154">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:13:03.154" status="PASS" endtime="20170803 20:13:03.154"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:03.155">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:13:03.155" status="PASS" endtime="20170803 20:13:03.155"></status>
</kw>
<status starttime="20170803 20:13:02.913" status="PASS" endtime="20170803 20:13:03.155"></status>
</kw>
<status starttime="20170803 20:13:02.912" status="PASS" endtime="20170803 20:13:03.155"></status>
</kw>
<status starttime="20170803 20:13:02.911" status="PASS" endtime="20170803 20:13:03.155"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:03.156">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170803 20:13:03.156" status="PASS" endtime="20170803 20:13:03.156"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:03.158">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:13:03.157" status="PASS" endtime="20170803 20:13:03.158"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:03.159">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:13:03.159" status="PASS" endtime="20170803 20:13:03.159"></status>
</kw>
<status starttime="20170803 20:13:03.158" status="PASS" endtime="20170803 20:13:03.159"></status>
</kw>
<status starttime="20170803 20:13:03.157" status="PASS" endtime="20170803 20:13:03.159"></status>
</kw>
<status starttime="20170803 20:13:03.156" status="PASS" endtime="20170803 20:13:03.159"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:03.234">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:13:03.234">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:13:03.160" status="PASS" endtime="20170803 20:13:03.234"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:03.236">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:13:03.235" status="PASS" endtime="20170803 20:13:03.236"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:03.237">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:13:03.237" status="PASS" endtime="20170803 20:13:03.237"></status>
</kw>
<status starttime="20170803 20:13:03.236" status="PASS" endtime="20170803 20:13:03.237"></status>
</kw>
<status starttime="20170803 20:13:03.235" status="PASS" endtime="20170803 20:13:03.237"></status>
</kw>
<status starttime="20170803 20:13:03.234" status="PASS" endtime="20170803 20:13:03.238"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:13:03.238">Delete All Sessions</msg>
<status starttime="20170803 20:13:03.238" status="PASS" endtime="20170803 20:13:03.238"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:13:03.238">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:13:02.911" status="PASS" endtime="20170803 20:13:03.238"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:03.239">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:13:03.239" status="PASS" endtime="20170803 20:13:03.239"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:03.239">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:13:03.239">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:13:03.240">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:13:03.239" status="PASS" endtime="20170803 20:13:03.240"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:13:03.240">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170803 20:13:02.910" status="PASS" endtime="20170803 20:13:03.240"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:13:03.240">${power_state} = On</msg>
<status starttime="20170803 20:13:02.910" status="PASS" endtime="20170803 20:13:03.240"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170803 20:13:03.241" status="PASS" endtime="20170803 20:13:03.241"></status>
</kw>
<status starttime="20170803 20:13:02.908" status="PASS" endtime="20170803 20:13:03.241"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:03.245">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:13:03.244" status="PASS" endtime="20170803 20:13:03.245"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:03.246">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:13:03.245" status="PASS" endtime="20170803 20:13:03.246"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:03.246">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:13:03.246" status="PASS" endtime="20170803 20:13:03.246"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:03.247">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:13:03.247" status="PASS" endtime="20170803 20:13:03.247"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:03.422">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:13:03.248" status="PASS" endtime="20170803 20:13:03.422"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:13:03.422">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:13:03.422">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:13:03.247" status="PASS" endtime="20170803 20:13:03.422"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:03.423">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:13:03.422" status="PASS" endtime="20170803 20:13:03.423"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:03.423">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:13:03.423" status="PASS" endtime="20170803 20:13:03.423"></status>
</kw>
<status starttime="20170803 20:13:03.244" status="PASS" endtime="20170803 20:13:03.423"></status>
</kw>
<status starttime="20170803 20:13:03.243" status="PASS" endtime="20170803 20:13:03.424"></status>
</kw>
<status starttime="20170803 20:13:03.243" status="PASS" endtime="20170803 20:13:03.424"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:03.424">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170803 20:13:03.424" status="PASS" endtime="20170803 20:13:03.424"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:03.427">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:13:03.426" status="PASS" endtime="20170803 20:13:03.427"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:03.428">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:13:03.428" status="PASS" endtime="20170803 20:13:03.428"></status>
</kw>
<status starttime="20170803 20:13:03.427" status="PASS" endtime="20170803 20:13:03.428"></status>
</kw>
<status starttime="20170803 20:13:03.425" status="PASS" endtime="20170803 20:13:03.428"></status>
</kw>
<status starttime="20170803 20:13:03.425" status="PASS" endtime="20170803 20:13:03.428"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:03.517">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:13:03.518">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:13:03.428" status="PASS" endtime="20170803 20:13:03.518"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:03.519">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:13:03.519" status="PASS" endtime="20170803 20:13:03.520"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:03.520">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:13:03.520" status="PASS" endtime="20170803 20:13:03.521"></status>
</kw>
<status starttime="20170803 20:13:03.520" status="PASS" endtime="20170803 20:13:03.521"></status>
</kw>
<status starttime="20170803 20:13:03.518" status="PASS" endtime="20170803 20:13:03.521"></status>
</kw>
<status starttime="20170803 20:13:03.518" status="PASS" endtime="20170803 20:13:03.521"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:13:03.521">Delete All Sessions</msg>
<status starttime="20170803 20:13:03.521" status="PASS" endtime="20170803 20:13:03.521"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:13:03.522">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:13:03.242" status="PASS" endtime="20170803 20:13:03.522"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:03.522">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:13:03.522" status="PASS" endtime="20170803 20:13:03.522"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:03.523">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:13:03.523">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:13:03.523">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:13:03.522" status="PASS" endtime="20170803 20:13:03.523"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:13:03.523">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170803 20:13:03.242" status="PASS" endtime="20170803 20:13:03.523"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:13:03.524">${host_state} = Quiesced</msg>
<status starttime="20170803 20:13:03.241" status="PASS" endtime="20170803 20:13:03.524"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170803 20:13:03.524">Running != Quiesced</msg>
<status starttime="20170803 20:13:03.524" status="FAIL" endtime="20170803 20:13:03.524"></status>
</kw>
<status starttime="20170803 20:13:02.907" status="FAIL" endtime="20170803 20:13:03.524"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:13.529">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:13:13.529" status="PASS" endtime="20170803 20:13:13.530"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:13.530">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:13:13.530" status="PASS" endtime="20170803 20:13:13.530"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:13.531">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:13:13.531" status="PASS" endtime="20170803 20:13:13.531"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:13.532">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:13:13.531" status="PASS" endtime="20170803 20:13:13.532"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:13.752">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:13:13.533" status="PASS" endtime="20170803 20:13:13.752"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:13:13.752">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:13:13.752">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:13:13.532" status="PASS" endtime="20170803 20:13:13.752"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:13.753">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:13:13.753" status="PASS" endtime="20170803 20:13:13.753"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:13.754">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:13:13.753" status="PASS" endtime="20170803 20:13:13.754"></status>
</kw>
<status starttime="20170803 20:13:13.528" status="PASS" endtime="20170803 20:13:13.754"></status>
</kw>
<status starttime="20170803 20:13:13.528" status="PASS" endtime="20170803 20:13:13.754"></status>
</kw>
<status starttime="20170803 20:13:13.527" status="PASS" endtime="20170803 20:13:13.754"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:13.755">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170803 20:13:13.754" status="PASS" endtime="20170803 20:13:13.755"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:13.757">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:13:13.756" status="PASS" endtime="20170803 20:13:13.757"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:13.758">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:13:13.758" status="PASS" endtime="20170803 20:13:13.758"></status>
</kw>
<status starttime="20170803 20:13:13.757" status="PASS" endtime="20170803 20:13:13.758"></status>
</kw>
<status starttime="20170803 20:13:13.756" status="PASS" endtime="20170803 20:13:13.758"></status>
</kw>
<status starttime="20170803 20:13:13.755" status="PASS" endtime="20170803 20:13:13.758"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:13.883">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:13:13.883">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:13:13.759" status="PASS" endtime="20170803 20:13:13.883"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:13.885">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:13:13.884" status="PASS" endtime="20170803 20:13:13.885"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:13.886">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:13:13.886" status="PASS" endtime="20170803 20:13:13.886"></status>
</kw>
<status starttime="20170803 20:13:13.885" status="PASS" endtime="20170803 20:13:13.886"></status>
</kw>
<status starttime="20170803 20:13:13.884" status="PASS" endtime="20170803 20:13:13.886"></status>
</kw>
<status starttime="20170803 20:13:13.883" status="PASS" endtime="20170803 20:13:13.886"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:13:13.887">Delete All Sessions</msg>
<status starttime="20170803 20:13:13.886" status="PASS" endtime="20170803 20:13:13.887"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:13:13.887">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:13:13.527" status="PASS" endtime="20170803 20:13:13.887"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:13.887">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:13:13.887" status="PASS" endtime="20170803 20:13:13.888"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:13.888">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:13:13.888">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:13:13.888">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:13:13.888" status="PASS" endtime="20170803 20:13:13.888"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:13:13.889">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170803 20:13:13.526" status="PASS" endtime="20170803 20:13:13.889"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:13:13.889">${power_state} = On</msg>
<status starttime="20170803 20:13:13.526" status="PASS" endtime="20170803 20:13:13.889"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170803 20:13:13.889" status="PASS" endtime="20170803 20:13:13.889"></status>
</kw>
<status starttime="20170803 20:13:13.525" status="PASS" endtime="20170803 20:13:13.890"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:13.894">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:13:13.893" status="PASS" endtime="20170803 20:13:13.894"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:13.894">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:13:13.894" status="PASS" endtime="20170803 20:13:13.895"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:13.895">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:13:13.895" status="PASS" endtime="20170803 20:13:13.895"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:13.896">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:13:13.895" status="PASS" endtime="20170803 20:13:13.896"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:14.109">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:13:13.896" status="PASS" endtime="20170803 20:13:14.109"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:13:14.109">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:13:14.109">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:13:13.896" status="PASS" endtime="20170803 20:13:14.110"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:14.110">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:13:14.110" status="PASS" endtime="20170803 20:13:14.110"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:14.111">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:13:14.111" status="PASS" endtime="20170803 20:13:14.111"></status>
</kw>
<status starttime="20170803 20:13:13.893" status="PASS" endtime="20170803 20:13:14.111"></status>
</kw>
<status starttime="20170803 20:13:13.892" status="PASS" endtime="20170803 20:13:14.111"></status>
</kw>
<status starttime="20170803 20:13:13.891" status="PASS" endtime="20170803 20:13:14.112"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:14.112">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170803 20:13:14.112" status="PASS" endtime="20170803 20:13:14.112"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:14.114">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:13:14.113" status="PASS" endtime="20170803 20:13:14.114"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:14.115">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:13:14.115" status="PASS" endtime="20170803 20:13:14.116"></status>
</kw>
<status starttime="20170803 20:13:14.114" status="PASS" endtime="20170803 20:13:14.116"></status>
</kw>
<status starttime="20170803 20:13:14.113" status="PASS" endtime="20170803 20:13:14.116"></status>
</kw>
<status starttime="20170803 20:13:14.112" status="PASS" endtime="20170803 20:13:14.116"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:14.205">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:13:14.206">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:13:14.116" status="PASS" endtime="20170803 20:13:14.206"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:14.207">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:13:14.207" status="PASS" endtime="20170803 20:13:14.207"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:14.209">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:13:14.208" status="PASS" endtime="20170803 20:13:14.209"></status>
</kw>
<status starttime="20170803 20:13:14.208" status="PASS" endtime="20170803 20:13:14.209"></status>
</kw>
<status starttime="20170803 20:13:14.206" status="PASS" endtime="20170803 20:13:14.209"></status>
</kw>
<status starttime="20170803 20:13:14.206" status="PASS" endtime="20170803 20:13:14.209"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:13:14.209">Delete All Sessions</msg>
<status starttime="20170803 20:13:14.209" status="PASS" endtime="20170803 20:13:14.209"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:13:14.210">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:13:13.891" status="PASS" endtime="20170803 20:13:14.210"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:14.210">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:13:14.210" status="PASS" endtime="20170803 20:13:14.210"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:14.211">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:13:14.211">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:13:14.211">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:13:14.211" status="PASS" endtime="20170803 20:13:14.211"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:13:14.211">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170803 20:13:13.890" status="PASS" endtime="20170803 20:13:14.211"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:13:14.212">${host_state} = Quiesced</msg>
<status starttime="20170803 20:13:13.890" status="PASS" endtime="20170803 20:13:14.212"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170803 20:13:14.212">Running != Quiesced</msg>
<status starttime="20170803 20:13:14.212" status="FAIL" endtime="20170803 20:13:14.212"></status>
</kw>
<status starttime="20170803 20:13:13.525" status="FAIL" endtime="20170803 20:13:14.213"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:24.217">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:13:24.217" status="PASS" endtime="20170803 20:13:24.218"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:24.218">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:13:24.218" status="PASS" endtime="20170803 20:13:24.219"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:24.219">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:13:24.219" status="PASS" endtime="20170803 20:13:24.219"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:24.220">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:13:24.219" status="PASS" endtime="20170803 20:13:24.220"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:24.420">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:13:24.221" status="PASS" endtime="20170803 20:13:24.420"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:13:24.420">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:13:24.421">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:13:24.220" status="PASS" endtime="20170803 20:13:24.421"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:24.421">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:13:24.421" status="PASS" endtime="20170803 20:13:24.421"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:24.422">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:13:24.422" status="PASS" endtime="20170803 20:13:24.422"></status>
</kw>
<status starttime="20170803 20:13:24.217" status="PASS" endtime="20170803 20:13:24.422"></status>
</kw>
<status starttime="20170803 20:13:24.216" status="PASS" endtime="20170803 20:13:24.422"></status>
</kw>
<status starttime="20170803 20:13:24.216" status="PASS" endtime="20170803 20:13:24.422"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:24.423">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170803 20:13:24.423" status="PASS" endtime="20170803 20:13:24.423"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:24.425">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:13:24.424" status="PASS" endtime="20170803 20:13:24.425"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:24.426">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:13:24.426" status="PASS" endtime="20170803 20:13:24.426"></status>
</kw>
<status starttime="20170803 20:13:24.425" status="PASS" endtime="20170803 20:13:24.426"></status>
</kw>
<status starttime="20170803 20:13:24.424" status="PASS" endtime="20170803 20:13:24.426"></status>
</kw>
<status starttime="20170803 20:13:24.423" status="PASS" endtime="20170803 20:13:24.426"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:24.490">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:13:24.490">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:13:24.427" status="PASS" endtime="20170803 20:13:24.490"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:24.492">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:13:24.491" status="PASS" endtime="20170803 20:13:24.492"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:24.493">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:13:24.492" status="PASS" endtime="20170803 20:13:24.493"></status>
</kw>
<status starttime="20170803 20:13:24.492" status="PASS" endtime="20170803 20:13:24.493"></status>
</kw>
<status starttime="20170803 20:13:24.491" status="PASS" endtime="20170803 20:13:24.493"></status>
</kw>
<status starttime="20170803 20:13:24.490" status="PASS" endtime="20170803 20:13:24.493"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:13:24.493">Delete All Sessions</msg>
<status starttime="20170803 20:13:24.493" status="PASS" endtime="20170803 20:13:24.493"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:13:24.494">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:13:24.215" status="PASS" endtime="20170803 20:13:24.494"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:24.494">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:13:24.494" status="PASS" endtime="20170803 20:13:24.494"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:24.495">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:13:24.495">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:13:24.495">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:13:24.495" status="PASS" endtime="20170803 20:13:24.495"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:13:24.495">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170803 20:13:24.214" status="PASS" endtime="20170803 20:13:24.496"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:13:24.496">${power_state} = On</msg>
<status starttime="20170803 20:13:24.214" status="PASS" endtime="20170803 20:13:24.496"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170803 20:13:24.496" status="PASS" endtime="20170803 20:13:24.496"></status>
</kw>
<status starttime="20170803 20:13:24.214" status="PASS" endtime="20170803 20:13:24.496"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:24.500">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:13:24.500" status="PASS" endtime="20170803 20:13:24.503"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:24.504">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:13:24.503" status="PASS" endtime="20170803 20:13:24.504"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:24.505">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:13:24.504" status="PASS" endtime="20170803 20:13:24.505"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:24.505">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:13:24.505" status="PASS" endtime="20170803 20:13:24.505"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:24.763">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:13:24.506" status="PASS" endtime="20170803 20:13:24.764"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:13:24.764">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:13:24.764">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:13:24.506" status="PASS" endtime="20170803 20:13:24.764"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:24.764">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:13:24.764" status="PASS" endtime="20170803 20:13:24.764"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:24.765">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:13:24.765" status="PASS" endtime="20170803 20:13:24.765"></status>
</kw>
<status starttime="20170803 20:13:24.499" status="PASS" endtime="20170803 20:13:24.765"></status>
</kw>
<status starttime="20170803 20:13:24.499" status="PASS" endtime="20170803 20:13:24.765"></status>
</kw>
<status starttime="20170803 20:13:24.498" status="PASS" endtime="20170803 20:13:24.765"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:24.766">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170803 20:13:24.766" status="PASS" endtime="20170803 20:13:24.766"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:24.768">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:13:24.767" status="PASS" endtime="20170803 20:13:24.768"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:24.769">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:13:24.769" status="PASS" endtime="20170803 20:13:24.769"></status>
</kw>
<status starttime="20170803 20:13:24.768" status="PASS" endtime="20170803 20:13:24.769"></status>
</kw>
<status starttime="20170803 20:13:24.767" status="PASS" endtime="20170803 20:13:24.769"></status>
</kw>
<status starttime="20170803 20:13:24.766" status="PASS" endtime="20170803 20:13:24.770"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:24.934">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:13:24.934">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:13:24.770" status="PASS" endtime="20170803 20:13:24.934"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:24.935">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:13:24.935" status="PASS" endtime="20170803 20:13:24.936"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:24.936">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:13:24.936" status="PASS" endtime="20170803 20:13:24.936"></status>
</kw>
<status starttime="20170803 20:13:24.936" status="PASS" endtime="20170803 20:13:24.937"></status>
</kw>
<status starttime="20170803 20:13:24.934" status="PASS" endtime="20170803 20:13:24.937"></status>
</kw>
<status starttime="20170803 20:13:24.934" status="PASS" endtime="20170803 20:13:24.937"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:13:24.937">Delete All Sessions</msg>
<status starttime="20170803 20:13:24.937" status="PASS" endtime="20170803 20:13:24.937"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:13:24.937">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:13:24.498" status="PASS" endtime="20170803 20:13:24.937"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:24.938">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:13:24.938" status="PASS" endtime="20170803 20:13:24.938"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:24.939">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:13:24.939">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:13:24.939">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:13:24.938" status="PASS" endtime="20170803 20:13:24.939"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:13:24.939">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170803 20:13:24.497" status="PASS" endtime="20170803 20:13:24.939"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:13:24.939">${host_state} = Quiesced</msg>
<status starttime="20170803 20:13:24.497" status="PASS" endtime="20170803 20:13:24.939"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170803 20:13:24.940">Running != Quiesced</msg>
<status starttime="20170803 20:13:24.940" status="FAIL" endtime="20170803 20:13:24.940"></status>
</kw>
<status starttime="20170803 20:13:24.213" status="FAIL" endtime="20170803 20:13:24.940"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:34.947">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:13:34.947" status="PASS" endtime="20170803 20:13:34.948"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:34.949">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:13:34.948" status="PASS" endtime="20170803 20:13:34.949"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:34.949">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:13:34.949" status="PASS" endtime="20170803 20:13:34.949"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:34.950">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:13:34.950" status="PASS" endtime="20170803 20:13:34.950"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:35.133">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:13:34.951" status="PASS" endtime="20170803 20:13:35.134"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:13:35.134">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:13:35.134">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:13:34.950" status="PASS" endtime="20170803 20:13:35.134"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:35.134">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:13:35.134" status="PASS" endtime="20170803 20:13:35.135"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:35.135">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:13:35.135" status="PASS" endtime="20170803 20:13:35.135"></status>
</kw>
<status starttime="20170803 20:13:34.946" status="PASS" endtime="20170803 20:13:35.135"></status>
</kw>
<status starttime="20170803 20:13:34.946" status="PASS" endtime="20170803 20:13:35.135"></status>
</kw>
<status starttime="20170803 20:13:34.945" status="PASS" endtime="20170803 20:13:35.136"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:35.136">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170803 20:13:35.136" status="PASS" endtime="20170803 20:13:35.136"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:35.138">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:13:35.138" status="PASS" endtime="20170803 20:13:35.138"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:35.140">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:13:35.139" status="PASS" endtime="20170803 20:13:35.140"></status>
</kw>
<status starttime="20170803 20:13:35.139" status="PASS" endtime="20170803 20:13:35.140"></status>
</kw>
<status starttime="20170803 20:13:35.137" status="PASS" endtime="20170803 20:13:35.140"></status>
</kw>
<status starttime="20170803 20:13:35.136" status="PASS" endtime="20170803 20:13:35.140"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:35.204">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:13:35.204">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:13:35.140" status="PASS" endtime="20170803 20:13:35.204"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:35.205">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:13:35.205" status="PASS" endtime="20170803 20:13:35.205"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:35.206">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:13:35.206" status="PASS" endtime="20170803 20:13:35.206"></status>
</kw>
<status starttime="20170803 20:13:35.206" status="PASS" endtime="20170803 20:13:35.207"></status>
</kw>
<status starttime="20170803 20:13:35.204" status="PASS" endtime="20170803 20:13:35.207"></status>
</kw>
<status starttime="20170803 20:13:35.204" status="PASS" endtime="20170803 20:13:35.207"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:13:35.207">Delete All Sessions</msg>
<status starttime="20170803 20:13:35.207" status="PASS" endtime="20170803 20:13:35.207"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:13:35.207">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:13:34.944" status="PASS" endtime="20170803 20:13:35.208"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:35.208">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:13:35.208" status="PASS" endtime="20170803 20:13:35.208"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:35.209">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:13:35.209">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:13:35.209">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:13:35.208" status="PASS" endtime="20170803 20:13:35.209"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:13:35.209">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170803 20:13:34.943" status="PASS" endtime="20170803 20:13:35.209"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:13:35.209">${power_state} = On</msg>
<status starttime="20170803 20:13:34.942" status="PASS" endtime="20170803 20:13:35.210"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170803 20:13:35.210" status="PASS" endtime="20170803 20:13:35.210"></status>
</kw>
<status starttime="20170803 20:13:34.941" status="PASS" endtime="20170803 20:13:35.210"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:35.214">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:13:35.213" status="PASS" endtime="20170803 20:13:35.214"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:35.215">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:13:35.214" status="PASS" endtime="20170803 20:13:35.215"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:35.215">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:13:35.215" status="PASS" endtime="20170803 20:13:35.215"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:35.216">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:13:35.216" status="PASS" endtime="20170803 20:13:35.216"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:35.454">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:13:35.217" status="PASS" endtime="20170803 20:13:35.454"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:13:35.454">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:13:35.454">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:13:35.216" status="PASS" endtime="20170803 20:13:35.454"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:35.455">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:13:35.454" status="PASS" endtime="20170803 20:13:35.455"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:35.455">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:13:35.455" status="PASS" endtime="20170803 20:13:35.455"></status>
</kw>
<status starttime="20170803 20:13:35.213" status="PASS" endtime="20170803 20:13:35.456"></status>
</kw>
<status starttime="20170803 20:13:35.212" status="PASS" endtime="20170803 20:13:35.456"></status>
</kw>
<status starttime="20170803 20:13:35.212" status="PASS" endtime="20170803 20:13:35.456"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:35.456">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170803 20:13:35.456" status="PASS" endtime="20170803 20:13:35.456"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:35.458">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:13:35.458" status="PASS" endtime="20170803 20:13:35.458"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:35.459">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:13:35.459" status="PASS" endtime="20170803 20:13:35.459"></status>
</kw>
<status starttime="20170803 20:13:35.459" status="PASS" endtime="20170803 20:13:35.460"></status>
</kw>
<status starttime="20170803 20:13:35.457" status="PASS" endtime="20170803 20:13:35.460"></status>
</kw>
<status starttime="20170803 20:13:35.457" status="PASS" endtime="20170803 20:13:35.460"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:35.583">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:13:35.583">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:13:35.460" status="PASS" endtime="20170803 20:13:35.583"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:35.585">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:13:35.585" status="PASS" endtime="20170803 20:13:35.585"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:35.586">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:13:35.586" status="PASS" endtime="20170803 20:13:35.586"></status>
</kw>
<status starttime="20170803 20:13:35.585" status="PASS" endtime="20170803 20:13:35.586"></status>
</kw>
<status starttime="20170803 20:13:35.584" status="PASS" endtime="20170803 20:13:35.586"></status>
</kw>
<status starttime="20170803 20:13:35.584" status="PASS" endtime="20170803 20:13:35.587"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:13:35.587">Delete All Sessions</msg>
<status starttime="20170803 20:13:35.587" status="PASS" endtime="20170803 20:13:35.587"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:13:35.587">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:13:35.211" status="PASS" endtime="20170803 20:13:35.587"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:35.588">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:13:35.587" status="PASS" endtime="20170803 20:13:35.588"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:35.588">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:13:35.588">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:13:35.589">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:13:35.588" status="PASS" endtime="20170803 20:13:35.589"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:13:35.589">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170803 20:13:35.211" status="PASS" endtime="20170803 20:13:35.589"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:13:35.589">${host_state} = Quiesced</msg>
<status starttime="20170803 20:13:35.210" status="PASS" endtime="20170803 20:13:35.589"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170803 20:13:35.590">Running != Quiesced</msg>
<status starttime="20170803 20:13:35.589" status="FAIL" endtime="20170803 20:13:35.590"></status>
</kw>
<status starttime="20170803 20:13:34.941" status="FAIL" endtime="20170803 20:13:35.590"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:45.596">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:13:45.595" status="PASS" endtime="20170803 20:13:45.596"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:45.597">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:13:45.596" status="PASS" endtime="20170803 20:13:45.597"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:45.597">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:13:45.597" status="PASS" endtime="20170803 20:13:45.597"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:45.598">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:13:45.598" status="PASS" endtime="20170803 20:13:45.598"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:45.775">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:13:45.599" status="PASS" endtime="20170803 20:13:45.775"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:13:45.775">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:13:45.775">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:13:45.598" status="PASS" endtime="20170803 20:13:45.775"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:45.776">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:13:45.776" status="PASS" endtime="20170803 20:13:45.776"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:45.777">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:13:45.776" status="PASS" endtime="20170803 20:13:45.777"></status>
</kw>
<status starttime="20170803 20:13:45.594" status="PASS" endtime="20170803 20:13:45.777"></status>
</kw>
<status starttime="20170803 20:13:45.594" status="PASS" endtime="20170803 20:13:45.777"></status>
</kw>
<status starttime="20170803 20:13:45.593" status="PASS" endtime="20170803 20:13:45.777"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:45.778">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170803 20:13:45.777" status="PASS" endtime="20170803 20:13:45.778"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:45.780">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:13:45.779" status="PASS" endtime="20170803 20:13:45.780"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:45.781">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:13:45.780" status="PASS" endtime="20170803 20:13:45.781"></status>
</kw>
<status starttime="20170803 20:13:45.780" status="PASS" endtime="20170803 20:13:45.781"></status>
</kw>
<status starttime="20170803 20:13:45.778" status="PASS" endtime="20170803 20:13:45.781"></status>
</kw>
<status starttime="20170803 20:13:45.778" status="PASS" endtime="20170803 20:13:45.781"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:45.845">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:13:45.845">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:13:45.781" status="PASS" endtime="20170803 20:13:45.845"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:45.847">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:13:45.846" status="PASS" endtime="20170803 20:13:45.847"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:45.848">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:13:45.848" status="PASS" endtime="20170803 20:13:45.848"></status>
</kw>
<status starttime="20170803 20:13:45.847" status="PASS" endtime="20170803 20:13:45.848"></status>
</kw>
<status starttime="20170803 20:13:45.846" status="PASS" endtime="20170803 20:13:45.848"></status>
</kw>
<status starttime="20170803 20:13:45.845" status="PASS" endtime="20170803 20:13:45.848"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:13:45.849">Delete All Sessions</msg>
<status starttime="20170803 20:13:45.849" status="PASS" endtime="20170803 20:13:45.849"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:13:45.849">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:13:45.592" status="PASS" endtime="20170803 20:13:45.849"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:45.850">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:13:45.849" status="PASS" endtime="20170803 20:13:45.850"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:45.850">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:13:45.850">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:13:45.850">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:13:45.850" status="PASS" endtime="20170803 20:13:45.851"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:13:45.851">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170803 20:13:45.592" status="PASS" endtime="20170803 20:13:45.851"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:13:45.851">${power_state} = On</msg>
<status starttime="20170803 20:13:45.591" status="PASS" endtime="20170803 20:13:45.851"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170803 20:13:45.851" status="PASS" endtime="20170803 20:13:45.852"></status>
</kw>
<status starttime="20170803 20:13:45.591" status="PASS" endtime="20170803 20:13:45.852"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:45.855">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:13:45.855" status="PASS" endtime="20170803 20:13:45.856"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:45.856">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:13:45.856" status="PASS" endtime="20170803 20:13:45.856"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:45.857">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:13:45.857" status="PASS" endtime="20170803 20:13:45.857"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:45.858">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:13:45.857" status="PASS" endtime="20170803 20:13:45.858"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:46.116">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:13:45.858" status="PASS" endtime="20170803 20:13:46.116"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:13:46.116">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:13:46.116">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:13:45.858" status="PASS" endtime="20170803 20:13:46.116"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:46.117">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:13:46.117" status="PASS" endtime="20170803 20:13:46.117"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:46.118">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:13:46.117" status="PASS" endtime="20170803 20:13:46.118"></status>
</kw>
<status starttime="20170803 20:13:45.854" status="PASS" endtime="20170803 20:13:46.118"></status>
</kw>
<status starttime="20170803 20:13:45.854" status="PASS" endtime="20170803 20:13:46.118"></status>
</kw>
<status starttime="20170803 20:13:45.854" status="PASS" endtime="20170803 20:13:46.118"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:46.119">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170803 20:13:46.118" status="PASS" endtime="20170803 20:13:46.119"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:46.121">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:13:46.120" status="PASS" endtime="20170803 20:13:46.121"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:46.122">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:13:46.122" status="PASS" endtime="20170803 20:13:46.122"></status>
</kw>
<status starttime="20170803 20:13:46.121" status="PASS" endtime="20170803 20:13:46.122"></status>
</kw>
<status starttime="20170803 20:13:46.119" status="PASS" endtime="20170803 20:13:46.123"></status>
</kw>
<status starttime="20170803 20:13:46.119" status="PASS" endtime="20170803 20:13:46.123"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:46.291">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:13:46.291">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:13:46.123" status="PASS" endtime="20170803 20:13:46.291"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:46.293">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:13:46.292" status="PASS" endtime="20170803 20:13:46.293"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:46.294">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:13:46.293" status="PASS" endtime="20170803 20:13:46.294"></status>
</kw>
<status starttime="20170803 20:13:46.293" status="PASS" endtime="20170803 20:13:46.294"></status>
</kw>
<status starttime="20170803 20:13:46.292" status="PASS" endtime="20170803 20:13:46.294"></status>
</kw>
<status starttime="20170803 20:13:46.291" status="PASS" endtime="20170803 20:13:46.294"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:13:46.295">Delete All Sessions</msg>
<status starttime="20170803 20:13:46.295" status="PASS" endtime="20170803 20:13:46.295"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:13:46.295">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:13:45.853" status="PASS" endtime="20170803 20:13:46.295"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:46.296">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:13:46.295" status="PASS" endtime="20170803 20:13:46.296"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:46.296">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:13:46.296">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:13:46.296">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:13:46.296" status="PASS" endtime="20170803 20:13:46.296"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:13:46.297">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170803 20:13:45.852" status="PASS" endtime="20170803 20:13:46.297"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:13:46.297">${host_state} = Quiesced</msg>
<status starttime="20170803 20:13:45.852" status="PASS" endtime="20170803 20:13:46.297"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170803 20:13:46.298">Running != Quiesced</msg>
<status starttime="20170803 20:13:46.297" status="FAIL" endtime="20170803 20:13:46.298"></status>
</kw>
<status starttime="20170803 20:13:45.590" status="FAIL" endtime="20170803 20:13:46.298"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:56.303">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:13:56.303" status="PASS" endtime="20170803 20:13:56.303"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:56.304">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:13:56.304" status="PASS" endtime="20170803 20:13:56.304"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:56.304">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:13:56.304" status="PASS" endtime="20170803 20:13:56.305"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:56.306">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:13:56.305" status="PASS" endtime="20170803 20:13:56.306"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:56.591">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:13:56.306" status="PASS" endtime="20170803 20:13:56.592"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:13:56.592">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:13:56.592">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:13:56.306" status="PASS" endtime="20170803 20:13:56.592"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:56.592">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:13:56.592" status="PASS" endtime="20170803 20:13:56.593"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:56.593">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:13:56.593" status="PASS" endtime="20170803 20:13:56.593"></status>
</kw>
<status starttime="20170803 20:13:56.302" status="PASS" endtime="20170803 20:13:56.593"></status>
</kw>
<status starttime="20170803 20:13:56.302" status="PASS" endtime="20170803 20:13:56.593"></status>
</kw>
<status starttime="20170803 20:13:56.301" status="PASS" endtime="20170803 20:13:56.594"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:56.594">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170803 20:13:56.594" status="PASS" endtime="20170803 20:13:56.594"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:56.596">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:13:56.595" status="PASS" endtime="20170803 20:13:56.596"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:56.597">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:13:56.597" status="PASS" endtime="20170803 20:13:56.597"></status>
</kw>
<status starttime="20170803 20:13:56.596" status="PASS" endtime="20170803 20:13:56.597"></status>
</kw>
<status starttime="20170803 20:13:56.595" status="PASS" endtime="20170803 20:13:56.597"></status>
</kw>
<status starttime="20170803 20:13:56.594" status="PASS" endtime="20170803 20:13:56.598"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:56.667">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:13:56.667">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:13:56.598" status="PASS" endtime="20170803 20:13:56.667"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:56.669">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:13:56.669" status="PASS" endtime="20170803 20:13:56.669"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:56.670">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:13:56.670" status="PASS" endtime="20170803 20:13:56.670"></status>
</kw>
<status starttime="20170803 20:13:56.669" status="PASS" endtime="20170803 20:13:56.670"></status>
</kw>
<status starttime="20170803 20:13:56.668" status="PASS" endtime="20170803 20:13:56.670"></status>
</kw>
<status starttime="20170803 20:13:56.668" status="PASS" endtime="20170803 20:13:56.670"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:13:56.671">Delete All Sessions</msg>
<status starttime="20170803 20:13:56.671" status="PASS" endtime="20170803 20:13:56.671"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:13:56.671">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:13:56.300" status="PASS" endtime="20170803 20:13:56.671"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:56.672">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:13:56.671" status="PASS" endtime="20170803 20:13:56.672"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:56.672">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:13:56.672">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:13:56.672">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:13:56.672" status="PASS" endtime="20170803 20:13:56.672"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:13:56.673">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170803 20:13:56.300" status="PASS" endtime="20170803 20:13:56.673"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:13:56.673">${power_state} = On</msg>
<status starttime="20170803 20:13:56.299" status="PASS" endtime="20170803 20:13:56.673"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170803 20:13:56.674" status="PASS" endtime="20170803 20:13:56.674"></status>
</kw>
<status starttime="20170803 20:13:56.299" status="PASS" endtime="20170803 20:13:56.674"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:56.680">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:13:56.679" status="PASS" endtime="20170803 20:13:56.680"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:56.681">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:13:56.681" status="PASS" endtime="20170803 20:13:56.681"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:56.682">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:13:56.681" status="PASS" endtime="20170803 20:13:56.682"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:56.683">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:13:56.683" status="PASS" endtime="20170803 20:13:56.683"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:56.878">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:13:56.684" status="PASS" endtime="20170803 20:13:56.878"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:13:56.878">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:13:56.878">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:13:56.684" status="PASS" endtime="20170803 20:13:56.878"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:56.879">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:13:56.879" status="PASS" endtime="20170803 20:13:56.879"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:56.880">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:13:56.879" status="PASS" endtime="20170803 20:13:56.880"></status>
</kw>
<status starttime="20170803 20:13:56.679" status="PASS" endtime="20170803 20:13:56.880"></status>
</kw>
<status starttime="20170803 20:13:56.678" status="PASS" endtime="20170803 20:13:56.880"></status>
</kw>
<status starttime="20170803 20:13:56.677" status="PASS" endtime="20170803 20:13:56.880"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:56.881">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170803 20:13:56.880" status="PASS" endtime="20170803 20:13:56.881"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:56.883">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:13:56.882" status="PASS" endtime="20170803 20:13:56.883"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:56.884">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:13:56.883" status="PASS" endtime="20170803 20:13:56.884"></status>
</kw>
<status starttime="20170803 20:13:56.883" status="PASS" endtime="20170803 20:13:56.884"></status>
</kw>
<status starttime="20170803 20:13:56.881" status="PASS" endtime="20170803 20:13:56.884"></status>
</kw>
<status starttime="20170803 20:13:56.881" status="PASS" endtime="20170803 20:13:56.884"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:56.974">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:13:56.974">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:13:56.884" status="PASS" endtime="20170803 20:13:56.974"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:56.976">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:13:56.975" status="PASS" endtime="20170803 20:13:56.976"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:56.977">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:13:56.977" status="PASS" endtime="20170803 20:13:56.977"></status>
</kw>
<status starttime="20170803 20:13:56.976" status="PASS" endtime="20170803 20:13:56.977"></status>
</kw>
<status starttime="20170803 20:13:56.974" status="PASS" endtime="20170803 20:13:56.977"></status>
</kw>
<status starttime="20170803 20:13:56.974" status="PASS" endtime="20170803 20:13:56.977"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:13:56.978">Delete All Sessions</msg>
<status starttime="20170803 20:13:56.978" status="PASS" endtime="20170803 20:13:56.978"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:13:56.978">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:13:56.676" status="PASS" endtime="20170803 20:13:56.978"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:56.979">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:13:56.978" status="PASS" endtime="20170803 20:13:56.979"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:56.979">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:13:56.979">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:13:56.979">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:13:56.979" status="PASS" endtime="20170803 20:13:56.979"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:13:56.980">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170803 20:13:56.675" status="PASS" endtime="20170803 20:13:56.980"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:13:56.980">${host_state} = Quiesced</msg>
<status starttime="20170803 20:13:56.674" status="PASS" endtime="20170803 20:13:56.980"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170803 20:13:56.981">Running != Quiesced</msg>
<status starttime="20170803 20:13:56.981" status="FAIL" endtime="20170803 20:13:56.981"></status>
</kw>
<status starttime="20170803 20:13:56.298" status="FAIL" endtime="20170803 20:13:56.981"></status>
</kw>
<msg level="FAIL" timestamp="20170803 20:13:56.981">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: Running != Quiesced</msg>
<status starttime="20170803 20:03:48.259" status="FAIL" endtime="20170803 20:13:56.981"></status>
</kw>
<status starttime="20170803 20:03:47.021" status="FAIL" endtime="20170803 20:13:56.982"></status>
</kw>
<status starttime="20170803 20:03:39.420" status="FAIL" endtime="20170803 20:13:56.982"></status>
</kw>
<status starttime="20170803 20:03:39.418" status="FAIL" endtime="20170803 20:13:56.982"></status>
</kw>
<kw name="Test Exit Logs" type="teardown">
<doc>Collect FFDC and SOL log.</doc>
<kw library="openbmc_ffdc" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="state_manager" name="Is Host Quiesced">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:56.987">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:13:56.987" status="PASS" endtime="20170803 20:13:56.988"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:56.989">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:13:56.988" status="PASS" endtime="20170803 20:13:56.989"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:56.990">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:13:56.989" status="PASS" endtime="20170803 20:13:56.990"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:56.990">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:13:56.990" status="PASS" endtime="20170803 20:13:56.991"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:57.168">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:13:56.992" status="PASS" endtime="20170803 20:13:57.168"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:13:57.168">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:13:57.168">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:13:56.991" status="PASS" endtime="20170803 20:13:57.168"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:57.169">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:13:57.169" status="PASS" endtime="20170803 20:13:57.169"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:57.170">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:13:57.169" status="PASS" endtime="20170803 20:13:57.170"></status>
</kw>
<status starttime="20170803 20:13:56.986" status="PASS" endtime="20170803 20:13:57.170"></status>
</kw>
<status starttime="20170803 20:13:56.985" status="PASS" endtime="20170803 20:13:57.170"></status>
</kw>
<status starttime="20170803 20:13:56.985" status="PASS" endtime="20170803 20:13:57.170"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:57.170">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170803 20:13:57.170" status="PASS" endtime="20170803 20:13:57.171"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:57.173">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:13:57.172" status="PASS" endtime="20170803 20:13:57.173"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:57.174">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:13:57.173" status="PASS" endtime="20170803 20:13:57.174"></status>
</kw>
<status starttime="20170803 20:13:57.173" status="PASS" endtime="20170803 20:13:57.174"></status>
</kw>
<status starttime="20170803 20:13:57.171" status="PASS" endtime="20170803 20:13:57.174"></status>
</kw>
<status starttime="20170803 20:13:57.171" status="PASS" endtime="20170803 20:13:57.174"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:57.264">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:13:57.264">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:13:57.174" status="PASS" endtime="20170803 20:13:57.264"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:57.266">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:13:57.265" status="PASS" endtime="20170803 20:13:57.266"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:57.267">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:13:57.266" status="PASS" endtime="20170803 20:13:57.267"></status>
</kw>
<status starttime="20170803 20:13:57.266" status="PASS" endtime="20170803 20:13:57.267"></status>
</kw>
<status starttime="20170803 20:13:57.265" status="PASS" endtime="20170803 20:13:57.267"></status>
</kw>
<status starttime="20170803 20:13:57.264" status="PASS" endtime="20170803 20:13:57.267"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:13:57.267">Delete All Sessions</msg>
<status starttime="20170803 20:13:57.267" status="PASS" endtime="20170803 20:13:57.268"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:13:57.268">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:13:56.984" status="PASS" endtime="20170803 20:13:57.268"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:57.268">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:13:57.268" status="PASS" endtime="20170803 20:13:57.268"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:57.269">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:13:57.269">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:13:57.269">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:13:57.269" status="PASS" endtime="20170803 20:13:57.269"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:13:57.269">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170803 20:13:56.984" status="PASS" endtime="20170803 20:13:57.269"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:13:57.270">${host_state} = Quiesced</msg>
<status starttime="20170803 20:13:56.983" status="PASS" endtime="20170803 20:13:57.270"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<status starttime="20170803 20:13:57.270" status="PASS" endtime="20170803 20:13:57.271"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:13:57.271">${status} = True</msg>
<status starttime="20170803 20:13:57.270" status="PASS" endtime="20170803 20:13:57.271"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:13:57.271">${status} = True</msg>
<status starttime="20170803 20:13:56.983" status="PASS" endtime="20170803 20:13:57.271"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw library="openbmc_ffdc" name="Ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw library="utils" name="Ping Host">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:13:57.301">Length is 10</msg>
<status starttime="20170803 20:13:57.300" status="PASS" endtime="20170803 20:13:57.301"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:13:57.307">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170803 20:14:00.320">${RC} = 0</msg>
<msg level="INFO" timestamp="20170803 20:14:00.321">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=3.12 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.567 ms
64 bytes from 9.3.86.161: icmp_seq...</msg>
<status starttime="20170803 20:13:57.301" status="PASS" endtime="20170803 20:14:00.321"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:00.335">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=3.12 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.567 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.784 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.620 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.567/1.274/3.127/1.073 ms</msg>
<status starttime="20170803 20:14:00.330" status="PASS" endtime="20170803 20:14:00.336"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status starttime="20170803 20:14:00.336" status="PASS" endtime="20170803 20:14:00.337"></status>
</kw>
<status starttime="20170803 20:13:57.300" status="PASS" endtime="20170803 20:14:00.338"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:00.370">${cur_time} = 2017-08-03 20:14:00:369742</msg>
<status starttime="20170803 20:14:00.369" status="PASS" endtime="20170803 20:14:00.370"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:00.371">${cur_time} = 20170803201400369742</msg>
<status starttime="20170803 20:14:00.370" status="PASS" endtime="20170803 20:14:00.371"></status>
</kw>
<status starttime="20170803 20:14:00.369" status="PASS" endtime="20170803 20:14:00.371"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:00.372">${FFDC_TIME} = 20170803201400369742</msg>
<kw library="openbmc_ffdc_utils" name="Get Test Dir and Name">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:00.386">${suite_name} = TestsTestBasicPoweron</msg>
<status starttime="20170803 20:14:00.386" status="PASS" endtime="20170803 20:14:00.386"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:00.387">${suite_name} = 20170803201400369742_TestsTestBasicPoweron</msg>
<status starttime="20170803 20:14:00.386" status="PASS" endtime="20170803 20:14:00.387"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:00.387">${test_name} = PowerOnTest</msg>
<status starttime="20170803 20:14:00.387" status="PASS" endtime="20170803 20:14:00.387"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:00.388">${test_name} = 20170803201400369742_PowerOnTest</msg>
<status starttime="20170803 20:14:00.388" status="PASS" endtime="20170803 20:14:00.388"></status>
</kw>
<status starttime="20170803 20:14:00.385" status="PASS" endtime="20170803 20:14:00.388"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:00.388">${FFDC_DIR_PATH} = /tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/</msg>
<msg level="INFO" timestamp="20170803 20:14:00.389">${FFDC_PREFIX} = 20170803201400369742_</msg>
<msg level="INFO" timestamp="20170803 20:14:00.411">${LOG_PREFIX} = /tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_</msg>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170803 20:14:00.415">Created directory '&lt;a href="file:///tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest"&gt;/tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest&lt;/a&gt;'.</msg>
<status starttime="20170803 20:14:00.411" status="PASS" endtime="20170803 20:14:00.415"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:00.419">${FFDC_FILE_PATH} = /tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt</msg>
<kw library="openbmc_ffdc_utils" name="Header Message">
<doc>Write header message to the report document manifest.</doc>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170803 20:14:00.441">Appended to file '&lt;a href="file:///tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt"&gt;/tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170803 20:14:00.439" status="PASS" endtime="20170803 20:14:00.441"></status>
</kw>
<status starttime="20170803 20:14:00.439" status="PASS" endtime="20170803 20:14:00.441"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170803 20:14:00.442">Appended to file '&lt;a href="file:///tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt"&gt;/tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170803 20:14:00.442" status="PASS" endtime="20170803 20:14:00.442"></status>
</kw>
<status starttime="20170803 20:14:00.441" status="PASS" endtime="20170803 20:14:00.442"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170803 20:14:00.444">Appended to file '&lt;a href="file:///tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt"&gt;/tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170803 20:14:00.443" status="PASS" endtime="20170803 20:14:00.444"></status>
</kw>
<status starttime="20170803 20:14:00.442" status="PASS" endtime="20170803 20:14:00.444"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170803 20:14:00.445">Appended to file '&lt;a href="file:///tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt"&gt;/tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170803 20:14:00.445" status="PASS" endtime="20170803 20:14:00.446"></status>
</kw>
<status starttime="20170803 20:14:00.444" status="PASS" endtime="20170803 20:14:00.446"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170803 20:14:00.447">Appended to file '&lt;a href="file:///tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt"&gt;/tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170803 20:14:00.446" status="PASS" endtime="20170803 20:14:00.447"></status>
</kw>
<status starttime="20170803 20:14:00.446" status="PASS" endtime="20170803 20:14:00.447"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170803 20:14:00.448">Appended to file '&lt;a href="file:///tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt"&gt;/tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170803 20:14:00.448" status="PASS" endtime="20170803 20:14:00.448"></status>
</kw>
<status starttime="20170803 20:14:00.447" status="PASS" endtime="20170803 20:14:00.448"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170803 20:14:00.449">Appended to file '&lt;a href="file:///tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt"&gt;/tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170803 20:14:00.449" status="PASS" endtime="20170803 20:14:00.450"></status>
</kw>
<status starttime="20170803 20:14:00.449" status="PASS" endtime="20170803 20:14:00.450"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170803 20:14:00.451">Appended to file '&lt;a href="file:///tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt"&gt;/tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170803 20:14:00.451" status="PASS" endtime="20170803 20:14:00.451"></status>
</kw>
<status starttime="20170803 20:14:00.450" status="PASS" endtime="20170803 20:14:00.451"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170803 20:14:00.452">Appended to file '&lt;a href="file:///tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt"&gt;/tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170803 20:14:00.452" status="PASS" endtime="20170803 20:14:00.452"></status>
</kw>
<status starttime="20170803 20:14:00.451" status="PASS" endtime="20170803 20:14:00.452"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Test Setup Info">
<doc>BMC IP, Model and other information</doc>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170803 20:14:00.454">Appended to file '&lt;a href="file:///tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt"&gt;/tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170803 20:14:00.454" status="PASS" endtime="20170803 20:14:00.454"></status>
</kw>
<status starttime="20170803 20:14:00.453" status="PASS" endtime="20170803 20:14:00.454"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170803 20:14:00.456">Appended to file '&lt;a href="file:///tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt"&gt;/tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170803 20:14:00.456" status="PASS" endtime="20170803 20:14:00.456"></status>
</kw>
<status starttime="20170803 20:14:00.455" status="PASS" endtime="20170803 20:14:00.456"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170803 20:14:00.457">Appended to file '&lt;a href="file:///tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt"&gt;/tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170803 20:14:00.457" status="PASS" endtime="20170803 20:14:00.457"></status>
</kw>
<status starttime="20170803 20:14:00.456" status="PASS" endtime="20170803 20:14:00.457"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170803 20:14:00.459">Appended to file '&lt;a href="file:///tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt"&gt;/tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170803 20:14:00.458" status="PASS" endtime="20170803 20:14:00.459"></status>
</kw>
<status starttime="20170803 20:14:00.458" status="PASS" endtime="20170803 20:14:00.459"></status>
</kw>
<kw library="utils" name="Get BMC System Model">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:00.487">path_separator=/
port=22
encoding=UTF-8
term_type=vt100
alias=bmc_connection
newline=

prompt=# 
width=80
timeout=25 seconds
index=1
host=9.3.86.161
height=24</msg>
<msg level="INFO" timestamp="20170803 20:14:00.488">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170803 20:14:00.567">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170803 20:14:00.577">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170803 20:14:00.577">${stderr} = </msg>
<msg level="INFO" timestamp="20170803 20:14:00.577">${rc} = 0</msg>
<status starttime="20170803 20:14:00.459" status="PASS" endtime="20170803 20:14:00.577"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:00.578">Length is 0</msg>
<status starttime="20170803 20:14:00.577" status="PASS" endtime="20170803 20:14:00.578"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:00.578">Length is 11</msg>
<status starttime="20170803 20:14:00.578" status="PASS" endtime="20170803 20:14:00.578"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:00.578">${model_name} = Witherspoon</msg>
<status starttime="20170803 20:14:00.459" status="PASS" endtime="20170803 20:14:00.578"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170803 20:14:00.580">Appended to file '&lt;a href="file:///tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt"&gt;/tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170803 20:14:00.579" status="PASS" endtime="20170803 20:14:00.580"></status>
</kw>
<status starttime="20170803 20:14:00.579" status="PASS" endtime="20170803 20:14:00.580"></status>
</kw>
<status starttime="20170803 20:14:00.453" status="PASS" endtime="20170803 20:14:00.580"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170803 20:14:00.581">Appended to file '&lt;a href="file:///tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt"&gt;/tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170803 20:14:00.581" status="PASS" endtime="20170803 20:14:00.581"></status>
</kw>
<status starttime="20170803 20:14:00.580" status="PASS" endtime="20170803 20:14:00.582"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:00.582">@{entries} = [ DRIVER INFO | APPLICATION DATA | BMC DATA ]</msg>
<status starttime="20170803 20:14:00.582" status="PASS" endtime="20170803 20:14:00.582"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = DRIVER INFO" type="foritem">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170803 20:14:00.584">Appended to file '&lt;a href="file:///tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt"&gt;/tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170803 20:14:00.583" status="PASS" endtime="20170803 20:14:00.584"></status>
</kw>
<status starttime="20170803 20:14:00.583" status="PASS" endtime="20170803 20:14:00.584"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170803 20:14:00.585">Appended to file '&lt;a href="file:///tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt"&gt;/tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170803 20:14:00.585" status="PASS" endtime="20170803 20:14:00.585"></status>
</kw>
<status starttime="20170803 20:14:00.584" status="PASS" endtime="20170803 20:14:00.585"></status>
</kw>
<status starttime="20170803 20:14:00.582" status="PASS" endtime="20170803 20:14:00.585"></status>
</kw>
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170803 20:14:00.586">Appended to file '&lt;a href="file:///tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt"&gt;/tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170803 20:14:00.586" status="PASS" endtime="20170803 20:14:00.586"></status>
</kw>
<status starttime="20170803 20:14:00.585" status="PASS" endtime="20170803 20:14:00.587"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170803 20:14:00.588">Appended to file '&lt;a href="file:///tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt"&gt;/tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170803 20:14:00.587" status="PASS" endtime="20170803 20:14:00.588"></status>
</kw>
<status starttime="20170803 20:14:00.587" status="PASS" endtime="20170803 20:14:00.588"></status>
</kw>
<status starttime="20170803 20:14:00.585" status="PASS" endtime="20170803 20:14:00.588"></status>
</kw>
<kw name="${index} = BMC DATA" type="foritem">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170803 20:14:00.589">Appended to file '&lt;a href="file:///tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt"&gt;/tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170803 20:14:00.589" status="PASS" endtime="20170803 20:14:00.589"></status>
</kw>
<status starttime="20170803 20:14:00.588" status="PASS" endtime="20170803 20:14:00.589"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170803 20:14:00.590">Appended to file '&lt;a href="file:///tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt"&gt;/tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170803 20:14:00.590" status="PASS" endtime="20170803 20:14:00.590"></status>
</kw>
<status starttime="20170803 20:14:00.589" status="PASS" endtime="20170803 20:14:00.591"></status>
</kw>
<status starttime="20170803 20:14:00.588" status="PASS" endtime="20170803 20:14:00.591"></status>
</kw>
<status starttime="20170803 20:14:00.582" status="PASS" endtime="20170803 20:14:00.591"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170803 20:14:00.592">Appended to file '&lt;a href="file:///tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt"&gt;/tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170803 20:14:00.591" status="PASS" endtime="20170803 20:14:00.592"></status>
</kw>
<status starttime="20170803 20:14:00.591" status="PASS" endtime="20170803 20:14:00.592"></status>
</kw>
<status starttime="20170803 20:14:00.438" status="PASS" endtime="20170803 20:14:00.592"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Call FFDC Methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:00.598">@{entries} = [ BMC LOGS ]</msg>
<status starttime="20170803 20:14:00.598" status="PASS" endtime="20170803 20:14:00.598"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC LOGS" type="foritem">
<kw library="openbmc_ffdc_methods" name="Method Call Keyword List">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Call">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:00.600">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('OS FFDC', 'OS FFDC Files') | ('Core Files', 'SCP Coredump Files') | ('BMC Specific Files', 'BMC FFDC Files') | ('SEL Log', 'Collect eSEL Log') | ('Ge...</msg>
<status starttime="20170803 20:14:00.600" status="PASS" endtime="20170803 20:14:00.600"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Desc">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status starttime="20170803 20:14:00.601" status="PASS" endtime="20170803 20:14:00.601"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:00.601">@{ffdc_function_list} = [ FFDC Generic Report | OS FFDC | Core Files | BMC Specific Files | SEL Log | Get Request FFDC ]</msg>
<status starttime="20170803 20:14:00.600" status="PASS" endtime="20170803 20:14:00.601"></status>
</kw>
<kw name="${method} IN [ @{method_list} ]" type="for">
<kw name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170803 20:14:00.603" status="PASS" endtime="20170803 20:14:00.603"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:00.603">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:14:00.603">${ret_values} = None</msg>
<status starttime="20170803 20:14:00.603" status="PASS" endtime="20170803 20:14:00.603"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170803 20:14:00.604" status="PASS" endtime="20170803 20:14:00.604"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Manifest">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:00.630">@{entries} = [ DRIVER INFO | APPLICATION DATA | BMC DATA ]</msg>
<status starttime="20170803 20:14:00.630" status="PASS" endtime="20170803 20:14:00.630"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = DRIVER INFO" type="foritem">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:00.631">@{cmd_list} = [ ('FW Level', 'cat /etc/os-release') ]</msg>
<status starttime="20170803 20:14:00.631" status="PASS" endtime="20170803 20:14:00.631"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:00.636">${ENTRY_INDEX} = DRIVER INFO</msg>
<status starttime="20170803 20:14:00.632" status="PASS" endtime="20170803 20:14:00.637"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('FW Level', 'cat /etc/os-release')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170803 20:14:00.640">Appended to file '&lt;a href="file:///tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt"&gt;/tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170803 20:14:00.639" status="PASS" endtime="20170803 20:14:00.640"></status>
</kw>
<status starttime="20170803 20:14:00.639" status="PASS" endtime="20170803 20:14:00.640"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170803 20:14:00.641">Appended to file '&lt;a href="file:///tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt"&gt;/tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170803 20:14:00.641" status="PASS" endtime="20170803 20:14:00.641"></status>
</kw>
<status starttime="20170803 20:14:00.640" status="PASS" endtime="20170803 20:14:00.641"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170803 20:14:00.642">Appended to file '&lt;a href="file:///tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt"&gt;/tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170803 20:14:00.642" status="PASS" endtime="20170803 20:14:00.643"></status>
</kw>
<status starttime="20170803 20:14:00.642" status="PASS" endtime="20170803 20:14:00.643"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170803 20:14:00.644">Appended to file '&lt;a href="file:///tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt"&gt;/tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170803 20:14:00.644" status="PASS" endtime="20170803 20:14:00.644"></status>
</kw>
<status starttime="20170803 20:14:00.643" status="PASS" endtime="20170803 20:14:00.644"></status>
</kw>
<status starttime="20170803 20:14:00.638" status="PASS" endtime="20170803 20:14:00.644"></status>
</kw>
<status starttime="20170803 20:14:00.638" status="PASS" endtime="20170803 20:14:00.645"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:00.645">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status starttime="20170803 20:14:00.645" status="PASS" endtime="20170803 20:14:00.645"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:00.714">path_separator=/
port=22
encoding=UTF-8
term_type=vt100
alias=bmc_connection
newline=

prompt=# 
width=80
timeout=25 seconds
index=1
host=9.3.86.161
height=24</msg>
<msg level="INFO" timestamp="20170803 20:14:00.715">Executing command 'cat /etc/os-release'.</msg>
<msg level="INFO" timestamp="20170803 20:14:00.771">Command exited with return code 0.</msg>
<status starttime="20170803 20:14:00.675" status="PASS" endtime="20170803 20:14:00.772"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:00.772">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:14:00.772">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.8-182"\nVERSION_ID="v1.99.8-182-g4437d2b"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC...</msg>
<status starttime="20170803 20:14:00.646" status="PASS" endtime="20170803 20:14:00.772"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:00.773">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.8-182"
VERSION_ID="v1.99.8-182-g4437d2b"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Projec...</msg>
<status starttime="20170803 20:14:00.772" status="PASS" endtime="20170803 20:14:00.773"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:00.773">${stderr} = </msg>
<status starttime="20170803 20:14:00.773" status="PASS" endtime="20170803 20:14:00.773"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170803 20:14:00.780">Appended to file '&lt;a href="file:///tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt"&gt;/tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170803 20:14:00.779" status="PASS" endtime="20170803 20:14:00.780"></status>
</kw>
<status starttime="20170803 20:14:00.778" status="PASS" endtime="20170803 20:14:00.780"></status>
</kw>
<status starttime="20170803 20:14:00.774" status="PASS" endtime="20170803 20:14:00.780"></status>
</kw>
<status starttime="20170803 20:14:00.637" status="PASS" endtime="20170803 20:14:00.780"></status>
</kw>
<status starttime="20170803 20:14:00.637" status="PASS" endtime="20170803 20:14:00.780"></status>
</kw>
<status starttime="20170803 20:14:00.637" status="PASS" endtime="20170803 20:14:00.780"></status>
</kw>
<status starttime="20170803 20:14:00.631" status="PASS" endtime="20170803 20:14:00.780"></status>
</kw>
<status starttime="20170803 20:14:00.630" status="PASS" endtime="20170803 20:14:00.780"></status>
</kw>
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:00.781">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status starttime="20170803 20:14:00.781" status="PASS" endtime="20170803 20:14:00.781"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:00.782">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status starttime="20170803 20:14:00.782" status="PASS" endtime="20170803 20:14:00.782"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170803 20:14:00.785">Appended to file '&lt;a href="file:///tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt"&gt;/tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170803 20:14:00.785" status="PASS" endtime="20170803 20:14:00.785"></status>
</kw>
<status starttime="20170803 20:14:00.784" status="PASS" endtime="20170803 20:14:00.786"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170803 20:14:00.787">Appended to file '&lt;a href="file:///tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt"&gt;/tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170803 20:14:00.787" status="PASS" endtime="20170803 20:14:00.787"></status>
</kw>
<status starttime="20170803 20:14:00.786" status="PASS" endtime="20170803 20:14:00.787"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170803 20:14:00.788">Appended to file '&lt;a href="file:///tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt"&gt;/tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170803 20:14:00.788" status="PASS" endtime="20170803 20:14:00.788"></status>
</kw>
<status starttime="20170803 20:14:00.787" status="PASS" endtime="20170803 20:14:00.788"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170803 20:14:00.789">Appended to file '&lt;a href="file:///tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt"&gt;/tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170803 20:14:00.789" status="PASS" endtime="20170803 20:14:00.790"></status>
</kw>
<status starttime="20170803 20:14:00.789" status="PASS" endtime="20170803 20:14:00.790"></status>
</kw>
<status starttime="20170803 20:14:00.784" status="PASS" endtime="20170803 20:14:00.790"></status>
</kw>
<status starttime="20170803 20:14:00.783" status="PASS" endtime="20170803 20:14:00.790"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:00.791">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status starttime="20170803 20:14:00.790" status="PASS" endtime="20170803 20:14:00.791"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:00.862">path_separator=/
port=22
encoding=UTF-8
term_type=vt100
alias=bmc_connection
newline=

prompt=# 
width=80
timeout=25 seconds
index=1
host=9.3.86.161
height=24</msg>
<msg level="INFO" timestamp="20170803 20:14:00.863">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg level="INFO" timestamp="20170803 20:14:02.309">Command exited with return code 0.</msg>
<status starttime="20170803 20:14:00.827" status="PASS" endtime="20170803 20:14:02.310"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:02.310">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:14:02.310">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState.Q...</msg>
<status starttime="20170803 20:14:00.791" status="PASS" endtime="20170803 20:14:02.310"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:02.311">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Quiesc...</msg>
<status starttime="20170803 20:14:02.310" status="PASS" endtime="20170803 20:14:02.311"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:02.311">${stderr} = </msg>
<status starttime="20170803 20:14:02.311" status="PASS" endtime="20170803 20:14:02.311"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170803 20:14:02.318">Appended to file '&lt;a href="file:///tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt"&gt;/tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170803 20:14:02.317" status="PASS" endtime="20170803 20:14:02.318"></status>
</kw>
<status starttime="20170803 20:14:02.317" status="PASS" endtime="20170803 20:14:02.318"></status>
</kw>
<status starttime="20170803 20:14:02.311" status="PASS" endtime="20170803 20:14:02.318"></status>
</kw>
<status starttime="20170803 20:14:00.782" status="PASS" endtime="20170803 20:14:02.318"></status>
</kw>
<status starttime="20170803 20:14:00.782" status="PASS" endtime="20170803 20:14:02.318"></status>
</kw>
<status starttime="20170803 20:14:00.782" status="PASS" endtime="20170803 20:14:02.318"></status>
</kw>
<status starttime="20170803 20:14:00.780" status="PASS" endtime="20170803 20:14:02.318"></status>
</kw>
<status starttime="20170803 20:14:00.780" status="PASS" endtime="20170803 20:14:02.318"></status>
</kw>
<kw name="${index} = BMC DATA" type="foritem">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:02.319">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC OS', 'uname -a') | ('BMC File System Disk Space Usage', 'df -hT') ]</msg>
<status starttime="20170803 20:14:02.319" status="PASS" endtime="20170803 20:14:02.320"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:02.320">${ENTRY_INDEX} = BMC DATA</msg>
<status starttime="20170803 20:14:02.320" status="PASS" endtime="20170803 20:14:02.320"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC Uptime', 'uptime')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170803 20:14:02.324">Appended to file '&lt;a href="file:///tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt"&gt;/tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170803 20:14:02.324" status="PASS" endtime="20170803 20:14:02.324"></status>
</kw>
<status starttime="20170803 20:14:02.323" status="PASS" endtime="20170803 20:14:02.325"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170803 20:14:02.326">Appended to file '&lt;a href="file:///tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt"&gt;/tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170803 20:14:02.325" status="PASS" endtime="20170803 20:14:02.326"></status>
</kw>
<status starttime="20170803 20:14:02.325" status="PASS" endtime="20170803 20:14:02.326"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170803 20:14:02.327">Appended to file '&lt;a href="file:///tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt"&gt;/tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170803 20:14:02.327" status="PASS" endtime="20170803 20:14:02.327"></status>
</kw>
<status starttime="20170803 20:14:02.326" status="PASS" endtime="20170803 20:14:02.327"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170803 20:14:02.328">Appended to file '&lt;a href="file:///tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt"&gt;/tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170803 20:14:02.328" status="PASS" endtime="20170803 20:14:02.328"></status>
</kw>
<status starttime="20170803 20:14:02.327" status="PASS" endtime="20170803 20:14:02.329"></status>
</kw>
<status starttime="20170803 20:14:02.322" status="PASS" endtime="20170803 20:14:02.329"></status>
</kw>
<status starttime="20170803 20:14:02.321" status="PASS" endtime="20170803 20:14:02.329"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:02.330">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status starttime="20170803 20:14:02.329" status="PASS" endtime="20170803 20:14:02.330"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:02.396">path_separator=/
port=22
encoding=UTF-8
term_type=vt100
alias=bmc_connection
newline=

prompt=# 
width=80
timeout=25 seconds
index=1
host=9.3.86.161
height=24</msg>
<msg level="INFO" timestamp="20170803 20:14:02.397">Executing command 'uptime'.</msg>
<msg level="INFO" timestamp="20170803 20:14:02.503">Command exited with return code 0.</msg>
<status starttime="20170803 20:14:02.361" status="PASS" endtime="20170803 20:14:02.503"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:02.503">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:14:02.503">${ret_values} = (u' 20:14:07 up 21 min,  load average: 0.58, 0.97, 1.10', u'', 0)</msg>
<status starttime="20170803 20:14:02.330" status="PASS" endtime="20170803 20:14:02.503"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:02.504">${stdout} =  20:14:07 up 21 min,  load average: 0.58, 0.97, 1.10</msg>
<status starttime="20170803 20:14:02.504" status="PASS" endtime="20170803 20:14:02.504"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:02.505">${stderr} = </msg>
<status starttime="20170803 20:14:02.504" status="PASS" endtime="20170803 20:14:02.505"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170803 20:14:02.511">Appended to file '&lt;a href="file:///tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt"&gt;/tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170803 20:14:02.511" status="PASS" endtime="20170803 20:14:02.511"></status>
</kw>
<status starttime="20170803 20:14:02.510" status="PASS" endtime="20170803 20:14:02.511"></status>
</kw>
<status starttime="20170803 20:14:02.505" status="PASS" endtime="20170803 20:14:02.511"></status>
</kw>
<status starttime="20170803 20:14:02.321" status="PASS" endtime="20170803 20:14:02.511"></status>
</kw>
<status starttime="20170803 20:14:02.321" status="PASS" endtime="20170803 20:14:02.511"></status>
</kw>
<kw name="${cmd} = ('BMC OS', 'uname -a')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170803 20:14:02.514">Appended to file '&lt;a href="file:///tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt"&gt;/tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170803 20:14:02.514" status="PASS" endtime="20170803 20:14:02.515"></status>
</kw>
<status starttime="20170803 20:14:02.514" status="PASS" endtime="20170803 20:14:02.515"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170803 20:14:02.516">Appended to file '&lt;a href="file:///tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt"&gt;/tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170803 20:14:02.516" status="PASS" endtime="20170803 20:14:02.516"></status>
</kw>
<status starttime="20170803 20:14:02.515" status="PASS" endtime="20170803 20:14:02.517"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170803 20:14:02.518">Appended to file '&lt;a href="file:///tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt"&gt;/tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170803 20:14:02.517" status="PASS" endtime="20170803 20:14:02.518"></status>
</kw>
<status starttime="20170803 20:14:02.517" status="PASS" endtime="20170803 20:14:02.518"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170803 20:14:02.519">Appended to file '&lt;a href="file:///tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt"&gt;/tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170803 20:14:02.518" status="PASS" endtime="20170803 20:14:02.519"></status>
</kw>
<status starttime="20170803 20:14:02.518" status="PASS" endtime="20170803 20:14:02.519"></status>
</kw>
<status starttime="20170803 20:14:02.513" status="PASS" endtime="20170803 20:14:02.519"></status>
</kw>
<status starttime="20170803 20:14:02.513" status="PASS" endtime="20170803 20:14:02.519"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:02.520">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status starttime="20170803 20:14:02.519" status="PASS" endtime="20170803 20:14:02.520"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:02.586">path_separator=/
port=22
encoding=UTF-8
term_type=vt100
alias=bmc_connection
newline=

prompt=# 
width=80
timeout=25 seconds
index=1
host=9.3.86.161
height=24</msg>
<msg level="INFO" timestamp="20170803 20:14:02.587">Executing command 'uname -a'.</msg>
<msg level="INFO" timestamp="20170803 20:14:02.643">Command exited with return code 0.</msg>
<status starttime="20170803 20:14:02.551" status="PASS" endtime="20170803 20:14:02.643"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:02.643">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:14:02.643">${ret_values} = (u'Linux witherspoon 4.10.17-03afe5775baf06c3037d62cc2a15628079af38c9 #1 Thu Aug 3 19:36:59 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status starttime="20170803 20:14:02.520" status="PASS" endtime="20170803 20:14:02.644"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:02.644">${stdout} = Linux witherspoon 4.10.17-03afe5775baf06c3037d62cc2a15628079af38c9 #1 Thu Aug 3 19:36:59 UTC 2017 armv6l GNU/Linux</msg>
<status starttime="20170803 20:14:02.644" status="PASS" endtime="20170803 20:14:02.644"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:02.645">${stderr} = </msg>
<status starttime="20170803 20:14:02.645" status="PASS" endtime="20170803 20:14:02.645"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170803 20:14:02.651">Appended to file '&lt;a href="file:///tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt"&gt;/tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170803 20:14:02.651" status="PASS" endtime="20170803 20:14:02.651"></status>
</kw>
<status starttime="20170803 20:14:02.650" status="PASS" endtime="20170803 20:14:02.651"></status>
</kw>
<status starttime="20170803 20:14:02.645" status="PASS" endtime="20170803 20:14:02.652"></status>
</kw>
<status starttime="20170803 20:14:02.512" status="PASS" endtime="20170803 20:14:02.652"></status>
</kw>
<status starttime="20170803 20:14:02.512" status="PASS" endtime="20170803 20:14:02.652"></status>
</kw>
<kw name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170803 20:14:02.655">Appended to file '&lt;a href="file:///tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt"&gt;/tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170803 20:14:02.654" status="PASS" endtime="20170803 20:14:02.655"></status>
</kw>
<status starttime="20170803 20:14:02.654" status="PASS" endtime="20170803 20:14:02.655"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170803 20:14:02.656">Appended to file '&lt;a href="file:///tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt"&gt;/tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170803 20:14:02.656" status="PASS" endtime="20170803 20:14:02.656"></status>
</kw>
<status starttime="20170803 20:14:02.655" status="PASS" endtime="20170803 20:14:02.656"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170803 20:14:02.657">Appended to file '&lt;a href="file:///tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt"&gt;/tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170803 20:14:02.657" status="PASS" endtime="20170803 20:14:02.657"></status>
</kw>
<status starttime="20170803 20:14:02.656" status="PASS" endtime="20170803 20:14:02.658"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170803 20:14:02.659">Appended to file '&lt;a href="file:///tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt"&gt;/tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170803 20:14:02.658" status="PASS" endtime="20170803 20:14:02.659"></status>
</kw>
<status starttime="20170803 20:14:02.658" status="PASS" endtime="20170803 20:14:02.659"></status>
</kw>
<status starttime="20170803 20:14:02.653" status="PASS" endtime="20170803 20:14:02.659"></status>
</kw>
<status starttime="20170803 20:14:02.653" status="PASS" endtime="20170803 20:14:02.659"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:02.660">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status starttime="20170803 20:14:02.660" status="PASS" endtime="20170803 20:14:02.660"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:02.728">path_separator=/
port=22
encoding=UTF-8
term_type=vt100
alias=bmc_connection
newline=

prompt=# 
width=80
timeout=25 seconds
index=1
host=9.3.86.161
height=24</msg>
<msg level="INFO" timestamp="20170803 20:14:02.728">Executing command 'df -hT'.</msg>
<msg level="INFO" timestamp="20170803 20:14:02.785">Command exited with return code 0.</msg>
<status starttime="20170803 20:14:02.691" status="PASS" endtime="20170803 20:14:02.785"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:02.785">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:14:02.785">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\ndev                  devtmpfs      210.2M         0    210.2M   0% /dev\ntmpfs                tmpfs         211.1M    ...</msg>
<status starttime="20170803 20:14:02.660" status="PASS" endtime="20170803 20:14:02.785"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:02.786">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     14.1...</msg>
<status starttime="20170803 20:14:02.786" status="PASS" endtime="20170803 20:14:02.786"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:02.786">${stderr} = </msg>
<status starttime="20170803 20:14:02.786" status="PASS" endtime="20170803 20:14:02.786"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170803 20:14:02.793">Appended to file '&lt;a href="file:///tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt"&gt;/tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170803 20:14:02.792" status="PASS" endtime="20170803 20:14:02.793"></status>
</kw>
<status starttime="20170803 20:14:02.792" status="PASS" endtime="20170803 20:14:02.793"></status>
</kw>
<status starttime="20170803 20:14:02.787" status="PASS" endtime="20170803 20:14:02.793"></status>
</kw>
<status starttime="20170803 20:14:02.652" status="PASS" endtime="20170803 20:14:02.793"></status>
</kw>
<status starttime="20170803 20:14:02.652" status="PASS" endtime="20170803 20:14:02.793"></status>
</kw>
<status starttime="20170803 20:14:02.320" status="PASS" endtime="20170803 20:14:02.793"></status>
</kw>
<status starttime="20170803 20:14:02.319" status="PASS" endtime="20170803 20:14:02.793"></status>
</kw>
<status starttime="20170803 20:14:02.319" status="PASS" endtime="20170803 20:14:02.793"></status>
</kw>
<status starttime="20170803 20:14:00.630" status="PASS" endtime="20170803 20:14:02.793"></status>
</kw>
<status starttime="20170803 20:14:00.630" status="PASS" endtime="20170803 20:14:02.794"></status>
</kw>
<status starttime="20170803 20:14:00.604" status="PASS" endtime="20170803 20:14:02.794"></status>
</kw>
<status starttime="20170803 20:14:00.602" status="PASS" endtime="20170803 20:14:02.794"></status>
</kw>
<status starttime="20170803 20:14:00.601" status="PASS" endtime="20170803 20:14:02.794"></status>
</kw>
<kw name="${method} = ('OS FFDC', 'OS FFDC Files')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170803 20:14:02.795" status="PASS" endtime="20170803 20:14:02.796"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:02.796">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:14:02.796">${ret_values} = None</msg>
<status starttime="20170803 20:14:02.795" status="PASS" endtime="20170803 20:14:02.796"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170803 20:14:02.796" status="PASS" endtime="20170803 20:14:02.796"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="OS FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:02.822">Returning from the enclosing user keyword.</msg>
<status starttime="20170803 20:14:02.822" status="PASS" endtime="20170803 20:14:02.823"></status>
</kw>
<status starttime="20170803 20:14:02.821" status="PASS" endtime="20170803 20:14:02.823"></status>
</kw>
<status starttime="20170803 20:14:02.797" status="PASS" endtime="20170803 20:14:02.823"></status>
</kw>
<status starttime="20170803 20:14:02.794" status="PASS" endtime="20170803 20:14:02.823"></status>
</kw>
<status starttime="20170803 20:14:02.794" status="PASS" endtime="20170803 20:14:02.823"></status>
</kw>
<kw name="${method} = ('Core Files', 'SCP Coredump Files')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170803 20:14:02.824" status="PASS" endtime="20170803 20:14:02.825"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:02.825">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:14:02.825">${ret_values} = None</msg>
<status starttime="20170803 20:14:02.824" status="PASS" endtime="20170803 20:14:02.825"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170803 20:14:02.825" status="PASS" endtime="20170803 20:14:02.825"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="SCP Coredump Files">
<doc>Copy core dump file from BMC to local system.</doc>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:02.884">path_separator=/
port=22
encoding=UTF-8
term_type=vt100
alias=bmc_connection
newline=

prompt=# 
width=80
timeout=25 seconds
index=1
host=9.3.86.161
height=24</msg>
<msg level="INFO" timestamp="20170803 20:14:02.885">Executing command 'ls /tmp/core_*'.</msg>
<msg level="INFO" timestamp="20170803 20:14:02.951">Command exited with return code 1.</msg>
<msg level="INFO" timestamp="20170803 20:14:02.963">${core_files} = None</msg>
<msg level="INFO" timestamp="20170803 20:14:02.963">${stderr} = None</msg>
<msg level="INFO" timestamp="20170803 20:14:02.963">${rc} = None</msg>
<msg level="FAIL" timestamp="20170803 20:14:02.964">#(UTC) 2017/08/03 20:14:02.962433 -    0.078470 - **ERROR** The prior SSH command returned a non-zero return code:
rc:                                               0x00000001
ls: /tmp/core_*: No such file or directory
: 1 != 0</msg>
<status starttime="20170803 20:14:02.851" status="FAIL" endtime="20170803 20:14:02.964"></status>
</kw>
<kw library="String" name="Split String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:02.964">@{core_list} = [ ]</msg>
<msg level="FAIL" timestamp="20170803 20:14:02.965">AttributeError: 'NoneType' object has no attribute 'split'</msg>
<status starttime="20170803 20:14:02.964" status="FAIL" endtime="20170803 20:14:02.965"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key U">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw library="connection_client" name="Open Connection for SCP">
<kw library="BuiltIn" name="Import Library">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status starttime="20170803 20:14:02.975" status="PASS" endtime="20170803 20:14:02.993"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw library="scp" name="Open Connection">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status starttime="20170803 20:14:02.995" status="PASS" endtime="20170803 20:14:03.733"></status>
</kw>
<status starttime="20170803 20:14:02.994" status="PASS" endtime="20170803 20:14:03.733"></status>
</kw>
<status starttime="20170803 20:14:02.994" status="PASS" endtime="20170803 20:14:03.733"></status>
</kw>
<status starttime="20170803 20:14:02.975" status="PASS" endtime="20170803 20:14:03.733"></status>
</kw>
<status starttime="20170803 20:14:02.965" status="PASS" endtime="20170803 20:14:03.733"></status>
</kw>
<kw name="${index} IN [ @{core_list} ]" type="for">
<status starttime="20170803 20:14:03.733" status="PASS" endtime="20170803 20:14:03.733"></status>
</kw>
<status starttime="20170803 20:14:02.850" status="FAIL" endtime="20170803 20:14:03.733"></status>
</kw>
<status starttime="20170803 20:14:02.826" status="PASS" endtime="20170803 20:14:03.734"></status>
</kw>
<status starttime="20170803 20:14:02.823" status="PASS" endtime="20170803 20:14:03.734"></status>
</kw>
<status starttime="20170803 20:14:02.823" status="PASS" endtime="20170803 20:14:03.734"></status>
</kw>
<kw name="${method} = ('BMC Specific Files', 'BMC FFDC Files')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170803 20:14:03.735" status="PASS" endtime="20170803 20:14:03.736"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:03.736">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:14:03.736">${ret_values} = None</msg>
<status starttime="20170803 20:14:03.735" status="PASS" endtime="20170803 20:14:03.736"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170803 20:14:03.736" status="PASS" endtime="20170803 20:14:03.736"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc File Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:03.764">@{entries} = [ BMC FILES ]</msg>
<status starttime="20170803 20:14:03.763" status="PASS" endtime="20170803 20:14:03.764"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC FILES" type="foritem">
<kw library="openbmc_ffdc_methods" name="Create File and Write Data">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc File">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:03.765">@{cmd_list} = [ ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_journalctl', 'journalctl --no-pager') | ('BMC_dmesg', 'dmesg'...</msg>
<status starttime="20170803 20:14:03.765" status="PASS" endtime="20170803 20:14:03.765"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:03.766">${logpath} = /tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_procinfo.txt</msg>
<status starttime="20170803 20:14:03.766" status="PASS" endtime="20170803 20:14:03.766"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170803 20:14:03.767" status="PASS" endtime="20170803 20:14:03.767"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:03.768">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status starttime="20170803 20:14:03.768" status="PASS" endtime="20170803 20:14:03.768"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:03.838">path_separator=/
port=22
encoding=UTF-8
term_type=vt100
alias=bmc_connection
newline=

prompt=# 
width=80
timeout=25 seconds
index=1
host=9.3.86.161
height=24</msg>
<msg level="INFO" timestamp="20170803 20:14:03.838">Executing command 'cat /proc/cpuinfo'.</msg>
<msg level="INFO" timestamp="20170803 20:14:03.895">Command exited with return code 0.</msg>
<status starttime="20170803 20:14:03.799" status="PASS" endtime="20170803 20:14:03.895"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:03.895">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:14:03.895">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status starttime="20170803 20:14:03.768" status="PASS" endtime="20170803 20:14:03.895"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:03.896">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status starttime="20170803 20:14:03.895" status="PASS" endtime="20170803 20:14:03.896"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:03.896">${stderr} = </msg>
<status starttime="20170803 20:14:03.896" status="PASS" endtime="20170803 20:14:03.896"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170803 20:14:03.903">Appended to file '&lt;a href="file:///tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_procinfo.txt"&gt;/tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status starttime="20170803 20:14:03.902" status="PASS" endtime="20170803 20:14:03.903"></status>
</kw>
<status starttime="20170803 20:14:03.902" status="PASS" endtime="20170803 20:14:03.903"></status>
</kw>
<status starttime="20170803 20:14:03.897" status="PASS" endtime="20170803 20:14:03.903"></status>
</kw>
<status starttime="20170803 20:14:03.766" status="PASS" endtime="20170803 20:14:03.904"></status>
</kw>
<status starttime="20170803 20:14:03.765" status="PASS" endtime="20170803 20:14:03.904"></status>
</kw>
<kw name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:03.904">${logpath} = /tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_proc_fd_active_list.txt</msg>
<status starttime="20170803 20:14:03.904" status="PASS" endtime="20170803 20:14:03.904"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170803 20:14:03.905" status="PASS" endtime="20170803 20:14:03.906"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:03.906">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status starttime="20170803 20:14:03.906" status="PASS" endtime="20170803 20:14:03.906"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:03.975">path_separator=/
port=22
encoding=UTF-8
term_type=vt100
alias=bmc_connection
newline=

prompt=# 
width=80
timeout=25 seconds
index=1
host=9.3.86.161
height=24</msg>
<msg level="INFO" timestamp="20170803 20:14:03.975">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg level="INFO" timestamp="20170803 20:14:04.528">Command exited with return code 0.</msg>
<status starttime="20170803 20:14:03.939" status="PASS" endtime="20170803 20:14:04.529"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:04.529">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:14:04.530">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Aug  3 20:14 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Aug  3 20:14 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status starttime="20170803 20:14:03.907" status="PASS" endtime="20170803 20:14:04.530"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:04.531">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Aug  3 20:14 0 -&gt; /dev/null
lrwx------    1 root     root            64 Aug  3 20:14 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status starttime="20170803 20:14:04.531" status="PASS" endtime="20170803 20:14:04.531"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:04.532">${stderr} = ls: /proc/3290/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status starttime="20170803 20:14:04.531" status="PASS" endtime="20170803 20:14:04.532"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170803 20:14:04.539">Appended to file '&lt;a href="file:///tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_proc_fd_active_list.txt"&gt;/tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status starttime="20170803 20:14:04.538" status="PASS" endtime="20170803 20:14:04.539"></status>
</kw>
<status starttime="20170803 20:14:04.537" status="PASS" endtime="20170803 20:14:04.539"></status>
</kw>
<status starttime="20170803 20:14:04.532" status="PASS" endtime="20170803 20:14:04.539"></status>
</kw>
<status starttime="20170803 20:14:03.905" status="PASS" endtime="20170803 20:14:04.540"></status>
</kw>
<status starttime="20170803 20:14:03.904" status="PASS" endtime="20170803 20:14:04.540"></status>
</kw>
<kw name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:04.541">${logpath} = /tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_meminfo.txt</msg>
<status starttime="20170803 20:14:04.540" status="PASS" endtime="20170803 20:14:04.541"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170803 20:14:04.542" status="PASS" endtime="20170803 20:14:04.543"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:04.544">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status starttime="20170803 20:14:04.543" status="PASS" endtime="20170803 20:14:04.544"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:04.613">path_separator=/
port=22
encoding=UTF-8
term_type=vt100
alias=bmc_connection
newline=

prompt=# 
width=80
timeout=25 seconds
index=1
host=9.3.86.161
height=24</msg>
<msg level="INFO" timestamp="20170803 20:14:04.614">Executing command 'cat /proc/meminfo'.</msg>
<msg level="INFO" timestamp="20170803 20:14:04.682">Command exited with return code 0.</msg>
<status starttime="20170803 20:14:04.576" status="PASS" endtime="20170803 20:14:04.682"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:04.683">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:14:04.683">${ret_values} = (u'MemTotal:         432268 kB\nMemFree:          271232 kB\nMemAvailable:     319688 kB\nBuffers:           11556 kB\nCached:            53312 kB\nSwapCached:            0 kB\nActive:           10330...</msg>
<status starttime="20170803 20:14:04.544" status="PASS" endtime="20170803 20:14:04.683"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:04.683">${stdout} = MemTotal:         432268 kB
MemFree:          271232 kB
MemAvailable:     319688 kB
Buffers:           11556 kB
Cached:            53312 kB
SwapCached:            0 kB
Active:           103308 kB
Inac...</msg>
<status starttime="20170803 20:14:04.683" status="PASS" endtime="20170803 20:14:04.683"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:04.684">${stderr} = </msg>
<status starttime="20170803 20:14:04.684" status="PASS" endtime="20170803 20:14:04.684"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170803 20:14:04.691">Appended to file '&lt;a href="file:///tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_meminfo.txt"&gt;/tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status starttime="20170803 20:14:04.690" status="PASS" endtime="20170803 20:14:04.691"></status>
</kw>
<status starttime="20170803 20:14:04.689" status="PASS" endtime="20170803 20:14:04.691"></status>
</kw>
<status starttime="20170803 20:14:04.684" status="PASS" endtime="20170803 20:14:04.691"></status>
</kw>
<status starttime="20170803 20:14:04.541" status="PASS" endtime="20170803 20:14:04.691"></status>
</kw>
<status starttime="20170803 20:14:04.540" status="PASS" endtime="20170803 20:14:04.691"></status>
</kw>
<kw name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:04.692">${logpath} = /tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_journalctl.txt</msg>
<status starttime="20170803 20:14:04.691" status="PASS" endtime="20170803 20:14:04.692"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170803 20:14:04.693" status="PASS" endtime="20170803 20:14:04.693"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:04.694">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status starttime="20170803 20:14:04.693" status="PASS" endtime="20170803 20:14:04.694"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:04.762">path_separator=/
port=22
encoding=UTF-8
term_type=vt100
alias=bmc_connection
newline=

prompt=# 
width=80
timeout=25 seconds
index=1
host=9.3.86.161
height=24</msg>
<msg level="INFO" timestamp="20170803 20:14:04.762">Executing command 'journalctl --no-pager'.</msg>
<msg level="INFO" timestamp="20170803 20:14:08.457">Command exited with return code 0.</msg>
<status starttime="20170803 20:14:04.726" status="PASS" endtime="20170803 20:14:08.458"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:08.458">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:14:08.463">${ret_values} = (u'-- Logs begin at Thu 2017-08-03 19:52:51 UTC, end at Thu 2017-08-03 20:14:08 UTC. --\nAug 03 19:52:51 witherspoon kernel: Booting Linux on physical CPU 0x0\nAug 03 19:52:51 witherspoon kernel: Linu...</msg>
<status starttime="20170803 20:14:04.694" status="PASS" endtime="20170803 20:14:08.464"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:08.465">${stdout} = -- Logs begin at Thu 2017-08-03 19:52:51 UTC, end at Thu 2017-08-03 20:14:08 UTC. --
Aug 03 19:52:51 witherspoon kernel: Booting Linux on physical CPU 0x0
Aug 03 19:52:51 witherspoon kernel: Linux ver...</msg>
<status starttime="20170803 20:14:08.464" status="PASS" endtime="20170803 20:14:08.465"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:08.466">${stderr} = </msg>
<status starttime="20170803 20:14:08.466" status="PASS" endtime="20170803 20:14:08.466"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170803 20:14:08.475">Appended to file '&lt;a href="file:///tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_journalctl.txt"&gt;/tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status starttime="20170803 20:14:08.473" status="PASS" endtime="20170803 20:14:08.475"></status>
</kw>
<status starttime="20170803 20:14:08.471" status="PASS" endtime="20170803 20:14:08.475"></status>
</kw>
<status starttime="20170803 20:14:08.466" status="PASS" endtime="20170803 20:14:08.475"></status>
</kw>
<status starttime="20170803 20:14:04.692" status="PASS" endtime="20170803 20:14:08.475"></status>
</kw>
<status starttime="20170803 20:14:04.691" status="PASS" endtime="20170803 20:14:08.475"></status>
</kw>
<kw name="${cmd} = ('BMC_dmesg', 'dmesg')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:08.476">${logpath} = /tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_dmesg.txt</msg>
<status starttime="20170803 20:14:08.476" status="PASS" endtime="20170803 20:14:08.476"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170803 20:14:08.477" status="PASS" endtime="20170803 20:14:08.478"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:08.478">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status starttime="20170803 20:14:08.478" status="PASS" endtime="20170803 20:14:08.478"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:08.545">path_separator=/
port=22
encoding=UTF-8
term_type=vt100
alias=bmc_connection
newline=

prompt=# 
width=80
timeout=25 seconds
index=1
host=9.3.86.161
height=24</msg>
<msg level="INFO" timestamp="20170803 20:14:08.545">Executing command 'dmesg'.</msg>
<msg level="INFO" timestamp="20170803 20:14:08.721">Command exited with return code 0.</msg>
<status starttime="20170803 20:14:08.509" status="PASS" endtime="20170803 20:14:08.722"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:08.722">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:14:08.722">${ret_values} = (u"[  754.530000]  slave@01:00: engine[15]: type 1b, version 1, addr 48000 size 8000\n[  754.530000]  slave@01:00: engine[16]: type 1b, version 1, addr 50000 size 8000\n[  754.530000]  slave@01:00: en...</msg>
<status starttime="20170803 20:14:08.479" status="PASS" endtime="20170803 20:14:08.722"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:08.723">${stdout} = [  754.530000]  slave@01:00: engine[15]: type 1b, version 1, addr 48000 size 8000
[  754.530000]  slave@01:00: engine[16]: type 1b, version 1, addr 50000 size 8000
[  754.530000]  slave@01:00: engine[...</msg>
<status starttime="20170803 20:14:08.722" status="PASS" endtime="20170803 20:14:08.723"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:08.723">${stderr} = </msg>
<status starttime="20170803 20:14:08.723" status="PASS" endtime="20170803 20:14:08.723"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170803 20:14:08.730">Appended to file '&lt;a href="file:///tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_dmesg.txt"&gt;/tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status starttime="20170803 20:14:08.729" status="PASS" endtime="20170803 20:14:08.730"></status>
</kw>
<status starttime="20170803 20:14:08.729" status="PASS" endtime="20170803 20:14:08.730"></status>
</kw>
<status starttime="20170803 20:14:08.724" status="PASS" endtime="20170803 20:14:08.730"></status>
</kw>
<status starttime="20170803 20:14:08.477" status="PASS" endtime="20170803 20:14:08.731"></status>
</kw>
<status starttime="20170803 20:14:08.476" status="PASS" endtime="20170803 20:14:08.731"></status>
</kw>
<kw name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:08.731">${logpath} = /tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_proc_list.txt</msg>
<status starttime="20170803 20:14:08.731" status="PASS" endtime="20170803 20:14:08.731"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170803 20:14:08.732" status="PASS" endtime="20170803 20:14:08.733"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:08.733">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status starttime="20170803 20:14:08.733" status="PASS" endtime="20170803 20:14:08.733"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:08.801">path_separator=/
port=22
encoding=UTF-8
term_type=vt100
alias=bmc_connection
newline=

prompt=# 
width=80
timeout=25 seconds
index=1
host=9.3.86.161
height=24</msg>
<msg level="INFO" timestamp="20170803 20:14:08.801">Executing command 'top -n 1 -b'.</msg>
<msg level="INFO" timestamp="20170803 20:14:09.162">Command exited with return code 0.</msg>
<status starttime="20170803 20:14:08.764" status="PASS" endtime="20170803 20:14:09.162"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:09.162">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:14:09.162">${ret_values} = (u'Mem: 161036K used, 271232K free, 14732K shrd, 11556K buff, 53320K cached\nCPU:   8% usr   8% sys   0% nic  83% idle   0% io   0% irq   0% sirq\nLoad average: 0.62 0.98 1.10 1/155 3294\n  PID  PPID ...</msg>
<status starttime="20170803 20:14:08.734" status="PASS" endtime="20170803 20:14:09.162"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:09.163">${stdout} = Mem: 161036K used, 271232K free, 14732K shrd, 11556K buff, 53320K cached
CPU:   8% usr   8% sys   0% nic  83% idle   0% io   0% irq   0% sirq
Load average: 0.62 0.98 1.10 1/155 3294
  PID  PPID USER  ...</msg>
<status starttime="20170803 20:14:09.163" status="PASS" endtime="20170803 20:14:09.163"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:09.164">${stderr} = </msg>
<status starttime="20170803 20:14:09.163" status="PASS" endtime="20170803 20:14:09.164"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170803 20:14:09.170">Appended to file '&lt;a href="file:///tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_proc_list.txt"&gt;/tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status starttime="20170803 20:14:09.170" status="PASS" endtime="20170803 20:14:09.170"></status>
</kw>
<status starttime="20170803 20:14:09.169" status="PASS" endtime="20170803 20:14:09.170"></status>
</kw>
<status starttime="20170803 20:14:09.164" status="PASS" endtime="20170803 20:14:09.171"></status>
</kw>
<status starttime="20170803 20:14:08.732" status="PASS" endtime="20170803 20:14:09.171"></status>
</kw>
<status starttime="20170803 20:14:08.731" status="PASS" endtime="20170803 20:14:09.171"></status>
</kw>
<status starttime="20170803 20:14:03.765" status="PASS" endtime="20170803 20:14:09.171"></status>
</kw>
<status starttime="20170803 20:14:03.764" status="PASS" endtime="20170803 20:14:09.171"></status>
</kw>
<status starttime="20170803 20:14:03.764" status="PASS" endtime="20170803 20:14:09.171"></status>
</kw>
<status starttime="20170803 20:14:03.764" status="PASS" endtime="20170803 20:14:09.171"></status>
</kw>
<status starttime="20170803 20:14:03.763" status="PASS" endtime="20170803 20:14:09.171"></status>
</kw>
<status starttime="20170803 20:14:03.737" status="PASS" endtime="20170803 20:14:09.171"></status>
</kw>
<status starttime="20170803 20:14:03.734" status="PASS" endtime="20170803 20:14:09.171"></status>
</kw>
<status starttime="20170803 20:14:03.734" status="PASS" endtime="20170803 20:14:09.171"></status>
</kw>
<kw name="${method} = ('SEL Log', 'Collect eSEL Log')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170803 20:14:09.173" status="PASS" endtime="20170803 20:14:09.173"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:09.173">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:14:09.173">${ret_values} = None</msg>
<status starttime="20170803 20:14:09.172" status="PASS" endtime="20170803 20:14:09.173"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170803 20:14:09.174" status="PASS" endtime="20170803 20:14:09.174"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="Collect eSEL Log">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:09.202">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:14:09.202" status="PASS" endtime="20170803 20:14:09.202"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:09.203">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:14:09.203" status="PASS" endtime="20170803 20:14:09.203"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:09.204">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:14:09.203" status="PASS" endtime="20170803 20:14:09.204"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:09.204">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:14:09.204" status="PASS" endtime="20170803 20:14:09.204"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:09.406">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:14:09.205" status="PASS" endtime="20170803 20:14:09.407"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:09.407">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:14:09.407">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:14:09.205" status="PASS" endtime="20170803 20:14:09.407"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:09.407">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:14:09.407" status="PASS" endtime="20170803 20:14:09.407"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:09.408">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:14:09.408" status="PASS" endtime="20170803 20:14:09.408"></status>
</kw>
<status starttime="20170803 20:14:09.201" status="PASS" endtime="20170803 20:14:09.408"></status>
</kw>
<status starttime="20170803 20:14:09.201" status="PASS" endtime="20170803 20:14:09.408"></status>
</kw>
<status starttime="20170803 20:14:09.200" status="PASS" endtime="20170803 20:14:09.408"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:09.409">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status starttime="20170803 20:14:09.409" status="PASS" endtime="20170803 20:14:09.409"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170803 20:14:09.409" status="PASS" endtime="20170803 20:14:09.410"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:09.596">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:14:09.597">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:14:09.410" status="PASS" endtime="20170803 20:14:09.597"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170803 20:14:09.597" status="PASS" endtime="20170803 20:14:09.597"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:14:09.598">Delete All Sessions</msg>
<status starttime="20170803 20:14:09.597" status="PASS" endtime="20170803 20:14:09.598"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:09.598">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:14:09.199" status="PASS" endtime="20170803 20:14:09.598"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:09.599">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:14:09.599" status="PASS" endtime="20170803 20:14:09.599"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:09.599">${status} = True</msg>
<status starttime="20170803 20:14:09.598" status="PASS" endtime="20170803 20:14:09.599"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<status starttime="20170803 20:14:09.599" status="PASS" endtime="20170803 20:14:09.600"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:09.600">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [], 
      "Id": 2, 
      "Message": "xyz.openbmc_project.Software.Version.Error.ManifestFileFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501790102396, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [], 
      "Id": 3, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501790682889, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/4": {
      "AdditionalData": [], 
      "Id": 4, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501790749578, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/5": {
      "AdditionalData": [], 
      "Id": 5, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501790817034, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/6": {
      "AdditionalData": [], 
      "Id": 6, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501790887267, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:14:09.600">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:14:09.601">${content} = {u'data': {u'/xyz/openbmc_project/logging/entry/6': {u'Message': u'org.open_power.Host.Error.WatchdogTimedOut', u'associations': [], u'AdditionalData': [], u'Severity': u'xyz.openbmc_project.Logging.E...</msg>
<status starttime="20170803 20:14:09.600" status="PASS" endtime="20170803 20:14:09.601"></status>
</kw>
<kw library="Collections" name="Get Dictionary Keys">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${content['data']}</arg>
</arguments>
<assign>
<var>${esel_list}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:09.601">${esel_list} = [u'/xyz/openbmc_project/logging/entry/2', u'/xyz/openbmc_project/logging/entry/3', u'/xyz/openbmc_project/logging/entry/4', u'/xyz/openbmc_project/logging/entry/5', u'/xyz/openbmc_project/logging/entr...</msg>
<status starttime="20170803 20:14:09.601" status="PASS" endtime="20170803 20:14:09.601"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>esel</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:09.602">${logpath} = /tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_esel</msg>
<status starttime="20170803 20:14:09.602" status="PASS" endtime="20170803 20:14:09.602"></status>
</kw>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${logpath}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170803 20:14:09.603">Created file '&lt;a href="file:///tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_esel"&gt;/tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_esel&lt;/a&gt;'.</msg>
<status starttime="20170803 20:14:09.602" status="PASS" endtime="20170803 20:14:09.603"></status>
</kw>
<kw name="${entry_path} IN [ @{esel_list} ]" type="for">
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/2" type="foritem">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status starttime="20170803 20:14:09.603" status="PASS" endtime="20170803 20:14:09.604"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:09.607">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:14:09.607" status="PASS" endtime="20170803 20:14:09.608"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:09.608">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:14:09.608" status="PASS" endtime="20170803 20:14:09.608"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:09.609">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:14:09.608" status="PASS" endtime="20170803 20:14:09.609"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:09.610">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:14:09.609" status="PASS" endtime="20170803 20:14:09.610"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:09.805">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:14:09.610" status="PASS" endtime="20170803 20:14:09.805"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:09.805">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:14:09.805">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:14:09.610" status="PASS" endtime="20170803 20:14:09.805"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:09.806">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:14:09.806" status="PASS" endtime="20170803 20:14:09.806"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:09.807">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:14:09.806" status="PASS" endtime="20170803 20:14:09.807"></status>
</kw>
<status starttime="20170803 20:14:09.606" status="PASS" endtime="20170803 20:14:09.807"></status>
</kw>
<status starttime="20170803 20:14:09.606" status="PASS" endtime="20170803 20:14:09.807"></status>
</kw>
<status starttime="20170803 20:14:09.605" status="PASS" endtime="20170803 20:14:09.807"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:09.808">${base_uri} = /xyz/openbmc_project/logging/entry/2/attr/AdditionalData</msg>
<status starttime="20170803 20:14:09.807" status="PASS" endtime="20170803 20:14:09.808"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170803 20:14:09.808" status="PASS" endtime="20170803 20:14:09.809"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:09.901">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/2/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:14:09.901">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:14:09.809" status="PASS" endtime="20170803 20:14:09.901"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170803 20:14:09.901" status="PASS" endtime="20170803 20:14:09.901"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:14:09.902">Delete All Sessions</msg>
<status starttime="20170803 20:14:09.902" status="PASS" endtime="20170803 20:14:09.902"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:09.902">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:14:09.605" status="PASS" endtime="20170803 20:14:09.902"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:09.903">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:14:09.902" status="PASS" endtime="20170803 20:14:09.903"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:09.903">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:14:09.903">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:14:09.904">${content} = {u'data': [], u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:14:09.903" status="PASS" endtime="20170803 20:14:09.904"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:09.904">${esel_data} = []</msg>
<status starttime="20170803 20:14:09.604" status="PASS" endtime="20170803 20:14:09.904"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:09.904">Length is 0</msg>
<msg level="INFO" timestamp="20170803 20:14:09.904">${length} = 0</msg>
<status starttime="20170803 20:14:09.904" status="PASS" endtime="20170803 20:14:09.904"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:09.905">Continuing for loop from the next iteration.</msg>
<status starttime="20170803 20:14:09.905" status="PASS" endtime="20170803 20:14:09.905"></status>
</kw>
<status starttime="20170803 20:14:09.603" status="PASS" endtime="20170803 20:14:09.905"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/3" type="foritem">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status starttime="20170803 20:14:09.906" status="PASS" endtime="20170803 20:14:09.906"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:09.909">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:14:09.909" status="PASS" endtime="20170803 20:14:09.910"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:09.911">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:14:09.910" status="PASS" endtime="20170803 20:14:09.911"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:09.911">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:14:09.911" status="PASS" endtime="20170803 20:14:09.911"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:09.912">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:14:09.911" status="PASS" endtime="20170803 20:14:09.912"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:10.163">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:14:09.913" status="PASS" endtime="20170803 20:14:10.163"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:10.163">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:14:10.163">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:14:09.912" status="PASS" endtime="20170803 20:14:10.163"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:10.164">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:14:10.163" status="PASS" endtime="20170803 20:14:10.164"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:10.164">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:14:10.164" status="PASS" endtime="20170803 20:14:10.164"></status>
</kw>
<status starttime="20170803 20:14:09.908" status="PASS" endtime="20170803 20:14:10.165"></status>
</kw>
<status starttime="20170803 20:14:09.908" status="PASS" endtime="20170803 20:14:10.165"></status>
</kw>
<status starttime="20170803 20:14:09.907" status="PASS" endtime="20170803 20:14:10.165"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:10.165">${base_uri} = /xyz/openbmc_project/logging/entry/3/attr/AdditionalData</msg>
<status starttime="20170803 20:14:10.165" status="PASS" endtime="20170803 20:14:10.165"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170803 20:14:10.166" status="PASS" endtime="20170803 20:14:10.166"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:10.281">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/3/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:14:10.281">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:14:10.166" status="PASS" endtime="20170803 20:14:10.281"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170803 20:14:10.281" status="PASS" endtime="20170803 20:14:10.281"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:14:10.282">Delete All Sessions</msg>
<status starttime="20170803 20:14:10.282" status="PASS" endtime="20170803 20:14:10.282"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:10.282">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:14:09.907" status="PASS" endtime="20170803 20:14:10.282"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:10.283">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:14:10.282" status="PASS" endtime="20170803 20:14:10.283"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:10.283">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:14:10.283">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:14:10.283">${content} = {u'data': [], u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:14:10.283" status="PASS" endtime="20170803 20:14:10.284"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:10.284">${esel_data} = []</msg>
<status starttime="20170803 20:14:09.906" status="PASS" endtime="20170803 20:14:10.284"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:10.284">Length is 0</msg>
<msg level="INFO" timestamp="20170803 20:14:10.284">${length} = 0</msg>
<status starttime="20170803 20:14:10.284" status="PASS" endtime="20170803 20:14:10.284"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:10.285">Continuing for loop from the next iteration.</msg>
<status starttime="20170803 20:14:10.285" status="PASS" endtime="20170803 20:14:10.285"></status>
</kw>
<status starttime="20170803 20:14:09.905" status="PASS" endtime="20170803 20:14:10.285"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/4" type="foritem">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status starttime="20170803 20:14:10.286" status="PASS" endtime="20170803 20:14:10.286"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:10.289">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:14:10.289" status="PASS" endtime="20170803 20:14:10.290"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:10.291">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:14:10.290" status="PASS" endtime="20170803 20:14:10.291"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:10.291">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:14:10.291" status="PASS" endtime="20170803 20:14:10.291"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:10.292">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:14:10.292" status="PASS" endtime="20170803 20:14:10.292"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:10.486">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:14:10.293" status="PASS" endtime="20170803 20:14:10.487"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:10.487">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:14:10.487">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:14:10.292" status="PASS" endtime="20170803 20:14:10.487"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:10.487">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:14:10.487" status="PASS" endtime="20170803 20:14:10.487"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:10.488">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:14:10.488" status="PASS" endtime="20170803 20:14:10.488"></status>
</kw>
<status starttime="20170803 20:14:10.288" status="PASS" endtime="20170803 20:14:10.488"></status>
</kw>
<status starttime="20170803 20:14:10.288" status="PASS" endtime="20170803 20:14:10.488"></status>
</kw>
<status starttime="20170803 20:14:10.287" status="PASS" endtime="20170803 20:14:10.489"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:10.489">${base_uri} = /xyz/openbmc_project/logging/entry/4/attr/AdditionalData</msg>
<status starttime="20170803 20:14:10.489" status="PASS" endtime="20170803 20:14:10.489"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170803 20:14:10.489" status="PASS" endtime="20170803 20:14:10.490"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:10.572">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/4/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:14:10.572">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:14:10.490" status="PASS" endtime="20170803 20:14:10.572"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170803 20:14:10.572" status="PASS" endtime="20170803 20:14:10.573"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:14:10.573">Delete All Sessions</msg>
<status starttime="20170803 20:14:10.573" status="PASS" endtime="20170803 20:14:10.573"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:10.573">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:14:10.287" status="PASS" endtime="20170803 20:14:10.573"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:10.574">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:14:10.574" status="PASS" endtime="20170803 20:14:10.574"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:10.575">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:14:10.575">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:14:10.575">${content} = {u'data': [], u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:14:10.574" status="PASS" endtime="20170803 20:14:10.575"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:10.575">${esel_data} = []</msg>
<status starttime="20170803 20:14:10.286" status="PASS" endtime="20170803 20:14:10.575"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:10.576">Length is 0</msg>
<msg level="INFO" timestamp="20170803 20:14:10.576">${length} = 0</msg>
<status starttime="20170803 20:14:10.575" status="PASS" endtime="20170803 20:14:10.576"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:10.576">Continuing for loop from the next iteration.</msg>
<status starttime="20170803 20:14:10.576" status="PASS" endtime="20170803 20:14:10.576"></status>
</kw>
<status starttime="20170803 20:14:10.285" status="PASS" endtime="20170803 20:14:10.577"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/5" type="foritem">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status starttime="20170803 20:14:10.577" status="PASS" endtime="20170803 20:14:10.577"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:10.581">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:14:10.580" status="PASS" endtime="20170803 20:14:10.581"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:10.582">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:14:10.582" status="PASS" endtime="20170803 20:14:10.582"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:10.583">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:14:10.582" status="PASS" endtime="20170803 20:14:10.583"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:10.583">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:14:10.583" status="PASS" endtime="20170803 20:14:10.583"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:10.894">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:14:10.584" status="PASS" endtime="20170803 20:14:10.895"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:10.895">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:14:10.895">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:14:10.584" status="PASS" endtime="20170803 20:14:10.895"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:10.895">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:14:10.895" status="PASS" endtime="20170803 20:14:10.895"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:10.896">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:14:10.896" status="PASS" endtime="20170803 20:14:10.896"></status>
</kw>
<status starttime="20170803 20:14:10.580" status="PASS" endtime="20170803 20:14:10.896"></status>
</kw>
<status starttime="20170803 20:14:10.579" status="PASS" endtime="20170803 20:14:10.896"></status>
</kw>
<status starttime="20170803 20:14:10.579" status="PASS" endtime="20170803 20:14:10.897"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:10.897">${base_uri} = /xyz/openbmc_project/logging/entry/5/attr/AdditionalData</msg>
<status starttime="20170803 20:14:10.897" status="PASS" endtime="20170803 20:14:10.897"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170803 20:14:10.897" status="PASS" endtime="20170803 20:14:10.898"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:10.993">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/5/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:14:10.993">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:14:10.898" status="PASS" endtime="20170803 20:14:10.993"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170803 20:14:10.993" status="PASS" endtime="20170803 20:14:10.994"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:14:10.994">Delete All Sessions</msg>
<status starttime="20170803 20:14:10.994" status="PASS" endtime="20170803 20:14:10.994"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:10.994">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:14:10.578" status="PASS" endtime="20170803 20:14:10.994"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:10.995">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:14:10.995" status="PASS" endtime="20170803 20:14:10.995"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:10.996">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:14:10.996">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:14:10.996">${content} = {u'data': [], u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:14:10.995" status="PASS" endtime="20170803 20:14:10.996"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:10.996">${esel_data} = []</msg>
<status starttime="20170803 20:14:10.578" status="PASS" endtime="20170803 20:14:10.996"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:10.997">Length is 0</msg>
<msg level="INFO" timestamp="20170803 20:14:10.997">${length} = 0</msg>
<status starttime="20170803 20:14:10.997" status="PASS" endtime="20170803 20:14:10.997"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:10.997">Continuing for loop from the next iteration.</msg>
<status starttime="20170803 20:14:10.997" status="PASS" endtime="20170803 20:14:10.998"></status>
</kw>
<status starttime="20170803 20:14:10.577" status="PASS" endtime="20170803 20:14:10.998"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/6" type="foritem">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status starttime="20170803 20:14:10.998" status="PASS" endtime="20170803 20:14:10.998"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:11.002">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:14:11.001" status="PASS" endtime="20170803 20:14:11.003"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:11.003">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:14:11.003" status="PASS" endtime="20170803 20:14:11.003"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:11.004">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:14:11.003" status="PASS" endtime="20170803 20:14:11.004"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:11.004">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:14:11.004" status="PASS" endtime="20170803 20:14:11.004"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:11.206">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:14:11.005" status="PASS" endtime="20170803 20:14:11.206"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:11.206">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:14:11.206">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:14:11.005" status="PASS" endtime="20170803 20:14:11.206"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:11.207">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:14:11.206" status="PASS" endtime="20170803 20:14:11.207"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:11.207">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:14:11.207" status="PASS" endtime="20170803 20:14:11.207"></status>
</kw>
<status starttime="20170803 20:14:11.001" status="PASS" endtime="20170803 20:14:11.208"></status>
</kw>
<status starttime="20170803 20:14:11.001" status="PASS" endtime="20170803 20:14:11.208"></status>
</kw>
<status starttime="20170803 20:14:11.000" status="PASS" endtime="20170803 20:14:11.208"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:11.208">${base_uri} = /xyz/openbmc_project/logging/entry/6/attr/AdditionalData</msg>
<status starttime="20170803 20:14:11.208" status="PASS" endtime="20170803 20:14:11.208"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170803 20:14:11.209" status="PASS" endtime="20170803 20:14:11.209"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:11.315">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/6/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:14:11.315">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:14:11.209" status="PASS" endtime="20170803 20:14:11.315"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170803 20:14:11.315" status="PASS" endtime="20170803 20:14:11.315"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:14:11.316">Delete All Sessions</msg>
<status starttime="20170803 20:14:11.316" status="PASS" endtime="20170803 20:14:11.316"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:11.316">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:14:10.999" status="PASS" endtime="20170803 20:14:11.316"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:11.317">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:14:11.316" status="PASS" endtime="20170803 20:14:11.317"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:11.317">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:14:11.317">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:14:11.318">${content} = {u'data': [], u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:14:11.317" status="PASS" endtime="20170803 20:14:11.318"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:11.318">${esel_data} = []</msg>
<status starttime="20170803 20:14:10.999" status="PASS" endtime="20170803 20:14:11.318"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:11.318">Length is 0</msg>
<msg level="INFO" timestamp="20170803 20:14:11.318">${length} = 0</msg>
<status starttime="20170803 20:14:11.318" status="PASS" endtime="20170803 20:14:11.318"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:11.319">Continuing for loop from the next iteration.</msg>
<status starttime="20170803 20:14:11.319" status="PASS" endtime="20170803 20:14:11.319"></status>
</kw>
<status starttime="20170803 20:14:10.998" status="PASS" endtime="20170803 20:14:11.319"></status>
</kw>
<status starttime="20170803 20:14:09.603" status="PASS" endtime="20170803 20:14:11.319"></status>
</kw>
<kw library="OperatingSystem" name="Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>which eSEL.pl</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:11.333">Running command 'which eSEL.pl 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170803 20:14:11.347">${out} = </msg>
<status starttime="20170803 20:14:11.320" status="PASS" endtime="20170803 20:14:11.348"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<msg level="FAIL" timestamp="20170803 20:14:11.351">'' does not contain 'eSEL.pl'</msg>
<status starttime="20170803 20:14:11.350" status="FAIL" endtime="20170803 20:14:11.351"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:11.351">${status} = False</msg>
<status starttime="20170803 20:14:11.350" status="PASS" endtime="20170803 20:14:11.351"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:11.352">Returning from the enclosing user keyword.</msg>
<status starttime="20170803 20:14:11.352" status="PASS" endtime="20170803 20:14:11.352"></status>
</kw>
<status starttime="20170803 20:14:09.199" status="PASS" endtime="20170803 20:14:11.353"></status>
</kw>
<status starttime="20170803 20:14:09.174" status="PASS" endtime="20170803 20:14:11.353"></status>
</kw>
<status starttime="20170803 20:14:09.172" status="PASS" endtime="20170803 20:14:11.353"></status>
</kw>
<status starttime="20170803 20:14:09.171" status="PASS" endtime="20170803 20:14:11.353"></status>
</kw>
<kw name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170803 20:14:11.355" status="PASS" endtime="20170803 20:14:11.356"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:11.356">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:14:11.356">${ret_values} = None</msg>
<status starttime="20170803 20:14:11.355" status="PASS" endtime="20170803 20:14:11.356"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170803 20:14:11.357" status="PASS" endtime="20170803 20:14:11.357"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Get Requests">
<doc>Get the command list and iterate</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:11.384">@{entries} = [ GET REQUESTS ]</msg>
<status starttime="20170803 20:14:11.384" status="PASS" endtime="20170803 20:14:11.384"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = GET REQUESTS" type="foritem">
<kw library="openbmc_ffdc_methods" name="Log FFDC Get Requests">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:11.387">@{cmd_list} = [ ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_led', '/org/openbmc/records/events/enumerate') | ('BMC_record_log', '/org/openbmc/control/led/enumerate') | ('BMC_elog', '/xyz/o...</msg>
<status starttime="20170803 20:14:11.386" status="PASS" endtime="20170803 20:14:11.387"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:11.387">${logpath} = /tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_inventory.txt</msg>
<status starttime="20170803 20:14:11.387" status="PASS" endtime="20170803 20:14:11.388"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:11.390">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:14:11.390" status="PASS" endtime="20170803 20:14:11.391"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:11.392">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:14:11.391" status="PASS" endtime="20170803 20:14:11.392"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:11.392">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:14:11.392" status="PASS" endtime="20170803 20:14:11.392"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:11.393">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:14:11.393" status="PASS" endtime="20170803 20:14:11.393"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:11.645">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:14:11.394" status="PASS" endtime="20170803 20:14:11.645"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:11.645">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:14:11.645">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:14:11.393" status="PASS" endtime="20170803 20:14:11.645"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:11.646">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:14:11.646" status="PASS" endtime="20170803 20:14:11.646"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:11.647">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:14:11.646" status="PASS" endtime="20170803 20:14:11.647"></status>
</kw>
<status starttime="20170803 20:14:11.389" status="PASS" endtime="20170803 20:14:11.647"></status>
</kw>
<status starttime="20170803 20:14:11.389" status="PASS" endtime="20170803 20:14:11.647"></status>
</kw>
<status starttime="20170803 20:14:11.388" status="PASS" endtime="20170803 20:14:11.647"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:11.647">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status starttime="20170803 20:14:11.647" status="PASS" endtime="20170803 20:14:11.648"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170803 20:14:11.648" status="PASS" endtime="20170803 20:14:11.648"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:11.897">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:14:11.897">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:14:11.649" status="PASS" endtime="20170803 20:14:11.897"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170803 20:14:11.897" status="PASS" endtime="20170803 20:14:11.898"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:14:11.898">Delete All Sessions</msg>
<status starttime="20170803 20:14:11.898" status="PASS" endtime="20170803 20:14:11.898"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:11.898">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:14:11.388" status="PASS" endtime="20170803 20:14:11.899"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:11.900">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:14:11.899" status="PASS" endtime="20170803 20:14:11.900"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:11.900">${status} = True</msg>
<status starttime="20170803 20:14:11.899" status="PASS" endtime="20170803 20:14:11.900"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170803 20:14:11.900" status="PASS" endtime="20170803 20:14:11.900"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:11.901">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 0
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:14:11.901">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170803 20:14:11.901">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system/chassis": {
            "AirCooled": 1,
            "WaterCooled": 0
        },
        "/xyz/openbmc_project/inventory/system/chassis/mo...</msg>
<status starttime="20170803 20:14:11.901" status="PASS" endtime="20170803 20:14:11.901"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170803 20:14:11.903">Appended to file '&lt;a href="file:///tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_inventory.txt"&gt;/tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status starttime="20170803 20:14:11.902" status="PASS" endtime="20170803 20:14:11.903"></status>
</kw>
<status starttime="20170803 20:14:11.902" status="PASS" endtime="20170803 20:14:11.903"></status>
</kw>
<status starttime="20170803 20:14:11.387" status="PASS" endtime="20170803 20:14:11.903"></status>
</kw>
<kw name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:11.904">${logpath} = /tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_led.txt</msg>
<status starttime="20170803 20:14:11.904" status="PASS" endtime="20170803 20:14:11.904"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:11.907">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:14:11.907" status="PASS" endtime="20170803 20:14:11.907"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:11.908">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:14:11.907" status="PASS" endtime="20170803 20:14:11.908"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:11.908">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:14:11.908" status="PASS" endtime="20170803 20:14:11.908"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:11.909">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:14:11.909" status="PASS" endtime="20170803 20:14:11.909"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:12.125">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:14:11.910" status="PASS" endtime="20170803 20:14:12.125"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:12.125">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:14:12.125">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:14:11.909" status="PASS" endtime="20170803 20:14:12.125"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:12.126">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:14:12.125" status="PASS" endtime="20170803 20:14:12.126"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:12.126">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:14:12.126" status="PASS" endtime="20170803 20:14:12.126"></status>
</kw>
<status starttime="20170803 20:14:11.906" status="PASS" endtime="20170803 20:14:12.126"></status>
</kw>
<status starttime="20170803 20:14:11.906" status="PASS" endtime="20170803 20:14:12.127"></status>
</kw>
<status starttime="20170803 20:14:11.905" status="PASS" endtime="20170803 20:14:12.127"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:12.127">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status starttime="20170803 20:14:12.127" status="PASS" endtime="20170803 20:14:12.127"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170803 20:14:12.128" status="PASS" endtime="20170803 20:14:12.128"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:12.172">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:14:12.172">${ret} = &lt;Response [404]&gt;</msg>
<status starttime="20170803 20:14:12.128" status="PASS" endtime="20170803 20:14:12.173"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170803 20:14:12.173" status="PASS" endtime="20170803 20:14:12.173"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:14:12.173">Delete All Sessions</msg>
<status starttime="20170803 20:14:12.173" status="PASS" endtime="20170803 20:14:12.174"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:12.174">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20170803 20:14:11.904" status="PASS" endtime="20170803 20:14:12.174"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:12.175">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170803 20:14:12.175">404 != 200</msg>
<status starttime="20170803 20:14:12.175" status="FAIL" endtime="20170803 20:14:12.175"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:12.175">${status} = False</msg>
<status starttime="20170803 20:14:12.174" status="PASS" endtime="20170803 20:14:12.175"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw library="BuiltIn" name="Continue For Loop">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170803 20:14:12.176">Continuing for loop from the next iteration.</msg>
<status starttime="20170803 20:14:12.176" status="PASS" endtime="20170803 20:14:12.176"></status>
</kw>
<status starttime="20170803 20:14:12.176" status="PASS" endtime="20170803 20:14:12.176"></status>
</kw>
<status starttime="20170803 20:14:11.904" status="PASS" endtime="20170803 20:14:12.176"></status>
</kw>
<kw name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:12.177">${logpath} = /tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_record_log.txt</msg>
<status starttime="20170803 20:14:12.177" status="PASS" endtime="20170803 20:14:12.177"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:12.180">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:14:12.180" status="PASS" endtime="20170803 20:14:12.180"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:12.181">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:14:12.181" status="PASS" endtime="20170803 20:14:12.181"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:12.181">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:14:12.181" status="PASS" endtime="20170803 20:14:12.182"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:12.182">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:14:12.182" status="PASS" endtime="20170803 20:14:12.182"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:12.367">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:14:12.183" status="PASS" endtime="20170803 20:14:12.368"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:12.368">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:14:12.368">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:14:12.182" status="PASS" endtime="20170803 20:14:12.368"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:12.368">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:14:12.368" status="PASS" endtime="20170803 20:14:12.368"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:12.369">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:14:12.369" status="PASS" endtime="20170803 20:14:12.369"></status>
</kw>
<status starttime="20170803 20:14:12.179" status="PASS" endtime="20170803 20:14:12.369"></status>
</kw>
<status starttime="20170803 20:14:12.179" status="PASS" endtime="20170803 20:14:12.369"></status>
</kw>
<status starttime="20170803 20:14:12.178" status="PASS" endtime="20170803 20:14:12.369"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:12.370">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status starttime="20170803 20:14:12.370" status="PASS" endtime="20170803 20:14:12.370"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170803 20:14:12.370" status="PASS" endtime="20170803 20:14:12.371"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:12.415">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:14:12.415">${ret} = &lt;Response [404]&gt;</msg>
<status starttime="20170803 20:14:12.371" status="PASS" endtime="20170803 20:14:12.415"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170803 20:14:12.416" status="PASS" endtime="20170803 20:14:12.416"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:14:12.416">Delete All Sessions</msg>
<status starttime="20170803 20:14:12.416" status="PASS" endtime="20170803 20:14:12.416"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:12.417">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20170803 20:14:12.177" status="PASS" endtime="20170803 20:14:12.417"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:12.418">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170803 20:14:12.418">404 != 200</msg>
<status starttime="20170803 20:14:12.417" status="FAIL" endtime="20170803 20:14:12.418"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:12.418">${status} = False</msg>
<status starttime="20170803 20:14:12.417" status="PASS" endtime="20170803 20:14:12.418"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw library="BuiltIn" name="Continue For Loop">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170803 20:14:12.419">Continuing for loop from the next iteration.</msg>
<status starttime="20170803 20:14:12.419" status="PASS" endtime="20170803 20:14:12.419"></status>
</kw>
<status starttime="20170803 20:14:12.418" status="PASS" endtime="20170803 20:14:12.419"></status>
</kw>
<status starttime="20170803 20:14:12.177" status="PASS" endtime="20170803 20:14:12.419"></status>
</kw>
<kw name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:12.420">${logpath} = /tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_elog.txt</msg>
<status starttime="20170803 20:14:12.419" status="PASS" endtime="20170803 20:14:12.420"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:12.423">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:14:12.422" status="PASS" endtime="20170803 20:14:12.423"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:12.424">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:14:12.423" status="PASS" endtime="20170803 20:14:12.424"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:12.424">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:14:12.424" status="PASS" endtime="20170803 20:14:12.424"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:12.425">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:14:12.425" status="PASS" endtime="20170803 20:14:12.425"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:12.717">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:14:12.426" status="PASS" endtime="20170803 20:14:12.718"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:12.718">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:14:12.718">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:14:12.425" status="PASS" endtime="20170803 20:14:12.718"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:12.718">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:14:12.718" status="PASS" endtime="20170803 20:14:12.718"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:12.719">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:14:12.719" status="PASS" endtime="20170803 20:14:12.719"></status>
</kw>
<status starttime="20170803 20:14:12.422" status="PASS" endtime="20170803 20:14:12.719"></status>
</kw>
<status starttime="20170803 20:14:12.421" status="PASS" endtime="20170803 20:14:12.719"></status>
</kw>
<status starttime="20170803 20:14:12.421" status="PASS" endtime="20170803 20:14:12.719"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:12.720">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status starttime="20170803 20:14:12.720" status="PASS" endtime="20170803 20:14:12.720"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170803 20:14:12.720" status="PASS" endtime="20170803 20:14:12.721"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:12.938">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:14:12.938">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:14:12.721" status="PASS" endtime="20170803 20:14:12.938"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170803 20:14:12.939" status="PASS" endtime="20170803 20:14:12.939"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:14:12.939">Delete All Sessions</msg>
<status starttime="20170803 20:14:12.939" status="PASS" endtime="20170803 20:14:12.939"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:12.940">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:14:12.420" status="PASS" endtime="20170803 20:14:12.940"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:12.941">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:14:12.940" status="PASS" endtime="20170803 20:14:12.941"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:12.941">${status} = True</msg>
<status starttime="20170803 20:14:12.940" status="PASS" endtime="20170803 20:14:12.941"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170803 20:14:12.941" status="PASS" endtime="20170803 20:14:12.942"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:12.943">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [], 
      "Id": 2, 
      "Message": "xyz.openbmc_project.Software.Version.Error.ManifestFileFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501790102396, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [], 
      "Id": 3, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501790682889, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/4": {
      "AdditionalData": [], 
      "Id": 4, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501790749578, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/5": {
      "AdditionalData": [], 
      "Id": 5, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501790817034, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/6": {
      "AdditionalData": [], 
      "Id": 6, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501790887267, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:14:12.943">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170803 20:14:12.943">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/logging/entry/2": {
            "AdditionalData": [],
            "Id": 2,
            "Message": "xyz.openbmc_project.Software.Version.Error.ManifestFile...</msg>
<status starttime="20170803 20:14:12.942" status="PASS" endtime="20170803 20:14:12.943"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170803 20:14:12.944">Appended to file '&lt;a href="file:///tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_elog.txt"&gt;/tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_elog.txt&lt;/a&gt;'.</msg>
<status starttime="20170803 20:14:12.944" status="PASS" endtime="20170803 20:14:12.945"></status>
</kw>
<status starttime="20170803 20:14:12.943" status="PASS" endtime="20170803 20:14:12.945"></status>
</kw>
<status starttime="20170803 20:14:12.419" status="PASS" endtime="20170803 20:14:12.945"></status>
</kw>
<kw name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:12.945">${logpath} = /tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_sensor_list.txt</msg>
<status starttime="20170803 20:14:12.945" status="PASS" endtime="20170803 20:14:12.945"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:12.948">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:14:12.948" status="PASS" endtime="20170803 20:14:12.949"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:12.949">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:14:12.949" status="PASS" endtime="20170803 20:14:12.949"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:12.950">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:14:12.950" status="PASS" endtime="20170803 20:14:12.950"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:12.951">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:14:12.950" status="PASS" endtime="20170803 20:14:12.951"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:13.170">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:14:12.951" status="PASS" endtime="20170803 20:14:13.170"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:13.170">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:14:13.170">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:14:12.951" status="PASS" endtime="20170803 20:14:13.170"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:13.171">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:14:13.171" status="PASS" endtime="20170803 20:14:13.171"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:13.172">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:14:13.171" status="PASS" endtime="20170803 20:14:13.172"></status>
</kw>
<status starttime="20170803 20:14:12.947" status="PASS" endtime="20170803 20:14:13.172"></status>
</kw>
<status starttime="20170803 20:14:12.947" status="PASS" endtime="20170803 20:14:13.172"></status>
</kw>
<status starttime="20170803 20:14:12.946" status="PASS" endtime="20170803 20:14:13.172"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:13.173">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status starttime="20170803 20:14:13.172" status="PASS" endtime="20170803 20:14:13.173"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170803 20:14:13.173" status="PASS" endtime="20170803 20:14:13.173"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:13.365">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:14:13.365">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:14:13.174" status="PASS" endtime="20170803 20:14:13.365"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170803 20:14:13.365" status="PASS" endtime="20170803 20:14:13.365"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:14:13.366">Delete All Sessions</msg>
<status starttime="20170803 20:14:13.366" status="PASS" endtime="20170803 20:14:13.366"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:13.366">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:14:12.946" status="PASS" endtime="20170803 20:14:13.366"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:13.367">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:14:13.367" status="PASS" endtime="20170803 20:14:13.367"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:13.367">${status} = True</msg>
<status starttime="20170803 20:14:13.366" status="PASS" endtime="20170803 20:14:13.367"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170803 20:14:13.368" status="PASS" endtime="20170803 20:14:13.368"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:13.369">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 3
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:14:13.369">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170803 20:14:13.369">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 3
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status starttime="20170803 20:14:13.368" status="PASS" endtime="20170803 20:14:13.369"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170803 20:14:13.370">Appended to file '&lt;a href="file:///tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_sensor_list.txt"&gt;/tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/20170803201400369742_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status starttime="20170803 20:14:13.370" status="PASS" endtime="20170803 20:14:13.370"></status>
</kw>
<status starttime="20170803 20:14:13.369" status="PASS" endtime="20170803 20:14:13.371"></status>
</kw>
<status starttime="20170803 20:14:12.945" status="PASS" endtime="20170803 20:14:13.371"></status>
</kw>
<status starttime="20170803 20:14:11.387" status="PASS" endtime="20170803 20:14:13.371"></status>
</kw>
<status starttime="20170803 20:14:11.385" status="PASS" endtime="20170803 20:14:13.371"></status>
</kw>
<status starttime="20170803 20:14:11.385" status="PASS" endtime="20170803 20:14:13.371"></status>
</kw>
<status starttime="20170803 20:14:11.384" status="PASS" endtime="20170803 20:14:13.371"></status>
</kw>
<status starttime="20170803 20:14:11.384" status="PASS" endtime="20170803 20:14:13.371"></status>
</kw>
<status starttime="20170803 20:14:11.358" status="PASS" endtime="20170803 20:14:13.371"></status>
</kw>
<status starttime="20170803 20:14:11.354" status="PASS" endtime="20170803 20:14:13.371"></status>
</kw>
<status starttime="20170803 20:14:11.353" status="PASS" endtime="20170803 20:14:13.371"></status>
</kw>
<status starttime="20170803 20:14:00.601" status="PASS" endtime="20170803 20:14:13.371"></status>
</kw>
<status starttime="20170803 20:14:00.599" status="PASS" endtime="20170803 20:14:13.371"></status>
</kw>
<status starttime="20170803 20:14:00.598" status="PASS" endtime="20170803 20:14:13.371"></status>
</kw>
<status starttime="20170803 20:14:00.598" status="PASS" endtime="20170803 20:14:13.372"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key U">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw library="SSHLibrary" name="Close All Connections">
<doc>Closes all open connections.</doc>
<status starttime="20170803 20:14:13.379" status="PASS" endtime="20170803 20:14:13.379"></status>
</kw>
<status starttime="20170803 20:14:13.372" status="PASS" endtime="20170803 20:14:13.379"></status>
</kw>
<status starttime="20170803 20:14:00.597" status="PASS" endtime="20170803 20:14:13.379"></status>
</kw>
<status starttime="20170803 20:13:57.272" status="PASS" endtime="20170803 20:14:13.379"></status>
</kw>
<status starttime="20170803 20:13:57.271" status="PASS" endtime="20170803 20:14:13.379"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<kw library="state_manager" name="Recover Quiesced Host">
<doc>Recover host from quisced state.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is Host Quiesced</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="state_manager" name="Is Host Quiesced">
<doc>Check if host state is quiesced.</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:13.385">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:14:13.384" status="PASS" endtime="20170803 20:14:13.385"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:13.385">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:14:13.385" status="PASS" endtime="20170803 20:14:13.385"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:13.386">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:14:13.386" status="PASS" endtime="20170803 20:14:13.386"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:13.387">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:14:13.386" status="PASS" endtime="20170803 20:14:13.387"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:13.574">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:14:13.388" status="PASS" endtime="20170803 20:14:13.574"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:13.574">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:14:13.574">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:14:13.387" status="PASS" endtime="20170803 20:14:13.574"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:13.575">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:14:13.575" status="PASS" endtime="20170803 20:14:13.575"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:13.576">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:14:13.575" status="PASS" endtime="20170803 20:14:13.576"></status>
</kw>
<status starttime="20170803 20:14:13.384" status="PASS" endtime="20170803 20:14:13.576"></status>
</kw>
<status starttime="20170803 20:14:13.383" status="PASS" endtime="20170803 20:14:13.576"></status>
</kw>
<status starttime="20170803 20:14:13.383" status="PASS" endtime="20170803 20:14:13.576"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:13.577">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170803 20:14:13.576" status="PASS" endtime="20170803 20:14:13.577"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:13.579">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:14:13.578" status="PASS" endtime="20170803 20:14:13.579"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:13.580">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:14:13.580" status="PASS" endtime="20170803 20:14:13.580"></status>
</kw>
<status starttime="20170803 20:14:13.579" status="PASS" endtime="20170803 20:14:13.580"></status>
</kw>
<status starttime="20170803 20:14:13.577" status="PASS" endtime="20170803 20:14:13.580"></status>
</kw>
<status starttime="20170803 20:14:13.577" status="PASS" endtime="20170803 20:14:13.580"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:13.693">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:14:13.693">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:14:13.580" status="PASS" endtime="20170803 20:14:13.693"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:13.695">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:14:13.695" status="PASS" endtime="20170803 20:14:13.695"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:13.696">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:14:13.696" status="PASS" endtime="20170803 20:14:13.696"></status>
</kw>
<status starttime="20170803 20:14:13.695" status="PASS" endtime="20170803 20:14:13.696"></status>
</kw>
<status starttime="20170803 20:14:13.694" status="PASS" endtime="20170803 20:14:13.696"></status>
</kw>
<status starttime="20170803 20:14:13.694" status="PASS" endtime="20170803 20:14:13.697"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:14:13.697">Delete All Sessions</msg>
<status starttime="20170803 20:14:13.697" status="PASS" endtime="20170803 20:14:13.697"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:13.697">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:14:13.382" status="PASS" endtime="20170803 20:14:13.697"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:13.698">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:14:13.697" status="PASS" endtime="20170803 20:14:13.698"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:13.698">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:14:13.698">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:14:13.699">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:14:13.698" status="PASS" endtime="20170803 20:14:13.699"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:13.699">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170803 20:14:13.381" status="PASS" endtime="20170803 20:14:13.699"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:13.699">${host_state} = Quiesced</msg>
<status starttime="20170803 20:14:13.381" status="PASS" endtime="20170803 20:14:13.699"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<status starttime="20170803 20:14:13.700" status="PASS" endtime="20170803 20:14:13.700"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:13.700">${status} = True</msg>
<status starttime="20170803 20:14:13.700" status="PASS" endtime="20170803 20:14:13.700"></status>
</kw>
<status starttime="20170803 20:14:13.381" status="PASS" endtime="20170803 20:14:13.700"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:13.701">${resp} = True</msg>
<status starttime="20170803 20:14:13.380" status="PASS" endtime="20170803 20:14:13.701"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${resp}' == 'True'</arg>
<arg>Run Keywords</arg>
<arg>Initiate Host PowerOff</arg>
<arg>AND</arg>
<arg>Log</arg>
<arg>HOST is recovered from quiesced state</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Initiate Host PowerOff</arg>
<arg>AND</arg>
<arg>Log</arg>
<arg>HOST is recovered from quiesced state</arg>
</arguments>
<kw library="state_manager" name="Initiate Host PowerOff">
<doc>Initiate host power off.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:13.703">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status starttime="20170803 20:14:13.702" status="PASS" endtime="20170803 20:14:13.703"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:13.704">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status starttime="20170803 20:14:13.704" status="PASS" endtime="20170803 20:14:13.704"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:13.707">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:14:13.707" status="PASS" endtime="20170803 20:14:13.708"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:13.708">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:14:13.708" status="PASS" endtime="20170803 20:14:13.708"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:13.709">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:14:13.708" status="PASS" endtime="20170803 20:14:13.709"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:13.709">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:14:13.709" status="PASS" endtime="20170803 20:14:13.709"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:14.014">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:14:13.710" status="PASS" endtime="20170803 20:14:14.015"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:14.015">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:14:14.015">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:14:13.710" status="PASS" endtime="20170803 20:14:14.015"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:14.015">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:14:14.015" status="PASS" endtime="20170803 20:14:14.016"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:14.016">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:14:14.016" status="PASS" endtime="20170803 20:14:14.016"></status>
</kw>
<status starttime="20170803 20:14:13.706" status="PASS" endtime="20170803 20:14:14.016"></status>
</kw>
<status starttime="20170803 20:14:13.706" status="PASS" endtime="20170803 20:14:14.016"></status>
</kw>
<status starttime="20170803 20:14:13.705" status="PASS" endtime="20170803 20:14:14.017"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:14.017">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status starttime="20170803 20:14:14.017" status="PASS" endtime="20170803 20:14:14.017"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:14.018">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:14:14.017" status="PASS" endtime="20170803 20:14:14.018"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20170803 20:14:14.018" status="PASS" endtime="20170803 20:14:14.018"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:14.020">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-...</msg>
<status starttime="20170803 20:14:14.019" status="PASS" endtime="20170803 20:14:14.020"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:14.021">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20170803 20:14:14.020" status="PASS" endtime="20170803 20:14:14.021"></status>
</kw>
<status starttime="20170803 20:14:14.020" status="PASS" endtime="20170803 20:14:14.021"></status>
</kw>
<status starttime="20170803 20:14:14.018" status="PASS" endtime="20170803 20:14:14.021"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:15.417">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170803 20:14:15.417">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:14:14.021" status="PASS" endtime="20170803 20:14:15.417"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:15.419">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:14:15.418" status="PASS" endtime="20170803 20:14:15.419"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:15.420">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:14:15.420" status="PASS" endtime="20170803 20:14:15.420"></status>
</kw>
<status starttime="20170803 20:14:15.419" status="PASS" endtime="20170803 20:14:15.420"></status>
</kw>
<status starttime="20170803 20:14:15.418" status="PASS" endtime="20170803 20:14:15.420"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:14:15.421">Delete All Sessions</msg>
<status starttime="20170803 20:14:15.421" status="PASS" endtime="20170803 20:14:15.421"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:15.421">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:14:13.704" status="PASS" endtime="20170803 20:14:15.421"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:15.422">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:14:15.421" status="PASS" endtime="20170803 20:14:15.422"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:15.422">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:14:15.422">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:14:15.423">${json} = {u'data': None, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:14:15.422" status="PASS" endtime="20170803 20:14:15.423"></status>
</kw>
<status starttime="20170803 20:14:13.703" status="PASS" endtime="20170803 20:14:15.423"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status starttime="20170803 20:14:15.423" status="PASS" endtime="20170803 20:14:15.423"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:15.428">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:14:15.428" status="PASS" endtime="20170803 20:14:15.428"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:15.429">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:14:15.429" status="PASS" endtime="20170803 20:14:15.429"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:15.430">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:14:15.429" status="PASS" endtime="20170803 20:14:15.430"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:15.430">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:14:15.430" status="PASS" endtime="20170803 20:14:15.430"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:16.382">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:14:15.431" status="PASS" endtime="20170803 20:14:16.382"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:16.382">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:14:16.382">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:14:15.431" status="PASS" endtime="20170803 20:14:16.382"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:16.383">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:14:16.382" status="PASS" endtime="20170803 20:14:16.383"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:16.383">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:14:16.383" status="PASS" endtime="20170803 20:14:16.383"></status>
</kw>
<status starttime="20170803 20:14:15.427" status="PASS" endtime="20170803 20:14:16.384"></status>
</kw>
<status starttime="20170803 20:14:15.427" status="PASS" endtime="20170803 20:14:16.384"></status>
</kw>
<status starttime="20170803 20:14:15.426" status="PASS" endtime="20170803 20:14:16.384"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:16.384">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170803 20:14:16.384" status="PASS" endtime="20170803 20:14:16.384"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:16.386">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:14:16.386" status="PASS" endtime="20170803 20:14:16.386"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:16.387">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:14:16.387" status="PASS" endtime="20170803 20:14:16.387"></status>
</kw>
<status starttime="20170803 20:14:16.387" status="PASS" endtime="20170803 20:14:16.388"></status>
</kw>
<status starttime="20170803 20:14:16.385" status="PASS" endtime="20170803 20:14:16.388"></status>
</kw>
<status starttime="20170803 20:14:16.385" status="PASS" endtime="20170803 20:14:16.388"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:20.833">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:14:20.833">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:14:16.388" status="PASS" endtime="20170803 20:14:20.833"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:20.835">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:14:20.834" status="PASS" endtime="20170803 20:14:20.835"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:20.836">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:14:20.836" status="PASS" endtime="20170803 20:14:20.836"></status>
</kw>
<status starttime="20170803 20:14:20.835" status="PASS" endtime="20170803 20:14:20.836"></status>
</kw>
<status starttime="20170803 20:14:20.834" status="PASS" endtime="20170803 20:14:20.836"></status>
</kw>
<status starttime="20170803 20:14:20.833" status="PASS" endtime="20170803 20:14:20.836"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:14:20.837">Delete All Sessions</msg>
<status starttime="20170803 20:14:20.837" status="PASS" endtime="20170803 20:14:20.837"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:20.837">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:14:15.426" status="PASS" endtime="20170803 20:14:20.837"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:20.838">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:14:20.837" status="PASS" endtime="20170803 20:14:20.838"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:20.838">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:14:20.838">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:14:20.838">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:14:20.838" status="PASS" endtime="20170803 20:14:20.838"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:20.839">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170803 20:14:15.425" status="PASS" endtime="20170803 20:14:20.839"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:20.839">${power_state} = On</msg>
<status starttime="20170803 20:14:15.425" status="PASS" endtime="20170803 20:14:20.839"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170803 20:14:20.840">Off != On</msg>
<status starttime="20170803 20:14:20.839" status="FAIL" endtime="20170803 20:14:20.840"></status>
</kw>
<status starttime="20170803 20:14:15.424" status="FAIL" endtime="20170803 20:14:20.840"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:20.844">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:14:20.843" status="PASS" endtime="20170803 20:14:20.845"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:20.845">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:14:20.845" status="PASS" endtime="20170803 20:14:20.845"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:20.846">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:14:20.845" status="PASS" endtime="20170803 20:14:20.846"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:20.846">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:14:20.846" status="PASS" endtime="20170803 20:14:20.846"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:21.487">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:14:20.847" status="PASS" endtime="20170803 20:14:21.487"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:21.487">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:14:21.487">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:14:20.847" status="PASS" endtime="20170803 20:14:21.487"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:21.487">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:14:21.487" status="PASS" endtime="20170803 20:14:21.488"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:21.488">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:14:21.488" status="PASS" endtime="20170803 20:14:21.488"></status>
</kw>
<status starttime="20170803 20:14:20.843" status="PASS" endtime="20170803 20:14:21.488"></status>
</kw>
<status starttime="20170803 20:14:20.843" status="PASS" endtime="20170803 20:14:21.488"></status>
</kw>
<status starttime="20170803 20:14:20.842" status="PASS" endtime="20170803 20:14:21.489"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:21.489">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170803 20:14:21.489" status="PASS" endtime="20170803 20:14:21.489"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:21.491">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:14:21.491" status="PASS" endtime="20170803 20:14:21.491"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:21.492">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:14:21.492" status="PASS" endtime="20170803 20:14:21.492"></status>
</kw>
<status starttime="20170803 20:14:21.491" status="PASS" endtime="20170803 20:14:21.492"></status>
</kw>
<status starttime="20170803 20:14:21.490" status="PASS" endtime="20170803 20:14:21.493"></status>
</kw>
<status starttime="20170803 20:14:21.489" status="PASS" endtime="20170803 20:14:21.493"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:21.688">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:14:21.688">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:14:21.493" status="PASS" endtime="20170803 20:14:21.688"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:21.690">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:14:21.689" status="PASS" endtime="20170803 20:14:21.690"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:21.691">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:14:21.690" status="PASS" endtime="20170803 20:14:21.691"></status>
</kw>
<status starttime="20170803 20:14:21.690" status="PASS" endtime="20170803 20:14:21.691"></status>
</kw>
<status starttime="20170803 20:14:21.689" status="PASS" endtime="20170803 20:14:21.691"></status>
</kw>
<status starttime="20170803 20:14:21.688" status="PASS" endtime="20170803 20:14:21.691"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:14:21.691">Delete All Sessions</msg>
<status starttime="20170803 20:14:21.691" status="PASS" endtime="20170803 20:14:21.692"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:21.692">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:14:20.841" status="PASS" endtime="20170803 20:14:21.692"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:21.692">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:14:21.692" status="PASS" endtime="20170803 20:14:21.692"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:21.693">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:14:21.693">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:14:21.693">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:14:21.693" status="PASS" endtime="20170803 20:14:21.693"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:21.693">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170803 20:14:20.841" status="PASS" endtime="20170803 20:14:21.694"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:21.694">${host_state} = Quiesced</msg>
<status starttime="20170803 20:14:20.840" status="PASS" endtime="20170803 20:14:21.694"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170803 20:14:21.694">Off != Quiesced</msg>
<status starttime="20170803 20:14:21.694" status="FAIL" endtime="20170803 20:14:21.695"></status>
</kw>
<status starttime="20170803 20:14:15.424" status="FAIL" endtime="20170803 20:14:21.695"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:31.700">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:14:31.699" status="PASS" endtime="20170803 20:14:31.700"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:31.701">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:14:31.700" status="PASS" endtime="20170803 20:14:31.701"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:31.701">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:14:31.701" status="PASS" endtime="20170803 20:14:31.701"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:31.702">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:14:31.702" status="PASS" endtime="20170803 20:14:31.702"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:31.885">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:14:31.703" status="PASS" endtime="20170803 20:14:31.885"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:31.886">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:14:31.886">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:14:31.702" status="PASS" endtime="20170803 20:14:31.886"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:31.887">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:14:31.886" status="PASS" endtime="20170803 20:14:31.887"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:31.888">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:14:31.887" status="PASS" endtime="20170803 20:14:31.888"></status>
</kw>
<status starttime="20170803 20:14:31.699" status="PASS" endtime="20170803 20:14:31.888"></status>
</kw>
<status starttime="20170803 20:14:31.698" status="PASS" endtime="20170803 20:14:31.888"></status>
</kw>
<status starttime="20170803 20:14:31.698" status="PASS" endtime="20170803 20:14:31.888"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:31.889">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170803 20:14:31.889" status="PASS" endtime="20170803 20:14:31.889"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:31.892">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:14:31.891" status="PASS" endtime="20170803 20:14:31.892"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:31.894">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170803 20:14:31.894" status="PASS" endtime="20170803 20:14:31.894"></status>
</kw>
<status starttime="20170803 20:14:31.893" status="PASS" endtime="20170803 20:14:31.894"></status>
</kw>
<status starttime="20170803 20:14:31.890" status="PASS" endtime="20170803 20:14:31.894"></status>
</kw>
<status starttime="20170803 20:14:31.890" status="PASS" endtime="20170803 20:14:31.894"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:31.957">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:14:31.957">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:14:31.895" status="PASS" endtime="20170803 20:14:31.958"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:31.959">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:14:31.959" status="PASS" endtime="20170803 20:14:31.959"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:31.960">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:14:31.960" status="PASS" endtime="20170803 20:14:31.960"></status>
</kw>
<status starttime="20170803 20:14:31.959" status="PASS" endtime="20170803 20:14:31.960"></status>
</kw>
<status starttime="20170803 20:14:31.958" status="PASS" endtime="20170803 20:14:31.960"></status>
</kw>
<status starttime="20170803 20:14:31.958" status="PASS" endtime="20170803 20:14:31.961"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:14:31.961">Delete All Sessions</msg>
<status starttime="20170803 20:14:31.961" status="PASS" endtime="20170803 20:14:31.961"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:31.961">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:14:31.697" status="PASS" endtime="20170803 20:14:31.961"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:31.962">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:14:31.962" status="PASS" endtime="20170803 20:14:31.962"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:31.963">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:14:31.963">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:14:31.963">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:14:31.962" status="PASS" endtime="20170803 20:14:31.963"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:31.963">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170803 20:14:31.697" status="PASS" endtime="20170803 20:14:31.963"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:31.963">${power_state} = Off</msg>
<status starttime="20170803 20:14:31.696" status="PASS" endtime="20170803 20:14:31.963"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170803 20:14:31.964" status="PASS" endtime="20170803 20:14:31.964"></status>
</kw>
<status starttime="20170803 20:14:31.695" status="PASS" endtime="20170803 20:14:31.964"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:31.968">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170803 20:14:31.967" status="PASS" endtime="20170803 20:14:31.968"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:31.968">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170803 20:14:31.968" status="PASS" endtime="20170803 20:14:31.969"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:31.969">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170803 20:14:31.969" status="PASS" endtime="20170803 20:14:31.969"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:31.970">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170803 20:14:31.969" status="PASS" endtime="20170803 20:14:31.970"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:32.162">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170803 20:14:31.970" status="PASS" endtime="20170803 20:14:32.163"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:32.163">${status} = PASS</msg>
<msg level="INFO" timestamp="20170803 20:14:32.163">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:14:31.970" status="PASS" endtime="20170803 20:14:32.163"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:32.163">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:14:32.163" status="PASS" endtime="20170803 20:14:32.163"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:32.164">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:14:32.164" status="PASS" endtime="20170803 20:14:32.164"></status>
</kw>
<status starttime="20170803 20:14:31.967" status="PASS" endtime="20170803 20:14:32.164"></status>
</kw>
<status starttime="20170803 20:14:31.966" status="PASS" endtime="20170803 20:14:32.164"></status>
</kw>
<status starttime="20170803 20:14:31.966" status="PASS" endtime="20170803 20:14:32.164"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:32.165">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170803 20:14:32.165" status="PASS" endtime="20170803 20:14:32.165"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:32.167">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:14:32.166" status="PASS" endtime="20170803 20:14:32.167"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:32.168">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170803 20:14:32.168" status="PASS" endtime="20170803 20:14:32.168"></status>
</kw>
<status starttime="20170803 20:14:32.167" status="PASS" endtime="20170803 20:14:32.168"></status>
</kw>
<status starttime="20170803 20:14:32.166" status="PASS" endtime="20170803 20:14:32.168"></status>
</kw>
<status starttime="20170803 20:14:32.165" status="PASS" endtime="20170803 20:14:32.168"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:32.288">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170803 20:14:32.288">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:14:32.169" status="PASS" endtime="20170803 20:14:32.288"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:32.290">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:14:32.289" status="PASS" endtime="20170803 20:14:32.290"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:32.291">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170803 20:14:32.290" status="PASS" endtime="20170803 20:14:32.291"></status>
</kw>
<status starttime="20170803 20:14:32.290" status="PASS" endtime="20170803 20:14:32.291"></status>
</kw>
<status starttime="20170803 20:14:32.289" status="PASS" endtime="20170803 20:14:32.291"></status>
</kw>
<status starttime="20170803 20:14:32.288" status="PASS" endtime="20170803 20:14:32.291"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170803 20:14:32.291">Delete All Sessions</msg>
<status starttime="20170803 20:14:32.291" status="PASS" endtime="20170803 20:14:32.292"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:32.292">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170803 20:14:31.965" status="PASS" endtime="20170803 20:14:32.292"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:32.292">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170803 20:14:32.292" status="PASS" endtime="20170803 20:14:32.292"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:32.293">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170803 20:14:32.293">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170803 20:14:32.293">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170803 20:14:32.293" status="PASS" endtime="20170803 20:14:32.293"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:32.293">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170803 20:14:31.965" status="PASS" endtime="20170803 20:14:32.293"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:32.294">${host_state} = Off</msg>
<status starttime="20170803 20:14:31.964" status="PASS" endtime="20170803 20:14:32.294"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170803 20:14:32.294" status="PASS" endtime="20170803 20:14:32.294"></status>
</kw>
<status starttime="20170803 20:14:31.695" status="PASS" endtime="20170803 20:14:32.294"></status>
</kw>
<status starttime="20170803 20:14:15.424" status="PASS" endtime="20170803 20:14:32.294"></status>
</kw>
<status starttime="20170803 20:14:13.702" status="PASS" endtime="20170803 20:14:32.295"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>HOST is recovered from quiesced state</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:32.295">HOST is recovered from quiesced state</msg>
<status starttime="20170803 20:14:32.295" status="PASS" endtime="20170803 20:14:32.295"></status>
</kw>
<status starttime="20170803 20:14:13.701" status="PASS" endtime="20170803 20:14:32.295"></status>
</kw>
<status starttime="20170803 20:14:13.701" status="PASS" endtime="20170803 20:14:32.296"></status>
</kw>
<status starttime="20170803 20:14:13.380" status="PASS" endtime="20170803 20:14:32.296"></status>
</kw>
<status starttime="20170803 20:14:13.380" status="PASS" endtime="20170803 20:14:32.296"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:32.312">${FFDC_DIR_PATH_STYLE} = </msg>
<status starttime="20170803 20:14:32.297" status="PASS" endtime="20170803 20:14:32.312"></status>
</kw>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:32.312">${FFDC_DIR_PATH} = /tmp/fspcibld/27997/obmc-robot/logs/20170803201400369742_TestsTestBasicPoweron/20170803201400369742_PowerOnTest/</msg>
<status starttime="20170803 20:14:32.312" status="PASS" endtime="20170803 20:14:32.312"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status starttime="20170803 20:14:32.313" status="PASS" endtime="20170803 20:14:32.313"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status starttime="20170803 20:14:32.313" status="PASS" endtime="20170803 20:14:32.314"></status>
</kw>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170803 20:14:32.314">Directory '&lt;a href="file:///tmp/fspcibld/27997/obmc-robot/logs"&gt;/tmp/fspcibld/27997/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status starttime="20170803 20:14:32.314" status="PASS" endtime="20170803 20:14:32.314"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170803 20:14:32.315">File '&lt;a href="file:///tmp/fspcibld/27997/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/27997/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status starttime="20170803 20:14:32.315" status="PASS" endtime="20170803 20:14:32.315"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:32.315">${exist} = True</msg>
<status starttime="20170803 20:14:32.315" status="PASS" endtime="20170803 20:14:32.315"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status starttime="20170803 20:14:32.316" status="PASS" endtime="20170803 20:14:32.316"></status>
</kw>
<kw library="gen_robot_print" name="Rpvars">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status starttime="20170803 20:14:32.316" status="PASS" endtime="20170803 20:14:32.317"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:32.317">${cur_time} = 2017-08-03 20:14:32:317339</msg>
<status starttime="20170803 20:14:32.317" status="PASS" endtime="20170803 20:14:32.318"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:32.318">${cur_time} = 20170803201432317339</msg>
<status starttime="20170803 20:14:32.318" status="PASS" endtime="20170803 20:14:32.318"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:32.318">${cur_time} = 20170803201432317339</msg>
<status starttime="20170803 20:14:32.317" status="PASS" endtime="20170803 20:14:32.318"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170803 20:14:32.319">Appended to file '&lt;a href="file:///tmp/fspcibld/27997/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/27997/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20170803 20:14:32.319" status="PASS" endtime="20170803 20:14:32.319"></status>
</kw>
<status starttime="20170803 20:14:32.296" status="PASS" endtime="20170803 20:14:32.319"></status>
</kw>
<status starttime="20170803 20:13:56.983" status="PASS" endtime="20170803 20:14:32.319"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:32.321">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status starttime="20170803 20:14:32.321" status="PASS" endtime="20170803 20:14:32.321"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:32.322">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status starttime="20170803 20:14:32.321" status="PASS" endtime="20170803 20:14:32.322"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:32.322">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status starttime="20170803 20:14:32.320" status="PASS" endtime="20170803 20:14:32.322"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:32.323">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20170803 20:14:32.323" status="PASS" endtime="20170803 20:14:32.323"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170803 20:14:32.323" status="PASS" endtime="20170803 20:14:32.324"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:32.327">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170803 20:14:32.337">${rc} = 0</msg>
<msg level="INFO" timestamp="20170803 20:14:32.338">${output} = /tmp/fspcibld/27997/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20170803 20:14:32.324" status="PASS" endtime="20170803 20:14:32.338"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170803 20:14:32.340" status="PASS" endtime="20170803 20:14:32.341"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status starttime="20170803 20:14:32.341" status="PASS" endtime="20170803 20:14:32.342"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:32.343">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status starttime="20170803 20:14:32.342" status="PASS" endtime="20170803 20:14:32.343"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:32.343">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status starttime="20170803 20:14:32.322" status="PASS" endtime="20170803 20:14:32.343"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:32.344">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status starttime="20170803 20:14:32.344" status="PASS" endtime="20170803 20:14:32.344"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170803 20:14:32.344" status="PASS" endtime="20170803 20:14:32.345"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:32.347">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170803 20:14:32.373">${rc} = 0</msg>
<msg level="INFO" timestamp="20170803 20:14:32.373">${os_con_pid} = </msg>
<status starttime="20170803 20:14:32.345" status="PASS" endtime="20170803 20:14:32.373"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status starttime="20170803 20:14:32.375" status="PASS" endtime="20170803 20:14:32.376"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:32.377">${cmd_buf} = kill -9 </msg>
<status starttime="20170803 20:14:32.376" status="PASS" endtime="20170803 20:14:32.377"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170803 20:14:32.377" status="PASS" endtime="20170803 20:14:32.378"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:32.379">${rc} = None</msg>
<msg level="INFO" timestamp="20170803 20:14:32.379">${output} = None</msg>
<status starttime="20170803 20:14:32.378" status="PASS" endtime="20170803 20:14:32.379"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170803 20:14:32.379" status="PASS" endtime="20170803 20:14:32.379"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="OperatingSystem" name="Copy File">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170803 20:14:32.384">Copied file from '&lt;a href="file:///tmp/9.3.86.161_os_console"&gt;/tmp/9.3.86.161_os_console&lt;/a&gt;' to '&lt;a href="file:///tmp/fspcibld/27997/obmc-robot/logs/9.3.86.161_os_console"&gt;/tmp/fspcibld/27997/obmc-robot/logs/9.3.86.161_os_console&lt;/a&gt;'.</msg>
<status starttime="20170803 20:14:32.381" status="PASS" endtime="20170803 20:14:32.384"></status>
</kw>
<status starttime="20170803 20:14:32.380" status="PASS" endtime="20170803 20:14:32.385"></status>
</kw>
<status starttime="20170803 20:14:32.380" status="PASS" endtime="20170803 20:14:32.385"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:32.385">${output} = </msg>
<status starttime="20170803 20:14:32.385" status="PASS" endtime="20170803 20:14:32.385"></status>
</kw>
<kw library="BuiltIn" name="Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg level="INFO" timestamp="20170803 20:14:32.386">${loc_quiet} = 1</msg>
<status starttime="20170803 20:14:32.386" status="PASS" endtime="20170803 20:14:32.386"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="gen_cmd" name="Cmd Fnc">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status starttime="20170803 20:14:32.387" status="PASS" endtime="20170803 20:14:32.431"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:32.432">${rc} = 0</msg>
<msg level="INFO" timestamp="20170803 20:14:32.433">${output} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 
</msg>
<status starttime="20170803 20:14:32.386" status="PASS" endtime="20170803 20:14:32.433"></status>
</kw>
<msg level="INFO" timestamp="20170803 20:14:32.434">${sol_log} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 
</msg>
<status starttime="20170803 20:14:32.320" status="PASS" endtime="20170803 20:14:32.434"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg level="INFO" timestamp="20170803 20:14:32.436">spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 
</msg>
<status starttime="20170803 20:14:32.435" status="PASS" endtime="20170803 20:14:32.436"></status>
</kw>
<status starttime="20170803 20:13:56.982" status="PASS" endtime="20170803 20:14:32.436"></status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status starttime="20170803 20:03:39.193" critical="yes" status="FAIL" endtime="20170803 20:14:32.436">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: Running != Quiesced</status>
</test>
<doc>Test power on for HW CI.</doc>
<status starttime="20170803 20:03:39.161" status="FAIL" endtime="20170803 20:14:32.438"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status starttime="20170803 20:03:33.051" status="FAIL" endtime="20170803 20:14:32.441"></status>
</suite>
<statistics>
<total>
<stat pass="1" fail="1">Critical Tests</stat>
<stat pass="1" fail="1">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="1">chassisboot</stat>
<stat pass="0" fail="1">Power_On_Test</stat>
<stat pass="1" fail="0">Test_SSL_Connection</stat>
</tag>
<suite>
<stat name="Tests" pass="1" fail="1" id="s1">Tests</stat>
<stat name="Security" pass="1" fail="0" id="s1-s1">Tests.Security</stat>
<stat name="Test Ssl" pass="1" fail="0" id="s1-s1-s1">Tests.Security.Test Ssl</stat>
<stat name="Test Basic Poweron" pass="0" fail="1" id="s1-s2">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
