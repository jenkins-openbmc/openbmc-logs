<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20171003 18:26:19.853" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/code_update/bmc_code_update.robot" id="s1" name="Bmc Code Update">
<test id="s1-t1" name="REST BMC Code Update">
<kw type="setup" name="Code Update Setup">
<doc>Do code update test case setup.</doc>
<kw name="Delete All Dumps" library="dump_utils">
<doc>Delete all dumps.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${DUMP_ENTRY_URI}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171003 18:26:20.810" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171003 18:26:20.811" starttime="20171003 18:26:20.810"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171003 18:26:20.812" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171003 18:26:20.812" starttime="20171003 18:26:20.812"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171003 18:26:20.813" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171003 18:26:20.813" starttime="20171003 18:26:20.813"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171003 18:26:20.814" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171003 18:26:20.814" starttime="20171003 18:26:20.813"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171003 18:26:20.989" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171003 18:26:20.989" starttime="20171003 18:26:20.815"></status>
</kw>
<msg timestamp="20171003 18:26:20.989" level="INFO">${status} = PASS</msg>
<msg timestamp="20171003 18:26:20.989" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171003 18:26:20.989" starttime="20171003 18:26:20.814"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171003 18:26:20.990" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 18:26:20.990" starttime="20171003 18:26:20.990"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171003 18:26:20.991" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 18:26:20.991" starttime="20171003 18:26:20.991"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:20.991" starttime="20171003 18:26:20.809"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:20.991" starttime="20171003 18:26:20.809"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:20.991" starttime="20171003 18:26:20.808"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171003 18:26:20.992" level="INFO">${base_uri} = /xyz/openbmc_project/dump/entry/list</msg>
<status status="PASS" endtime="20171003 18:26:20.992" starttime="20171003 18:26:20.992"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171003 18:26:20.993" starttime="20171003 18:26:20.992"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171003 18:26:21.048" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/dump/entry/list, headers=None json=None</msg>
<msg timestamp="20171003 18:26:21.049" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171003 18:26:21.049" starttime="20171003 18:26:20.993"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171003 18:26:21.049" starttime="20171003 18:26:21.049"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171003 18:26:21.050" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171003 18:26:21.050" starttime="20171003 18:26:21.050"></status>
</kw>
<msg timestamp="20171003 18:26:21.050" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171003 18:26:21.050" starttime="20171003 18:26:20.807"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20171003 18:26:21.051" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171003 18:26:21.051" starttime="20171003 18:26:21.050"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:21.051" starttime="20171003 18:26:20.807"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Smart Power Off</arg>
</arguments>
<kw name="Smart Power Off" library="boot_utils">
<doc>Do a smart power off.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${quiet}</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg timestamp="20171003 18:26:21.052" level="INFO">${loc_quiet} = 0</msg>
<status status="PASS" endtime="20171003 18:26:21.052" starttime="20171003 18:26:21.052"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>REST Power Off \ stack_mode=skip</arg>
<arg>\ \ quiet=${loc_quiet}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171003 18:26:21.053" level="INFO">${cmd_buf} = REST Power Off  stack_mode=skip   quiet=0</msg>
<status status="PASS" endtime="20171003 18:26:21.053" starttime="20171003 18:26:21.053"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
<arg>quiet=${loc_quiet}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="REST Power Off" library="boot_utils">
<doc>Do "REST Power Off" boot test.</doc>
<arguments>
<arg>stack_mode=skip</arg>
<arg>quiet=0</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>OBMC Boot Test \ loc_boot_stack=REST Power Off</arg>
<arg>\ loc_stack_mode=${stack_mode} \ loc_quiet=${quiet}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171003 18:26:21.056" level="INFO">${cmd_buf} = OBMC Boot Test  loc_boot_stack=REST Power Off  loc_stack_mode=skip  loc_quiet=0</msg>
<status status="PASS" endtime="20171003 18:26:21.056" starttime="20171003 18:26:21.055"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<kw name="OBMC Boot Test" library="obmc_boot_test_resource">
<arguments>
<arg>loc_boot_stack=REST Power Off</arg>
<arg>loc_stack_mode=skip</arg>
<arg>loc_quiet=0</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${pos_arg1}' != '${EMPTY}'</arg>
<arg>Set To Dictionary</arg>
<arg>${arguments}</arg>
<arg>loc_boot_stack=${pos_arg1}</arg>
</arguments>
<status status="PASS" endtime="20171003 18:26:21.065" starttime="20171003 18:26:21.065"></status>
</kw>
<kw name="Obmc Boot Test Py" library="obmc_boot_test">
<doc>Do main program processing.</doc>
<arguments>
<arg>&amp;{arguments}</arg>
</arguments>
<msg timestamp="20171003 18:26:21.066" level="INFO">${boot_stack} = REST Power Off</msg>
<msg timestamp="20171003 18:26:21.067" level="INFO">${stack_mode} = skip</msg>
<msg timestamp="20171003 18:26:21.067" level="INFO">${quiet} = 0</msg>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20171003 18:26:21.174" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171003 18:26:21.175" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20171003 18:26:21.962" level="INFO">Read output: root@witherspoon:~#</msg>
<msg timestamp="20171003 18:26:21.962" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20171003 18:26:22.039" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20171003 18:26:22.049" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20171003 18:26:22.049" level="INFO">${stderr} = </msg>
<msg timestamp="20171003 18:26:22.049" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20171003 18:26:22.049" starttime="20171003 18:26:21.150"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20171003 18:26:22.050" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20171003 18:26:22.050" starttime="20171003 18:26:22.049"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20171003 18:26:22.050" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20171003 18:26:22.050" starttime="20171003 18:26:22.050"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:22.050" starttime="20171003 18:26:21.148"></status>
</kw>
<msg timestamp="20171003 18:26:22.051" level="INFO">${openbmc_model} = Witherspoon</msg>
<msg timestamp="20171003 18:26:22.266" level="INFO">${plug_in_packages_list} = []</msg>
<msg timestamp="20171003 18:26:22.277" level="INFO">${program_pid} = 1</msg>
<kw name="Set BMC Power Policy" library="utils">
<doc>Set the given BMC power policy.</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Set Power Policy Method" library="utils">
<doc>Set the global bmc_power_policy_method to either 'Old' or 'New'.</doc>
<kw name="New Get Power Policy" library="utils">
<doc>Get the BMC power policy (new method).</doc>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${POWER_RESTORE_URI}</arg>
<arg>PowerRestorePolicy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171003 18:26:22.305" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171003 18:26:22.306" starttime="20171003 18:26:22.304"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171003 18:26:22.307" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171003 18:26:22.307" starttime="20171003 18:26:22.306"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171003 18:26:22.307" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171003 18:26:22.308" starttime="20171003 18:26:22.307"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171003 18:26:22.308" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171003 18:26:22.308" starttime="20171003 18:26:22.308"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171003 18:26:22.501" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171003 18:26:22.501" starttime="20171003 18:26:22.309"></status>
</kw>
<msg timestamp="20171003 18:26:22.501" level="INFO">${status} = PASS</msg>
<msg timestamp="20171003 18:26:22.501" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171003 18:26:22.501" starttime="20171003 18:26:22.309"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171003 18:26:22.502" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 18:26:22.502" starttime="20171003 18:26:22.501"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171003 18:26:22.502" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 18:26:22.503" starttime="20171003 18:26:22.502"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:22.503" starttime="20171003 18:26:22.304"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:22.503" starttime="20171003 18:26:22.303"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:22.503" starttime="20171003 18:26:22.302"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171003 18:26:22.503" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy</msg>
<status status="PASS" endtime="20171003 18:26:22.504" starttime="20171003 18:26:22.503"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171003 18:26:22.506" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Get, args:{}</msg>
<status status="PASS" endtime="20171003 18:26:22.506" starttime="20171003 18:26:22.505"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171003 18:26:22.507" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Get, args:{}</msg>
<status status="PASS" endtime="20171003 18:26:22.507" starttime="20171003 18:26:22.506"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:22.507" starttime="20171003 18:26:22.506"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:22.507" starttime="20171003 18:26:22.504"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:22.507" starttime="20171003 18:26:22.504"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171003 18:26:22.577" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, headers=None json=None</msg>
<msg timestamp="20171003 18:26:22.577" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171003 18:26:22.577" starttime="20171003 18:26:22.508"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171003 18:26:22.579" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171003 18:26:22.579" starttime="20171003 18:26:22.578"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171003 18:26:22.580" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171003 18:26:22.580" starttime="20171003 18:26:22.580"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:22.580" starttime="20171003 18:26:22.579"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:22.580" starttime="20171003 18:26:22.578"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:22.581" starttime="20171003 18:26:22.577"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171003 18:26:22.581" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171003 18:26:22.582" starttime="20171003 18:26:22.581"></status>
</kw>
<msg timestamp="20171003 18:26:22.582" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171003 18:26:22.582" starttime="20171003 18:26:22.301"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171003 18:26:22.583" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 18:26:22.583" starttime="20171003 18:26:22.582"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171003 18:26:22.583" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171003 18:26:22.583" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171003 18:26:22.583" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}</msg>
<status status="PASS" endtime="20171003 18:26:22.583" starttime="20171003 18:26:22.583"></status>
</kw>
<msg timestamp="20171003 18:26:22.584" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171003 18:26:22.584" starttime="20171003 18:26:22.300"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:22.584" starttime="20171003 18:26:22.300"></status>
</kw>
<msg timestamp="20171003 18:26:22.603" level="INFO">${bmc_power_policy_method} = New</msg>
<msg timestamp="20171003 18:26:22.603" level="INFO">${power_policy_setup} = 1</msg>
<status status="PASS" endtime="20171003 18:26:22.604" starttime="20171003 18:26:22.292"></status>
</kw>
<kw name="Translate Power Policy Value" library="utils">
<doc>Translate the policy value and return the result.</doc>
<arguments>
<arg>${policy}</arg>
</arguments>
<assign>
<var>${policy}</var>
</assign>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${RESTORE_LAST_STATE}</arg>
</arguments>
<status status="PASS" endtime="20171003 18:26:22.605" starttime="20171003 18:26:22.605"></status>
</kw>
<msg timestamp="20171003 18:26:22.605" level="INFO">${policy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171003 18:26:22.605" starttime="20171003 18:26:22.604"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${bmc_power_policy_method} Set Power Policy \ ${policy}</arg>
</arguments>
<kw name="New Set Power Policy" library="utils">
<doc>Set the given BMC power policy (new method).</doc>
<arguments>
<arg>xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20171003 18:26:22.621" level="INFO">${valueDict} = {u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}</msg>
<status status="PASS" endtime="20171003 18:26:22.621" starttime="20171003 18:26:22.621"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${POWER_RESTORE_URI}</arg>
<arg>PowerRestorePolicy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171003 18:26:22.623" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy</msg>
<status status="PASS" endtime="20171003 18:26:22.623" starttime="20171003 18:26:22.622"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171003 18:26:22.626" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171003 18:26:22.626" starttime="20171003 18:26:22.625"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171003 18:26:22.627" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171003 18:26:22.627" starttime="20171003 18:26:22.627"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171003 18:26:22.628" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171003 18:26:22.628" starttime="20171003 18:26:22.627"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171003 18:26:22.628" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171003 18:26:22.629" starttime="20171003 18:26:22.628"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171003 18:26:22.820" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171003 18:26:22.820" starttime="20171003 18:26:22.629"></status>
</kw>
<msg timestamp="20171003 18:26:22.820" level="INFO">${status} = PASS</msg>
<msg timestamp="20171003 18:26:22.820" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171003 18:26:22.820" starttime="20171003 18:26:22.629"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171003 18:26:22.821" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 18:26:22.821" starttime="20171003 18:26:22.821"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171003 18:26:22.822" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 18:26:22.822" starttime="20171003 18:26:22.821"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:22.822" starttime="20171003 18:26:22.625"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:22.822" starttime="20171003 18:26:22.624"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:22.822" starttime="20171003 18:26:22.624"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171003 18:26:22.823" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy</msg>
<status status="PASS" endtime="20171003 18:26:22.823" starttime="20171003 18:26:22.822"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171003 18:26:22.823" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171003 18:26:22.823" starttime="20171003 18:26:22.823"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20171003 18:26:22.824" starttime="20171003 18:26:22.824"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171003 18:26:22.826" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Put, args:{u'data': {u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Res...</msg>
<status status="PASS" endtime="20171003 18:26:22.826" starttime="20171003 18:26:22.825"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171003 18:26:22.827" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Put, args:{u'data': {u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20171003 18:26:22.827" starttime="20171003 18:26:22.826"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:22.827" starttime="20171003 18:26:22.826"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:22.827" starttime="20171003 18:26:22.824"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171003 18:26:22.969" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, data={"data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20171003 18:26:22.969" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171003 18:26:22.969" starttime="20171003 18:26:22.828"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171003 18:26:22.971" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171003 18:26:22.971" starttime="20171003 18:26:22.970"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171003 18:26:22.972" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171003 18:26:22.972" starttime="20171003 18:26:22.971"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:22.972" starttime="20171003 18:26:22.971"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:22.972" starttime="20171003 18:26:22.969"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171003 18:26:22.972" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171003 18:26:22.973" starttime="20171003 18:26:22.972"></status>
</kw>
<msg timestamp="20171003 18:26:22.973" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171003 18:26:22.973" starttime="20171003 18:26:22.623"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171003 18:26:22.973" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 18:26:22.973" starttime="20171003 18:26:22.973"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20171003 18:26:22.974" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171003 18:26:22.974" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171003 18:26:22.974" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20171003 18:26:22.974" starttime="20171003 18:26:22.974"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:22.974" starttime="20171003 18:26:22.622"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:22.974" starttime="20171003 18:26:22.620"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:22.975" starttime="20171003 18:26:22.605"></status>
</kw>
<kw name="Get System Power Policy" library="utils">
<doc>Get the BMC power policy.</doc>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="Set Power Policy Method" library="utils">
<doc>Set the global bmc_power_policy_method to either 'Old' or 'New'.</doc>
<status status="PASS" endtime="20171003 18:26:22.976" starttime="20171003 18:26:22.975"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${bmc_power_policy_method} Get Power Policy</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171003 18:26:22.976" level="INFO">${cmd_buf} = [u'New Get Power Policy']</msg>
<status status="PASS" endtime="20171003 18:26:22.976" starttime="20171003 18:26:22.976"></status>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>@{cmd_buf}</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="New Get Power Policy" library="utils">
<doc>Get the BMC power policy (new method).</doc>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${POWER_RESTORE_URI}</arg>
<arg>PowerRestorePolicy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171003 18:26:22.981" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171003 18:26:22.981" starttime="20171003 18:26:22.981"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171003 18:26:22.982" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171003 18:26:22.982" starttime="20171003 18:26:22.982"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171003 18:26:22.983" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171003 18:26:22.983" starttime="20171003 18:26:22.983"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171003 18:26:22.984" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171003 18:26:22.984" starttime="20171003 18:26:22.984"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171003 18:26:23.166" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171003 18:26:23.166" starttime="20171003 18:26:22.985"></status>
</kw>
<msg timestamp="20171003 18:26:23.167" level="INFO">${status} = PASS</msg>
<msg timestamp="20171003 18:26:23.167" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171003 18:26:23.167" starttime="20171003 18:26:22.985"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171003 18:26:23.167" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 18:26:23.168" starttime="20171003 18:26:23.167"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171003 18:26:23.168" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 18:26:23.168" starttime="20171003 18:26:23.168"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:23.169" starttime="20171003 18:26:22.980"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:23.169" starttime="20171003 18:26:22.980"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:23.169" starttime="20171003 18:26:22.979"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171003 18:26:23.169" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy</msg>
<status status="PASS" endtime="20171003 18:26:23.169" starttime="20171003 18:26:23.169"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171003 18:26:23.171" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Get, args:{}</msg>
<status status="PASS" endtime="20171003 18:26:23.172" starttime="20171003 18:26:23.171"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171003 18:26:23.173" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Get, args:{}</msg>
<status status="PASS" endtime="20171003 18:26:23.173" starttime="20171003 18:26:23.173"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:23.173" starttime="20171003 18:26:23.172"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:23.173" starttime="20171003 18:26:23.170"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:23.173" starttime="20171003 18:26:23.170"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171003 18:26:23.252" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, headers=None json=None</msg>
<msg timestamp="20171003 18:26:23.252" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171003 18:26:23.253" starttime="20171003 18:26:23.174"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171003 18:26:23.255" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171003 18:26:23.255" starttime="20171003 18:26:23.254"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171003 18:26:23.256" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171003 18:26:23.256" starttime="20171003 18:26:23.255"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:23.256" starttime="20171003 18:26:23.255"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:23.256" starttime="20171003 18:26:23.254"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:23.256" starttime="20171003 18:26:23.253"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171003 18:26:23.257" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171003 18:26:23.257" starttime="20171003 18:26:23.257"></status>
</kw>
<msg timestamp="20171003 18:26:23.257" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171003 18:26:23.257" starttime="20171003 18:26:22.978"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171003 18:26:23.258" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 18:26:23.258" starttime="20171003 18:26:23.258"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171003 18:26:23.259" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171003 18:26:23.259" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171003 18:26:23.259" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}</msg>
<status status="PASS" endtime="20171003 18:26:23.259" starttime="20171003 18:26:23.258"></status>
</kw>
<msg timestamp="20171003 18:26:23.259" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171003 18:26:23.259" starttime="20171003 18:26:22.978"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:23.259" starttime="20171003 18:26:22.977"></status>
</kw>
<msg timestamp="20171003 18:26:23.259" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171003 18:26:23.259" starttime="20171003 18:26:22.977"></status>
</kw>
<msg timestamp="20171003 18:26:23.260" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171003 18:26:23.260" starttime="20171003 18:26:22.975"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${currentPolicy}</arg>
<arg>${policy}</arg>
</arguments>
<msg timestamp="20171003 18:26:23.260" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20171003 18:26:23.260" starttime="20171003 18:26:23.260"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:23.260" starttime="20171003 18:26:22.291"></status>
</kw>
<msg timestamp="20171003 18:26:23.303" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20171003 18:26:23.337" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20171003 18:26:23.346" level="INFO">${TEST_MESSAGE} = </msg>
<msg timestamp="20171003 18:26:23.346" level="INFO">${FFDC_LOG_PATH} = ./</msg>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/state/enumerate</arg>
<arg>quiet=${0}</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171003 18:26:23.387" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171003 18:26:23.388" starttime="20171003 18:26:23.387"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171003 18:26:23.389" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171003 18:26:23.389" starttime="20171003 18:26:23.389"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171003 18:26:23.390" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171003 18:26:23.390" starttime="20171003 18:26:23.390"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171003 18:26:23.391" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171003 18:26:23.391" starttime="20171003 18:26:23.390"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171003 18:26:23.600" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171003 18:26:23.601" starttime="20171003 18:26:23.391"></status>
</kw>
<msg timestamp="20171003 18:26:23.601" level="INFO">${status} = PASS</msg>
<msg timestamp="20171003 18:26:23.601" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171003 18:26:23.601" starttime="20171003 18:26:23.391"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171003 18:26:23.601" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 18:26:23.602" starttime="20171003 18:26:23.601"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171003 18:26:23.602" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 18:26:23.602" starttime="20171003 18:26:23.602"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:23.602" starttime="20171003 18:26:23.385"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:23.603" starttime="20171003 18:26:23.385"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:23.603" starttime="20171003 18:26:23.383"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171003 18:26:23.603" level="INFO">${base_uri} = /xyz/openbmc_project/state/enumerate</msg>
<status status="PASS" endtime="20171003 18:26:23.604" starttime="20171003 18:26:23.603"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171003 18:26:23.606" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/state/enumerate, method:Get, args:{}</msg>
<status status="PASS" endtime="20171003 18:26:23.606" starttime="20171003 18:26:23.605"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171003 18:26:23.607" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/state/enumerate, method:Get, args:{}</msg>
<status status="PASS" endtime="20171003 18:26:23.607" starttime="20171003 18:26:23.607"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:23.607" starttime="20171003 18:26:23.606"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:23.607" starttime="20171003 18:26:23.604"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:23.607" starttime="20171003 18:26:23.604"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171003 18:26:23.838" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/enumerate, headers=None json=None</msg>
<msg timestamp="20171003 18:26:23.838" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171003 18:26:23.838" starttime="20171003 18:26:23.608"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171003 18:26:23.841" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "/xyz/openbmc_project/state/bmc0": {
      "CurrentBMCState": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
      "RequestedBMCTransition": "xyz.openbmc...</msg>
<status status="PASS" endtime="20171003 18:26:23.841" starttime="20171003 18:26:23.840"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171003 18:26:23.842" level="INFO">Response code:200, Content:{
  "data": {
    "/xyz/openbmc_project/state/bmc0": {
      "CurrentBMCState": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
      "RequestedBMCTransition": "xyz.openbmc_project.State.BMC.Transition.None"
    }, 
    "/xyz/openbmc_project/state/chassis0": {
      "CurrentPowerState": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
      "RequestedPowerTransition": "xyz.openbmc_project.State.Chassis.Transition.Off"
    }, 
    "/xyz/openbmc_project/state/host0": {
      "AttemptsLeft": 3, 
      "BootProgress": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
      "CurrentHostState": "xyz.openbmc_project.State.Host.HostState.Off", 
      "OperatingSystemState": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
      "RequestedHostTransition": "xyz.openbmc_project.State.Host.Transition.Off"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171003 18:26:23.842" starttime="20171003 18:26:23.841"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:23.842" starttime="20171003 18:26:23.841"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:23.842" starttime="20171003 18:26:23.839"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:23.842" starttime="20171003 18:26:23.839"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171003 18:26:23.843" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171003 18:26:23.843" starttime="20171003 18:26:23.842"></status>
</kw>
<msg timestamp="20171003 18:26:23.843" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171003 18:26:23.843" starttime="20171003 18:26:23.383"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171003 18:26:23.844" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 18:26:23.844" starttime="20171003 18:26:23.844"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171003 18:26:23.845" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/state/bmc0": {
      "CurrentBMCState": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
      "RequestedBMCTransition": "xyz.openbmc_project.State.BMC.Transition.None"
    }, 
    "/xyz/openbmc_project/state/chassis0": {
      "CurrentPowerState": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
      "RequestedPowerTransition": "xyz.openbmc_project.State.Chassis.Transition.Off"
    }, 
    "/xyz/openbmc_project/state/host0": {
      "AttemptsLeft": 3, 
      "BootProgress": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
      "CurrentHostState": "xyz.openbmc_project.State.Host.HostState.Off", 
      "OperatingSystemState": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
      "RequestedHostTransition": "xyz.openbmc_project.State.Host.Transition.Off"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171003 18:26:23.845" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171003 18:26:23.845" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'/xyz/openbmc_project/state/host0': {u'CurrentHostState': u'xyz.openbmc_project.State.Host.HostState.Off', u'RequestedHostTransition': u'xyz.openbm...</msg>
<status status="PASS" endtime="20171003 18:26:23.845" starttime="20171003 18:26:23.844"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:23.845" starttime="20171003 18:26:23.381"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:23.909" starttime="20171003 18:26:21.065"></status>
</kw>
<kw type="teardown" name="Obmc Boot Test Teardown" library="obmc_boot_test">
<doc>Clean up after the Main keyword.</doc>
<msg timestamp="20171003 18:26:23.915" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20171003 18:26:23.926" level="INFO">${boot_stack} = </msg>
<msg timestamp="20171003 18:26:23.926" level="INFO">${stack_mode} = normal</msg>
<msg timestamp="20171003 18:26:23.927" level="INFO">${quiet} = 0</msg>
<status status="PASS" endtime="20171003 18:26:23.927" starttime="20171003 18:26:23.909"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:23.927" starttime="20171003 18:26:21.064"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:23.927" starttime="20171003 18:26:21.056"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:23.927" starttime="20171003 18:26:21.054"></status>
</kw>
<msg timestamp="20171003 18:26:23.928" level="INFO">${status} = PASS</msg>
<msg timestamp="20171003 18:26:23.928" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20171003 18:26:23.928" starttime="20171003 18:26:21.053"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == 'PASS'</arg>
<arg>Return From Keyword</arg>
</arguments>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<msg timestamp="20171003 18:26:23.929" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171003 18:26:23.929" starttime="20171003 18:26:23.929"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:23.929" starttime="20171003 18:26:23.928"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:23.929" starttime="20171003 18:26:21.052"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:23.929" starttime="20171003 18:26:21.051"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:23.929" starttime="20171003 18:26:20.806"></status>
</kw>
<kw name="Upload And Activate Image" library="code_update_utils">
<doc>Upload an image to the BMC and activate it with REST.</doc>
<arguments>
<arg>${IMAGE_FILE_PATH}</arg>
<arg>skip_if_active=${SKIP_UPDATE_IF_ACTIVE}</arg>
</arguments>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<msg timestamp="20171003 18:26:23.931" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar"&gt;/home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20171003 18:26:23.931" starttime="20171003 18:26:23.931"></status>
</kw>
<kw name="Get Version Tar" library="code_update_utils">
<doc>Read the image version from the MANIFEST inside the tarball.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${image_version}</var>
</assign>
<msg timestamp="20171003 18:26:23.949" level="INFO">${image_version} = v1.99.10-90-g39aebdc</msg>
<status status="PASS" endtime="20171003 18:26:23.949" starttime="20171003 18:26:23.932"></status>
</kw>
<kw name="Get Binary File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${image_data}</var>
</assign>
<msg timestamp="20171003 18:26:23.950" html="yes" level="INFO">Getting file '&lt;a href="file:///home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar"&gt;/home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar&lt;/a&gt;'.</msg>
<msg timestamp="20171003 18:26:36.677" level="INFO">${image_data} = image-u-boot0000644000175100017520000113170013151356420013160 0...</msg>
<status status="PASS" endtime="20171003 18:26:36.678" starttime="20171003 18:26:23.949"></status>
</kw>
<kw name="Upload Image To BMC" library="rest_client">
<arguments>
<arg>/upload/image</arg>
<arg>data=${image_data}</arg>
</arguments>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171003 18:26:36.682" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171003 18:26:36.683" starttime="20171003 18:26:36.682"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171003 18:26:36.684" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171003 18:26:36.684" starttime="20171003 18:26:36.683"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171003 18:26:36.685" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171003 18:26:36.685" starttime="20171003 18:26:36.684"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171003 18:26:36.685" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171003 18:26:36.685" starttime="20171003 18:26:36.685"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171003 18:26:36.866" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171003 18:26:36.866" starttime="20171003 18:26:36.686"></status>
</kw>
<msg timestamp="20171003 18:26:36.866" level="INFO">${status} = PASS</msg>
<msg timestamp="20171003 18:26:36.866" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171003 18:26:36.866" starttime="20171003 18:26:36.686"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171003 18:26:36.867" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 18:26:36.867" starttime="20171003 18:26:36.866"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171003 18:26:36.867" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 18:26:36.868" starttime="20171003 18:26:36.867"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:36.868" starttime="20171003 18:26:36.681"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:36.868" starttime="20171003 18:26:36.680"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:36.868" starttime="20171003 18:26:36.679"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171003 18:26:36.869" level="INFO">${base_uri} = /upload/image</msg>
<status status="PASS" endtime="20171003 18:26:36.869" starttime="20171003 18:26:36.868"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/octet-stream</arg>
<arg>Accept=application/octet-stream</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171003 18:26:36.869" level="INFO">${headers} = {u'Content-Type': u'application/octet-stream', u'Accept': u'application/octet-stream'}</msg>
<status status="PASS" endtime="20171003 18:26:36.869" starttime="20171003 18:26:36.869"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20171003 18:26:36.870" starttime="20171003 18:26:36.870"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171003 18:26:36.871" starttime="20171003 18:26:36.870"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171003 18:26:41.199" level="INFO">Post Request using : alias=openbmc, uri=/upload/image, data=&lt;application/octet-stream&gt;, headers={u'Content-Type': u'application/octet-stream', u'Accept': u'application/octet-stream'}, files=None, allow_redirects=True </msg>
<msg timestamp="20171003 18:26:41.200" level="INFO">${ret} = &lt;Response [413]&gt;</msg>
<status status="PASS" endtime="20171003 18:26:41.200" starttime="20171003 18:26:36.871"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171003 18:26:41.200" starttime="20171003 18:26:41.200"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ret.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171003 18:26:41.201" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171003 18:26:41.201" level="FAIL">413 != 200</msg>
<status status="FAIL" endtime="20171003 18:26:41.201" starttime="20171003 18:26:41.201"></status>
</kw>
<status status="FAIL" endtime="20171003 18:26:41.202" starttime="20171003 18:26:36.678"></status>
</kw>
<status status="FAIL" endtime="20171003 18:26:41.202" starttime="20171003 18:26:23.930"></status>
</kw>
<kw type="teardown" name="Code Update Test Teardown">
<doc>Do code update test case teardown.</doc>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20171003 18:26:41.214" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20171003 18:26:41.214" starttime="20171003 18:26:41.213"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20171003 18:26:41.227" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20171003 18:26:44.226" level="INFO">${RC} = 0</msg>
<msg timestamp="20171003 18:26:44.226" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.954 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.632 ms
64 bytes from 9.3.86.161: icmp_se...</msg>
<status status="PASS" endtime="20171003 18:26:44.227" starttime="20171003 18:26:41.214"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20171003 18:26:44.230" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.954 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.632 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.632 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.624 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3001ms
rtt min/avg/max/mdev = 0.624/0.710/0.954/0.143 ms</msg>
<status status="PASS" endtime="20171003 18:26:44.230" starttime="20171003 18:26:44.229"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20171003 18:26:44.231" starttime="20171003 18:26:44.230"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:44.231" starttime="20171003 18:26:41.213"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171003 18:26:44.244" level="INFO">${cur_time} = 2017-10-03 18:26:44:243987</msg>
<status status="PASS" endtime="20171003 18:26:44.244" starttime="20171003 18:26:44.244"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171003 18:26:44.245" level="INFO">${cur_time} = 20171003182644243987</msg>
<status status="PASS" endtime="20171003 18:26:44.245" starttime="20171003 18:26:44.245"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:44.245" starttime="20171003 18:26:44.243"></status>
</kw>
<msg timestamp="20171003 18:26:44.251" level="INFO">${FFDC_TIME} = 20171003182644243987</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20171003 18:26:44.252" level="INFO">${suite_name} = BmcCodeUpdate</msg>
<status status="PASS" endtime="20171003 18:26:44.252" starttime="20171003 18:26:44.252"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20171003 18:26:44.253" level="INFO">${suite_name} = 20171003182644243987_BmcCodeUpdate</msg>
<status status="PASS" endtime="20171003 18:26:44.253" starttime="20171003 18:26:44.253"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20171003 18:26:44.254" level="INFO">${test_name} = RESTBMCCodeUpdate</msg>
<status status="PASS" endtime="20171003 18:26:44.254" starttime="20171003 18:26:44.253"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20171003 18:26:44.254" level="INFO">${test_name} = 20171003182644243987_RESTBMCCodeUpdate</msg>
<status status="PASS" endtime="20171003 18:26:44.254" starttime="20171003 18:26:44.254"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:44.255" starttime="20171003 18:26:44.251"></status>
</kw>
<msg timestamp="20171003 18:26:44.255" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/</msg>
<msg timestamp="20171003 18:26:44.255" level="INFO">${FFDC_PREFIX} = 20171003182644243987_</msg>
<msg timestamp="20171003 18:26:44.275" level="INFO">${LOG_PREFIX} = /home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/</arg>
</arguments>
<msg timestamp="20171003 18:26:44.276" html="yes" level="INFO">Created directory '&lt;a href="file:///home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate"&gt;/home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 18:26:44.276" starttime="20171003 18:26:44.276"></status>
</kw>
<msg timestamp="20171003 18:26:44.282" level="INFO">${FFDC_FILE_PATH} = /home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 18:26:44.293" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt"&gt;/home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 18:26:44.293" starttime="20171003 18:26:44.292"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:44.293" starttime="20171003 18:26:44.291"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 18:26:44.295" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt"&gt;/home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 18:26:44.295" starttime="20171003 18:26:44.294"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:44.295" starttime="20171003 18:26:44.293"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 18:26:44.296" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt"&gt;/home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 18:26:44.296" starttime="20171003 18:26:44.296"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:44.296" starttime="20171003 18:26:44.295"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 18:26:44.298" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt"&gt;/home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 18:26:44.298" starttime="20171003 18:26:44.298"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:44.298" starttime="20171003 18:26:44.297"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 18:26:44.299" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt"&gt;/home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 18:26:44.299" starttime="20171003 18:26:44.299"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:44.299" starttime="20171003 18:26:44.298"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 18:26:44.301" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt"&gt;/home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 18:26:44.301" starttime="20171003 18:26:44.300"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:44.301" starttime="20171003 18:26:44.300"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 18:26:44.302" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt"&gt;/home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 18:26:44.302" starttime="20171003 18:26:44.302"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:44.302" starttime="20171003 18:26:44.301"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 18:26:44.304" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt"&gt;/home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 18:26:44.304" starttime="20171003 18:26:44.303"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:44.304" starttime="20171003 18:26:44.302"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 18:26:44.305" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt"&gt;/home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 18:26:44.305" starttime="20171003 18:26:44.305"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:44.305" starttime="20171003 18:26:44.304"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 18:26:44.307" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt"&gt;/home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 18:26:44.307" starttime="20171003 18:26:44.306"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:44.307" starttime="20171003 18:26:44.306"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 18:26:44.308" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt"&gt;/home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 18:26:44.308" starttime="20171003 18:26:44.308"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:44.308" starttime="20171003 18:26:44.307"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 18:26:44.310" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt"&gt;/home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 18:26:44.310" starttime="20171003 18:26:44.309"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:44.310" starttime="20171003 18:26:44.308"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 18:26:44.311" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt"&gt;/home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 18:26:44.311" starttime="20171003 18:26:44.311"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:44.311" starttime="20171003 18:26:44.310"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20171003 18:26:44.329" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171003 18:26:44.329" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20171003 18:26:44.400" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20171003 18:26:44.408" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20171003 18:26:44.409" level="INFO">${stderr} = </msg>
<msg timestamp="20171003 18:26:44.409" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20171003 18:26:44.409" starttime="20171003 18:26:44.312"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20171003 18:26:44.409" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20171003 18:26:44.409" starttime="20171003 18:26:44.409"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20171003 18:26:44.410" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20171003 18:26:44.410" starttime="20171003 18:26:44.410"></status>
</kw>
<msg timestamp="20171003 18:26:44.410" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" endtime="20171003 18:26:44.410" starttime="20171003 18:26:44.312"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 18:26:44.411" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt"&gt;/home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 18:26:44.412" starttime="20171003 18:26:44.411"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:44.412" starttime="20171003 18:26:44.410"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:44.412" starttime="20171003 18:26:44.305"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 18:26:44.413" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt"&gt;/home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 18:26:44.413" starttime="20171003 18:26:44.413"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:44.413" starttime="20171003 18:26:44.412"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20171003 18:26:44.414" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20171003 18:26:44.414" starttime="20171003 18:26:44.413"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 18:26:44.415" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt"&gt;/home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 18:26:44.415" starttime="20171003 18:26:44.415"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:44.415" starttime="20171003 18:26:44.414"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 18:26:44.417" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt"&gt;/home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 18:26:44.417" starttime="20171003 18:26:44.416"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:44.417" starttime="20171003 18:26:44.416"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:44.417" starttime="20171003 18:26:44.414"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 18:26:44.418" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt"&gt;/home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 18:26:44.418" starttime="20171003 18:26:44.418"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:44.418" starttime="20171003 18:26:44.417"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 18:26:44.419" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt"&gt;/home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 18:26:44.420" starttime="20171003 18:26:44.419"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:44.420" starttime="20171003 18:26:44.418"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:44.420" starttime="20171003 18:26:44.417"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 18:26:44.421" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt"&gt;/home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 18:26:44.421" starttime="20171003 18:26:44.421"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:44.421" starttime="20171003 18:26:44.420"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 18:26:44.422" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt"&gt;/home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 18:26:44.422" starttime="20171003 18:26:44.422"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:44.423" starttime="20171003 18:26:44.421"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:44.423" starttime="20171003 18:26:44.420"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:44.423" starttime="20171003 18:26:44.414"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 18:26:44.424" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt"&gt;/home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 18:26:44.424" starttime="20171003 18:26:44.423"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:44.424" starttime="20171003 18:26:44.423"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:44.424" starttime="20171003 18:26:44.291"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20171003 18:26:44.430" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20171003 18:26:44.430" starttime="20171003 18:26:44.429"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20171003 18:26:44.431" level="INFO">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('Sys Inventory Files', 'System Inventory Files') | ('Core Files', 'SCP Coredump Files') | ('BMC Specif...</msg>
<status status="PASS" endtime="20171003 18:26:44.431" starttime="20171003 18:26:44.431"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20171003 18:26:44.433" starttime="20171003 18:26:44.432"></status>
</kw>
<msg timestamp="20171003 18:26:44.433" level="INFO">@{ffdc_function_list} = [ FFDC Generic Report | Get Request FFDC | Sys Inventory Files | Core Files | BMC Specific Files | SEL Log | OS FFDC ]</msg>
<status status="PASS" endtime="20171003 18:26:44.433" starttime="20171003 18:26:44.432"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171003 18:26:44.435" starttime="20171003 18:26:44.434"></status>
</kw>
<msg timestamp="20171003 18:26:44.435" level="INFO">${status} = PASS</msg>
<msg timestamp="20171003 18:26:44.435" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20171003 18:26:44.435" starttime="20171003 18:26:44.434"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171003 18:26:44.436" starttime="20171003 18:26:44.435"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20171003 18:26:44.451" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20171003 18:26:44.451" starttime="20171003 18:26:44.450"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20171003 18:26:44.452" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status status="PASS" endtime="20171003 18:26:44.452" starttime="20171003 18:26:44.452"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20171003 18:26:44.468" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20171003 18:26:44.468" starttime="20171003 18:26:44.452"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 18:26:44.471" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt"&gt;/home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 18:26:44.471" starttime="20171003 18:26:44.471"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:44.472" starttime="20171003 18:26:44.470"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 18:26:44.473" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt"&gt;/home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 18:26:44.473" starttime="20171003 18:26:44.473"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:44.473" starttime="20171003 18:26:44.472"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 18:26:44.474" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt"&gt;/home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 18:26:44.474" starttime="20171003 18:26:44.474"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:44.474" starttime="20171003 18:26:44.473"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 18:26:44.475" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt"&gt;/home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 18:26:44.476" starttime="20171003 18:26:44.475"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:44.476" starttime="20171003 18:26:44.475"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:44.476" starttime="20171003 18:26:44.470"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:44.476" starttime="20171003 18:26:44.469"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171003 18:26:44.477" level="INFO">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status status="PASS" endtime="20171003 18:26:44.477" starttime="20171003 18:26:44.476"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171003 18:26:44.517" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171003 18:26:44.517" level="INFO">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg timestamp="20171003 18:26:45.864" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171003 18:26:45.864" starttime="20171003 18:26:44.494"></status>
</kw>
<msg timestamp="20171003 18:26:45.864" level="INFO">${status} = PASS</msg>
<msg timestamp="20171003 18:26:45.864" level="INFO">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState....</msg>
<status status="PASS" endtime="20171003 18:26:45.864" starttime="20171003 18:26:44.477"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171003 18:26:45.865" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20171003 18:26:45.865" starttime="20171003 18:26:45.865"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171003 18:26:45.866" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171003 18:26:45.866" starttime="20171003 18:26:45.866"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 18:26:45.874" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt"&gt;/home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 18:26:45.874" starttime="20171003 18:26:45.874"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:45.874" starttime="20171003 18:26:45.873"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:45.874" starttime="20171003 18:26:45.866"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:45.874" starttime="20171003 18:26:44.468"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:45.874" starttime="20171003 18:26:44.468"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:45.874" starttime="20171003 18:26:44.468"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:45.875" starttime="20171003 18:26:44.451"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:45.875" starttime="20171003 18:26:44.451"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20171003 18:26:45.876" level="INFO">@{cmd_list} = [ ('FW Timestamp', 'cat /etc/timestamp') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" endtime="20171003 18:26:45.876" starttime="20171003 18:26:45.875"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20171003 18:26:45.877" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20171003 18:26:45.877" starttime="20171003 18:26:45.876"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Timestamp', 'cat /etc/timestamp')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 18:26:45.880" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt"&gt;/home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 18:26:45.880" starttime="20171003 18:26:45.880"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:45.880" starttime="20171003 18:26:45.879"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 18:26:45.881" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt"&gt;/home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 18:26:45.882" starttime="20171003 18:26:45.881"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:45.882" starttime="20171003 18:26:45.880"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 18:26:45.883" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt"&gt;/home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 18:26:45.883" starttime="20171003 18:26:45.882"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:45.883" starttime="20171003 18:26:45.882"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 18:26:45.884" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt"&gt;/home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 18:26:45.884" starttime="20171003 18:26:45.884"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:45.884" starttime="20171003 18:26:45.883"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:45.884" starttime="20171003 18:26:45.878"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:45.885" starttime="20171003 18:26:45.878"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171003 18:26:45.885" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/timestamp  ignore_err=1</msg>
<status status="PASS" endtime="20171003 18:26:45.885" starttime="20171003 18:26:45.885"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/timestamp</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171003 18:26:45.927" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171003 18:26:45.927" level="INFO">Executing command 'cat /etc/timestamp'.</msg>
<msg timestamp="20171003 18:26:45.972" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171003 18:26:45.972" starttime="20171003 18:26:45.903"></status>
</kw>
<msg timestamp="20171003 18:26:45.972" level="INFO">${status} = PASS</msg>
<msg timestamp="20171003 18:26:45.972" level="INFO">${ret_values} = (u'20171003162339', u'', 0)</msg>
<status status="PASS" endtime="20171003 18:26:45.972" starttime="20171003 18:26:45.886"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171003 18:26:45.973" level="INFO">${stdout} = 20171003162339</msg>
<status status="PASS" endtime="20171003 18:26:45.973" starttime="20171003 18:26:45.973"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171003 18:26:45.974" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171003 18:26:45.974" starttime="20171003 18:26:45.973"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 18:26:45.982" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt"&gt;/home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 18:26:45.982" starttime="20171003 18:26:45.981"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:45.982" starttime="20171003 18:26:45.981"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:45.982" starttime="20171003 18:26:45.974"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:45.982" starttime="20171003 18:26:45.877"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:45.982" starttime="20171003 18:26:45.877"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 18:26:45.985" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt"&gt;/home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 18:26:45.986" starttime="20171003 18:26:45.985"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:45.986" starttime="20171003 18:26:45.984"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 18:26:45.987" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt"&gt;/home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 18:26:45.987" starttime="20171003 18:26:45.987"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:45.987" starttime="20171003 18:26:45.986"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 18:26:45.988" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt"&gt;/home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 18:26:45.988" starttime="20171003 18:26:45.988"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:45.989" starttime="20171003 18:26:45.987"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 18:26:45.990" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt"&gt;/home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 18:26:45.990" starttime="20171003 18:26:45.989"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:45.990" starttime="20171003 18:26:45.989"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:45.990" starttime="20171003 18:26:45.984"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:45.990" starttime="20171003 18:26:45.983"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171003 18:26:45.991" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status status="PASS" endtime="20171003 18:26:45.991" starttime="20171003 18:26:45.990"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171003 18:26:46.032" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171003 18:26:46.032" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20171003 18:26:46.083" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171003 18:26:46.083" starttime="20171003 18:26:46.008"></status>
</kw>
<msg timestamp="20171003 18:26:46.083" level="INFO">${status} = PASS</msg>
<msg timestamp="20171003 18:26:46.083" level="INFO">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.10-34"\nVERSION_ID="v1.99.10-34-g4e109d4"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC...</msg>
<status status="PASS" endtime="20171003 18:26:46.083" starttime="20171003 18:26:45.991"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171003 18:26:46.084" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.10-34"
VERSION_ID="v1.99.10-34-g4e109d4"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Projec...</msg>
<status status="PASS" endtime="20171003 18:26:46.084" starttime="20171003 18:26:46.083"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171003 18:26:46.084" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171003 18:26:46.084" starttime="20171003 18:26:46.084"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 18:26:46.092" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt"&gt;/home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 18:26:46.092" starttime="20171003 18:26:46.092"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:46.092" starttime="20171003 18:26:46.091"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:46.092" starttime="20171003 18:26:46.085"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:46.093" starttime="20171003 18:26:45.983"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:46.093" starttime="20171003 18:26:45.982"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:46.093" starttime="20171003 18:26:45.877"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:46.093" starttime="20171003 18:26:45.875"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:46.093" starttime="20171003 18:26:45.875"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20171003 18:26:46.094" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" endtime="20171003 18:26:46.094" starttime="20171003 18:26:46.094"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20171003 18:26:46.095" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20171003 18:26:46.095" starttime="20171003 18:26:46.094"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 18:26:46.098" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt"&gt;/home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 18:26:46.099" starttime="20171003 18:26:46.098"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:46.099" starttime="20171003 18:26:46.097"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 18:26:46.100" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt"&gt;/home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 18:26:46.100" starttime="20171003 18:26:46.100"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:46.100" starttime="20171003 18:26:46.099"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 18:26:46.101" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt"&gt;/home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 18:26:46.101" starttime="20171003 18:26:46.101"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:46.101" starttime="20171003 18:26:46.100"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 18:26:46.103" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt"&gt;/home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 18:26:46.103" starttime="20171003 18:26:46.102"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:46.103" starttime="20171003 18:26:46.102"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:46.103" starttime="20171003 18:26:46.097"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:46.103" starttime="20171003 18:26:46.096"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171003 18:26:46.104" level="INFO">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status status="PASS" endtime="20171003 18:26:46.104" starttime="20171003 18:26:46.103"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171003 18:26:46.144" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171003 18:26:46.145" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20171003 18:26:46.192" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171003 18:26:46.192" starttime="20171003 18:26:46.122"></status>
</kw>
<msg timestamp="20171003 18:26:46.192" level="INFO">${status} = PASS</msg>
<msg timestamp="20171003 18:26:46.192" level="INFO">${ret_values} = (u' 18:27:00 up  1:51,  load average: 0.23, 0.24, 0.25', u'', 0)</msg>
<status status="PASS" endtime="20171003 18:26:46.192" starttime="20171003 18:26:46.104"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171003 18:26:46.193" level="INFO">${stdout} =  18:27:00 up  1:51,  load average: 0.23, 0.24, 0.25</msg>
<status status="PASS" endtime="20171003 18:26:46.193" starttime="20171003 18:26:46.193"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171003 18:26:46.194" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171003 18:26:46.194" starttime="20171003 18:26:46.193"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 18:26:46.201" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt"&gt;/home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 18:26:46.202" starttime="20171003 18:26:46.201"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:46.202" starttime="20171003 18:26:46.200"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:46.202" starttime="20171003 18:26:46.194"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:46.202" starttime="20171003 18:26:46.095"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:46.202" starttime="20171003 18:26:46.095"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 18:26:46.205" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt"&gt;/home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 18:26:46.205" starttime="20171003 18:26:46.205"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:46.205" starttime="20171003 18:26:46.204"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 18:26:46.207" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt"&gt;/home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 18:26:46.207" starttime="20171003 18:26:46.206"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:46.207" starttime="20171003 18:26:46.206"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 18:26:46.208" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt"&gt;/home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 18:26:46.208" starttime="20171003 18:26:46.208"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:46.208" starttime="20171003 18:26:46.207"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 18:26:46.209" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt"&gt;/home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 18:26:46.210" starttime="20171003 18:26:46.209"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:46.210" starttime="20171003 18:26:46.208"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:46.210" starttime="20171003 18:26:46.203"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:46.210" starttime="20171003 18:26:46.203"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171003 18:26:46.211" level="INFO">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status status="PASS" endtime="20171003 18:26:46.211" starttime="20171003 18:26:46.210"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171003 18:26:46.252" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171003 18:26:46.252" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20171003 18:26:46.324" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171003 18:26:46.324" starttime="20171003 18:26:46.228"></status>
</kw>
<msg timestamp="20171003 18:26:46.324" level="INFO">${status} = PASS</msg>
<msg timestamp="20171003 18:26:46.324" level="INFO">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\n/dev/root            squashfs       14.5M     14.5M         0 100% /\ndevtmpfs             devtmpfs      210.9M       ...</msg>
<status status="PASS" endtime="20171003 18:26:46.324" starttime="20171003 18:26:46.211"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171003 18:26:46.325" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
/dev/root            squashfs       14.5M     14.5M         0 100% /
devtmpfs             devtmpfs      210.9M         0  ...</msg>
<status status="PASS" endtime="20171003 18:26:46.325" starttime="20171003 18:26:46.325"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171003 18:26:46.326" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171003 18:26:46.326" starttime="20171003 18:26:46.326"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 18:26:46.338" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt"&gt;/home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 18:26:46.338" starttime="20171003 18:26:46.337"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:46.338" starttime="20171003 18:26:46.336"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:46.338" starttime="20171003 18:26:46.327"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:46.338" starttime="20171003 18:26:46.202"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:46.338" starttime="20171003 18:26:46.202"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 18:26:46.341" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt"&gt;/home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 18:26:46.341" starttime="20171003 18:26:46.341"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:46.342" starttime="20171003 18:26:46.340"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 18:26:46.343" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt"&gt;/home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 18:26:46.343" starttime="20171003 18:26:46.342"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:46.343" starttime="20171003 18:26:46.342"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 18:26:46.344" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt"&gt;/home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 18:26:46.345" starttime="20171003 18:26:46.344"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:46.345" starttime="20171003 18:26:46.344"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 18:26:46.346" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt"&gt;/home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 18:26:46.346" starttime="20171003 18:26:46.345"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:46.346" starttime="20171003 18:26:46.345"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:46.346" starttime="20171003 18:26:46.340"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:46.346" starttime="20171003 18:26:46.339"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171003 18:26:46.347" level="INFO">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status status="PASS" endtime="20171003 18:26:46.347" starttime="20171003 18:26:46.346"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171003 18:26:46.388" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171003 18:26:46.388" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20171003 18:26:46.445" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171003 18:26:46.445" starttime="20171003 18:26:46.365"></status>
</kw>
<msg timestamp="20171003 18:26:46.445" level="INFO">${status} = PASS</msg>
<msg timestamp="20171003 18:26:46.445" level="INFO">${ret_values} = (u'Linux witherspoon 4.10.17-c4227b43277bbd0992d10d764d4958239786503d #1 Wed Sep 13 15:42:31 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status status="PASS" endtime="20171003 18:26:46.445" starttime="20171003 18:26:46.347"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171003 18:26:46.446" level="INFO">${stdout} = Linux witherspoon 4.10.17-c4227b43277bbd0992d10d764d4958239786503d #1 Wed Sep 13 15:42:31 UTC 2017 armv6l GNU/Linux</msg>
<status status="PASS" endtime="20171003 18:26:46.446" starttime="20171003 18:26:46.446"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171003 18:26:46.447" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171003 18:26:46.447" starttime="20171003 18:26:46.447"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 18:26:46.455" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt"&gt;/home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 18:26:46.455" starttime="20171003 18:26:46.454"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:46.455" starttime="20171003 18:26:46.453"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:46.455" starttime="20171003 18:26:46.447"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:46.455" starttime="20171003 18:26:46.339"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:46.455" starttime="20171003 18:26:46.338"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:46.455" starttime="20171003 18:26:46.095"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:46.455" starttime="20171003 18:26:46.093"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:46.455" starttime="20171003 18:26:46.093"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:46.455" starttime="20171003 18:26:44.451"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:46.455" starttime="20171003 18:26:44.450"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:46.455" starttime="20171003 18:26:44.436"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:46.456" starttime="20171003 18:26:44.433"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:46.456" starttime="20171003 18:26:44.433"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171003 18:26:46.457" starttime="20171003 18:26:46.457"></status>
</kw>
<msg timestamp="20171003 18:26:46.458" level="INFO">${status} = PASS</msg>
<msg timestamp="20171003 18:26:46.458" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20171003 18:26:46.458" starttime="20171003 18:26:46.457"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171003 18:26:46.458" starttime="20171003 18:26:46.458"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20171003 18:26:46.473" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20171003 18:26:46.473" starttime="20171003 18:26:46.473"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20171003 18:26:46.474" level="INFO">@{cmd_list} = [ ('BMC_sensor_list', '/xyz/openbmc_project/sensors/enumerate') | ('OCC_state', '/org/open_power/control/enumerate') | ('BMC_control_list', '/xyz/openbmc_project/control/enumerate') | ('BMC_led', '/xy...</msg>
<status status="PASS" endtime="20171003 18:26:46.474" starttime="20171003 18:26:46.474"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/xyz/openbmc_project/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171003 18:26:46.475" level="INFO">${logpath} = /home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_sensor_list.txt</msg>
<status status="PASS" endtime="20171003 18:26:46.475" starttime="20171003 18:26:46.475"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171003 18:26:46.479" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171003 18:26:46.480" starttime="20171003 18:26:46.478"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171003 18:26:46.480" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171003 18:26:46.480" starttime="20171003 18:26:46.480"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171003 18:26:46.481" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171003 18:26:46.481" starttime="20171003 18:26:46.481"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171003 18:26:46.482" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171003 18:26:46.482" starttime="20171003 18:26:46.481"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171003 18:26:46.673" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171003 18:26:46.673" starttime="20171003 18:26:46.483"></status>
</kw>
<msg timestamp="20171003 18:26:46.673" level="INFO">${status} = PASS</msg>
<msg timestamp="20171003 18:26:46.673" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171003 18:26:46.673" starttime="20171003 18:26:46.482"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171003 18:26:46.674" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 18:26:46.674" starttime="20171003 18:26:46.673"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171003 18:26:46.675" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 18:26:46.675" starttime="20171003 18:26:46.674"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:46.675" starttime="20171003 18:26:46.478"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:46.675" starttime="20171003 18:26:46.477"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:46.675" starttime="20171003 18:26:46.476"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171003 18:26:46.676" level="INFO">${base_uri} = /xyz/openbmc_project/sensors/enumerate</msg>
<status status="PASS" endtime="20171003 18:26:46.676" starttime="20171003 18:26:46.675"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171003 18:26:46.676" starttime="20171003 18:26:46.676"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171003 18:26:47.288" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20171003 18:26:47.289" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171003 18:26:47.289" starttime="20171003 18:26:46.677"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171003 18:26:47.290" starttime="20171003 18:26:47.289"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171003 18:26:47.290" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171003 18:26:47.291" starttime="20171003 18:26:47.290"></status>
</kw>
<msg timestamp="20171003 18:26:47.291" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171003 18:26:47.291" starttime="20171003 18:26:46.475"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171003 18:26:47.292" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 18:26:47.292" starttime="20171003 18:26:47.292"></status>
</kw>
<msg timestamp="20171003 18:26:47.292" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20171003 18:26:47.292" starttime="20171003 18:26:47.291"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171003 18:26:47.293" starttime="20171003 18:26:47.293"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171003 18:26:47.294" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/sensors/current/ps0_output_current": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/current/ps1_output_current": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/power/ps0_input_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 6000000
    }, 
    "/xyz/openbmc_project/sensors/power/ps1_input_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/ambient": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 27260
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vcs_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 4000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdd_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 4000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vddr_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdn_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vcs_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdd_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vddr_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdn_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_input_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 206000
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_output_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 343
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_input_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_output_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171003 18:26:47.294" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171003 18:26:47.294" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/sensors/current/ps0_output_current": {
            "Scale": -3,
            "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes",
            "Value": ...</msg>
<status status="PASS" endtime="20171003 18:26:47.294" starttime="20171003 18:26:47.293"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 18:26:47.296" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_sensor_list.txt"&gt;/home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 18:26:47.296" starttime="20171003 18:26:47.295"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:47.296" starttime="20171003 18:26:47.295"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:47.296" starttime="20171003 18:26:46.475"></status>
</kw>
<kw type="foritem" name="${cmd} = ('OCC_state', '/org/open_power/control/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171003 18:26:47.297" level="INFO">${logpath} = /home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_OCC_state.txt</msg>
<status status="PASS" endtime="20171003 18:26:47.297" starttime="20171003 18:26:47.297"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171003 18:26:47.300" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171003 18:26:47.301" starttime="20171003 18:26:47.300"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171003 18:26:47.301" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171003 18:26:47.301" starttime="20171003 18:26:47.301"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171003 18:26:47.302" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171003 18:26:47.302" starttime="20171003 18:26:47.302"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171003 18:26:47.303" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171003 18:26:47.303" starttime="20171003 18:26:47.302"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171003 18:26:47.477" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171003 18:26:47.477" starttime="20171003 18:26:47.303"></status>
</kw>
<msg timestamp="20171003 18:26:47.477" level="INFO">${status} = PASS</msg>
<msg timestamp="20171003 18:26:47.477" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171003 18:26:47.477" starttime="20171003 18:26:47.303"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171003 18:26:47.478" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 18:26:47.478" starttime="20171003 18:26:47.477"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171003 18:26:47.479" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 18:26:47.479" starttime="20171003 18:26:47.478"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:47.479" starttime="20171003 18:26:47.299"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:47.479" starttime="20171003 18:26:47.299"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:47.479" starttime="20171003 18:26:47.298"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171003 18:26:47.480" level="INFO">${base_uri} = /org/open_power/control/enumerate</msg>
<status status="PASS" endtime="20171003 18:26:47.480" starttime="20171003 18:26:47.479"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171003 18:26:47.480" starttime="20171003 18:26:47.480"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171003 18:26:47.635" level="INFO">Get Request using : alias=openbmc, uri=/org/open_power/control/enumerate, headers=None json=None</msg>
<msg timestamp="20171003 18:26:47.635" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171003 18:26:47.635" starttime="20171003 18:26:47.481"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171003 18:26:47.636" starttime="20171003 18:26:47.635"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171003 18:26:47.636" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171003 18:26:47.636" starttime="20171003 18:26:47.636"></status>
</kw>
<msg timestamp="20171003 18:26:47.637" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171003 18:26:47.637" starttime="20171003 18:26:47.297"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171003 18:26:47.638" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 18:26:47.638" starttime="20171003 18:26:47.637"></status>
</kw>
<msg timestamp="20171003 18:26:47.638" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20171003 18:26:47.638" starttime="20171003 18:26:47.637"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171003 18:26:47.639" starttime="20171003 18:26:47.638"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171003 18:26:47.639" level="INFO">To JSON using : content={
  "data": {
    "/org/open_power/control/host0": {}, 
    "/org/open_power/control/occ0": {
      "OccActive": 0
    }, 
    "/org/open_power/control/occ1": {
      "OccActive": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171003 18:26:47.639" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171003 18:26:47.640" level="INFO">${jsondata} = {
    "data": {
        "/org/open_power/control/host0": {},
        "/org/open_power/control/occ0": {
            "OccActive": 0
        },
        "/org/open_power/control/occ1": {
            "OccA...</msg>
<status status="PASS" endtime="20171003 18:26:47.640" starttime="20171003 18:26:47.639"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 18:26:47.641" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_OCC_state.txt"&gt;/home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_OCC_state.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 18:26:47.641" starttime="20171003 18:26:47.641"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:47.641" starttime="20171003 18:26:47.640"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:47.641" starttime="20171003 18:26:47.296"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_control_list', '/xyz/openbmc_project/control/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171003 18:26:47.642" level="INFO">${logpath} = /home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_control_list.txt</msg>
<status status="PASS" endtime="20171003 18:26:47.642" starttime="20171003 18:26:47.642"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171003 18:26:47.646" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171003 18:26:47.646" starttime="20171003 18:26:47.646"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171003 18:26:47.647" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171003 18:26:47.647" starttime="20171003 18:26:47.647"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171003 18:26:47.648" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171003 18:26:47.649" starttime="20171003 18:26:47.648"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171003 18:26:47.649" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171003 18:26:47.650" starttime="20171003 18:26:47.649"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171003 18:26:47.815" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171003 18:26:47.816" starttime="20171003 18:26:47.651"></status>
</kw>
<msg timestamp="20171003 18:26:47.816" level="INFO">${status} = PASS</msg>
<msg timestamp="20171003 18:26:47.816" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171003 18:26:47.816" starttime="20171003 18:26:47.650"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171003 18:26:47.816" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 18:26:47.817" starttime="20171003 18:26:47.816"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171003 18:26:47.817" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 18:26:47.817" starttime="20171003 18:26:47.817"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:47.817" starttime="20171003 18:26:47.644"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:47.818" starttime="20171003 18:26:47.644"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:47.818" starttime="20171003 18:26:47.643"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171003 18:26:47.818" level="INFO">${base_uri} = /xyz/openbmc_project/control/enumerate</msg>
<status status="PASS" endtime="20171003 18:26:47.818" starttime="20171003 18:26:47.818"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171003 18:26:47.819" starttime="20171003 18:26:47.819"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171003 18:26:48.138" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/enumerate, headers=None json=None</msg>
<msg timestamp="20171003 18:26:48.138" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171003 18:26:48.138" starttime="20171003 18:26:47.819"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171003 18:26:48.139" starttime="20171003 18:26:48.139"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171003 18:26:48.139" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171003 18:26:48.140" starttime="20171003 18:26:48.139"></status>
</kw>
<msg timestamp="20171003 18:26:48.140" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171003 18:26:48.140" starttime="20171003 18:26:47.642"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171003 18:26:48.141" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 18:26:48.141" starttime="20171003 18:26:48.141"></status>
</kw>
<msg timestamp="20171003 18:26:48.141" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20171003 18:26:48.141" starttime="20171003 18:26:48.140"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171003 18:26:48.142" starttime="20171003 18:26:48.141"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171003 18:26:48.143" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/control/host0": {}, 
    "/xyz/openbmc_project/control/host0/TPMEnable": {
      "TPMEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/auto_reboot": {
      "AutoReboot": 1
    }, 
    "/xyz/openbmc_project/control/host0/boot": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular", 
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default"
    }, 
    "/xyz/openbmc_project/control/host0/boot/one_time": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular", 
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default", 
      "Enabled": 1
    }, 
    "/xyz/openbmc_project/control/host0/power_cap": {
      "PowerCap": 0, 
      "PowerCapEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/power_restore_policy": {
      "PowerRestorePolicy": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore"
    }, 
    "/xyz/openbmc_project/control/host0/restriction_mode": {
      "RestrictionMode": "xyz.openbmc_project.Control.Security.RestrictionMode.Modes.None"
    }, 
    "/xyz/openbmc_project/control/minimum_ship_level_required": {
      "MinimumShipLevelRequired": 1
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171003 18:26:48.143" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171003 18:26:48.143" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/control/host0": {},
        "/xyz/openbmc_project/control/host0/TPMEnable": {
            "TPMEnable": 0
        },
        "/xyz/openbmc_project/control/...</msg>
<status status="PASS" endtime="20171003 18:26:48.143" starttime="20171003 18:26:48.142"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 18:26:48.144" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_control_list.txt"&gt;/home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_control_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 18:26:48.144" starttime="20171003 18:26:48.144"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:48.144" starttime="20171003 18:26:48.143"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:48.144" starttime="20171003 18:26:47.641"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/xyz/openbmc_project/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171003 18:26:48.145" level="INFO">${logpath} = /home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_led.txt</msg>
<status status="PASS" endtime="20171003 18:26:48.145" starttime="20171003 18:26:48.145"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171003 18:26:48.149" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171003 18:26:48.149" starttime="20171003 18:26:48.148"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171003 18:26:48.150" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171003 18:26:48.150" starttime="20171003 18:26:48.149"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171003 18:26:48.150" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171003 18:26:48.150" starttime="20171003 18:26:48.150"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171003 18:26:48.151" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171003 18:26:48.151" starttime="20171003 18:26:48.151"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171003 18:26:48.345" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171003 18:26:48.346" starttime="20171003 18:26:48.152"></status>
</kw>
<msg timestamp="20171003 18:26:48.346" level="INFO">${status} = PASS</msg>
<msg timestamp="20171003 18:26:48.346" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171003 18:26:48.346" starttime="20171003 18:26:48.151"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171003 18:26:48.347" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 18:26:48.347" starttime="20171003 18:26:48.346"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171003 18:26:48.347" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 18:26:48.347" starttime="20171003 18:26:48.347"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:48.348" starttime="20171003 18:26:48.148"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:48.348" starttime="20171003 18:26:48.147"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:48.348" starttime="20171003 18:26:48.146"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171003 18:26:48.348" level="INFO">${base_uri} = /xyz/openbmc_project/led/enumerate</msg>
<status status="PASS" endtime="20171003 18:26:48.348" starttime="20171003 18:26:48.348"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171003 18:26:48.349" starttime="20171003 18:26:48.349"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171003 18:26:49.976" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/led/enumerate, headers=None json=None</msg>
<msg timestamp="20171003 18:26:49.976" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171003 18:26:49.976" starttime="20171003 18:26:48.349"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171003 18:26:49.977" starttime="20171003 18:26:49.977"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171003 18:26:49.978" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171003 18:26:49.978" starttime="20171003 18:26:49.978"></status>
</kw>
<msg timestamp="20171003 18:26:49.978" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171003 18:26:49.978" starttime="20171003 18:26:48.145"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171003 18:26:49.979" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 18:26:49.979" starttime="20171003 18:26:49.979"></status>
</kw>
<msg timestamp="20171003 18:26:49.979" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20171003 18:26:49.979" starttime="20171003 18:26:49.978"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171003 18:26:49.980" starttime="20171003 18:26:49.980"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171003 18:26:49.982" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/led/groups": {}, 
    "/xyz/openbmc_project/led/groups/bmc_booted": {
      "Asserted": 1
    }, 
    "/xyz/openbmc_project/led/groups/bmc_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/boxelder_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core10_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core11_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core12_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core13_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core14_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core15_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core16_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core17_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core18_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core19_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core20_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core21_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core22_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core23_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core6_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core7_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core8_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core9_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/cpu0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/cpu1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm10_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm11_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm12_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm13_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm14_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm15_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm6_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm7_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm8_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm9_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/enclosure_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/enclosure_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan0_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan1_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan2_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan3_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/lamp_test": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/motherboard_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/occ_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/power_on": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/powersupply0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/powersupply1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/system_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/physical/fan0": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan1": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan2": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan3": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_fault": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_id": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_power": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Blink"
    }, 
    "/xyz/openbmc_project/led/physical/rear_fault": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/rear_id": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/rear_power": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Blink"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171003 18:26:49.982" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171003 18:26:49.983" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/led/groups": {},
        "/xyz/openbmc_project/led/groups/bmc_booted": {
            "Asserted": 1
        },
        "/xyz/openbmc_project/led/groups/bmc...</msg>
<status status="PASS" endtime="20171003 18:26:49.983" starttime="20171003 18:26:49.980"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 18:26:49.984" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_led.txt"&gt;/home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_led.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 18:26:49.984" starttime="20171003 18:26:49.984"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:49.984" starttime="20171003 18:26:49.983"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:49.984" starttime="20171003 18:26:48.145"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FIRMWARE_list', '/xyz/openbmc_project/software/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171003 18:26:49.985" level="INFO">${logpath} = /home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_FIRMWARE_list.txt</msg>
<status status="PASS" endtime="20171003 18:26:49.985" starttime="20171003 18:26:49.985"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171003 18:26:49.988" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171003 18:26:49.989" starttime="20171003 18:26:49.988"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171003 18:26:49.989" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171003 18:26:49.989" starttime="20171003 18:26:49.989"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171003 18:26:49.990" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171003 18:26:49.990" starttime="20171003 18:26:49.990"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171003 18:26:49.991" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171003 18:26:49.991" starttime="20171003 18:26:49.990"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171003 18:26:50.191" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171003 18:26:50.191" starttime="20171003 18:26:49.992"></status>
</kw>
<msg timestamp="20171003 18:26:50.191" level="INFO">${status} = PASS</msg>
<msg timestamp="20171003 18:26:50.191" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171003 18:26:50.191" starttime="20171003 18:26:49.991"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171003 18:26:50.192" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 18:26:50.192" starttime="20171003 18:26:50.191"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171003 18:26:50.192" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 18:26:50.193" starttime="20171003 18:26:50.192"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:50.193" starttime="20171003 18:26:49.987"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:50.193" starttime="20171003 18:26:49.987"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:50.193" starttime="20171003 18:26:49.986"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171003 18:26:50.194" level="INFO">${base_uri} = /xyz/openbmc_project/software/enumerate</msg>
<status status="PASS" endtime="20171003 18:26:50.194" starttime="20171003 18:26:50.193"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171003 18:26:50.194" starttime="20171003 18:26:50.194"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171003 18:26:50.580" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/enumerate, headers=None json=None</msg>
<msg timestamp="20171003 18:26:50.581" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171003 18:26:50.581" starttime="20171003 18:26:50.195"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171003 18:26:50.581" starttime="20171003 18:26:50.581"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171003 18:26:50.582" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171003 18:26:50.582" starttime="20171003 18:26:50.582"></status>
</kw>
<msg timestamp="20171003 18:26:50.582" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171003 18:26:50.582" starttime="20171003 18:26:49.985"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171003 18:26:50.583" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 18:26:50.583" starttime="20171003 18:26:50.583"></status>
</kw>
<msg timestamp="20171003 18:26:50.584" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20171003 18:26:50.584" starttime="20171003 18:26:50.583"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171003 18:26:50.584" starttime="20171003 18:26:50.584"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171003 18:26:50.585" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/software/21912c1a": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "Path": "", 
      "Priority": 1, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "v1.99.10-87-g8c46ded", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/21912c1a/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    }, 
    "/xyz/openbmc_project/software/21912c1a/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/754aca46": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "Path": "", 
      "Priority": 0, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "v1.99.10-34-g4e109d4", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/754aca46/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    }, 
    "/xyz/openbmc_project/software/754aca46/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/7a9ef57c": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "ExtendedVersion": "op-build-57a0c70-dirty,buildroot-2017.08-6-g319c6e1,skiboot-v5.8-90-g398a98123641-pf316294,hostboot-3d6c541,linux-4.13-openpower1-pe0f5c53,petitboot-v1.5.1-pd10dfac,machine-xml-f8aaa73,occ-a43395b,hostboot-binaries-836385d,capp-ucode-9c73e9f,sbe-8d90ab2", 
      "Path": "", 
      "Priority": 1, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.19_1.35", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/7a9ef57c/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    }, 
    "/xyz/openbmc_project/software/7a9ef57c/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "ExtendedVersion": "op-build-v1.7-1321-g6eef393-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.8-rc1-pd9d2012,hostboot-c68be97,linux-4.12.8-openpower1-p919e663,petitboot-v1.5.1-p848cad7,machine-xml-c1e49a6-pbb9f626,occ-854999a,hostboot-binaries-67a15fd,capp-ucode-9c73e9f,sbe-4a62126-p180ac2a", 
      "Path": "", 
      "Priority": 0, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.54", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/active": {
      "endpoints": [
        "/xyz/openbmc_project/software/21912c1a", 
        "/xyz/openbmc_project/software/754aca46", 
        "/xyz/openbmc_project/software/8764baa3", 
        "/xyz/openbmc_project/software/7a9ef57c"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171003 18:26:50.585" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171003 18:26:50.586" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/software/21912c1a": {
            "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active",
            "Path": "",
            "Priorit...</msg>
<status status="PASS" endtime="20171003 18:26:50.586" starttime="20171003 18:26:50.584"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 18:26:50.587" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_FIRMWARE_list.txt"&gt;/home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_FIRMWARE_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 18:26:50.587" starttime="20171003 18:26:50.587"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:50.587" starttime="20171003 18:26:50.586"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:50.587" starttime="20171003 18:26:49.985"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171003 18:26:50.588" level="INFO">${logpath} = /home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_elog.txt</msg>
<status status="PASS" endtime="20171003 18:26:50.588" starttime="20171003 18:26:50.588"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171003 18:26:50.592" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171003 18:26:50.592" starttime="20171003 18:26:50.591"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171003 18:26:50.593" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171003 18:26:50.593" starttime="20171003 18:26:50.592"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171003 18:26:50.593" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171003 18:26:50.593" starttime="20171003 18:26:50.593"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171003 18:26:50.594" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171003 18:26:50.594" starttime="20171003 18:26:50.594"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171003 18:26:50.799" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171003 18:26:50.799" starttime="20171003 18:26:50.595"></status>
</kw>
<msg timestamp="20171003 18:26:50.799" level="INFO">${status} = PASS</msg>
<msg timestamp="20171003 18:26:50.799" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171003 18:26:50.799" starttime="20171003 18:26:50.594"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171003 18:26:50.800" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 18:26:50.800" starttime="20171003 18:26:50.800"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171003 18:26:50.801" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 18:26:50.801" starttime="20171003 18:26:50.801"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:50.801" starttime="20171003 18:26:50.591"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:50.801" starttime="20171003 18:26:50.590"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:50.801" starttime="20171003 18:26:50.589"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171003 18:26:50.802" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" endtime="20171003 18:26:50.802" starttime="20171003 18:26:50.802"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171003 18:26:50.803" starttime="20171003 18:26:50.802"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171003 18:26:50.863" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20171003 18:26:50.863" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171003 18:26:50.863" starttime="20171003 18:26:50.803"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171003 18:26:50.864" starttime="20171003 18:26:50.864"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171003 18:26:50.865" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171003 18:26:50.865" starttime="20171003 18:26:50.864"></status>
</kw>
<msg timestamp="20171003 18:26:50.865" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171003 18:26:50.865" starttime="20171003 18:26:50.589"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171003 18:26:50.866" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171003 18:26:50.866" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20171003 18:26:50.866" starttime="20171003 18:26:50.866"></status>
</kw>
<msg timestamp="20171003 18:26:50.867" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20171003 18:26:50.867" starttime="20171003 18:26:50.865"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20171003 18:26:50.868" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20171003 18:26:50.868" starttime="20171003 18:26:50.867"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:50.868" starttime="20171003 18:26:50.867"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:50.868" starttime="20171003 18:26:50.588"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171003 18:26:50.869" level="INFO">${logpath} = /home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_inventory.txt</msg>
<status status="PASS" endtime="20171003 18:26:50.869" starttime="20171003 18:26:50.868"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171003 18:26:50.874" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171003 18:26:50.874" starttime="20171003 18:26:50.874"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171003 18:26:50.875" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171003 18:26:50.875" starttime="20171003 18:26:50.875"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171003 18:26:50.876" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171003 18:26:50.876" starttime="20171003 18:26:50.876"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171003 18:26:50.877" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171003 18:26:50.877" starttime="20171003 18:26:50.876"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171003 18:26:51.055" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171003 18:26:51.056" starttime="20171003 18:26:50.877"></status>
</kw>
<msg timestamp="20171003 18:26:51.056" level="INFO">${status} = PASS</msg>
<msg timestamp="20171003 18:26:51.056" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171003 18:26:51.056" starttime="20171003 18:26:50.877"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171003 18:26:51.057" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 18:26:51.057" starttime="20171003 18:26:51.056"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171003 18:26:51.058" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 18:26:51.058" starttime="20171003 18:26:51.057"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:51.058" starttime="20171003 18:26:50.873"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:51.058" starttime="20171003 18:26:50.872"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:51.059" starttime="20171003 18:26:50.871"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171003 18:26:51.059" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" endtime="20171003 18:26:51.060" starttime="20171003 18:26:51.059"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171003 18:26:51.060" starttime="20171003 18:26:51.060"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171003 18:26:53.303" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20171003 18:26:53.303" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171003 18:26:53.303" starttime="20171003 18:26:51.061"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171003 18:26:53.304" starttime="20171003 18:26:53.304"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171003 18:26:53.305" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171003 18:26:53.305" starttime="20171003 18:26:53.305"></status>
</kw>
<msg timestamp="20171003 18:26:53.305" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171003 18:26:53.305" starttime="20171003 18:26:50.869"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171003 18:26:53.306" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 18:26:53.307" starttime="20171003 18:26:53.306"></status>
</kw>
<msg timestamp="20171003 18:26:53.307" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20171003 18:26:53.307" starttime="20171003 18:26:53.306"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171003 18:26:53.307" starttime="20171003 18:26:53.307"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171003 18:26:53.311" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system": {
      "AssetTag": "", 
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "", 
      "Model": "0000000000000000", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "", 
      "SerialNumber": "0000000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 0
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/activation": {
      "endpoints": [
        "/xyz/openbmc_project/software/8764baa3", 
        "/xyz/openbmc_project/software/7a9ef57c"
      ]
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "0000000000000000", 
      "Model": "", 
      "PartNumber": "00VK525         ", 
      "Present": 1, 
      "PrettyName": "SYSTEM PLANAR   ", 
      "SerialNumber": "Y130UF72700J    "
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000", 
      "UUID": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/activation": {
      "endpoints": [
        "/xyz/openbmc_project/software/21912c1a", 
        "/xyz/openbmc_project/software/754aca46"
      ]
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "70:e2:84:14:23:e1", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL906", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933943218", 
      "Version": "20"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core10": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core12": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core14": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core16": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core4": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core5": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core6": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core7": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL906", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933943264", 
      "Version": "20"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core10": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core12": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core14": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core16": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core4": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core5": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core6": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core7": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core9": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196b", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196a", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm10": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ef", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm11": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1801", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm13": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1824", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm14": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 0, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1907", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm15": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db18d0", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm2": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196c", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm3": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196d", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm4": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1971", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm5": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17e7", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm6": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1973", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm7": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1970", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm9": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ed", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171003 18:26:53.311" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171003 18:26:53.311" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system": {
            "AssetTag": "",
            "BuildDate": "",
            "Cached": 0,
            "FieldReplaceable": 0,
            "Man...</msg>
<status status="PASS" endtime="20171003 18:26:53.311" starttime="20171003 18:26:53.308"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 18:26:53.313" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_inventory.txt"&gt;/home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 18:26:53.313" starttime="20171003 18:26:53.313"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:53.313" starttime="20171003 18:26:53.312"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:53.313" starttime="20171003 18:26:50.868"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:53.313" starttime="20171003 18:26:46.474"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:53.313" starttime="20171003 18:26:46.473"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:53.314" starttime="20171003 18:26:46.473"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:53.314" starttime="20171003 18:26:46.473"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:53.314" starttime="20171003 18:26:46.472"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:53.314" starttime="20171003 18:26:46.459"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:53.314" starttime="20171003 18:26:46.456"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:53.314" starttime="20171003 18:26:46.456"></status>
</kw>
<kw type="foritem" name="${method} = ('Sys Inventory Files', 'System Inventory Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171003 18:26:53.316" starttime="20171003 18:26:53.316"></status>
</kw>
<msg timestamp="20171003 18:26:53.316" level="INFO">${status} = PASS</msg>
<msg timestamp="20171003 18:26:53.316" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20171003 18:26:53.316" starttime="20171003 18:26:53.315"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171003 18:26:53.317" starttime="20171003 18:26:53.316"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="System Inventory Files" library="openbmc_ffdc_methods">
<doc>Copy systest os_inventory files.</doc>
<kw name="Copy Files" library="OperatingSystem">
<doc>Copies specified files to the target directory.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
<arg>${ffdc_dir_path}</arg>
</arguments>
<status status="PASS" endtime="20171003 18:26:53.333" starttime="20171003 18:26:53.332"></status>
</kw>
<kw name="Remove Files" library="OperatingSystem">
<doc>Uses `Remove File` to remove multiple files one-by-one.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
</arguments>
<msg timestamp="20171003 18:26:53.333" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/os_inventory_*.json"&gt;/home/fspcibld/os_inventory_*.json&lt;/a&gt;' does not exist.</msg>
<status status="PASS" endtime="20171003 18:26:53.334" starttime="20171003 18:26:53.333"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:53.334" starttime="20171003 18:26:53.331"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:53.334" starttime="20171003 18:26:53.317"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:53.334" starttime="20171003 18:26:53.314"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:53.334" starttime="20171003 18:26:53.314"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171003 18:26:53.336" starttime="20171003 18:26:53.336"></status>
</kw>
<msg timestamp="20171003 18:26:53.336" level="INFO">${status} = PASS</msg>
<msg timestamp="20171003 18:26:53.336" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20171003 18:26:53.336" starttime="20171003 18:26:53.335"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171003 18:26:53.337" starttime="20171003 18:26:53.336"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20171003 18:26:53.370" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171003 18:26:53.371" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20171003 18:26:53.417" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20171003 18:26:53.428" level="INFO">${core_files} = None</msg>
<msg timestamp="20171003 18:26:53.428" level="INFO">${stderr} = None</msg>
<msg timestamp="20171003 18:26:53.428" level="INFO">${rc} = None</msg>
<msg timestamp="20171003 18:26:53.428" level="FAIL">#(UTC) 2017/10/03 18:26:53.426765 -    0.056809 - **ERROR** The prior SSH command returned a non-zero return code:
rc:                                               0x00000001
ls: /tmp/core_*: No such file or directory
: 1 != 0</msg>
<status status="FAIL" endtime="20171003 18:26:53.428" starttime="20171003 18:26:53.351"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20171003 18:26:53.429" level="INFO">@{core_list} = [ ]</msg>
<msg timestamp="20171003 18:26:53.429" level="FAIL">AttributeError: 'NoneType' object has no attribute 'split'</msg>
<status status="FAIL" endtime="20171003 18:26:53.429" starttime="20171003 18:26:53.429"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20171003 18:26:53.444" starttime="20171003 18:26:53.438"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20171003 18:26:54.111" starttime="20171003 18:26:53.445"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:54.111" starttime="20171003 18:26:53.444"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:54.111" starttime="20171003 18:26:53.437"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:54.112" starttime="20171003 18:26:53.429"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status status="PASS" endtime="20171003 18:26:54.112" starttime="20171003 18:26:54.112"></status>
</kw>
<status status="FAIL" endtime="20171003 18:26:54.112" starttime="20171003 18:26:53.350"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:54.112" starttime="20171003 18:26:53.337"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:54.112" starttime="20171003 18:26:53.334"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:54.112" starttime="20171003 18:26:53.334"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171003 18:26:54.114" starttime="20171003 18:26:54.114"></status>
</kw>
<msg timestamp="20171003 18:26:54.114" level="INFO">${status} = PASS</msg>
<msg timestamp="20171003 18:26:54.115" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20171003 18:26:54.115" starttime="20171003 18:26:54.114"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171003 18:26:54.115" starttime="20171003 18:26:54.115"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20171003 18:26:54.130" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20171003 18:26:54.130" starttime="20171003 18:26:54.129"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20171003 18:26:54.131" level="INFO">@{cmd_list} = [ ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/') | ('BMC_journalctl_nopager', 'journalctl --no-pager') | ('BMC_journalctl_pretty', 'journalctl -o json-pretty...</msg>
<status status="PASS" endtime="20171003 18:26:54.131" starttime="20171003 18:26:54.131"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171003 18:26:54.132" level="INFO">${logpath} = /home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_procinfo.txt</msg>
<status status="PASS" endtime="20171003 18:26:54.132" starttime="20171003 18:26:54.132"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171003 18:26:54.134" starttime="20171003 18:26:54.133"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171003 18:26:54.135" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status status="PASS" endtime="20171003 18:26:54.135" starttime="20171003 18:26:54.134"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171003 18:26:54.175" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171003 18:26:54.176" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20171003 18:26:54.223" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171003 18:26:54.223" starttime="20171003 18:26:54.153"></status>
</kw>
<msg timestamp="20171003 18:26:54.223" level="INFO">${status} = PASS</msg>
<msg timestamp="20171003 18:26:54.223" level="INFO">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status status="PASS" endtime="20171003 18:26:54.223" starttime="20171003 18:26:54.135"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171003 18:26:54.224" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status status="PASS" endtime="20171003 18:26:54.224" starttime="20171003 18:26:54.224"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171003 18:26:54.225" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171003 18:26:54.225" starttime="20171003 18:26:54.224"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 18:26:54.232" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_procinfo.txt"&gt;/home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 18:26:54.232" starttime="20171003 18:26:54.232"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:54.233" starttime="20171003 18:26:54.231"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:54.233" starttime="20171003 18:26:54.225"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:54.233" starttime="20171003 18:26:54.133"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:54.233" starttime="20171003 18:26:54.132"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171003 18:26:54.234" level="INFO">${logpath} = /home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_proc_fd_active_list.txt</msg>
<status status="PASS" endtime="20171003 18:26:54.234" starttime="20171003 18:26:54.233"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171003 18:26:54.235" starttime="20171003 18:26:54.235"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171003 18:26:54.236" level="INFO">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status status="PASS" endtime="20171003 18:26:54.236" starttime="20171003 18:26:54.235"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171003 18:26:54.276" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171003 18:26:54.276" level="INFO">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg timestamp="20171003 18:26:54.877" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171003 18:26:54.878" starttime="20171003 18:26:54.253"></status>
</kw>
<msg timestamp="20171003 18:26:54.878" level="INFO">${status} = PASS</msg>
<msg timestamp="20171003 18:26:54.879" level="INFO">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Oct  3 16:38 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Oct  3 16:38 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status status="PASS" endtime="20171003 18:26:54.879" starttime="20171003 18:26:54.236"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171003 18:26:54.880" level="INFO">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Oct  3 16:38 0 -&gt; /dev/null
lrwx------    1 root     root            64 Oct  3 16:38 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status status="PASS" endtime="20171003 18:26:54.880" starttime="20171003 18:26:54.879"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171003 18:26:54.880" level="INFO">${stderr} = ls: /proc/2663/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status status="PASS" endtime="20171003 18:26:54.881" starttime="20171003 18:26:54.880"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 18:26:54.889" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_proc_fd_active_list.txt"&gt;/home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 18:26:54.889" starttime="20171003 18:26:54.888"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:54.889" starttime="20171003 18:26:54.887"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:54.889" starttime="20171003 18:26:54.881"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:54.889" starttime="20171003 18:26:54.234"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:54.889" starttime="20171003 18:26:54.233"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl_nopager', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171003 18:26:54.890" level="INFO">${logpath} = /home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_journalctl_nopager.txt</msg>
<status status="PASS" endtime="20171003 18:26:54.890" starttime="20171003 18:26:54.889"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171003 18:26:54.891" starttime="20171003 18:26:54.891"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171003 18:26:54.892" level="INFO">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status status="PASS" endtime="20171003 18:26:54.892" starttime="20171003 18:26:54.892"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171003 18:26:54.934" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171003 18:26:54.934" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20171003 18:26:58.394" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171003 18:26:58.395" starttime="20171003 18:26:54.910"></status>
</kw>
<msg timestamp="20171003 18:26:58.395" level="INFO">${status} = PASS</msg>
<msg timestamp="20171003 18:26:58.399" level="INFO">${ret_values} = (u'-- Logs begin at Tue 2017-10-03 16:35:46 UTC, end at Tue 2017-10-03 18:27:08 UTC. --\nOct 03 16:35:46 witherspoon kernel: Booting Linux on physical CPU 0x0\nOct 03 16:35:46 witherspoon kernel: Linu...</msg>
<status status="PASS" endtime="20171003 18:26:58.399" starttime="20171003 18:26:54.892"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171003 18:26:58.401" level="INFO">${stdout} = -- Logs begin at Tue 2017-10-03 16:35:46 UTC, end at Tue 2017-10-03 18:27:08 UTC. --
Oct 03 16:35:46 witherspoon kernel: Booting Linux on physical CPU 0x0
Oct 03 16:35:46 witherspoon kernel: Linux ver...</msg>
<status status="PASS" endtime="20171003 18:26:58.401" starttime="20171003 18:26:58.400"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171003 18:26:58.402" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171003 18:26:58.402" starttime="20171003 18:26:58.401"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 18:26:58.412" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_journalctl_nopager.txt"&gt;/home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_journalctl_nopager.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 18:26:58.412" starttime="20171003 18:26:58.410"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:58.412" starttime="20171003 18:26:58.408"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:58.412" starttime="20171003 18:26:58.402"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:58.412" starttime="20171003 18:26:54.890"></status>
</kw>
<status status="PASS" endtime="20171003 18:26:58.412" starttime="20171003 18:26:54.889"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl_pretty', 'journalctl -o json-pretty')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171003 18:26:58.413" level="INFO">${logpath} = /home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_journalctl_pretty.txt</msg>
<status status="PASS" endtime="20171003 18:26:58.413" starttime="20171003 18:26:58.412"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171003 18:26:58.414" starttime="20171003 18:26:58.414"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171003 18:26:58.415" level="INFO">${cmd_buf} = BMC Execute Command  journalctl -o json-pretty  ignore_err=1</msg>
<status status="PASS" endtime="20171003 18:26:58.416" starttime="20171003 18:26:58.415"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl -o json-pretty</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171003 18:26:58.458" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171003 18:26:58.458" level="INFO">Executing command 'journalctl -o json-pretty'.</msg>
<msg timestamp="20171003 18:27:06.685" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171003 18:27:06.689" starttime="20171003 18:26:58.435"></status>
</kw>
<msg timestamp="20171003 18:27:06.690" level="INFO">${status} = PASS</msg>
<msg timestamp="20171003 18:27:06.736" level="INFO">${ret_values} = (u'{\n\t"__CURSOR" : "s=2dc276e766e14b7eb568258574de60aa;i=1;b=932dea5a5d1e4e2ea910afda13c99f8b;m=14cdc6c;t=55aa7153eaa4f;x=3b7ae4e13547024f",\n\t"__REALTIME_TIMESTAMP" : "1507048546019919",\n\t"__MON...</msg>
<status status="PASS" endtime="20171003 18:27:06.736" starttime="20171003 18:26:58.416"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171003 18:27:06.748" level="INFO">${stdout} = {
	"__CURSOR" : "s=2dc276e766e14b7eb568258574de60aa;i=1;b=932dea5a5d1e4e2ea910afda13c99f8b;m=14cdc6c;t=55aa7153eaa4f;x=3b7ae4e13547024f",
	"__REALTIME_TIMESTAMP" : "1507048546019919",
	"__MONOTONIC_TI...</msg>
<status status="PASS" endtime="20171003 18:27:06.748" starttime="20171003 18:27:06.737"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171003 18:27:06.749" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171003 18:27:06.749" starttime="20171003 18:27:06.748"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 18:27:06.779" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_journalctl_pretty.txt"&gt;/home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_journalctl_pretty.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 18:27:06.779" starttime="20171003 18:27:06.771"></status>
</kw>
<status status="PASS" endtime="20171003 18:27:06.779" starttime="20171003 18:27:06.759"></status>
</kw>
<status status="PASS" endtime="20171003 18:27:06.780" starttime="20171003 18:27:06.749"></status>
</kw>
<status status="PASS" endtime="20171003 18:27:06.780" starttime="20171003 18:26:58.413"></status>
</kw>
<status status="PASS" endtime="20171003 18:27:06.780" starttime="20171003 18:26:58.412"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171003 18:27:06.781" level="INFO">${logpath} = /home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_meminfo.txt</msg>
<status status="PASS" endtime="20171003 18:27:06.781" starttime="20171003 18:27:06.780"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171003 18:27:06.782" starttime="20171003 18:27:06.782"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171003 18:27:06.783" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status status="PASS" endtime="20171003 18:27:06.783" starttime="20171003 18:27:06.782"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171003 18:27:06.826" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171003 18:27:06.827" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20171003 18:27:06.887" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171003 18:27:06.887" starttime="20171003 18:27:06.801"></status>
</kw>
<msg timestamp="20171003 18:27:06.887" level="INFO">${status} = PASS</msg>
<msg timestamp="20171003 18:27:06.888" level="INFO">${ret_values} = (u'MemTotal:         432244 kB\nMemFree:          219432 kB\nMemAvailable:     323560 kB\nBuffers:           32060 kB\nCached:            82504 kB\nSwapCached:            0 kB\nActive:           16426...</msg>
<status status="PASS" endtime="20171003 18:27:06.888" starttime="20171003 18:27:06.783"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171003 18:27:06.888" level="INFO">${stdout} = MemTotal:         432244 kB
MemFree:          219432 kB
MemAvailable:     323560 kB
Buffers:           32060 kB
Cached:            82504 kB
SwapCached:            0 kB
Active:           164268 kB
Inac...</msg>
<status status="PASS" endtime="20171003 18:27:06.888" starttime="20171003 18:27:06.888"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171003 18:27:06.889" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171003 18:27:06.889" starttime="20171003 18:27:06.889"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 18:27:06.897" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_meminfo.txt"&gt;/home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 18:27:06.897" starttime="20171003 18:27:06.896"></status>
</kw>
<status status="PASS" endtime="20171003 18:27:06.897" starttime="20171003 18:27:06.896"></status>
</kw>
<status status="PASS" endtime="20171003 18:27:06.897" starttime="20171003 18:27:06.889"></status>
</kw>
<status status="PASS" endtime="20171003 18:27:06.897" starttime="20171003 18:27:06.781"></status>
</kw>
<status status="PASS" endtime="20171003 18:27:06.897" starttime="20171003 18:27:06.780"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171003 18:27:06.898" level="INFO">${logpath} = /home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_proc_list.txt</msg>
<status status="PASS" endtime="20171003 18:27:06.898" starttime="20171003 18:27:06.897"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171003 18:27:06.899" starttime="20171003 18:27:06.899"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171003 18:27:06.900" level="INFO">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status status="PASS" endtime="20171003 18:27:06.900" starttime="20171003 18:27:06.900"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171003 18:27:06.941" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171003 18:27:06.941" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20171003 18:27:07.251" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171003 18:27:07.251" starttime="20171003 18:27:06.918"></status>
</kw>
<msg timestamp="20171003 18:27:07.251" level="INFO">${status} = PASS</msg>
<msg timestamp="20171003 18:27:07.251" level="INFO">${ret_values} = (u'Mem: 212812K used, 219432K free, 8956K shrd, 32060K buff, 82504K cached\nCPU:  23% usr   0% sys   0% nic  76% idle   0% io   0% irq   0% sirq\nLoad average: 0.60 0.33 0.29 1/159 2668\n  PID  PPID U...</msg>
<status status="PASS" endtime="20171003 18:27:07.251" starttime="20171003 18:27:06.900"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171003 18:27:07.252" level="INFO">${stdout} = Mem: 212812K used, 219432K free, 8956K shrd, 32060K buff, 82504K cached
CPU:  23% usr   0% sys   0% nic  76% idle   0% io   0% irq   0% sirq
Load average: 0.60 0.33 0.29 1/159 2668
  PID  PPID USER   ...</msg>
<status status="PASS" endtime="20171003 18:27:07.252" starttime="20171003 18:27:07.252"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171003 18:27:07.253" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171003 18:27:07.253" starttime="20171003 18:27:07.252"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 18:27:07.260" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_proc_list.txt"&gt;/home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 18:27:07.260" starttime="20171003 18:27:07.260"></status>
</kw>
<status status="PASS" endtime="20171003 18:27:07.261" starttime="20171003 18:27:07.259"></status>
</kw>
<status status="PASS" endtime="20171003 18:27:07.261" starttime="20171003 18:27:07.253"></status>
</kw>
<status status="PASS" endtime="20171003 18:27:07.261" starttime="20171003 18:27:06.898"></status>
</kw>
<status status="PASS" endtime="20171003 18:27:07.261" starttime="20171003 18:27:06.897"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171003 18:27:07.262" level="INFO">${logpath} = /home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_dmesg.txt</msg>
<status status="PASS" endtime="20171003 18:27:07.262" starttime="20171003 18:27:07.261"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171003 18:27:07.263" starttime="20171003 18:27:07.263"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171003 18:27:07.264" level="INFO">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status status="PASS" endtime="20171003 18:27:07.264" starttime="20171003 18:27:07.263"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171003 18:27:07.305" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171003 18:27:07.305" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20171003 18:27:07.362" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171003 18:27:07.362" starttime="20171003 18:27:07.282"></status>
</kw>
<msg timestamp="20171003 18:27:07.362" level="INFO">${status} = PASS</msg>
<msg timestamp="20171003 18:27:07.362" level="INFO">${ret_values} = (u'[    0.260000] ipmi-bt-host 1e789140.ibt: Using IRQ 22\n[    0.260000] Serial: 8250/16550 driver, 6 ports, IRQ sharing enabled\n[    0.290000] 1e787000.vuart: ttyS5 at MMIO 0x1e787000 (irq = 22, ba...</msg>
<status status="PASS" endtime="20171003 18:27:07.362" starttime="20171003 18:27:07.264"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171003 18:27:07.363" level="INFO">${stdout} = [    0.260000] ipmi-bt-host 1e789140.ibt: Using IRQ 22
[    0.260000] Serial: 8250/16550 driver, 6 ports, IRQ sharing enabled
[    0.290000] 1e787000.vuart: ttyS5 at MMIO 0x1e787000 (irq = 22, base_ba...</msg>
<status status="PASS" endtime="20171003 18:27:07.363" starttime="20171003 18:27:07.363"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171003 18:27:07.364" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171003 18:27:07.364" starttime="20171003 18:27:07.363"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 18:27:07.372" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_dmesg.txt"&gt;/home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/20171003182644243987_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 18:27:07.372" starttime="20171003 18:27:07.371"></status>
</kw>
<status status="PASS" endtime="20171003 18:27:07.372" starttime="20171003 18:27:07.370"></status>
</kw>
<status status="PASS" endtime="20171003 18:27:07.372" starttime="20171003 18:27:07.364"></status>
</kw>
<status status="PASS" endtime="20171003 18:27:07.372" starttime="20171003 18:27:07.262"></status>
</kw>
<status status="PASS" endtime="20171003 18:27:07.372" starttime="20171003 18:27:07.261"></status>
</kw>
<status status="PASS" endtime="20171003 18:27:07.372" starttime="20171003 18:26:54.131"></status>
</kw>
<status status="PASS" endtime="20171003 18:27:07.372" starttime="20171003 18:26:54.130"></status>
</kw>
<status status="PASS" endtime="20171003 18:27:07.372" starttime="20171003 18:26:54.130"></status>
</kw>
<status status="PASS" endtime="20171003 18:27:07.372" starttime="20171003 18:26:54.130"></status>
</kw>
<status status="PASS" endtime="20171003 18:27:07.372" starttime="20171003 18:26:54.129"></status>
</kw>
<status status="PASS" endtime="20171003 18:27:07.372" starttime="20171003 18:26:54.115"></status>
</kw>
<status status="PASS" endtime="20171003 18:27:07.373" starttime="20171003 18:26:54.113"></status>
</kw>
<status status="PASS" endtime="20171003 18:27:07.373" starttime="20171003 18:26:54.112"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171003 18:27:07.375" starttime="20171003 18:27:07.375"></status>
</kw>
<msg timestamp="20171003 18:27:07.375" level="INFO">${status} = PASS</msg>
<msg timestamp="20171003 18:27:07.375" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20171003 18:27:07.376" starttime="20171003 18:27:07.374"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171003 18:27:07.376" starttime="20171003 18:27:07.376"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171003 18:27:07.392" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171003 18:27:07.393" starttime="20171003 18:27:07.392"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171003 18:27:07.393" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171003 18:27:07.394" starttime="20171003 18:27:07.393"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171003 18:27:07.394" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171003 18:27:07.394" starttime="20171003 18:27:07.394"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171003 18:27:07.395" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171003 18:27:07.395" starttime="20171003 18:27:07.395"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171003 18:27:07.568" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171003 18:27:07.568" starttime="20171003 18:27:07.396"></status>
</kw>
<msg timestamp="20171003 18:27:07.568" level="INFO">${status} = PASS</msg>
<msg timestamp="20171003 18:27:07.568" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171003 18:27:07.568" starttime="20171003 18:27:07.395"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171003 18:27:07.569" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 18:27:07.569" starttime="20171003 18:27:07.568"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171003 18:27:07.569" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 18:27:07.570" starttime="20171003 18:27:07.569"></status>
</kw>
<status status="PASS" endtime="20171003 18:27:07.570" starttime="20171003 18:27:07.392"></status>
</kw>
<status status="PASS" endtime="20171003 18:27:07.570" starttime="20171003 18:27:07.391"></status>
</kw>
<status status="PASS" endtime="20171003 18:27:07.570" starttime="20171003 18:27:07.390"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171003 18:27:07.570" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" endtime="20171003 18:27:07.571" starttime="20171003 18:27:07.570"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171003 18:27:07.571" starttime="20171003 18:27:07.571"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171003 18:27:07.634" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20171003 18:27:07.634" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171003 18:27:07.634" starttime="20171003 18:27:07.571"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171003 18:27:07.635" starttime="20171003 18:27:07.634"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171003 18:27:07.635" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171003 18:27:07.635" starttime="20171003 18:27:07.635"></status>
</kw>
<msg timestamp="20171003 18:27:07.636" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171003 18:27:07.636" starttime="20171003 18:27:07.390"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171003 18:27:07.637" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171003 18:27:07.637" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20171003 18:27:07.637" starttime="20171003 18:27:07.636"></status>
</kw>
<msg timestamp="20171003 18:27:07.637" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20171003 18:27:07.637" starttime="20171003 18:27:07.636"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20171003 18:27:07.638" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171003 18:27:07.638" starttime="20171003 18:27:07.638"></status>
</kw>
<status status="PASS" endtime="20171003 18:27:07.638" starttime="20171003 18:27:07.389"></status>
</kw>
<status status="PASS" endtime="20171003 18:27:07.638" starttime="20171003 18:27:07.376"></status>
</kw>
<status status="PASS" endtime="20171003 18:27:07.638" starttime="20171003 18:27:07.373"></status>
</kw>
<status status="PASS" endtime="20171003 18:27:07.638" starttime="20171003 18:27:07.373"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171003 18:27:07.640" starttime="20171003 18:27:07.640"></status>
</kw>
<msg timestamp="20171003 18:27:07.640" level="INFO">${status} = PASS</msg>
<msg timestamp="20171003 18:27:07.640" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20171003 18:27:07.640" starttime="20171003 18:27:07.639"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171003 18:27:07.641" starttime="20171003 18:27:07.641"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20171003 18:27:07.656" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171003 18:27:07.656" starttime="20171003 18:27:07.655"></status>
</kw>
<status status="PASS" endtime="20171003 18:27:07.656" starttime="20171003 18:27:07.654"></status>
</kw>
<status status="PASS" endtime="20171003 18:27:07.656" starttime="20171003 18:27:07.641"></status>
</kw>
<status status="PASS" endtime="20171003 18:27:07.656" starttime="20171003 18:27:07.639"></status>
</kw>
<status status="PASS" endtime="20171003 18:27:07.656" starttime="20171003 18:27:07.638"></status>
</kw>
<status status="PASS" endtime="20171003 18:27:07.657" starttime="20171003 18:26:44.433"></status>
</kw>
<status status="PASS" endtime="20171003 18:27:07.657" starttime="20171003 18:26:44.430"></status>
</kw>
<status status="PASS" endtime="20171003 18:27:07.657" starttime="20171003 18:26:44.430"></status>
</kw>
<status status="PASS" endtime="20171003 18:27:07.657" starttime="20171003 18:26:44.430"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20171003 18:27:07.663" starttime="20171003 18:27:07.663"></status>
</kw>
<status status="PASS" endtime="20171003 18:27:07.663" starttime="20171003 18:27:07.657"></status>
</kw>
<status status="PASS" endtime="20171003 18:27:07.664" starttime="20171003 18:26:44.429"></status>
</kw>
<status status="PASS" endtime="20171003 18:27:07.664" starttime="20171003 18:26:41.204"></status>
</kw>
<status status="PASS" endtime="20171003 18:27:07.664" starttime="20171003 18:26:41.203"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20171003 18:27:07.665" level="INFO">${FFDC_DIR_PATH_STYLE} = 0</msg>
<status status="PASS" endtime="20171003 18:27:07.665" starttime="20171003 18:27:07.665"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20171003 18:27:07.666" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20171003182644243987_BmcCodeUpdate/20171003182644243987_RESTBMCCodeUpdate/</msg>
<status status="PASS" endtime="20171003 18:27:07.666" starttime="20171003 18:27:07.666"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20171003 18:27:07.667" starttime="20171003 18:27:07.666"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20171003 18:27:07.667" starttime="20171003 18:27:07.667"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20171003 18:27:07.668" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld"&gt;/home/fspcibld&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20171003 18:27:07.668" starttime="20171003 18:27:07.668"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20171003 18:27:07.669" level="FAIL">File '/home/fspcibld/logs/test_history.txt' does not exist.</msg>
<status status="FAIL" endtime="20171003 18:27:07.669" starttime="20171003 18:27:07.669"></status>
</kw>
<msg timestamp="20171003 18:27:07.669" level="INFO">${exist} = False</msg>
<status status="PASS" endtime="20171003 18:27:07.669" starttime="20171003 18:27:07.668"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20171003 18:27:07.671" html="yes" level="INFO">Created file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 18:27:07.671" starttime="20171003 18:27:07.670"></status>
</kw>
<status status="PASS" endtime="20171003 18:27:07.671" starttime="20171003 18:27:07.670"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20171003 18:27:07.671" starttime="20171003 18:27:07.671"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171003 18:27:07.673" level="INFO">${cur_time} = 2017-10-03 18:27:07:672482</msg>
<status status="PASS" endtime="20171003 18:27:07.673" starttime="20171003 18:27:07.672"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171003 18:27:07.673" level="INFO">${cur_time} = 20171003182707672482</msg>
<status status="PASS" endtime="20171003 18:27:07.673" starttime="20171003 18:27:07.673"></status>
</kw>
<msg timestamp="20171003 18:27:07.673" level="INFO">${cur_time} = 20171003182707672482</msg>
<status status="PASS" endtime="20171003 18:27:07.674" starttime="20171003 18:27:07.672"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20171003 18:27:07.674" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 18:27:07.674" starttime="20171003 18:27:07.674"></status>
</kw>
<status status="PASS" endtime="20171003 18:27:07.675" starttime="20171003 18:27:07.664"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Run Keywords</arg>
<arg>Delete Error Logs</arg>
<arg>AND</arg>
<arg>Delete All Dumps</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Delete Error Logs</arg>
<arg>AND</arg>
<arg>Delete All Dumps</arg>
</arguments>
<kw name="Delete Error Logs" library="utils">
<doc>Delete error logs.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}${/}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171003 18:27:07.681" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171003 18:27:07.681" starttime="20171003 18:27:07.680"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171003 18:27:07.682" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171003 18:27:07.682" starttime="20171003 18:27:07.682"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171003 18:27:07.683" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171003 18:27:07.683" starttime="20171003 18:27:07.683"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171003 18:27:07.684" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171003 18:27:07.684" starttime="20171003 18:27:07.684"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171003 18:27:07.910" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171003 18:27:07.910" starttime="20171003 18:27:07.685"></status>
</kw>
<msg timestamp="20171003 18:27:07.910" level="INFO">${status} = PASS</msg>
<msg timestamp="20171003 18:27:07.910" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171003 18:27:07.910" starttime="20171003 18:27:07.685"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171003 18:27:07.911" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 18:27:07.911" starttime="20171003 18:27:07.910"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171003 18:27:07.911" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 18:27:07.911" starttime="20171003 18:27:07.911"></status>
</kw>
<status status="PASS" endtime="20171003 18:27:07.912" starttime="20171003 18:27:07.679"></status>
</kw>
<status status="PASS" endtime="20171003 18:27:07.912" starttime="20171003 18:27:07.679"></status>
</kw>
<status status="PASS" endtime="20171003 18:27:07.912" starttime="20171003 18:27:07.677"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171003 18:27:07.912" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//list</msg>
<status status="PASS" endtime="20171003 18:27:07.912" starttime="20171003 18:27:07.912"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171003 18:27:07.913" starttime="20171003 18:27:07.913"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171003 18:27:07.965" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//list, headers=None json=None</msg>
<msg timestamp="20171003 18:27:07.965" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171003 18:27:07.965" starttime="20171003 18:27:07.913"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171003 18:27:07.966" starttime="20171003 18:27:07.965"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171003 18:27:07.966" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171003 18:27:07.966" starttime="20171003 18:27:07.966"></status>
</kw>
<msg timestamp="20171003 18:27:07.967" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171003 18:27:07.967" starttime="20171003 18:27:07.676"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20171003 18:27:07.967" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171003 18:27:07.967" starttime="20171003 18:27:07.967"></status>
</kw>
<status status="PASS" endtime="20171003 18:27:07.968" starttime="20171003 18:27:07.676"></status>
</kw>
<kw name="Delete All Dumps" library="dump_utils">
<doc>Delete all dumps.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${DUMP_ENTRY_URI}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171003 18:27:07.973" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171003 18:27:07.973" starttime="20171003 18:27:07.972"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171003 18:27:07.974" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171003 18:27:07.974" starttime="20171003 18:27:07.973"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171003 18:27:07.974" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171003 18:27:07.974" starttime="20171003 18:27:07.974"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171003 18:27:07.975" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171003 18:27:07.975" starttime="20171003 18:27:07.975"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171003 18:27:08.168" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171003 18:27:08.168" starttime="20171003 18:27:07.976"></status>
</kw>
<msg timestamp="20171003 18:27:08.168" level="INFO">${status} = PASS</msg>
<msg timestamp="20171003 18:27:08.168" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171003 18:27:08.168" starttime="20171003 18:27:07.975"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171003 18:27:08.169" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 18:27:08.169" starttime="20171003 18:27:08.169"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171003 18:27:08.170" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 18:27:08.170" starttime="20171003 18:27:08.170"></status>
</kw>
<status status="PASS" endtime="20171003 18:27:08.170" starttime="20171003 18:27:07.970"></status>
</kw>
<status status="PASS" endtime="20171003 18:27:08.170" starttime="20171003 18:27:07.969"></status>
</kw>
<status status="PASS" endtime="20171003 18:27:08.171" starttime="20171003 18:27:07.969"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171003 18:27:08.171" level="INFO">${base_uri} = /xyz/openbmc_project/dump/entry/list</msg>
<status status="PASS" endtime="20171003 18:27:08.171" starttime="20171003 18:27:08.171"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171003 18:27:08.172" starttime="20171003 18:27:08.172"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171003 18:27:08.240" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/dump/entry/list, headers=None json=None</msg>
<msg timestamp="20171003 18:27:08.240" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171003 18:27:08.240" starttime="20171003 18:27:08.172"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171003 18:27:08.241" starttime="20171003 18:27:08.241"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171003 18:27:08.241" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171003 18:27:08.241" starttime="20171003 18:27:08.241"></status>
</kw>
<msg timestamp="20171003 18:27:08.242" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171003 18:27:08.242" starttime="20171003 18:27:07.968"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20171003 18:27:08.242" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171003 18:27:08.242" starttime="20171003 18:27:08.242"></status>
</kw>
<status status="PASS" endtime="20171003 18:27:08.243" starttime="20171003 18:27:07.968"></status>
</kw>
<status status="PASS" endtime="20171003 18:27:08.243" starttime="20171003 18:27:07.675"></status>
</kw>
<status status="PASS" endtime="20171003 18:27:08.243" starttime="20171003 18:27:07.675"></status>
</kw>
<status status="PASS" endtime="20171003 18:27:08.243" starttime="20171003 18:26:41.203"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'PASS'</arg>
<arg>Check Error And Collect FFDC</arg>
</arguments>
<status status="PASS" endtime="20171003 18:27:08.244" starttime="20171003 18:27:08.243"></status>
</kw>
<status status="PASS" endtime="20171003 18:27:08.244" starttime="20171003 18:26:41.202"></status>
</kw>
<doc>Do a BMC code update by uploading image on BMC via REST.</doc>
<tags>
<tag>REST_BMC_Code_Update</tag>
</tags>
<status status="FAIL" endtime="20171003 18:27:08.244" critical="yes" starttime="20171003 18:26:20.806">413 != 200</status>
</test>
<doc>Update the BMC code on a target BMC.
Execution Method:
python -m robot -v OPENBMC_HOST:&lt;hostname&gt;
-v IMAGE_FILE_PATH:&lt;path/*.tar&gt; bmc_code_update.robot</doc>
<status status="FAIL" endtime="20171003 18:27:08.245" starttime="20171003 18:26:19.854"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">REST_BMC_Code_Update</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Bmc Code Update" pass="0">Bmc Code Update</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
