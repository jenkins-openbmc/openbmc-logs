<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170425 16:25:47.045" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/code_update/update_bmc.robot" id="s1" name="Update Bmc">
<test id="s1-t1" name="Initiate Code Update BMC">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${FORCE_UPDATE} == ${0}</arg>
<arg>Prepare BMC For Update</arg>
</arguments>
<kw name="Prepare BMC For Update">
<doc>Prerequisite operation before code update.</doc>
<kw name="Check Boot Count And Time">
<doc>Check for unexpected reboots.</doc>
<kw name="Set BMC Reset Reference Time" library="utils">
<doc>Set current boot time as a reference and increment</doc>
<kw name="Get BMC Boot Time" library="utils">
<doc>Get boot time from /proc/stat.</doc>
<assign>
<var>${cur_btime}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170425 16:25:48.030" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170425 16:25:48.030" starttime="20170425 16:25:48.029"></status>
</kw>
<msg timestamp="20170425 16:25:48.030" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170425 16:25:48.030" starttime="20170425 16:25:48.029"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170425 16:25:48.032" starttime="20170425 16:25:48.031"></status>
</kw>
<status status="PASS" endtime="20170425 16:25:48.032" starttime="20170425 16:25:48.031"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170425 16:25:48.032" starttime="20170425 16:25:48.032"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170425 16:25:48.034" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170425 16:25:48.034" starttime="20170425 16:25:48.033"></status>
</kw>
<msg timestamp="20170425 16:25:48.034" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170425 16:25:48.034" starttime="20170425 16:25:48.033"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170425 16:25:48.036" starttime="20170425 16:25:48.036"></status>
</kw>
<status status="PASS" endtime="20170425 16:25:48.036" starttime="20170425 16:25:48.035"></status>
</kw>
<status status="PASS" endtime="20170425 16:25:48.036" starttime="20170425 16:25:48.034"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170425 16:25:48.037" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170425 16:25:49.825" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170425 16:25:49.825" starttime="20170425 16:25:48.036"></status>
</kw>
<status status="PASS" endtime="20170425 16:25:49.825" starttime="20170425 16:25:48.028"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>egrep '^btime ' /proc/stat | cut -f 2 -d ' '</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170425 16:25:49.826" level="INFO">Executing command 'egrep '^btime ' /proc/stat | cut -f 2 -d ' ''.</msg>
<msg timestamp="20170425 16:25:49.892" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170425 16:25:49.893" level="INFO">${output} = 1493090387</msg>
<msg timestamp="20170425 16:25:49.893" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170425 16:25:49.893" starttime="20170425 16:25:49.826"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170425 16:25:49.893" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170425 16:25:49.893" starttime="20170425 16:25:49.893"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${btime}</var>
</assign>
<msg timestamp="20170425 16:25:49.894" level="INFO">${btime} = 1493090387</msg>
<status status="PASS" endtime="20170425 16:25:49.894" starttime="20170425 16:25:49.894"></status>
</kw>
<msg timestamp="20170425 16:25:49.894" level="INFO">${cur_btime} = 1493090387</msg>
<status status="PASS" endtime="20170425 16:25:49.894" starttime="20170425 16:25:48.028"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_TIME} == ${0} and ${BOOT_COUNT} == ${0}</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>ELSE IF</arg>
<arg>${cur_btime} &gt; ${BOOT_TIME}</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_COUNT}</arg>
<arg>${BOOT_COUNT + 1}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
</arguments>
<msg timestamp="20170425 16:25:49.896" level="INFO">${BOOT_TIME} = 1493090387</msg>
<status status="PASS" endtime="20170425 16:25:49.896" starttime="20170425 16:25:49.895"></status>
</kw>
<status status="PASS" endtime="20170425 16:25:49.896" starttime="20170425 16:25:49.895"></status>
</kw>
<status status="PASS" endtime="20170425 16:25:49.896" starttime="20170425 16:25:48.028"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Count: ${BOOT_COUNT}</arg>
</arguments>
<status status="PASS" endtime="20170425 16:25:49.897" starttime="20170425 16:25:49.896"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Time: ${BOOT_TIME}</arg>
</arguments>
<status status="PASS" endtime="20170425 16:25:49.897" starttime="20170425 16:25:49.897"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_COUNT} &gt; ${MAX_BOOT_COUNT}</arg>
<arg>Log</arg>
<arg>Phantom Reboot!!! Unexpected reboot detected</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20170425 16:25:49.898" starttime="20170425 16:25:49.898"></status>
</kw>
<status status="PASS" endtime="20170425 16:25:49.898" starttime="20170425 16:25:48.027"></status>
</kw>
<kw name="Prune Journal Log" library="utils">
<doc>Prune archived journal logs.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170425 16:25:49.901" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170425 16:25:49.901" starttime="20170425 16:25:49.900"></status>
</kw>
<msg timestamp="20170425 16:25:49.901" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170425 16:25:49.901" starttime="20170425 16:25:49.900"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170425 16:25:49.902" starttime="20170425 16:25:49.902"></status>
</kw>
<status status="PASS" endtime="20170425 16:25:49.902" starttime="20170425 16:25:49.901"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170425 16:25:49.903" starttime="20170425 16:25:49.902"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170425 16:25:49.904" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170425 16:25:49.904" starttime="20170425 16:25:49.904"></status>
</kw>
<msg timestamp="20170425 16:25:49.904" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170425 16:25:49.904" starttime="20170425 16:25:49.903"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170425 16:25:49.906" starttime="20170425 16:25:49.905"></status>
</kw>
<status status="PASS" endtime="20170425 16:25:49.906" starttime="20170425 16:25:49.905"></status>
</kw>
<status status="PASS" endtime="20170425 16:25:49.906" starttime="20170425 16:25:49.904"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170425 16:25:49.907" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170425 16:25:51.516" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170425 16:25:51.516" starttime="20170425 16:25:49.906"></status>
</kw>
<status status="PASS" endtime="20170425 16:25:51.516" starttime="20170425 16:25:49.899"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>journalctl --vacuum-size=${vacuum_size}</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170425 16:25:51.517" level="INFO">Executing command 'journalctl --vacuum-size=1M'.</msg>
<msg timestamp="20170425 16:25:51.584" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170425 16:25:51.584" level="INFO">${output} = </msg>
<msg timestamp="20170425 16:25:51.584" level="INFO">${stderr} = Vacuuming done, freed 0B of archived journals from /run/log/journal/8a3a9614410e46fe87786be50aa53612.</msg>
<msg timestamp="20170425 16:25:51.584" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20170425 16:25:51.584" starttime="20170425 16:25:51.517"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${stderr}</arg>
</arguments>
<status status="PASS" endtime="20170425 16:25:51.585" starttime="20170425 16:25:51.584"></status>
</kw>
<status status="PASS" endtime="20170425 16:25:51.585" starttime="20170425 16:25:49.899"></status>
</kw>
<kw name="Power Off Request" library="state_manager">
<doc>Select appropriate poweroff keyword.</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${OBMC_STATES_VERSION}' == '${0}'</arg>
<arg>Initiate Power Off</arg>
<arg>ELSE</arg>
<arg>Initiate Host PowerOff</arg>
</arguments>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170425 16:25:51.587" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status status="PASS" endtime="20170425 16:25:51.587" starttime="20170425 16:25:51.587"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170425 16:25:51.588" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" endtime="20170425 16:25:51.588" starttime="20170425 16:25:51.588"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170425 16:25:51.590" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170425 16:25:51.591" starttime="20170425 16:25:51.590"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170425 16:25:51.592" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170425 16:25:51.592" starttime="20170425 16:25:51.591"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170425 16:25:51.593" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170425 16:25:51.593" starttime="20170425 16:25:51.592"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170425 16:25:51.594" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170425 16:25:51.594" starttime="20170425 16:25:51.593"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170425 16:25:51.801" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170425 16:25:51.801" starttime="20170425 16:25:51.595"></status>
</kw>
<msg timestamp="20170425 16:25:51.801" level="INFO">${status} = PASS</msg>
<msg timestamp="20170425 16:25:51.801" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 16:25:51.801" starttime="20170425 16:25:51.594"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170425 16:25:51.802" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 16:25:51.802" starttime="20170425 16:25:51.802"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 16:25:51.803" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 16:25:51.803" starttime="20170425 16:25:51.803"></status>
</kw>
<status status="PASS" endtime="20170425 16:25:51.803" starttime="20170425 16:25:51.589"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170425 16:25:51.804" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" endtime="20170425 16:25:51.804" starttime="20170425 16:25:51.804"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170425 16:25:51.808" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170425 16:25:51.808" starttime="20170425 16:25:51.805"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170425 16:25:51.809" starttime="20170425 16:25:51.808"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170425 16:25:51.811" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type...</msg>
<status status="PASS" endtime="20170425 16:25:51.811" starttime="20170425 16:25:51.810"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170425 16:25:51.812" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170425 16:25:51.813" starttime="20170425 16:25:51.812"></status>
</kw>
<status status="PASS" endtime="20170425 16:25:51.813" starttime="20170425 16:25:51.811"></status>
</kw>
<status status="PASS" endtime="20170425 16:25:51.813" starttime="20170425 16:25:51.809"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170425 16:25:52.487" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170425 16:25:52.488" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 16:25:52.488" starttime="20170425 16:25:51.813"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170425 16:25:52.489" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170425 16:25:52.489" starttime="20170425 16:25:52.489"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170425 16:25:52.490" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170425 16:25:52.490" starttime="20170425 16:25:52.490"></status>
</kw>
<status status="PASS" endtime="20170425 16:25:52.490" starttime="20170425 16:25:52.489"></status>
</kw>
<status status="PASS" endtime="20170425 16:25:52.490" starttime="20170425 16:25:52.488"></status>
</kw>
<msg timestamp="20170425 16:25:52.491" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 16:25:52.491" starttime="20170425 16:25:51.589"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 16:25:52.492" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 16:25:52.492" starttime="20170425 16:25:52.491"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170425 16:25:52.492" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170425 16:25:52.492" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170425 16:25:52.492" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170425 16:25:52.492" starttime="20170425 16:25:52.492"></status>
</kw>
<status status="PASS" endtime="20170425 16:25:52.493" starttime="20170425 16:25:51.587"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" endtime="20170425 16:25:52.493" starttime="20170425 16:25:52.493"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170425 16:25:52.497" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170425 16:25:52.497" starttime="20170425 16:25:52.497"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170425 16:25:52.498" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170425 16:25:52.498" starttime="20170425 16:25:52.498"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170425 16:25:52.499" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170425 16:25:52.499" starttime="20170425 16:25:52.498"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170425 16:25:52.499" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170425 16:25:52.499" starttime="20170425 16:25:52.499"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170425 16:25:53.659" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170425 16:25:53.659" starttime="20170425 16:25:52.500"></status>
</kw>
<msg timestamp="20170425 16:25:53.659" level="INFO">${status} = PASS</msg>
<msg timestamp="20170425 16:25:53.659" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 16:25:53.659" starttime="20170425 16:25:52.500"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170425 16:25:53.660" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 16:25:53.660" starttime="20170425 16:25:53.660"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 16:25:53.661" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 16:25:53.661" starttime="20170425 16:25:53.661"></status>
</kw>
<status status="PASS" endtime="20170425 16:25:53.661" starttime="20170425 16:25:52.496"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170425 16:25:53.662" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170425 16:25:53.662" starttime="20170425 16:25:53.661"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170425 16:25:53.662" starttime="20170425 16:25:53.662"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170425 16:25:54.233" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None </msg>
<msg timestamp="20170425 16:25:54.233" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 16:25:54.233" starttime="20170425 16:25:53.663"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170425 16:25:54.234" starttime="20170425 16:25:54.233"></status>
</kw>
<msg timestamp="20170425 16:25:54.234" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 16:25:54.234" starttime="20170425 16:25:52.495"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 16:25:54.235" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 16:25:54.235" starttime="20170425 16:25:54.234"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170425 16:25:54.235" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170425 16:25:54.235" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170425 16:25:54.236" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170425 16:25:54.236" starttime="20170425 16:25:54.235"></status>
</kw>
<msg timestamp="20170425 16:25:54.236" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170425 16:25:54.236" starttime="20170425 16:25:52.495"></status>
</kw>
<msg timestamp="20170425 16:25:54.236" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170425 16:25:54.236" starttime="20170425 16:25:52.494"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20170425 16:25:54.237" starttime="20170425 16:25:54.237"></status>
</kw>
<status status="PASS" endtime="20170425 16:25:54.237" starttime="20170425 16:25:52.494"></status>
</kw>
<status status="PASS" endtime="20170425 16:25:54.237" starttime="20170425 16:25:52.493"></status>
</kw>
<status status="PASS" endtime="20170425 16:25:54.237" starttime="20170425 16:25:51.586"></status>
</kw>
<status status="PASS" endtime="20170425 16:25:54.237" starttime="20170425 16:25:51.585"></status>
</kw>
<status status="PASS" endtime="20170425 16:25:54.237" starttime="20170425 16:25:51.585"></status>
</kw>
<kw name="Set Policy Setting" library="code_update_utils">
<doc>Set the given test policy</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20170425 16:25:54.238" level="INFO">${valueDict} = {u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170425 16:25:54.238" starttime="20170425 16:25:54.238"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170425 16:25:54.240" level="INFO">${base_uri} = /org/openbmc/settings/host0</msg>
<status status="PASS" endtime="20170425 16:25:54.240" starttime="20170425 16:25:54.239"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170425 16:25:54.243" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170425 16:25:54.244" starttime="20170425 16:25:54.241"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170425 16:25:54.244" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170425 16:25:54.244" starttime="20170425 16:25:54.244"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170425 16:25:54.245" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170425 16:25:54.245" starttime="20170425 16:25:54.244"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170425 16:25:54.246" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170425 16:25:54.246" starttime="20170425 16:25:54.245"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170425 16:25:55.183" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170425 16:25:55.183" starttime="20170425 16:25:54.246"></status>
</kw>
<msg timestamp="20170425 16:25:55.183" level="INFO">${status} = PASS</msg>
<msg timestamp="20170425 16:25:55.183" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 16:25:55.183" starttime="20170425 16:25:54.246"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170425 16:25:55.184" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 16:25:55.184" starttime="20170425 16:25:55.184"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 16:25:55.185" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 16:25:55.185" starttime="20170425 16:25:55.184"></status>
</kw>
<status status="PASS" endtime="20170425 16:25:55.185" starttime="20170425 16:25:54.240"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170425 16:25:55.186" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170425 16:25:55.186" starttime="20170425 16:25:55.185"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170425 16:25:55.186" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170425 16:25:55.186" starttime="20170425 16:25:55.186"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170425 16:25:55.187" starttime="20170425 16:25:55.187"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170425 16:25:55.189" level="INFO">${msg} = URI:https://9.3.86.161/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': u'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170425 16:25:55.189" starttime="20170425 16:25:55.188"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170425 16:25:55.190" level="INFO">URI:https://9.3.86.161/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': u'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170425 16:25:55.190" starttime="20170425 16:25:55.190"></status>
</kw>
<status status="PASS" endtime="20170425 16:25:55.190" starttime="20170425 16:25:55.189"></status>
</kw>
<status status="PASS" endtime="20170425 16:25:55.190" starttime="20170425 16:25:55.187"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170425 16:25:55.558" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, data={"data": "RESTORE_LAST_STATE"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170425 16:25:55.558" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 16:25:55.558" starttime="20170425 16:25:55.191"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170425 16:25:55.560" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170425 16:25:55.560" starttime="20170425 16:25:55.559"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170425 16:25:55.561" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170425 16:25:55.561" starttime="20170425 16:25:55.560"></status>
</kw>
<status status="PASS" endtime="20170425 16:25:55.561" starttime="20170425 16:25:55.560"></status>
</kw>
<status status="PASS" endtime="20170425 16:25:55.562" starttime="20170425 16:25:55.559"></status>
</kw>
<msg timestamp="20170425 16:25:55.563" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 16:25:55.563" starttime="20170425 16:25:54.240"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 16:25:55.564" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 16:25:55.564" starttime="20170425 16:25:55.563"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170425 16:25:55.565" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170425 16:25:55.565" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170425 16:25:55.565" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170425 16:25:55.565" starttime="20170425 16:25:55.564"></status>
</kw>
<status status="PASS" endtime="20170425 16:25:55.565" starttime="20170425 16:25:54.239"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170425 16:25:55.567" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170425 16:25:55.567" starttime="20170425 16:25:55.567"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170425 16:25:55.568" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170425 16:25:55.568" starttime="20170425 16:25:55.568"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170425 16:25:55.569" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170425 16:25:55.569" starttime="20170425 16:25:55.568"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170425 16:25:55.569" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170425 16:25:55.569" starttime="20170425 16:25:55.569"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170425 16:25:55.774" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170425 16:25:55.774" starttime="20170425 16:25:55.570"></status>
</kw>
<msg timestamp="20170425 16:25:55.775" level="INFO">${status} = PASS</msg>
<msg timestamp="20170425 16:25:55.775" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 16:25:55.775" starttime="20170425 16:25:55.570"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170425 16:25:55.775" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 16:25:55.775" starttime="20170425 16:25:55.775"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 16:25:55.776" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 16:25:55.776" starttime="20170425 16:25:55.776"></status>
</kw>
<status status="PASS" endtime="20170425 16:25:55.776" starttime="20170425 16:25:55.566"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170425 16:25:55.777" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170425 16:25:55.777" starttime="20170425 16:25:55.776"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170425 16:25:55.777" starttime="20170425 16:25:55.777"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170425 16:25:55.862" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, headers=None </msg>
<msg timestamp="20170425 16:25:55.862" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 16:25:55.862" starttime="20170425 16:25:55.778"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170425 16:25:55.863" starttime="20170425 16:25:55.862"></status>
</kw>
<msg timestamp="20170425 16:25:55.863" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 16:25:55.863" starttime="20170425 16:25:55.566"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 16:25:55.864" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 16:25:55.864" starttime="20170425 16:25:55.863"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170425 16:25:55.864" level="INFO">To JSON using : content={
  "data": "RESTORE_LAST_STATE", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170425 16:25:55.864" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170425 16:25:55.865" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170425 16:25:55.865" starttime="20170425 16:25:55.864"></status>
</kw>
<msg timestamp="20170425 16:25:55.865" level="INFO">${currentPolicy} = RESTORE_LAST_STATE</msg>
<status status="PASS" endtime="20170425 16:25:55.865" starttime="20170425 16:25:55.565"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${currentPolicy}</arg>
<arg>${policy}</arg>
</arguments>
<status status="PASS" endtime="20170425 16:25:55.866" starttime="20170425 16:25:55.865"></status>
</kw>
<status status="PASS" endtime="20170425 16:25:55.866" starttime="20170425 16:25:54.237"></status>
</kw>
<kw name="Prepare For Update" library="code_update_utils">
<doc>Switch to update mode in progress. This method calls</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170425 16:25:55.867" level="INFO">${data} = {u'data': []}</msg>
<status status="PASS" endtime="20170425 16:25:55.867" starttime="20170425 16:25:55.866"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${BMC_PREP_METHOD}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170425 16:25:55.869" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170425 16:25:55.869" starttime="20170425 16:25:55.868"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170425 16:25:55.869" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170425 16:25:55.870" starttime="20170425 16:25:55.869"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170425 16:25:55.870" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170425 16:25:55.870" starttime="20170425 16:25:55.870"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170425 16:25:55.871" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170425 16:25:55.871" starttime="20170425 16:25:55.870"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170425 16:25:56.054" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170425 16:25:56.054" starttime="20170425 16:25:55.872"></status>
</kw>
<msg timestamp="20170425 16:25:56.054" level="INFO">${status} = PASS</msg>
<msg timestamp="20170425 16:25:56.054" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 16:25:56.054" starttime="20170425 16:25:55.871"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170425 16:25:56.055" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 16:25:56.055" starttime="20170425 16:25:56.054"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 16:25:56.055" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 16:25:56.055" starttime="20170425 16:25:56.055"></status>
</kw>
<status status="PASS" endtime="20170425 16:25:56.056" starttime="20170425 16:25:55.868"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170425 16:25:56.056" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc/action/PrepareForUpdate</msg>
<status status="PASS" endtime="20170425 16:25:56.056" starttime="20170425 16:25:56.056"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170425 16:25:56.057" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170425 16:25:56.057" starttime="20170425 16:25:56.056"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170425 16:25:56.057" starttime="20170425 16:25:56.057"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170425 16:25:56.058" starttime="20170425 16:25:56.058"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170425 16:25:56.408" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc/action/PrepareForUpdate, data={"data": []}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20170425 16:25:56.408" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 16:25:56.408" starttime="20170425 16:25:56.058"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170425 16:25:56.409" starttime="20170425 16:25:56.409"></status>
</kw>
<msg timestamp="20170425 16:25:56.409" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 16:25:56.409" starttime="20170425 16:25:55.867"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 16:25:56.410" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 16:25:56.410" starttime="20170425 16:25:56.410"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10s</arg>
</arguments>
<msg timestamp="20170425 16:26:06.411" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20170425 16:26:06.411" starttime="20170425 16:25:56.411"></status>
</kw>
<status status="PASS" endtime="20170425 16:26:06.411" starttime="20170425 16:25:55.866"></status>
</kw>
<kw name="Check If BMC is Up" library="utils">
<doc>Wait for Host to be online. Checks every X seconds</doc>
<arguments>
<arg>20 min</arg>
<arg>10 sec</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${max_timeout}</arg>
<arg>${interval}</arg>
<arg>Verify Ping and REST Authentication</arg>
</arguments>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170425 16:26:06.415" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170425 16:26:06.415" starttime="20170425 16:26:06.415"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170425 16:26:06.419" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170425 16:26:09.430" level="INFO">${RC} = 0</msg>
<msg timestamp="20170425 16:26:09.430" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.38 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.626 ms
64 bytes from 9.3.86.161: icmp_seq...</msg>
<status status="PASS" endtime="20170425 16:26:09.431" starttime="20170425 16:26:06.415"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170425 16:26:09.448" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.38 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.626 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.666 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.614 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3001ms
rtt min/avg/max/mdev = 0.614/0.822/1.385/0.327 ms</msg>
<status status="PASS" endtime="20170425 16:26:09.448" starttime="20170425 16:26:09.445"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170425 16:26:09.449" starttime="20170425 16:26:09.448"></status>
</kw>
<status status="PASS" endtime="20170425 16:26:09.449" starttime="20170425 16:26:06.414"></status>
</kw>
<msg timestamp="20170425 16:26:09.450" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170425 16:26:09.450" starttime="20170425 16:26:06.414"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170425 16:26:09.452" starttime="20170425 16:26:09.451"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170425 16:26:09.455" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170425 16:26:09.460" starttime="20170425 16:26:09.454"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170425 16:26:09.461" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170425 16:26:09.461" starttime="20170425 16:26:09.460"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170425 16:26:09.461" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170425 16:26:09.461" starttime="20170425 16:26:09.461"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170425 16:26:09.462" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170425 16:26:09.462" starttime="20170425 16:26:09.462"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170425 16:26:10.075" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.3.86.161', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x3fff87a98610&gt;: Failed to establish a new connection: [Errno 111] Connection refused',))</msg>
<status status="FAIL" endtime="20170425 16:26:10.075" starttime="20170425 16:26:09.463"></status>
</kw>
<msg timestamp="20170425 16:26:10.075" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170425 16:26:10.075" level="INFO">${resp} = ConnectionError: HTTPSConnectionPool(host='9.3.86.161', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;requests.packages.urllib3.connection.VerifiedHTTPSConnection ob...</msg>
<status status="PASS" endtime="20170425 16:26:10.076" starttime="20170425 16:26:09.462"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170425 16:26:10.076" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170425 16:26:10.076" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.3.86.161', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x3fff87a98610&gt;: Failed to establish a new connection: [Errno 111] Connection refused',)): FAIL != PASS</msg>
<status status="FAIL" endtime="20170425 16:26:10.076" starttime="20170425 16:26:10.076"></status>
</kw>
<status status="FAIL" endtime="20170425 16:26:10.077" starttime="20170425 16:26:09.453"></status>
</kw>
<msg timestamp="20170425 16:26:10.077" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20170425 16:26:10.077" starttime="20170425 16:26:09.453"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20170425 16:26:10.078" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20170425 16:26:10.078" starttime="20170425 16:26:10.078"></status>
</kw>
<status status="FAIL" endtime="20170425 16:26:10.078" starttime="20170425 16:26:10.077"></status>
</kw>
<status status="FAIL" endtime="20170425 16:26:10.078" starttime="20170425 16:26:06.413"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170425 16:26:20.081" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170425 16:26:20.081" starttime="20170425 16:26:20.080"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170425 16:26:20.084" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170425 16:26:33.110" level="INFO">${RC} = 1</msg>
<msg timestamp="20170425 16:26:33.110" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3022ms
</msg>
<status status="PASS" endtime="20170425 16:26:33.110" starttime="20170425 16:26:20.081"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170425 16:26:33.114" level="INFO">RC: 1
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3022ms
</msg>
<status status="PASS" endtime="20170425 16:26:33.114" starttime="20170425 16:26:33.113"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20170425 16:26:33.115" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20170425 16:26:33.115" starttime="20170425 16:26:33.114"></status>
</kw>
<status status="FAIL" endtime="20170425 16:26:33.115" starttime="20170425 16:26:20.080"></status>
</kw>
<msg timestamp="20170425 16:26:33.115" level="INFO">${l_ping} = False</msg>
<status status="PASS" endtime="20170425 16:26:33.115" starttime="20170425 16:26:20.080"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=Ping Failed</arg>
</arguments>
<msg timestamp="20170425 16:26:33.117" level="FAIL">Ping Failed</msg>
<status status="FAIL" endtime="20170425 16:26:33.117" starttime="20170425 16:26:33.116"></status>
</kw>
<status status="FAIL" endtime="20170425 16:26:33.117" starttime="20170425 16:26:33.116"></status>
</kw>
<status status="FAIL" endtime="20170425 16:26:33.117" starttime="20170425 16:26:20.079"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170425 16:26:43.120" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170425 16:26:43.120" starttime="20170425 16:26:43.119"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170425 16:26:43.123" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170425 16:26:56.150" level="INFO">${RC} = 1</msg>
<msg timestamp="20170425 16:26:56.150" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3023ms
</msg>
<status status="PASS" endtime="20170425 16:26:56.151" starttime="20170425 16:26:43.120"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170425 16:26:56.156" level="INFO">RC: 1
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3023ms
</msg>
<status status="PASS" endtime="20170425 16:26:56.156" starttime="20170425 16:26:56.153"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20170425 16:26:56.157" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20170425 16:26:56.157" starttime="20170425 16:26:56.156"></status>
</kw>
<status status="FAIL" endtime="20170425 16:26:56.157" starttime="20170425 16:26:43.119"></status>
</kw>
<msg timestamp="20170425 16:26:56.157" level="INFO">${l_ping} = False</msg>
<status status="PASS" endtime="20170425 16:26:56.158" starttime="20170425 16:26:43.118"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=Ping Failed</arg>
</arguments>
<msg timestamp="20170425 16:26:56.159" level="FAIL">Ping Failed</msg>
<status status="FAIL" endtime="20170425 16:26:56.159" starttime="20170425 16:26:56.159"></status>
</kw>
<status status="FAIL" endtime="20170425 16:26:56.159" starttime="20170425 16:26:56.158"></status>
</kw>
<status status="FAIL" endtime="20170425 16:26:56.159" starttime="20170425 16:26:43.117"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170425 16:27:06.162" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170425 16:27:06.163" starttime="20170425 16:27:06.162"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170425 16:27:06.166" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170425 16:27:09.173" level="INFO">${RC} = 0</msg>
<msg timestamp="20170425 16:27:09.173" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=3.06 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.708 ms
64 bytes from 9.3.86.161: icmp_seq...</msg>
<status status="PASS" endtime="20170425 16:27:09.173" starttime="20170425 16:27:06.163"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170425 16:27:09.176" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=3.06 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.708 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.694 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.718 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3001ms
rtt min/avg/max/mdev = 0.694/1.295/3.060/1.019 ms</msg>
<status status="PASS" endtime="20170425 16:27:09.176" starttime="20170425 16:27:09.175"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170425 16:27:09.177" starttime="20170425 16:27:09.176"></status>
</kw>
<status status="PASS" endtime="20170425 16:27:09.177" starttime="20170425 16:27:06.162"></status>
</kw>
<msg timestamp="20170425 16:27:09.177" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170425 16:27:09.177" starttime="20170425 16:27:06.161"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170425 16:27:09.178" starttime="20170425 16:27:09.178"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170425 16:27:09.181" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170425 16:27:09.181" starttime="20170425 16:27:09.180"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170425 16:27:09.182" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170425 16:27:09.182" starttime="20170425 16:27:09.182"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170425 16:27:09.183" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170425 16:27:09.183" starttime="20170425 16:27:09.182"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170425 16:27:09.183" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170425 16:27:09.183" starttime="20170425 16:27:09.183"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170425 16:27:29.215" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="FAIL" endtime="20170425 16:27:29.215" starttime="20170425 16:27:09.184"></status>
</kw>
<msg timestamp="20170425 16:27:29.215" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170425 16:27:29.215" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="PASS" endtime="20170425 16:27:29.215" starttime="20170425 16:27:09.184"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170425 16:27:29.217" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170425 16:27:29.217" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170425 16:27:29.218" starttime="20170425 16:27:29.217"></status>
</kw>
<status status="FAIL" endtime="20170425 16:27:29.218" starttime="20170425 16:27:09.179"></status>
</kw>
<msg timestamp="20170425 16:27:29.218" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20170425 16:27:29.218" starttime="20170425 16:27:09.178"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20170425 16:27:29.219" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20170425 16:27:29.219" starttime="20170425 16:27:29.219"></status>
</kw>
<status status="FAIL" endtime="20170425 16:27:29.219" starttime="20170425 16:27:29.218"></status>
</kw>
<status status="FAIL" endtime="20170425 16:27:29.220" starttime="20170425 16:27:06.160"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170425 16:27:39.222" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170425 16:27:39.222" starttime="20170425 16:27:39.222"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170425 16:27:39.226" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170425 16:27:42.229" level="INFO">${RC} = 0</msg>
<msg timestamp="20170425 16:27:42.229" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.736 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=1.21 ms
64 bytes from 9.3.86.161: icmp_seq...</msg>
<status status="PASS" endtime="20170425 16:27:42.229" starttime="20170425 16:27:39.223"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170425 16:27:42.233" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.736 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=1.21 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.702 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.706 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.702/0.840/1.219/0.221 ms</msg>
<status status="PASS" endtime="20170425 16:27:42.233" starttime="20170425 16:27:42.232"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170425 16:27:42.233" starttime="20170425 16:27:42.233"></status>
</kw>
<status status="PASS" endtime="20170425 16:27:42.234" starttime="20170425 16:27:39.221"></status>
</kw>
<msg timestamp="20170425 16:27:42.234" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170425 16:27:42.234" starttime="20170425 16:27:39.221"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170425 16:27:42.235" starttime="20170425 16:27:42.234"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170425 16:27:42.237" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170425 16:27:42.238" starttime="20170425 16:27:42.236"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170425 16:27:42.238" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170425 16:27:42.238" starttime="20170425 16:27:42.238"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170425 16:27:42.239" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170425 16:27:42.239" starttime="20170425 16:27:42.239"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170425 16:27:42.240" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170425 16:27:42.240" starttime="20170425 16:27:42.239"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170425 16:28:01.392" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170425 16:28:01.392" starttime="20170425 16:27:42.241"></status>
</kw>
<msg timestamp="20170425 16:28:01.392" level="INFO">${status} = PASS</msg>
<msg timestamp="20170425 16:28:01.392" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 16:28:01.392" starttime="20170425 16:27:42.241"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170425 16:28:01.393" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 16:28:01.393" starttime="20170425 16:28:01.393"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 16:28:01.395" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 16:28:01.395" starttime="20170425 16:28:01.394"></status>
</kw>
<status status="PASS" endtime="20170425 16:28:01.395" starttime="20170425 16:27:42.235"></status>
</kw>
<msg timestamp="20170425 16:28:01.396" level="INFO">${l_rest} = True</msg>
<status status="PASS" endtime="20170425 16:28:01.396" starttime="20170425 16:27:42.235"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<status status="PASS" endtime="20170425 16:28:01.396" starttime="20170425 16:28:01.396"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170425 16:28:01.398" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170425 16:28:01.398" starttime="20170425 16:28:01.397"></status>
</kw>
<msg timestamp="20170425 16:28:01.398" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170425 16:28:01.398" starttime="20170425 16:28:01.397"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170425 16:28:01.399" starttime="20170425 16:28:01.399"></status>
</kw>
<status status="PASS" endtime="20170425 16:28:01.399" starttime="20170425 16:28:01.398"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170425 16:28:01.400" starttime="20170425 16:28:01.400"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170425 16:28:01.401" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170425 16:28:01.401" starttime="20170425 16:28:01.401"></status>
</kw>
<msg timestamp="20170425 16:28:01.401" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170425 16:28:01.401" starttime="20170425 16:28:01.400"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170425 16:28:01.406" starttime="20170425 16:28:01.403"></status>
</kw>
<status status="PASS" endtime="20170425 16:28:01.406" starttime="20170425 16:28:01.402"></status>
</kw>
<status status="PASS" endtime="20170425 16:28:01.406" starttime="20170425 16:28:01.402"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170425 16:28:01.406" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170425 16:28:03.238" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170425 16:28:03.238" starttime="20170425 16:28:01.406"></status>
</kw>
<status status="PASS" endtime="20170425 16:28:03.239" starttime="20170425 16:28:01.396"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>hostname</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${system}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170425 16:28:03.239" level="INFO">Executing command 'hostname'.</msg>
<msg timestamp="20170425 16:28:03.286" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170425 16:28:03.286" level="INFO">${system} = witherspoon</msg>
<msg timestamp="20170425 16:28:03.286" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170425 16:28:03.286" starttime="20170425 16:28:03.239"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170425 16:28:03.287" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170425 16:28:03.287" starttime="20170425 16:28:03.287"></status>
</kw>
<status status="PASS" endtime="20170425 16:28:03.287" starttime="20170425 16:27:39.220"></status>
</kw>
<status status="PASS" endtime="20170425 16:28:03.287" starttime="20170425 16:26:06.412"></status>
</kw>
<status status="PASS" endtime="20170425 16:28:03.287" starttime="20170425 16:26:06.412"></status>
</kw>
<kw name="Check Boot Count And Time">
<doc>Check for unexpected reboots.</doc>
<kw name="Set BMC Reset Reference Time" library="utils">
<doc>Set current boot time as a reference and increment</doc>
<kw name="Get BMC Boot Time" library="utils">
<doc>Get boot time from /proc/stat.</doc>
<assign>
<var>${cur_btime}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170425 16:28:03.290" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170425 16:28:03.290" starttime="20170425 16:28:03.290"></status>
</kw>
<msg timestamp="20170425 16:28:03.291" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170425 16:28:03.291" starttime="20170425 16:28:03.290"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170425 16:28:03.292" starttime="20170425 16:28:03.292"></status>
</kw>
<status status="PASS" endtime="20170425 16:28:03.292" starttime="20170425 16:28:03.291"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170425 16:28:03.293" starttime="20170425 16:28:03.292"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170425 16:28:03.294" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170425 16:28:03.294" starttime="20170425 16:28:03.293"></status>
</kw>
<msg timestamp="20170425 16:28:03.294" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170425 16:28:03.294" starttime="20170425 16:28:03.293"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170425 16:28:03.296" starttime="20170425 16:28:03.295"></status>
</kw>
<status status="PASS" endtime="20170425 16:28:03.296" starttime="20170425 16:28:03.295"></status>
</kw>
<status status="PASS" endtime="20170425 16:28:03.296" starttime="20170425 16:28:03.294"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170425 16:28:03.296" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170425 16:28:04.940" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170425 16:28:04.940" starttime="20170425 16:28:03.296"></status>
</kw>
<status status="PASS" endtime="20170425 16:28:04.940" starttime="20170425 16:28:03.289"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>egrep '^btime ' /proc/stat | cut -f 2 -d ' '</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170425 16:28:04.941" level="INFO">Executing command 'egrep '^btime ' /proc/stat | cut -f 2 -d ' ''.</msg>
<msg timestamp="20170425 16:28:05.008" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170425 16:28:05.008" level="INFO">${output} = 1493137593</msg>
<msg timestamp="20170425 16:28:05.008" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170425 16:28:05.008" starttime="20170425 16:28:04.941"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170425 16:28:05.008" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170425 16:28:05.008" starttime="20170425 16:28:05.008"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${btime}</var>
</assign>
<msg timestamp="20170425 16:28:05.009" level="INFO">${btime} = 1493137593</msg>
<status status="PASS" endtime="20170425 16:28:05.009" starttime="20170425 16:28:05.009"></status>
</kw>
<msg timestamp="20170425 16:28:05.009" level="INFO">${cur_btime} = 1493137593</msg>
<status status="PASS" endtime="20170425 16:28:05.009" starttime="20170425 16:28:03.289"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_TIME} == ${0} and ${BOOT_COUNT} == ${0}</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>ELSE IF</arg>
<arg>${cur_btime} &gt; ${BOOT_TIME}</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_COUNT}</arg>
<arg>${BOOT_COUNT + 1}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_COUNT}</arg>
<arg>${BOOT_COUNT + 1}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
</arguments>
<msg timestamp="20170425 16:28:05.012" level="INFO">${BOOT_TIME} = 1493137593</msg>
<status status="PASS" endtime="20170425 16:28:05.012" starttime="20170425 16:28:05.011"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${BOOT_COUNT}</arg>
<arg>${BOOT_COUNT + 1}</arg>
</arguments>
<msg timestamp="20170425 16:28:05.013" level="INFO">${BOOT_COUNT} = 1</msg>
<status status="PASS" endtime="20170425 16:28:05.013" starttime="20170425 16:28:05.012"></status>
</kw>
<status status="PASS" endtime="20170425 16:28:05.013" starttime="20170425 16:28:05.011"></status>
</kw>
<status status="PASS" endtime="20170425 16:28:05.013" starttime="20170425 16:28:05.010"></status>
</kw>
<status status="PASS" endtime="20170425 16:28:05.013" starttime="20170425 16:28:03.288"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Count: ${BOOT_COUNT}</arg>
</arguments>
<status status="PASS" endtime="20170425 16:28:05.014" starttime="20170425 16:28:05.013"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Time: ${BOOT_TIME}</arg>
</arguments>
<status status="PASS" endtime="20170425 16:28:05.014" starttime="20170425 16:28:05.014"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_COUNT} &gt; ${MAX_BOOT_COUNT}</arg>
<arg>Log</arg>
<arg>Phantom Reboot!!! Unexpected reboot detected</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20170425 16:28:05.016" starttime="20170425 16:28:05.015"></status>
</kw>
<status status="PASS" endtime="20170425 16:28:05.016" starttime="20170425 16:28:03.287"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Temp BMC URI Check</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Temp BMC URI Check">
<doc>Check for transient "BMC0" interface.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/state/BMC0/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170425 16:28:05.019" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170425 16:28:05.019" starttime="20170425 16:28:05.018"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170425 16:28:05.020" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170425 16:28:05.020" starttime="20170425 16:28:05.019"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170425 16:28:05.020" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170425 16:28:05.020" starttime="20170425 16:28:05.020"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170425 16:28:05.021" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170425 16:28:05.021" starttime="20170425 16:28:05.021"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170425 16:28:05.206" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170425 16:28:05.206" starttime="20170425 16:28:05.022"></status>
</kw>
<msg timestamp="20170425 16:28:05.206" level="INFO">${status} = PASS</msg>
<msg timestamp="20170425 16:28:05.207" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 16:28:05.207" starttime="20170425 16:28:05.021"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170425 16:28:05.207" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 16:28:05.207" starttime="20170425 16:28:05.207"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 16:28:05.208" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 16:28:05.208" starttime="20170425 16:28:05.208"></status>
</kw>
<status status="PASS" endtime="20170425 16:28:05.208" starttime="20170425 16:28:05.018"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170425 16:28:05.209" level="INFO">${base_uri} = /xyz/openbmc_project/state/BMC0/</msg>
<status status="PASS" endtime="20170425 16:28:05.209" starttime="20170425 16:28:05.208"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170425 16:28:05.209" starttime="20170425 16:28:05.209"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170425 16:28:05.256" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/BMC0/, headers=None </msg>
<msg timestamp="20170425 16:28:05.256" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170425 16:28:05.256" starttime="20170425 16:28:05.210"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170425 16:28:05.256" starttime="20170425 16:28:05.256"></status>
</kw>
<msg timestamp="20170425 16:28:05.257" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170425 16:28:05.257" starttime="20170425 16:28:05.017"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 16:28:05.257" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170425 16:28:05.258" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170425 16:28:05.258" starttime="20170425 16:28:05.257"></status>
</kw>
<status status="FAIL" endtime="20170425 16:28:05.258" starttime="20170425 16:28:05.017"></status>
</kw>
<msg timestamp="20170425 16:28:05.258" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170425 16:28:05.258" starttime="20170425 16:28:05.017"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Wait For BMC Ready</arg>
<arg>ELSE</arg>
<arg>Wait For Temp BMC Ready</arg>
</arguments>
<kw name="Wait For BMC Ready" library="state_manager">
<doc>Check BMC state and wait for BMC Ready.</doc>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>BMC_READY</arg>
<arg>HOST_POWERED_OFF</arg>
</arguments>
<assign>
<var>@{states}</var>
</assign>
<msg timestamp="20170425 16:28:05.260" level="INFO">@{states} = [ BMC_READY | HOST_POWERED_OFF ]</msg>
<status status="PASS" endtime="20170425 16:28:05.260" starttime="20170425 16:28:05.260"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${OBMC_STATES_VERSION}' == '${0}'</arg>
<arg>Wait Until Keyword Succeeds</arg>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Verify BMC State</arg>
<arg>${states}</arg>
<arg>ELSE</arg>
<arg>Wait Until Keyword Succeeds</arg>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is BMC Ready</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is BMC Ready</arg>
</arguments>
<kw name="Is BMC Ready" library="state_manager">
<doc>Check if BMC state is Ready.</doc>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170425 16:28:05.264" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170425 16:28:05.265" starttime="20170425 16:28:05.264"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170425 16:28:05.265" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170425 16:28:05.265" starttime="20170425 16:28:05.265"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170425 16:28:05.266" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170425 16:28:05.266" starttime="20170425 16:28:05.266"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170425 16:28:05.267" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170425 16:28:05.267" starttime="20170425 16:28:05.266"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170425 16:28:05.447" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170425 16:28:05.447" starttime="20170425 16:28:05.267"></status>
</kw>
<msg timestamp="20170425 16:28:05.447" level="INFO">${status} = PASS</msg>
<msg timestamp="20170425 16:28:05.447" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 16:28:05.447" starttime="20170425 16:28:05.267"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170425 16:28:05.448" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 16:28:05.448" starttime="20170425 16:28:05.447"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 16:28:05.448" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 16:28:05.449" starttime="20170425 16:28:05.448"></status>
</kw>
<status status="PASS" endtime="20170425 16:28:05.449" starttime="20170425 16:28:05.263"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170425 16:28:05.449" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170425 16:28:05.449" starttime="20170425 16:28:05.449"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170425 16:28:05.450" starttime="20170425 16:28:05.450"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170425 16:28:05.521" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None </msg>
<msg timestamp="20170425 16:28:05.521" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 16:28:05.521" starttime="20170425 16:28:05.450"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170425 16:28:05.522" starttime="20170425 16:28:05.522"></status>
</kw>
<msg timestamp="20170425 16:28:05.522" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 16:28:05.522" starttime="20170425 16:28:05.263"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 16:28:05.523" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 16:28:05.523" starttime="20170425 16:28:05.523"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170425 16:28:05.524" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170425 16:28:05.524" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170425 16:28:05.524" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170425 16:28:05.524" starttime="20170425 16:28:05.523"></status>
</kw>
<msg timestamp="20170425 16:28:05.524" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170425 16:28:05.524" starttime="20170425 16:28:05.262"></status>
</kw>
<msg timestamp="20170425 16:28:05.524" level="INFO">${bmc_state} = Ready</msg>
<status status="PASS" endtime="20170425 16:28:05.524" starttime="20170425 16:28:05.262"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${BMC_READY_STATE}</arg>
<arg>${bmc_state}</arg>
</arguments>
<status status="PASS" endtime="20170425 16:28:05.525" starttime="20170425 16:28:05.525"></status>
</kw>
<status status="PASS" endtime="20170425 16:28:05.525" starttime="20170425 16:28:05.261"></status>
</kw>
<status status="PASS" endtime="20170425 16:28:05.525" starttime="20170425 16:28:05.261"></status>
</kw>
<status status="PASS" endtime="20170425 16:28:05.525" starttime="20170425 16:28:05.260"></status>
</kw>
<status status="PASS" endtime="20170425 16:28:05.526" starttime="20170425 16:28:05.259"></status>
</kw>
<status status="PASS" endtime="20170425 16:28:05.526" starttime="20170425 16:28:05.258"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1 min</arg>
</arguments>
<msg timestamp="20170425 16:29:05.527" level="INFO">Slept 1 minute</msg>
<status status="PASS" endtime="20170425 16:29:05.528" starttime="20170425 16:28:05.526"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:05.529" starttime="20170425 16:25:48.027"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:05.529" starttime="20170425 16:25:48.026"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Preserve BMC Network Setting</arg>
</arguments>
<kw name="Preserve BMC Network Setting" library="code_update_utils">
<doc>Preserve Network setting</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<assign>
<var>${policy}</var>
</assign>
<msg timestamp="20170425 16:29:05.537" level="INFO">${policy} = 1</msg>
<status status="PASS" endtime="20170425 16:29:05.537" starttime="20170425 16:29:05.536"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20170425 16:29:05.537" level="INFO">${value} = {u'data': 1}</msg>
<status status="PASS" endtime="20170425 16:29:05.537" starttime="20170425 16:29:05.537"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${BMC_UPD_ATTR}</arg>
<arg>preserve_network_settings</arg>
<arg>data=${value}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170425 16:29:05.538" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc</msg>
<status status="PASS" endtime="20170425 16:29:05.539" starttime="20170425 16:29:05.538"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170425 16:29:05.540" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170425 16:29:05.541" starttime="20170425 16:29:05.540"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170425 16:29:05.541" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170425 16:29:05.541" starttime="20170425 16:29:05.541"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170425 16:29:05.542" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170425 16:29:05.542" starttime="20170425 16:29:05.542"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170425 16:29:05.543" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170425 16:29:05.543" starttime="20170425 16:29:05.542"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170425 16:29:05.735" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170425 16:29:05.735" starttime="20170425 16:29:05.543"></status>
</kw>
<msg timestamp="20170425 16:29:05.735" level="INFO">${status} = PASS</msg>
<msg timestamp="20170425 16:29:05.735" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 16:29:05.735" starttime="20170425 16:29:05.543"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170425 16:29:05.736" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 16:29:05.736" starttime="20170425 16:29:05.735"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 16:29:05.737" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 16:29:05.737" starttime="20170425 16:29:05.736"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:05.737" starttime="20170425 16:29:05.539"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170425 16:29:05.737" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc/attr/preserve_network_settings</msg>
<status status="PASS" endtime="20170425 16:29:05.737" starttime="20170425 16:29:05.737"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170425 16:29:05.738" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170425 16:29:05.738" starttime="20170425 16:29:05.738"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170425 16:29:05.739" starttime="20170425 16:29:05.738"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170425 16:29:05.740" level="INFO">${msg} = URI:https://9.3.86.161/org/openbmc/control/flash/bmc/attr/preserve_network_settings, method:Put, args:{u'data': {u'data': 1}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170425 16:29:05.740" starttime="20170425 16:29:05.740"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170425 16:29:05.741" level="INFO">URI:https://9.3.86.161/org/openbmc/control/flash/bmc/attr/preserve_network_settings, method:Put, args:{u'data': {u'data': 1}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170425 16:29:05.741" starttime="20170425 16:29:05.741"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:05.742" starttime="20170425 16:29:05.741"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:05.742" starttime="20170425 16:29:05.739"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170425 16:29:05.989" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc/attr/preserve_network_settings, data={"data": 1},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170425 16:29:05.989" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 16:29:05.989" starttime="20170425 16:29:05.743"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170425 16:29:05.990" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170425 16:29:05.990" starttime="20170425 16:29:05.990"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170425 16:29:05.991" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170425 16:29:05.991" starttime="20170425 16:29:05.991"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:05.992" starttime="20170425 16:29:05.990"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:05.992" starttime="20170425 16:29:05.989"></status>
</kw>
<msg timestamp="20170425 16:29:05.992" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 16:29:05.992" starttime="20170425 16:29:05.539"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 16:29:05.993" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 16:29:05.993" starttime="20170425 16:29:05.992"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170425 16:29:05.993" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170425 16:29:05.993" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170425 16:29:05.994" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170425 16:29:05.994" starttime="20170425 16:29:05.993"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:05.994" starttime="20170425 16:29:05.537"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${BMC_UPD_ATTR}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170425 16:29:05.996" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170425 16:29:05.998" starttime="20170425 16:29:05.996"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170425 16:29:05.999" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170425 16:29:05.999" starttime="20170425 16:29:05.998"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170425 16:29:05.999" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170425 16:29:05.999" starttime="20170425 16:29:05.999"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170425 16:29:06.000" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170425 16:29:06.000" starttime="20170425 16:29:06.000"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170425 16:29:06.189" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170425 16:29:06.189" starttime="20170425 16:29:06.001"></status>
</kw>
<msg timestamp="20170425 16:29:06.189" level="INFO">${status} = PASS</msg>
<msg timestamp="20170425 16:29:06.189" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 16:29:06.189" starttime="20170425 16:29:06.000"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170425 16:29:06.190" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 16:29:06.190" starttime="20170425 16:29:06.189"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 16:29:06.190" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 16:29:06.190" starttime="20170425 16:29:06.190"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:06.191" starttime="20170425 16:29:05.995"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170425 16:29:06.191" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc</msg>
<status status="PASS" endtime="20170425 16:29:06.191" starttime="20170425 16:29:06.191"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170425 16:29:06.192" starttime="20170425 16:29:06.191"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170425 16:29:06.295" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc, headers=None </msg>
<msg timestamp="20170425 16:29:06.295" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 16:29:06.295" starttime="20170425 16:29:06.192"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170425 16:29:06.296" starttime="20170425 16:29:06.296"></status>
</kw>
<msg timestamp="20170425 16:29:06.296" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 16:29:06.296" starttime="20170425 16:29:05.994"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 16:29:06.297" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 16:29:06.297" starttime="20170425 16:29:06.296"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170425 16:29:06.297" level="INFO">To JSON using : content={
  "data": {
    "auto_apply": 0, 
    "clear_persistent_files": 0, 
    "filename": "", 
    "preserve_network_settings": 1, 
    "restore_application_defaults": 0, 
    "status": "Idle", 
    "update_kernel_and_apps": 0
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170425 16:29:06.298" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170425 16:29:06.298" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Idle', u'update_kernel_and_apps': 0, u'clear_persistent_files': 0, u'auto_apply': 0, u'filename': u'', u'preserve_network_settings': 1,...</msg>
<status status="PASS" endtime="20170425 16:29:06.298" starttime="20170425 16:29:06.297"></status>
</kw>
<msg timestamp="20170425 16:29:06.298" level="INFO">${data} = {u'status': u'Idle', u'update_kernel_and_apps': 0, u'clear_persistent_files': 0, u'auto_apply': 0, u'filename': u'', u'preserve_network_settings': 1, u'restore_application_defaults': 0}</msg>
<status status="PASS" endtime="20170425 16:29:06.298" starttime="20170425 16:29:05.994"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${data['preserve_network_settings']}</arg>
<arg>${1}</arg>
<arg>msg=0 indicates network is not preserved</arg>
</arguments>
<status status="PASS" endtime="20170425 16:29:06.299" starttime="20170425 16:29:06.298"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:06.299" starttime="20170425 16:29:05.536"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:06.299" starttime="20170425 16:29:05.530"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>SCP Tar Image File To BMC \ ${FILE_PATH}</arg>
</arguments>
<kw name="SCP Tar Image File to BMC" library="code_update_utils">
<arguments>
<arg>/home/fspcibld/witherspoon-20170425155835.all.tar</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170425 16:29:06.317" starttime="20170425 16:29:06.308"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170425 16:29:06.917" starttime="20170425 16:29:06.319"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:06.917" starttime="20170425 16:29:06.317"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:06.917" starttime="20170425 16:29:06.308"></status>
</kw>
<kw name="Put File" library="scp">
<doc>Uploads a file to the remote machine from the local machine.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>/tmp/flashimg</arg>
</arguments>
<msg timestamp="20170425 16:29:12.005" level="FAIL">timeout</msg>
<status status="FAIL" endtime="20170425 16:29:12.005" starttime="20170425 16:29:06.918"></status>
</kw>
<status status="FAIL" endtime="20170425 16:29:12.005" starttime="20170425 16:29:06.307"></status>
</kw>
<msg timestamp="20170425 16:29:12.007" level="FAIL">timeout</msg>
<status status="FAIL" endtime="20170425 16:29:12.007" starttime="20170425 16:29:06.300"></status>
</kw>
<kw type="teardown" name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>FFDC On Test Case Fail</arg>
</arguments>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170425 16:29:12.020" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170425 16:29:12.020" starttime="20170425 16:29:12.019"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170425 16:29:12.021" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170425 16:29:12.021" starttime="20170425 16:29:12.020"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170425 16:29:12.021" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170425 16:29:12.021" starttime="20170425 16:29:12.021"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170425 16:29:12.023" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170425 16:29:12.023" starttime="20170425 16:29:12.022"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170425 16:29:12.199" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170425 16:29:12.199" starttime="20170425 16:29:12.024"></status>
</kw>
<msg timestamp="20170425 16:29:12.199" level="INFO">${status} = PASS</msg>
<msg timestamp="20170425 16:29:12.199" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 16:29:12.199" starttime="20170425 16:29:12.023"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170425 16:29:12.200" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 16:29:12.200" starttime="20170425 16:29:12.200"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 16:29:12.201" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 16:29:12.201" starttime="20170425 16:29:12.200"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:12.201" starttime="20170425 16:29:12.018"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170425 16:29:12.201" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170425 16:29:12.202" starttime="20170425 16:29:12.201"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170425 16:29:12.202" starttime="20170425 16:29:12.202"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170425 16:29:12.278" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None </msg>
<msg timestamp="20170425 16:29:12.279" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 16:29:12.279" starttime="20170425 16:29:12.202"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170425 16:29:12.279" starttime="20170425 16:29:12.279"></status>
</kw>
<msg timestamp="20170425 16:29:12.280" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 16:29:12.280" starttime="20170425 16:29:12.017"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 16:29:12.280" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 16:29:12.280" starttime="20170425 16:29:12.280"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170425 16:29:12.281" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170425 16:29:12.281" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170425 16:29:12.281" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170425 16:29:12.281" starttime="20170425 16:29:12.281"></status>
</kw>
<msg timestamp="20170425 16:29:12.281" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170425 16:29:12.282" starttime="20170425 16:29:12.017"></status>
</kw>
<msg timestamp="20170425 16:29:12.282" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170425 16:29:12.282" starttime="20170425 16:29:12.016"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170425 16:29:12.283" level="FAIL">Off != Quiesced</msg>
<status status="FAIL" endtime="20170425 16:29:12.283" starttime="20170425 16:29:12.283"></status>
</kw>
<msg timestamp="20170425 16:29:12.283" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170425 16:29:12.283" starttime="20170425 16:29:12.282"></status>
</kw>
<msg timestamp="20170425 16:29:12.283" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170425 16:29:12.283" starttime="20170425 16:29:12.016"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170425 16:29:12.286" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170425 16:29:12.286" starttime="20170425 16:29:12.286"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170425 16:29:12.290" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170425 16:29:15.293" level="INFO">${RC} = 0</msg>
<msg timestamp="20170425 16:29:15.293" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.830 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.701 ms
64 bytes from 9.3.86.161: icmp_se...</msg>
<status status="PASS" endtime="20170425 16:29:15.293" starttime="20170425 16:29:12.287"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170425 16:29:15.297" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.830 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.701 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.668 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.601 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.601/0.700/0.830/0.083 ms</msg>
<status status="PASS" endtime="20170425 16:29:15.298" starttime="20170425 16:29:15.296"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170425 16:29:15.298" starttime="20170425 16:29:15.298"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:15.299" starttime="20170425 16:29:12.285"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170425 16:29:15.343" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170425 16:29:15.343" starttime="20170425 16:29:15.343"></status>
</kw>
<msg timestamp="20170425 16:29:15.343" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170425 16:29:15.343" starttime="20170425 16:29:15.342"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170425 16:29:15.345" starttime="20170425 16:29:15.344"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:15.345" starttime="20170425 16:29:15.344"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170425 16:29:15.350" starttime="20170425 16:29:15.345"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170425 16:29:15.351" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170425 16:29:15.351" starttime="20170425 16:29:15.351"></status>
</kw>
<msg timestamp="20170425 16:29:15.352" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170425 16:29:15.352" starttime="20170425 16:29:15.350"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170425 16:29:15.354" starttime="20170425 16:29:15.353"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:15.354" starttime="20170425 16:29:15.353"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:15.354" starttime="20170425 16:29:15.352"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170425 16:29:15.354" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170425 16:29:17.001" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170425 16:29:17.001" starttime="20170425 16:29:15.354"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:17.001" starttime="20170425 16:29:15.341"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170425 16:29:17.012" level="INFO">${cur_time} = 2017-04-25 16:29:17:012151</msg>
<status status="PASS" endtime="20170425 16:29:17.012" starttime="20170425 16:29:17.012"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170425 16:29:17.013" level="INFO">${cur_time} = 20170425162917012151</msg>
<status status="PASS" endtime="20170425 16:29:17.013" starttime="20170425 16:29:17.013"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:17.013" starttime="20170425 16:29:17.011"></status>
</kw>
<msg timestamp="20170425 16:29:17.019" level="INFO">${FFDC_TIME} = 20170425162917012151</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170425 16:29:17.020" level="INFO">${suite_name} = UpdateBmc</msg>
<status status="PASS" endtime="20170425 16:29:17.021" starttime="20170425 16:29:17.020"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170425 16:29:17.021" level="INFO">${suite_name} = 20170425162917012151_UpdateBmc</msg>
<status status="PASS" endtime="20170425 16:29:17.021" starttime="20170425 16:29:17.021"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170425 16:29:17.022" level="INFO">${test_name} = InitiateCodeUpdateBMC</msg>
<status status="PASS" endtime="20170425 16:29:17.022" starttime="20170425 16:29:17.021"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170425 16:29:17.023" level="INFO">${test_name} = 20170425162917012151_InitiateCodeUpdateBMC</msg>
<status status="PASS" endtime="20170425 16:29:17.023" starttime="20170425 16:29:17.023"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:17.023" starttime="20170425 16:29:17.020"></status>
</kw>
<msg timestamp="20170425 16:29:17.048" level="INFO">${LOG_PREFIX} = /home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/</arg>
</arguments>
<msg timestamp="20170425 16:29:17.049" html="yes" level="INFO">Created directory '&lt;a href="file:///home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC"&gt;/home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 16:29:17.049" starttime="20170425 16:29:17.048"></status>
</kw>
<msg timestamp="20170425 16:29:17.053" level="INFO">${FFDC_FILE_PATH} = /home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 16:29:17.055" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt"&gt;/home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 16:29:17.056" starttime="20170425 16:29:17.055"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:17.056" starttime="20170425 16:29:17.054"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 16:29:17.057" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt"&gt;/home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 16:29:17.057" starttime="20170425 16:29:17.057"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:17.057" starttime="20170425 16:29:17.056"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 16:29:17.058" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt"&gt;/home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 16:29:17.058" starttime="20170425 16:29:17.058"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:17.059" starttime="20170425 16:29:17.057"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 16:29:17.060" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt"&gt;/home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 16:29:17.060" starttime="20170425 16:29:17.059"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:17.060" starttime="20170425 16:29:17.059"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 16:29:17.061" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt"&gt;/home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 16:29:17.061" starttime="20170425 16:29:17.061"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:17.062" starttime="20170425 16:29:17.060"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 16:29:17.063" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt"&gt;/home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 16:29:17.063" starttime="20170425 16:29:17.062"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:17.063" starttime="20170425 16:29:17.062"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 16:29:17.064" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt"&gt;/home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 16:29:17.064" starttime="20170425 16:29:17.064"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:17.064" starttime="20170425 16:29:17.063"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 16:29:17.065" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt"&gt;/home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 16:29:17.066" starttime="20170425 16:29:17.065"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:17.066" starttime="20170425 16:29:17.064"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 16:29:17.067" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt"&gt;/home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 16:29:17.067" starttime="20170425 16:29:17.066"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:17.067" starttime="20170425 16:29:17.066"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 16:29:17.068" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt"&gt;/home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 16:29:17.069" starttime="20170425 16:29:17.068"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:17.069" starttime="20170425 16:29:17.067"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 16:29:17.070" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt"&gt;/home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 16:29:17.070" starttime="20170425 16:29:17.069"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:17.070" starttime="20170425 16:29:17.069"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 16:29:17.071" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt"&gt;/home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 16:29:17.071" starttime="20170425 16:29:17.071"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:17.071" starttime="20170425 16:29:17.070"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 16:29:17.072" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt"&gt;/home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 16:29:17.073" starttime="20170425 16:29:17.072"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:17.073" starttime="20170425 16:29:17.072"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170425 16:29:17.075" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170425 16:29:17.075" starttime="20170425 16:29:17.075"></status>
</kw>
<msg timestamp="20170425 16:29:17.075" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170425 16:29:17.075" starttime="20170425 16:29:17.074"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170425 16:29:17.076" starttime="20170425 16:29:17.076"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:17.077" starttime="20170425 16:29:17.076"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170425 16:29:17.077" starttime="20170425 16:29:17.077"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170425 16:29:17.078" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170425 16:29:17.078" starttime="20170425 16:29:17.078"></status>
</kw>
<msg timestamp="20170425 16:29:17.078" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170425 16:29:17.079" starttime="20170425 16:29:17.078"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170425 16:29:17.080" starttime="20170425 16:29:17.080"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:17.080" starttime="20170425 16:29:17.080"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:17.080" starttime="20170425 16:29:17.079"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170425 16:29:17.081" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170425 16:29:18.727" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170425 16:29:18.727" starttime="20170425 16:29:17.081"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:18.727" starttime="20170425 16:29:17.073"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170425 16:29:18.728" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170425 16:29:18.794" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170425 16:29:18.795" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170425 16:29:18.795" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170425 16:29:18.795" starttime="20170425 16:29:18.727"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170425 16:29:18.795" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170425 16:29:18.795" starttime="20170425 16:29:18.795"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170425 16:29:18.796" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170425 16:29:18.796" starttime="20170425 16:29:18.796"></status>
</kw>
<msg timestamp="20170425 16:29:18.796" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" endtime="20170425 16:29:18.796" starttime="20170425 16:29:17.073"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 16:29:18.797" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt"&gt;/home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 16:29:18.798" starttime="20170425 16:29:18.797"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:18.798" starttime="20170425 16:29:18.796"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:18.798" starttime="20170425 16:29:17.067"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 16:29:18.799" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt"&gt;/home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 16:29:18.799" starttime="20170425 16:29:18.799"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:18.799" starttime="20170425 16:29:18.798"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170425 16:29:18.800" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170425 16:29:18.800" starttime="20170425 16:29:18.799"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 16:29:18.801" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt"&gt;/home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 16:29:18.802" starttime="20170425 16:29:18.801"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:18.802" starttime="20170425 16:29:18.800"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 16:29:18.803" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt"&gt;/home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 16:29:18.803" starttime="20170425 16:29:18.802"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:18.803" starttime="20170425 16:29:18.802"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:18.803" starttime="20170425 16:29:18.800"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 16:29:18.804" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt"&gt;/home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 16:29:18.805" starttime="20170425 16:29:18.804"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:18.805" starttime="20170425 16:29:18.803"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 16:29:18.806" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt"&gt;/home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 16:29:18.806" starttime="20170425 16:29:18.805"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:18.806" starttime="20170425 16:29:18.805"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:18.806" starttime="20170425 16:29:18.803"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 16:29:18.807" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt"&gt;/home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 16:29:18.807" starttime="20170425 16:29:18.807"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:18.807" starttime="20170425 16:29:18.806"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 16:29:18.809" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt"&gt;/home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 16:29:18.809" starttime="20170425 16:29:18.808"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:18.809" starttime="20170425 16:29:18.808"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:18.809" starttime="20170425 16:29:18.806"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:18.809" starttime="20170425 16:29:18.800"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 16:29:18.810" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt"&gt;/home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 16:29:18.810" starttime="20170425 16:29:18.810"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:18.810" starttime="20170425 16:29:18.809"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:18.810" starttime="20170425 16:29:17.054"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Calls into FFDC Keyword index list</doc>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170425 16:29:18.811" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20170425 16:29:18.811" starttime="20170425 16:29:18.811"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170425 16:29:18.813" level="INFO">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('Core Files', 'SCP Coredump Files') | ('BMC Specific Files', 'BMC FFDC Files') | ('SEL Log', 'Collect ...</msg>
<status status="PASS" endtime="20170425 16:29:18.813" starttime="20170425 16:29:18.812"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170425 16:29:18.816" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170425 16:29:18.817" starttime="20170425 16:29:18.816"></status>
</kw>
<msg timestamp="20170425 16:29:18.817" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170425 16:29:18.817" starttime="20170425 16:29:18.816"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170425 16:29:18.818" starttime="20170425 16:29:18.817"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:18.818" starttime="20170425 16:29:18.817"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170425 16:29:18.819" starttime="20170425 16:29:18.818"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170425 16:29:18.820" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170425 16:29:18.820" starttime="20170425 16:29:18.819"></status>
</kw>
<msg timestamp="20170425 16:29:18.820" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170425 16:29:18.820" starttime="20170425 16:29:18.819"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170425 16:29:18.822" starttime="20170425 16:29:18.822"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:18.822" starttime="20170425 16:29:18.821"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:18.822" starttime="20170425 16:29:18.820"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170425 16:29:18.823" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170425 16:29:20.471" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170425 16:29:20.471" starttime="20170425 16:29:18.823"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:20.471" starttime="20170425 16:29:18.815"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170425 16:29:20.472" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170425 16:29:20.472" starttime="20170425 16:29:20.472"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170425 16:29:20.474" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil  state') ]</msg>
<status status="PASS" endtime="20170425 16:29:20.474" starttime="20170425 16:29:20.473"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170425 16:29:20.479" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20170425 16:29:20.479" starttime="20170425 16:29:20.474"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil  state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 16:29:20.482" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt"&gt;/home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 16:29:20.482" starttime="20170425 16:29:20.481"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:20.482" starttime="20170425 16:29:20.481"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 16:29:20.483" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt"&gt;/home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 16:29:20.483" starttime="20170425 16:29:20.483"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:20.484" starttime="20170425 16:29:20.482"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 16:29:20.485" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt"&gt;/home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 16:29:20.485" starttime="20170425 16:29:20.484"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:20.485" starttime="20170425 16:29:20.484"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 16:29:20.486" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt"&gt;/home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 16:29:20.486" starttime="20170425 16:29:20.486"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:20.486" starttime="20170425 16:29:20.485"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:20.486" starttime="20170425 16:29:20.480"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:20.486" starttime="20170425 16:29:20.480"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170425 16:29:20.487" level="INFO">Executing command '/usr/sbin/obmcutil  state'.</msg>
<msg timestamp="20170425 16:29:21.732" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170425 16:29:21.732" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Off</msg>
<msg timestamp="20170425 16:29:21.732" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170425 16:29:21.732" starttime="20170425 16:29:20.487"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 16:29:21.739" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt"&gt;/home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 16:29:21.739" starttime="20170425 16:29:21.738"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:21.739" starttime="20170425 16:29:21.738"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:21.739" starttime="20170425 16:29:21.733"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:21.739" starttime="20170425 16:29:20.479"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:21.739" starttime="20170425 16:29:20.479"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:21.739" starttime="20170425 16:29:20.479"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:21.739" starttime="20170425 16:29:20.473"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:21.739" starttime="20170425 16:29:20.472"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170425 16:29:21.740" level="INFO">@{cmd_list} = [ ('Build Info', 'cat /etc/version') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" endtime="20170425 16:29:21.740" starttime="20170425 16:29:21.740"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170425 16:29:21.741" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20170425 16:29:21.741" starttime="20170425 16:29:21.741"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('Build Info', 'cat /etc/version')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 16:29:21.745" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt"&gt;/home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 16:29:21.745" starttime="20170425 16:29:21.744"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:21.745" starttime="20170425 16:29:21.744"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 16:29:21.746" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt"&gt;/home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 16:29:21.746" starttime="20170425 16:29:21.746"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:21.746" starttime="20170425 16:29:21.745"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 16:29:21.747" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt"&gt;/home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 16:29:21.747" starttime="20170425 16:29:21.747"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:21.748" starttime="20170425 16:29:21.746"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 16:29:21.749" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt"&gt;/home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 16:29:21.749" starttime="20170425 16:29:21.748"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:21.749" starttime="20170425 16:29:21.748"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:21.749" starttime="20170425 16:29:21.743"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:21.749" starttime="20170425 16:29:21.742"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170425 16:29:21.750" level="INFO">Executing command 'cat /etc/version'.</msg>
<msg timestamp="20170425 16:29:21.800" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170425 16:29:21.800" level="INFO">${stdout} = </msg>
<msg timestamp="20170425 16:29:21.800" level="INFO">${stderr} = cat: can't open '/etc/version': No such file or directory</msg>
<status status="PASS" endtime="20170425 16:29:21.800" starttime="20170425 16:29:21.749"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 16:29:21.806" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt"&gt;/home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 16:29:21.806" starttime="20170425 16:29:21.806"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:21.807" starttime="20170425 16:29:21.805"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:21.807" starttime="20170425 16:29:21.801"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:21.807" starttime="20170425 16:29:21.742"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:21.807" starttime="20170425 16:29:21.741"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 16:29:21.810" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt"&gt;/home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 16:29:21.810" starttime="20170425 16:29:21.810"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:21.811" starttime="20170425 16:29:21.809"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 16:29:21.812" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt"&gt;/home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 16:29:21.812" starttime="20170425 16:29:21.812"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:21.812" starttime="20170425 16:29:21.811"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 16:29:21.816" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt"&gt;/home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 16:29:21.816" starttime="20170425 16:29:21.813"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:21.816" starttime="20170425 16:29:21.812"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 16:29:21.817" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt"&gt;/home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 16:29:21.817" starttime="20170425 16:29:21.817"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:21.818" starttime="20170425 16:29:21.816"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:21.818" starttime="20170425 16:29:21.808"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:21.818" starttime="20170425 16:29:21.808"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170425 16:29:21.818" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170425 16:29:21.893" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170425 16:29:21.893" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.4-53"
VERSION_ID="v1.99.4-53-g5c56a71"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Project ...</msg>
<msg timestamp="20170425 16:29:21.893" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170425 16:29:21.893" starttime="20170425 16:29:21.818"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 16:29:21.902" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt"&gt;/home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 16:29:21.902" starttime="20170425 16:29:21.901"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:21.902" starttime="20170425 16:29:21.900"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:21.902" starttime="20170425 16:29:21.894"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:21.902" starttime="20170425 16:29:21.807"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:21.902" starttime="20170425 16:29:21.807"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:21.902" starttime="20170425 16:29:21.741"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:21.902" starttime="20170425 16:29:21.740"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:21.902" starttime="20170425 16:29:21.739"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170425 16:29:21.903" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" endtime="20170425 16:29:21.904" starttime="20170425 16:29:21.903"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170425 16:29:21.904" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20170425 16:29:21.904" starttime="20170425 16:29:21.904"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 16:29:21.907" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt"&gt;/home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 16:29:21.908" starttime="20170425 16:29:21.907"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:21.908" starttime="20170425 16:29:21.906"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 16:29:21.909" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt"&gt;/home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 16:29:21.909" starttime="20170425 16:29:21.909"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:21.909" starttime="20170425 16:29:21.908"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 16:29:21.910" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt"&gt;/home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 16:29:21.910" starttime="20170425 16:29:21.910"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:21.910" starttime="20170425 16:29:21.909"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 16:29:21.912" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt"&gt;/home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 16:29:21.912" starttime="20170425 16:29:21.911"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:21.912" starttime="20170425 16:29:21.911"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:21.912" starttime="20170425 16:29:21.906"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:21.912" starttime="20170425 16:29:21.905"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170425 16:29:21.913" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170425 16:29:21.981" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170425 16:29:21.981" level="INFO">${stdout} =  16:29:25 up 2 min,  load average: 1.43, 1.36, 0.59</msg>
<msg timestamp="20170425 16:29:21.982" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170425 16:29:21.982" starttime="20170425 16:29:21.913"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 16:29:21.988" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt"&gt;/home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 16:29:21.988" starttime="20170425 16:29:21.987"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:21.988" starttime="20170425 16:29:21.987"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:21.988" starttime="20170425 16:29:21.982"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:21.988" starttime="20170425 16:29:21.905"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:21.988" starttime="20170425 16:29:21.904"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 16:29:21.991" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt"&gt;/home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 16:29:21.992" starttime="20170425 16:29:21.991"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:21.992" starttime="20170425 16:29:21.990"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 16:29:21.993" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt"&gt;/home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 16:29:21.993" starttime="20170425 16:29:21.993"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:21.993" starttime="20170425 16:29:21.992"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 16:29:21.994" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt"&gt;/home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 16:29:21.994" starttime="20170425 16:29:21.994"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:21.994" starttime="20170425 16:29:21.993"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 16:29:21.995" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt"&gt;/home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 16:29:21.996" starttime="20170425 16:29:21.995"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:21.996" starttime="20170425 16:29:21.995"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:21.996" starttime="20170425 16:29:21.990"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:21.996" starttime="20170425 16:29:21.989"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170425 16:29:21.996" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170425 16:29:22.081" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170425 16:29:22.081" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.1M         0    210.1M   0% /dev
tmpfs                tmpfs         211.4M     37.3...</msg>
<msg timestamp="20170425 16:29:22.081" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170425 16:29:22.081" starttime="20170425 16:29:21.996"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 16:29:22.088" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt"&gt;/home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 16:29:22.088" starttime="20170425 16:29:22.087"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:22.088" starttime="20170425 16:29:22.086"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:22.088" starttime="20170425 16:29:22.082"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:22.088" starttime="20170425 16:29:21.988"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:22.088" starttime="20170425 16:29:21.988"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 16:29:22.091" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt"&gt;/home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 16:29:22.091" starttime="20170425 16:29:22.091"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:22.091" starttime="20170425 16:29:22.090"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 16:29:22.092" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt"&gt;/home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 16:29:22.093" starttime="20170425 16:29:22.092"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:22.093" starttime="20170425 16:29:22.091"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 16:29:22.094" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt"&gt;/home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 16:29:22.094" starttime="20170425 16:29:22.093"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:22.094" starttime="20170425 16:29:22.093"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 16:29:22.095" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt"&gt;/home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 16:29:22.095" starttime="20170425 16:29:22.095"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:22.096" starttime="20170425 16:29:22.094"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:22.096" starttime="20170425 16:29:22.090"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:22.096" starttime="20170425 16:29:22.089"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170425 16:29:22.096" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170425 16:29:22.176" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170425 16:29:22.176" level="INFO">${stdout} = Linux witherspoon 4.7.10-08a5126be4b35613c3d2b6ad5e91400aa87798d9 #1 Tue Apr 25 03:04:39 UTC 2017 armv6l GNU/Linux</msg>
<msg timestamp="20170425 16:29:22.177" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170425 16:29:22.177" starttime="20170425 16:29:22.096"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 16:29:22.183" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt"&gt;/home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 16:29:22.183" starttime="20170425 16:29:22.182"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:22.183" starttime="20170425 16:29:22.182"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:22.183" starttime="20170425 16:29:22.177"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:22.183" starttime="20170425 16:29:22.088"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:22.183" starttime="20170425 16:29:22.088"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:22.183" starttime="20170425 16:29:21.904"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:22.183" starttime="20170425 16:29:21.903"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:22.183" starttime="20170425 16:29:21.902"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:22.183" starttime="20170425 16:29:20.472"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:22.183" starttime="20170425 16:29:18.814"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:22.184" starttime="20170425 16:29:18.814"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:22.184" starttime="20170425 16:29:18.813"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:22.184" starttime="20170425 16:29:18.813"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170425 16:29:22.187" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170425 16:29:22.187" starttime="20170425 16:29:22.186"></status>
</kw>
<msg timestamp="20170425 16:29:22.187" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170425 16:29:22.187" starttime="20170425 16:29:22.186"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170425 16:29:22.188" starttime="20170425 16:29:22.188"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:22.188" starttime="20170425 16:29:22.187"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170425 16:29:22.189" starttime="20170425 16:29:22.188"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170425 16:29:22.190" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170425 16:29:22.190" starttime="20170425 16:29:22.190"></status>
</kw>
<msg timestamp="20170425 16:29:22.190" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170425 16:29:22.190" starttime="20170425 16:29:22.189"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170425 16:29:22.192" starttime="20170425 16:29:22.192"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:22.192" starttime="20170425 16:29:22.191"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:22.192" starttime="20170425 16:29:22.190"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170425 16:29:22.192" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170425 16:29:23.838" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170425 16:29:23.838" starttime="20170425 16:29:22.192"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:23.839" starttime="20170425 16:29:22.185"></status>
</kw>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170425 16:29:23.839" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20170425 16:29:23.839" starttime="20170425 16:29:23.839"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170425 16:29:23.841" level="INFO">@{cmd_list} = [ ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate') | ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_led', '/o...</msg>
<status status="PASS" endtime="20170425 16:29:23.841" starttime="20170425 16:29:23.840"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170425 16:29:23.842" level="INFO">${logpath} = /home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_elog.txt</msg>
<status status="PASS" endtime="20170425 16:29:23.842" starttime="20170425 16:29:23.841"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170425 16:29:23.844" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170425 16:29:23.845" starttime="20170425 16:29:23.843"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170425 16:29:23.845" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170425 16:29:23.845" starttime="20170425 16:29:23.845"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170425 16:29:23.846" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170425 16:29:23.846" starttime="20170425 16:29:23.846"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170425 16:29:23.847" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170425 16:29:23.847" starttime="20170425 16:29:23.846"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170425 16:29:24.024" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170425 16:29:24.024" starttime="20170425 16:29:23.848"></status>
</kw>
<msg timestamp="20170425 16:29:24.024" level="INFO">${status} = PASS</msg>
<msg timestamp="20170425 16:29:24.024" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 16:29:24.024" starttime="20170425 16:29:23.847"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170425 16:29:24.025" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 16:29:24.025" starttime="20170425 16:29:24.025"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 16:29:24.026" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 16:29:24.026" starttime="20170425 16:29:24.025"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:24.026" starttime="20170425 16:29:23.843"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170425 16:29:24.027" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" endtime="20170425 16:29:24.027" starttime="20170425 16:29:24.026"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170425 16:29:24.028" starttime="20170425 16:29:24.027"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170425 16:29:24.072" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None </msg>
<msg timestamp="20170425 16:29:24.072" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170425 16:29:24.072" starttime="20170425 16:29:24.028"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170425 16:29:24.073" starttime="20170425 16:29:24.073"></status>
</kw>
<msg timestamp="20170425 16:29:24.073" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170425 16:29:24.073" starttime="20170425 16:29:23.842"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 16:29:24.074" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170425 16:29:24.074" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170425 16:29:24.075" starttime="20170425 16:29:24.074"></status>
</kw>
<msg timestamp="20170425 16:29:24.075" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170425 16:29:24.075" starttime="20170425 16:29:24.073"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170425 16:29:24.076" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170425 16:29:24.076" starttime="20170425 16:29:24.076"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:24.076" starttime="20170425 16:29:24.075"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:24.076" starttime="20170425 16:29:23.841"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170425 16:29:24.077" level="INFO">${logpath} = /home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_sensor_list.txt</msg>
<status status="PASS" endtime="20170425 16:29:24.077" starttime="20170425 16:29:24.077"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170425 16:29:24.079" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170425 16:29:24.079" starttime="20170425 16:29:24.079"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170425 16:29:24.080" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170425 16:29:24.080" starttime="20170425 16:29:24.080"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170425 16:29:24.081" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170425 16:29:24.081" starttime="20170425 16:29:24.080"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170425 16:29:24.081" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170425 16:29:24.081" starttime="20170425 16:29:24.081"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170425 16:29:24.259" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170425 16:29:24.259" starttime="20170425 16:29:24.082"></status>
</kw>
<msg timestamp="20170425 16:29:24.259" level="INFO">${status} = PASS</msg>
<msg timestamp="20170425 16:29:24.259" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 16:29:24.259" starttime="20170425 16:29:24.082"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170425 16:29:24.260" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 16:29:24.260" starttime="20170425 16:29:24.259"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 16:29:24.260" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 16:29:24.260" starttime="20170425 16:29:24.260"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:24.261" starttime="20170425 16:29:24.078"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170425 16:29:24.261" level="INFO">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status status="PASS" endtime="20170425 16:29:24.261" starttime="20170425 16:29:24.261"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170425 16:29:24.262" starttime="20170425 16:29:24.262"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170425 16:29:24.479" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None </msg>
<msg timestamp="20170425 16:29:24.479" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 16:29:24.479" starttime="20170425 16:29:24.262"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170425 16:29:24.479" starttime="20170425 16:29:24.479"></status>
</kw>
<msg timestamp="20170425 16:29:24.480" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 16:29:24.480" starttime="20170425 16:29:24.077"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 16:29:24.481" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 16:29:24.481" starttime="20170425 16:29:24.480"></status>
</kw>
<msg timestamp="20170425 16:29:24.481" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170425 16:29:24.481" starttime="20170425 16:29:24.480"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170425 16:29:24.482" starttime="20170425 16:29:24.481"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170425 16:29:24.483" level="INFO">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 2
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }, 
    "/org/openbmc/sensors/host/cpu0/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/cpu1/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/powercap": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170425 16:29:24.483" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170425 16:29:24.483" level="INFO">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 2
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status status="PASS" endtime="20170425 16:29:24.483" starttime="20170425 16:29:24.482"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 16:29:24.484" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_sensor_list.txt"&gt;/home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 16:29:24.485" starttime="20170425 16:29:24.484"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:24.485" starttime="20170425 16:29:24.483"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:24.485" starttime="20170425 16:29:24.076"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170425 16:29:24.486" level="INFO">${logpath} = /home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_inventory.txt</msg>
<status status="PASS" endtime="20170425 16:29:24.486" starttime="20170425 16:29:24.485"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170425 16:29:24.487" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170425 16:29:24.488" starttime="20170425 16:29:24.487"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170425 16:29:24.488" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170425 16:29:24.489" starttime="20170425 16:29:24.488"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170425 16:29:24.489" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170425 16:29:24.489" starttime="20170425 16:29:24.489"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170425 16:29:24.490" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170425 16:29:24.490" starttime="20170425 16:29:24.489"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170425 16:29:24.674" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170425 16:29:24.674" starttime="20170425 16:29:24.491"></status>
</kw>
<msg timestamp="20170425 16:29:24.674" level="INFO">${status} = PASS</msg>
<msg timestamp="20170425 16:29:24.674" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 16:29:24.674" starttime="20170425 16:29:24.490"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170425 16:29:24.675" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 16:29:24.675" starttime="20170425 16:29:24.675"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 16:29:24.676" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 16:29:24.676" starttime="20170425 16:29:24.675"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:24.676" starttime="20170425 16:29:24.486"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170425 16:29:24.677" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" endtime="20170425 16:29:24.677" starttime="20170425 16:29:24.676"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170425 16:29:24.677" starttime="20170425 16:29:24.677"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170425 16:29:24.835" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None </msg>
<msg timestamp="20170425 16:29:24.835" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 16:29:24.835" starttime="20170425 16:29:24.678"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170425 16:29:24.836" starttime="20170425 16:29:24.836"></status>
</kw>
<msg timestamp="20170425 16:29:24.836" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 16:29:24.836" starttime="20170425 16:29:24.486"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 16:29:24.838" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 16:29:24.838" starttime="20170425 16:29:24.837"></status>
</kw>
<msg timestamp="20170425 16:29:24.838" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170425 16:29:24.838" starttime="20170425 16:29:24.837"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170425 16:29:24.839" starttime="20170425 16:29:24.838"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170425 16:29:24.839" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/createme3": {
      "ExampleProperty1": "foo"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170425 16:29:24.840" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170425 16:29:24.840" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/createme3": {
            "ExampleProperty1": "foo"
        },
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc":...</msg>
<status status="PASS" endtime="20170425 16:29:24.840" starttime="20170425 16:29:24.839"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 16:29:24.841" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_inventory.txt"&gt;/home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 16:29:24.841" starttime="20170425 16:29:24.841"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:24.841" starttime="20170425 16:29:24.840"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:24.841" starttime="20170425 16:29:24.485"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170425 16:29:24.842" level="INFO">${logpath} = /home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_led.txt</msg>
<status status="PASS" endtime="20170425 16:29:24.842" starttime="20170425 16:29:24.842"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170425 16:29:24.844" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170425 16:29:24.844" starttime="20170425 16:29:24.843"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170425 16:29:24.845" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170425 16:29:24.845" starttime="20170425 16:29:24.844"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170425 16:29:24.845" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170425 16:29:24.845" starttime="20170425 16:29:24.845"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170425 16:29:24.846" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170425 16:29:24.846" starttime="20170425 16:29:24.846"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170425 16:29:25.022" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170425 16:29:25.022" starttime="20170425 16:29:24.847"></status>
</kw>
<msg timestamp="20170425 16:29:25.023" level="INFO">${status} = PASS</msg>
<msg timestamp="20170425 16:29:25.023" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 16:29:25.023" starttime="20170425 16:29:24.846"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170425 16:29:25.023" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 16:29:25.023" starttime="20170425 16:29:25.023"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 16:29:25.024" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 16:29:25.024" starttime="20170425 16:29:25.024"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:25.024" starttime="20170425 16:29:24.843"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170425 16:29:25.025" level="INFO">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status status="PASS" endtime="20170425 16:29:25.025" starttime="20170425 16:29:25.025"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170425 16:29:25.026" starttime="20170425 16:29:25.025"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170425 16:29:25.112" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None </msg>
<msg timestamp="20170425 16:29:25.112" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 16:29:25.112" starttime="20170425 16:29:25.026"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170425 16:29:25.113" starttime="20170425 16:29:25.112"></status>
</kw>
<msg timestamp="20170425 16:29:25.113" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 16:29:25.113" starttime="20170425 16:29:24.842"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 16:29:25.114" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 16:29:25.114" starttime="20170425 16:29:25.114"></status>
</kw>
<msg timestamp="20170425 16:29:25.114" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170425 16:29:25.114" starttime="20170425 16:29:25.113"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170425 16:29:25.115" starttime="20170425 16:29:25.115"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170425 16:29:25.116" level="INFO">To JSON using : content={
  "data": {}, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170425 16:29:25.116" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170425 16:29:25.116" level="INFO">${jsondata} = {
    "data": {},
    "message": "200 OK",
    "status": "ok"
}</msg>
<status status="PASS" endtime="20170425 16:29:25.116" starttime="20170425 16:29:25.116"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 16:29:25.118" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_led.txt"&gt;/home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_led.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 16:29:25.118" starttime="20170425 16:29:25.118"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:25.118" starttime="20170425 16:29:25.117"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:25.118" starttime="20170425 16:29:24.841"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170425 16:29:25.119" level="INFO">${logpath} = /home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_record_log.txt</msg>
<status status="PASS" endtime="20170425 16:29:25.119" starttime="20170425 16:29:25.119"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170425 16:29:25.121" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170425 16:29:25.121" starttime="20170425 16:29:25.121"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170425 16:29:25.122" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170425 16:29:25.122" starttime="20170425 16:29:25.122"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170425 16:29:25.123" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170425 16:29:25.123" starttime="20170425 16:29:25.122"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170425 16:29:25.123" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170425 16:29:25.123" starttime="20170425 16:29:25.123"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170425 16:29:25.299" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170425 16:29:25.299" starttime="20170425 16:29:25.124"></status>
</kw>
<msg timestamp="20170425 16:29:25.299" level="INFO">${status} = PASS</msg>
<msg timestamp="20170425 16:29:25.299" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 16:29:25.299" starttime="20170425 16:29:25.124"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170425 16:29:25.300" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 16:29:25.300" starttime="20170425 16:29:25.299"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 16:29:25.300" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 16:29:25.300" starttime="20170425 16:29:25.300"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:25.301" starttime="20170425 16:29:25.120"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170425 16:29:25.301" level="INFO">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status status="PASS" endtime="20170425 16:29:25.301" starttime="20170425 16:29:25.301"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170425 16:29:25.302" starttime="20170425 16:29:25.301"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170425 16:29:25.346" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None </msg>
<msg timestamp="20170425 16:29:25.347" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170425 16:29:25.347" starttime="20170425 16:29:25.302"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170425 16:29:25.347" starttime="20170425 16:29:25.347"></status>
</kw>
<msg timestamp="20170425 16:29:25.348" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170425 16:29:25.348" starttime="20170425 16:29:25.119"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 16:29:25.349" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170425 16:29:25.349" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170425 16:29:25.349" starttime="20170425 16:29:25.348"></status>
</kw>
<msg timestamp="20170425 16:29:25.349" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170425 16:29:25.349" starttime="20170425 16:29:25.348"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170425 16:29:25.350" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170425 16:29:25.350" starttime="20170425 16:29:25.350"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:25.350" starttime="20170425 16:29:25.349"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:25.350" starttime="20170425 16:29:25.119"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:25.350" starttime="20170425 16:29:23.841"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:25.350" starttime="20170425 16:29:23.840"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:25.351" starttime="20170425 16:29:23.839"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:25.351" starttime="20170425 16:29:23.839"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:25.351" starttime="20170425 16:29:22.185"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:25.351" starttime="20170425 16:29:22.185"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:25.351" starttime="20170425 16:29:22.184"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:25.351" starttime="20170425 16:29:22.184"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170425 16:29:25.354" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170425 16:29:25.354" starttime="20170425 16:29:25.354"></status>
</kw>
<msg timestamp="20170425 16:29:25.354" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170425 16:29:25.354" starttime="20170425 16:29:25.353"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170425 16:29:25.355" starttime="20170425 16:29:25.355"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:25.355" starttime="20170425 16:29:25.354"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170425 16:29:25.356" starttime="20170425 16:29:25.356"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170425 16:29:25.357" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170425 16:29:25.357" starttime="20170425 16:29:25.357"></status>
</kw>
<msg timestamp="20170425 16:29:25.357" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170425 16:29:25.357" starttime="20170425 16:29:25.356"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170425 16:29:25.359" starttime="20170425 16:29:25.359"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:25.359" starttime="20170425 16:29:25.358"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:25.359" starttime="20170425 16:29:25.358"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170425 16:29:25.360" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170425 16:29:27.005" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170425 16:29:27.006" starttime="20170425 16:29:25.359"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:27.006" starttime="20170425 16:29:25.353"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
</assign>
<msg timestamp="20170425 16:29:27.006" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170425 16:29:27.053" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170425 16:29:27.053" level="INFO">${core_files} = </msg>
<status status="PASS" endtime="20170425 16:29:27.053" starttime="20170425 16:29:27.006"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170425 16:29:27.054" level="INFO">@{core_list} = [ ]</msg>
<status status="PASS" endtime="20170425 16:29:27.054" starttime="20170425 16:29:27.053"></status>
</kw>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170425 16:29:27.056" starttime="20170425 16:29:27.055"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170425 16:29:27.692" starttime="20170425 16:29:27.057"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:27.692" starttime="20170425 16:29:27.056"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:27.692" starttime="20170425 16:29:27.054"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status status="PASS" endtime="20170425 16:29:27.693" starttime="20170425 16:29:27.692"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:27.693" starttime="20170425 16:29:25.352"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:27.693" starttime="20170425 16:29:25.352"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:27.693" starttime="20170425 16:29:25.351"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:27.693" starttime="20170425 16:29:25.351"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170425 16:29:27.696" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170425 16:29:27.696" starttime="20170425 16:29:27.696"></status>
</kw>
<msg timestamp="20170425 16:29:27.696" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170425 16:29:27.697" starttime="20170425 16:29:27.696"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170425 16:29:27.698" starttime="20170425 16:29:27.697"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:27.698" starttime="20170425 16:29:27.697"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170425 16:29:27.698" starttime="20170425 16:29:27.698"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170425 16:29:27.700" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170425 16:29:27.700" starttime="20170425 16:29:27.699"></status>
</kw>
<msg timestamp="20170425 16:29:27.700" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170425 16:29:27.700" starttime="20170425 16:29:27.699"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170425 16:29:27.701" starttime="20170425 16:29:27.701"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:27.702" starttime="20170425 16:29:27.701"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:27.702" starttime="20170425 16:29:27.700"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170425 16:29:27.702" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170425 16:29:29.347" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170425 16:29:29.348" starttime="20170425 16:29:27.702"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:29.348" starttime="20170425 16:29:27.695"></status>
</kw>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170425 16:29:29.348" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20170425 16:29:29.349" starttime="20170425 16:29:29.348"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>echo ${OPENBMC_HOST} | sed 's/\(\.\)/\\\1/g'</arg>
</arguments>
<assign>
<var>${OPENBMC_HOST_REGEX}</var>
</assign>
<msg timestamp="20170425 16:29:29.354" level="INFO">Running command 'echo 9.3.86.161 | sed 's/(.)/\1/g' 2&gt;&amp;1'.</msg>
<msg timestamp="20170425 16:29:29.359" level="INFO">${OPENBMC_HOST_REGEX} = sed: -e expression #1, char 10: invalid reference \1 on `s' command's RHS</msg>
<status status="PASS" endtime="20170425 16:29:29.359" starttime="20170425 16:29:29.350"></status>
</kw>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170425 16:29:29.362" level="INFO">@{cmd_list} = [ ('BMC_proc_list', 'top -n 1 -b') | ('BMC_dmesg', 'dmesg') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_journalctl', 'journalctl --no-pager') ]</msg>
<status status="PASS" endtime="20170425 16:29:29.362" starttime="20170425 16:29:29.361"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170425 16:29:29.364" level="INFO">${logpath} = /home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_proc_list.txt</msg>
<status status="PASS" endtime="20170425 16:29:29.364" starttime="20170425 16:29:29.363"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170425 16:29:29.366" starttime="20170425 16:29:29.366"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170425 16:29:29.367" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170425 16:29:29.639" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170425 16:29:29.639" level="INFO">${stdout} = Mem: 167120K used, 265812K free, 38220K shrd, 10376K buff, 72040K cached
CPU:   0% usr  23% sys   0% nic  76% idle   0% io   0% irq   0% sirq
Load average: 1.32 1.34 0.59 1/137 1010
  PID  PPID USER  ...</msg>
<msg timestamp="20170425 16:29:29.639" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170425 16:29:29.640" starttime="20170425 16:29:29.366"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 16:29:29.649" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_proc_list.txt"&gt;/home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 16:29:29.649" starttime="20170425 16:29:29.648"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:29.650" starttime="20170425 16:29:29.647"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:29.650" starttime="20170425 16:29:29.640"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:29.650" starttime="20170425 16:29:29.364"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sed -i 's/'${OPENBMC_HOST_REGEX}'/DUMMYIP/g' ${logpath}</arg>
</arguments>
<msg timestamp="20170425 16:29:29.655" level="INFO">Running command 'sed -i 's/'sed: -e expression #1, char 10: invalid reference \1 on `s' command's RHS'/DUMMYIP/g' /home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_proc_list.txt 2&gt;&amp;1'.</msg>
<status status="PASS" endtime="20170425 16:29:29.659" starttime="20170425 16:29:29.650"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:29.659" starttime="20170425 16:29:29.363"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170425 16:29:29.664" level="INFO">${logpath} = /home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_dmesg.txt</msg>
<status status="PASS" endtime="20170425 16:29:29.664" starttime="20170425 16:29:29.663"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170425 16:29:29.667" starttime="20170425 16:29:29.665"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170425 16:29:29.667" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170425 16:29:29.757" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170425 16:29:29.757" level="INFO">${stdout} = Booting Linux on physical CPU 0x0
Linux version 4.7.10-08a5126be4b35613c3d2b6ad5e91400aa87798d9 (jenkins@openbmc-builder1) (gcc version 6.2.0 (GCC) ) #1 Tue Apr 25 03:04:39 UTC 2017
CPU: ARMv6-compati...</msg>
<msg timestamp="20170425 16:29:29.757" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170425 16:29:29.757" starttime="20170425 16:29:29.667"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 16:29:29.764" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_dmesg.txt"&gt;/home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 16:29:29.764" starttime="20170425 16:29:29.764"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:29.765" starttime="20170425 16:29:29.763"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:29.765" starttime="20170425 16:29:29.757"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:29.765" starttime="20170425 16:29:29.664"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sed -i 's/'${OPENBMC_HOST_REGEX}'/DUMMYIP/g' ${logpath}</arg>
</arguments>
<msg timestamp="20170425 16:29:29.769" level="INFO">Running command 'sed -i 's/'sed: -e expression #1, char 10: invalid reference \1 on `s' command's RHS'/DUMMYIP/g' /home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_dmesg.txt 2&gt;&amp;1'.</msg>
<status status="PASS" endtime="20170425 16:29:29.772" starttime="20170425 16:29:29.765"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:29.772" starttime="20170425 16:29:29.660"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170425 16:29:29.776" level="INFO">${logpath} = /home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_meminfo.txt</msg>
<status status="PASS" endtime="20170425 16:29:29.776" starttime="20170425 16:29:29.775"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170425 16:29:29.779" starttime="20170425 16:29:29.778"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170425 16:29:29.779" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170425 16:29:29.958" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170425 16:29:29.959" level="INFO">${stdout} = MemTotal:         432932 kB
MemFree:          265532 kB
MemAvailable:     305420 kB
Buffers:           10376 kB
Cached:            72044 kB
SwapCached:            0 kB
Active:           105444 kB
Inac...</msg>
<msg timestamp="20170425 16:29:29.959" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170425 16:29:29.959" starttime="20170425 16:29:29.779"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 16:29:29.965" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_meminfo.txt"&gt;/home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 16:29:29.965" starttime="20170425 16:29:29.965"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:29.965" starttime="20170425 16:29:29.964"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:29.965" starttime="20170425 16:29:29.959"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:29.965" starttime="20170425 16:29:29.777"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sed -i 's/'${OPENBMC_HOST_REGEX}'/DUMMYIP/g' ${logpath}</arg>
</arguments>
<msg timestamp="20170425 16:29:29.969" level="INFO">Running command 'sed -i 's/'sed: -e expression #1, char 10: invalid reference \1 on `s' command's RHS'/DUMMYIP/g' /home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_meminfo.txt 2&gt;&amp;1'.</msg>
<status status="PASS" endtime="20170425 16:29:29.972" starttime="20170425 16:29:29.966"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:29.972" starttime="20170425 16:29:29.773"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170425 16:29:29.976" level="INFO">${logpath} = /home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_procinfo.txt</msg>
<status status="PASS" endtime="20170425 16:29:29.976" starttime="20170425 16:29:29.975"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170425 16:29:29.979" starttime="20170425 16:29:29.978"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170425 16:29:29.979" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170425 16:29:30.032" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170425 16:29:30.032" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<msg timestamp="20170425 16:29:30.032" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170425 16:29:30.032" starttime="20170425 16:29:29.979"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 16:29:30.039" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_procinfo.txt"&gt;/home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 16:29:30.039" starttime="20170425 16:29:30.038"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:30.039" starttime="20170425 16:29:30.037"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:30.039" starttime="20170425 16:29:30.033"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:30.039" starttime="20170425 16:29:29.977"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sed -i 's/'${OPENBMC_HOST_REGEX}'/DUMMYIP/g' ${logpath}</arg>
</arguments>
<msg timestamp="20170425 16:29:30.043" level="INFO">Running command 'sed -i 's/'sed: -e expression #1, char 10: invalid reference \1 on `s' command's RHS'/DUMMYIP/g' /home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_procinfo.txt 2&gt;&amp;1'.</msg>
<status status="PASS" endtime="20170425 16:29:30.045" starttime="20170425 16:29:30.039"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:30.046" starttime="20170425 16:29:29.973"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170425 16:29:30.050" level="INFO">${logpath} = /home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_journalctl.txt</msg>
<status status="PASS" endtime="20170425 16:29:30.050" starttime="20170425 16:29:30.049"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170425 16:29:30.053" starttime="20170425 16:29:30.053"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170425 16:29:30.054" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170425 16:29:30.804" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170425 16:29:30.805" level="INFO">${stdout} = -- Logs begin at Tue 2017-04-25 16:26:48 UTC, end at Tue 2017-04-25 16:29:32 UTC. --
Apr 25 16:26:48 witherspoon kernel: Booting Linux on physical CPU 0x0
Apr 25 16:26:48 witherspoon kernel: Linux ver...</msg>
<msg timestamp="20170425 16:29:30.805" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170425 16:29:30.805" starttime="20170425 16:29:30.054"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 16:29:30.815" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_journalctl.txt"&gt;/home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 16:29:30.815" starttime="20170425 16:29:30.811"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:30.816" starttime="20170425 16:29:30.811"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:30.816" starttime="20170425 16:29:30.806"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:30.816" starttime="20170425 16:29:30.051"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sed -i 's/'${OPENBMC_HOST_REGEX}'/DUMMYIP/g' ${logpath}</arg>
</arguments>
<msg timestamp="20170425 16:29:30.834" level="INFO">Running command 'sed -i 's/'sed: -e expression #1, char 10: invalid reference \1 on `s' command's RHS'/DUMMYIP/g' /home/fspcibld/logs/20170425162917012151_UpdateBmc/20170425162917012151_InitiateCodeUpdateBMC/20170425162917012151_BMC_journalctl.txt 2&gt;&amp;1'.</msg>
<status status="PASS" endtime="20170425 16:29:30.839" starttime="20170425 16:29:30.816"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:30.839" starttime="20170425 16:29:30.046"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:30.840" starttime="20170425 16:29:29.363"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:30.840" starttime="20170425 16:29:29.349"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:30.840" starttime="20170425 16:29:29.349"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:30.841" starttime="20170425 16:29:29.349"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:30.841" starttime="20170425 16:29:27.694"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:30.841" starttime="20170425 16:29:27.694"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:30.841" starttime="20170425 16:29:27.693"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:30.842" starttime="20170425 16:29:27.693"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170425 16:29:30.848" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170425 16:29:30.849" starttime="20170425 16:29:30.847"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170425 16:29:30.850" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170425 16:29:30.850" starttime="20170425 16:29:30.849"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170425 16:29:30.851" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170425 16:29:30.851" starttime="20170425 16:29:30.850"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170425 16:29:30.851" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170425 16:29:30.851" starttime="20170425 16:29:30.851"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170425 16:29:31.043" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170425 16:29:31.043" starttime="20170425 16:29:30.852"></status>
</kw>
<msg timestamp="20170425 16:29:31.043" level="INFO">${status} = PASS</msg>
<msg timestamp="20170425 16:29:31.043" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 16:29:31.043" starttime="20170425 16:29:30.852"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170425 16:29:31.044" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 16:29:31.044" starttime="20170425 16:29:31.043"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 16:29:31.044" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 16:29:31.044" starttime="20170425 16:29:31.044"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:31.045" starttime="20170425 16:29:30.847"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170425 16:29:31.045" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" endtime="20170425 16:29:31.045" starttime="20170425 16:29:31.045"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170425 16:29:31.046" starttime="20170425 16:29:31.045"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170425 16:29:31.090" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None </msg>
<msg timestamp="20170425 16:29:31.090" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170425 16:29:31.090" starttime="20170425 16:29:31.046"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170425 16:29:31.091" starttime="20170425 16:29:31.090"></status>
</kw>
<msg timestamp="20170425 16:29:31.091" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170425 16:29:31.091" starttime="20170425 16:29:30.846"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 16:29:31.092" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170425 16:29:31.092" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170425 16:29:31.093" starttime="20170425 16:29:31.092"></status>
</kw>
<msg timestamp="20170425 16:29:31.093" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170425 16:29:31.093" starttime="20170425 16:29:31.091"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170425 16:29:31.094" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170425 16:29:31.094" starttime="20170425 16:29:31.093"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:31.094" starttime="20170425 16:29:30.846"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:31.094" starttime="20170425 16:29:30.845"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:31.094" starttime="20170425 16:29:30.843"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:31.094" starttime="20170425 16:29:30.842"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170425 16:29:31.097" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170425 16:29:31.098" starttime="20170425 16:29:31.097"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:31.098" starttime="20170425 16:29:31.096"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:31.098" starttime="20170425 16:29:31.096"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:31.098" starttime="20170425 16:29:31.095"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:31.098" starttime="20170425 16:29:31.094"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:31.098" starttime="20170425 16:29:18.813"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:31.098" starttime="20170425 16:29:18.812"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:31.098" starttime="20170425 16:29:18.812"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:31.098" starttime="20170425 16:29:18.811"></status>
</kw>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170425 16:29:31.268" starttime="20170425 16:29:31.099"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:31.268" starttime="20170425 16:29:18.811"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:31.268" starttime="20170425 16:29:12.284"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:31.269" starttime="20170425 16:29:12.284"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" endtime="20170425 16:29:31.270" starttime="20170425 16:29:31.269"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170425 16:29:31.271" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld/logs"&gt;/home/fspcibld/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20170425 16:29:31.271" starttime="20170425 16:29:31.270"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170425 16:29:31.272" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170425 16:29:31.272" starttime="20170425 16:29:31.271"></status>
</kw>
<msg timestamp="20170425 16:29:31.272" level="INFO">${exist} = True</msg>
<status status="PASS" endtime="20170425 16:29:31.272" starttime="20170425 16:29:31.271"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" endtime="20170425 16:29:31.273" starttime="20170425 16:29:31.272"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170425 16:29:31.274" level="INFO">${cur_time} = 2017-04-25 16:29:31:273407</msg>
<status status="PASS" endtime="20170425 16:29:31.274" starttime="20170425 16:29:31.273"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170425 16:29:31.274" level="INFO">${cur_time} = 20170425162931273407</msg>
<status status="PASS" endtime="20170425 16:29:31.274" starttime="20170425 16:29:31.274"></status>
</kw>
<msg timestamp="20170425 16:29:31.274" level="INFO">${cur_time} = 20170425162931273407</msg>
<status status="PASS" endtime="20170425 16:29:31.274" starttime="20170425 16:29:31.273"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170425 16:29:31.275" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 16:29:31.276" starttime="20170425 16:29:31.275"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:31.276" starttime="20170425 16:29:31.270"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:31.276" starttime="20170425 16:29:12.016"></status>
</kw>
<status status="PASS" endtime="20170425 16:29:31.276" starttime="20170425 16:29:12.008"></status>
</kw>
<doc>Initiate a code update on the BMC.</doc>
<tags>
<tag>Initiate_Code_Update_BMC</tag>
</tags>
<status status="FAIL" endtime="20170425 16:29:31.276" critical="yes" starttime="20170425 16:25:48.021">timeout</status>
</test>
<doc>Trigger code update to a target BMC.
Execution Method :
python -m robot -v OPENBMC_HOST:&lt;hostname&gt;
-v FILE_PATH:&lt;path/*all.tar&gt; update_bmc.robot

Code update method BMC using REST
Update work flow sequence:
- User input BMC File existence check
- Ping Test and REST authentication
- Set Host Power host setting Policy to RESTORE_LAST_STATE
On reboot this policy would ensure the BMC comes
online and stays at HOST_POWERED_OFF state.
- Issue poweroff
- Prune archived journal logs
- Prepare for Update
- Wait for BMC to come online clean
- Wait for BMC_READY state
- Apply preserve BMC Network setting
- SCP image to BMC
- Activate the flash image
- Warm Reset BMC to activate code
- Wait for BMC to come online time out 30 minutes
- Version check post update</doc>
<status status="FAIL" endtime="20170425 16:29:31.278" starttime="20170425 16:25:47.047"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">Initiate_Code_Update_BMC</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Update Bmc" pass="0">Update Bmc</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
