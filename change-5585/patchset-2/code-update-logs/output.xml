<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170807 03:24:27.969" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/code_update/update_bmc.robot" id="s1" name="Update Bmc">
<test id="s1-t1" name="Initiate Code Update BMC">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${LAST_KNOWN_GOOD_VERSION}' != '${EMPTY}'</arg>
<arg>Run Keyword And Return Status</arg>
<arg>Validate BMC Version</arg>
<arg>${LAST_KNOWN_GOOD_VERSION}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<msg timestamp="20170807 03:24:28.862" level="INFO">${status} = None</msg>
<status status="PASS" endtime="20170807 03:24:28.862" starttime="20170807 03:24:28.862"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>Pass Execution</arg>
<arg>The BMC already has the requested build loaded so no further action will be taken.</arg>
</arguments>
<status status="PASS" endtime="20170807 03:24:28.863" starttime="20170807 03:24:28.863"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${FORCE_UPDATE} == ${0}</arg>
<arg>Prepare BMC For Update</arg>
</arguments>
<kw name="Prepare BMC For Update">
<doc>Prerequisite operation before code update.</doc>
<kw name="Check Boot Count And Time">
<doc>Check for unexpected reboots.</doc>
<kw name="Set BMC Reset Reference Time" library="utils">
<doc>Set current boot time as a reference and increment</doc>
<kw name="Get BMC Boot Time" library="utils">
<doc>Get boot time from /proc/stat.</doc>
<assign>
<var>${cur_btime}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170807 03:24:28.867" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170807 03:24:28.867" starttime="20170807 03:24:28.866"></status>
</kw>
<msg timestamp="20170807 03:24:28.867" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170807 03:24:28.867" starttime="20170807 03:24:28.866"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:24:28.868" starttime="20170807 03:24:28.868"></status>
</kw>
<status status="PASS" endtime="20170807 03:24:28.868" starttime="20170807 03:24:28.867"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170807 03:24:28.869" starttime="20170807 03:24:28.869"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170807 03:24:28.870" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170807 03:24:28.870" starttime="20170807 03:24:28.870"></status>
</kw>
<msg timestamp="20170807 03:24:28.870" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170807 03:24:28.870" starttime="20170807 03:24:28.869"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:24:28.872" starttime="20170807 03:24:28.872"></status>
</kw>
<status status="PASS" endtime="20170807 03:24:28.872" starttime="20170807 03:24:28.871"></status>
</kw>
<status status="PASS" endtime="20170807 03:24:28.872" starttime="20170807 03:24:28.871"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170807 03:24:28.873" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170807 03:24:30.622" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170807 03:24:30.622" starttime="20170807 03:24:28.873"></status>
</kw>
<status status="PASS" endtime="20170807 03:24:30.622" starttime="20170807 03:24:28.865"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>egrep '^btime ' /proc/stat | cut -f 2 -d ' '</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170807 03:24:30.623" level="INFO">Executing command 'egrep '^btime ' /proc/stat | cut -f 2 -d ' ''.</msg>
<msg timestamp="20170807 03:24:30.712" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170807 03:24:30.712" level="INFO">${output} = 1502075661</msg>
<msg timestamp="20170807 03:24:30.712" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170807 03:24:30.712" starttime="20170807 03:24:30.623"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170807 03:24:30.713" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170807 03:24:30.713" starttime="20170807 03:24:30.713"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${btime}</var>
</assign>
<msg timestamp="20170807 03:24:30.714" level="INFO">${btime} = 1502075661</msg>
<status status="PASS" endtime="20170807 03:24:30.714" starttime="20170807 03:24:30.713"></status>
</kw>
<msg timestamp="20170807 03:24:30.714" level="INFO">${cur_btime} = 1502075661</msg>
<status status="PASS" endtime="20170807 03:24:30.714" starttime="20170807 03:24:28.865"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_TIME} == ${0} and ${BOOT_COUNT} == ${0}</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>ELSE IF</arg>
<arg>${cur_btime} &gt; ${BOOT_TIME}</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_COUNT}</arg>
<arg>${BOOT_COUNT + 1}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
</arguments>
<msg timestamp="20170807 03:24:30.716" level="INFO">${BOOT_TIME} = 1502075661</msg>
<status status="PASS" endtime="20170807 03:24:30.716" starttime="20170807 03:24:30.715"></status>
</kw>
<status status="PASS" endtime="20170807 03:24:30.716" starttime="20170807 03:24:30.714"></status>
</kw>
<status status="PASS" endtime="20170807 03:24:30.716" starttime="20170807 03:24:28.864"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Count: ${BOOT_COUNT}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:24:30.717" starttime="20170807 03:24:30.716"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Time: ${BOOT_TIME}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:24:30.717" starttime="20170807 03:24:30.717"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_COUNT} &gt; ${MAX_BOOT_COUNT}</arg>
<arg>Log</arg>
<arg>Phantom Reboot!!! Unexpected reboot detected</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20170807 03:24:30.718" starttime="20170807 03:24:30.717"></status>
</kw>
<status status="PASS" endtime="20170807 03:24:30.718" starttime="20170807 03:24:28.864"></status>
</kw>
<kw name="Prune Journal Log" library="utils">
<doc>Prune archived journal logs.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170807 03:24:30.722" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170807 03:24:30.722" starttime="20170807 03:24:30.722"></status>
</kw>
<msg timestamp="20170807 03:24:30.723" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170807 03:24:30.723" starttime="20170807 03:24:30.722"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:24:30.724" starttime="20170807 03:24:30.723"></status>
</kw>
<status status="PASS" endtime="20170807 03:24:30.724" starttime="20170807 03:24:30.723"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170807 03:24:30.725" starttime="20170807 03:24:30.724"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170807 03:24:30.726" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170807 03:24:30.726" starttime="20170807 03:24:30.725"></status>
</kw>
<msg timestamp="20170807 03:24:30.726" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170807 03:24:30.726" starttime="20170807 03:24:30.725"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:24:30.728" starttime="20170807 03:24:30.727"></status>
</kw>
<status status="PASS" endtime="20170807 03:24:30.728" starttime="20170807 03:24:30.727"></status>
</kw>
<status status="PASS" endtime="20170807 03:24:30.728" starttime="20170807 03:24:30.726"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170807 03:24:30.728" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170807 03:24:32.567" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170807 03:24:32.567" starttime="20170807 03:24:30.728"></status>
</kw>
<status status="PASS" endtime="20170807 03:24:32.567" starttime="20170807 03:24:30.719"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>journalctl --vacuum-size=${vacuum_size}</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170807 03:24:32.568" level="INFO">Executing command 'journalctl --vacuum-size=1M'.</msg>
<msg timestamp="20170807 03:24:32.655" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170807 03:24:32.655" level="INFO">${output} = </msg>
<msg timestamp="20170807 03:24:32.655" level="INFO">${stderr} = Vacuuming done, freed 0B of archived journals from /run/log/journal/cc6e1404d87444e8a089dfdb00a18f7d.</msg>
<msg timestamp="20170807 03:24:32.655" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20170807 03:24:32.655" starttime="20170807 03:24:32.567"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${stderr}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:24:32.656" starttime="20170807 03:24:32.655"></status>
</kw>
<status status="PASS" endtime="20170807 03:24:32.656" starttime="20170807 03:24:30.718"></status>
</kw>
<kw name="Power Off Request" library="state_manager">
<doc>Select appropriate poweroff keyword.</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${OBMC_STATES_VERSION}' == '${0}'</arg>
<arg>Initiate Power Off</arg>
<arg>ELSE</arg>
<arg>Initiate Host PowerOff</arg>
</arguments>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170807 03:24:32.658" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status status="PASS" endtime="20170807 03:24:32.658" starttime="20170807 03:24:32.658"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170807 03:24:32.660" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" endtime="20170807 03:24:32.660" starttime="20170807 03:24:32.659"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170807 03:24:32.662" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 03:24:32.663" starttime="20170807 03:24:32.662"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 03:24:32.664" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 03:24:32.664" starttime="20170807 03:24:32.664"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170807 03:24:32.665" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 03:24:32.665" starttime="20170807 03:24:32.664"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170807 03:24:32.665" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 03:24:32.665" starttime="20170807 03:24:32.665"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170807 03:24:32.894" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 03:24:32.894" starttime="20170807 03:24:32.666"></status>
</kw>
<msg timestamp="20170807 03:24:32.895" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 03:24:32.895" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 03:24:32.895" starttime="20170807 03:24:32.666"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170807 03:24:32.895" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 03:24:32.895" starttime="20170807 03:24:32.895"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 03:24:32.896" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 03:24:32.896" starttime="20170807 03:24:32.896"></status>
</kw>
<status status="PASS" endtime="20170807 03:24:32.896" starttime="20170807 03:24:32.662"></status>
</kw>
<status status="PASS" endtime="20170807 03:24:32.896" starttime="20170807 03:24:32.661"></status>
</kw>
<status status="PASS" endtime="20170807 03:24:32.897" starttime="20170807 03:24:32.661"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170807 03:24:32.897" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" endtime="20170807 03:24:32.897" starttime="20170807 03:24:32.897"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 03:24:32.898" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 03:24:32.898" starttime="20170807 03:24:32.897"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:24:32.898" starttime="20170807 03:24:32.898"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170807 03:24:32.900" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type...</msg>
<status status="PASS" endtime="20170807 03:24:32.900" starttime="20170807 03:24:32.899"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170807 03:24:32.901" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170807 03:24:32.902" starttime="20170807 03:24:32.901"></status>
</kw>
<status status="PASS" endtime="20170807 03:24:32.902" starttime="20170807 03:24:32.900"></status>
</kw>
<status status="PASS" endtime="20170807 03:24:32.902" starttime="20170807 03:24:32.899"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170807 03:24:33.139" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170807 03:24:33.139" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 03:24:33.139" starttime="20170807 03:24:32.902"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170807 03:24:33.140" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 03:24:33.140" starttime="20170807 03:24:33.140"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170807 03:24:33.141" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 03:24:33.141" starttime="20170807 03:24:33.141"></status>
</kw>
<status status="PASS" endtime="20170807 03:24:33.142" starttime="20170807 03:24:33.141"></status>
</kw>
<status status="PASS" endtime="20170807 03:24:33.142" starttime="20170807 03:24:33.139"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170807 03:24:33.142" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 03:24:33.142" starttime="20170807 03:24:33.142"></status>
</kw>
<msg timestamp="20170807 03:24:33.142" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 03:24:33.142" starttime="20170807 03:24:32.660"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 03:24:33.143" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 03:24:33.143" starttime="20170807 03:24:33.143"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170807 03:24:33.144" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170807 03:24:33.144" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170807 03:24:33.144" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170807 03:24:33.144" starttime="20170807 03:24:33.143"></status>
</kw>
<status status="PASS" endtime="20170807 03:24:33.144" starttime="20170807 03:24:32.659"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" endtime="20170807 03:24:33.146" starttime="20170807 03:24:33.146"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170807 03:24:33.154" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 03:24:33.154" starttime="20170807 03:24:33.153"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 03:24:33.155" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 03:24:33.155" starttime="20170807 03:24:33.155"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170807 03:24:33.156" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 03:24:33.156" starttime="20170807 03:24:33.156"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170807 03:24:33.157" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 03:24:33.157" starttime="20170807 03:24:33.156"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170807 03:24:35.049" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 03:24:35.049" starttime="20170807 03:24:33.157"></status>
</kw>
<msg timestamp="20170807 03:24:35.049" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 03:24:35.049" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 03:24:35.049" starttime="20170807 03:24:33.157"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170807 03:24:35.050" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 03:24:35.050" starttime="20170807 03:24:35.050"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 03:24:35.051" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 03:24:35.051" starttime="20170807 03:24:35.051"></status>
</kw>
<status status="PASS" endtime="20170807 03:24:35.051" starttime="20170807 03:24:33.152"></status>
</kw>
<status status="PASS" endtime="20170807 03:24:35.051" starttime="20170807 03:24:33.151"></status>
</kw>
<status status="PASS" endtime="20170807 03:24:35.051" starttime="20170807 03:24:33.150"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170807 03:24:35.052" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170807 03:24:35.052" starttime="20170807 03:24:35.052"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:24:35.053" starttime="20170807 03:24:35.052"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170807 03:24:38.717" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170807 03:24:38.717" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 03:24:38.717" starttime="20170807 03:24:35.053"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:24:38.718" starttime="20170807 03:24:38.718"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170807 03:24:38.718" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 03:24:38.719" starttime="20170807 03:24:38.718"></status>
</kw>
<msg timestamp="20170807 03:24:38.719" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 03:24:38.719" starttime="20170807 03:24:33.149"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 03:24:38.719" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 03:24:38.719" starttime="20170807 03:24:38.719"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170807 03:24:38.720" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170807 03:24:38.720" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170807 03:24:38.720" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status status="PASS" endtime="20170807 03:24:38.720" starttime="20170807 03:24:38.720"></status>
</kw>
<msg timestamp="20170807 03:24:38.721" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170807 03:24:38.721" starttime="20170807 03:24:33.148"></status>
</kw>
<msg timestamp="20170807 03:24:38.721" level="INFO">${power_state} = Off</msg>
<status status="PASS" endtime="20170807 03:24:38.721" starttime="20170807 03:24:33.148"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:24:38.722" starttime="20170807 03:24:38.721"></status>
</kw>
<status status="PASS" endtime="20170807 03:24:38.722" starttime="20170807 03:24:33.147"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170807 03:24:38.726" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 03:24:38.727" starttime="20170807 03:24:38.726"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 03:24:38.727" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 03:24:38.727" starttime="20170807 03:24:38.727"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170807 03:24:38.728" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 03:24:38.728" starttime="20170807 03:24:38.728"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170807 03:24:38.729" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 03:24:38.729" starttime="20170807 03:24:38.728"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170807 03:24:39.346" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 03:24:39.346" starttime="20170807 03:24:38.729"></status>
</kw>
<msg timestamp="20170807 03:24:39.346" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 03:24:39.346" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 03:24:39.346" starttime="20170807 03:24:38.729"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170807 03:24:39.347" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 03:24:39.347" starttime="20170807 03:24:39.347"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 03:24:39.348" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 03:24:39.348" starttime="20170807 03:24:39.348"></status>
</kw>
<status status="PASS" endtime="20170807 03:24:39.348" starttime="20170807 03:24:38.725"></status>
</kw>
<status status="PASS" endtime="20170807 03:24:39.348" starttime="20170807 03:24:38.724"></status>
</kw>
<status status="PASS" endtime="20170807 03:24:39.348" starttime="20170807 03:24:38.724"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170807 03:24:39.349" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170807 03:24:39.349" starttime="20170807 03:24:39.349"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:24:39.350" starttime="20170807 03:24:39.349"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170807 03:24:39.551" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170807 03:24:39.551" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 03:24:39.551" starttime="20170807 03:24:39.350"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:24:39.552" starttime="20170807 03:24:39.552"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170807 03:24:39.552" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 03:24:39.553" starttime="20170807 03:24:39.552"></status>
</kw>
<msg timestamp="20170807 03:24:39.553" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 03:24:39.553" starttime="20170807 03:24:38.723"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 03:24:39.553" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 03:24:39.553" starttime="20170807 03:24:39.553"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170807 03:24:39.554" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170807 03:24:39.554" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170807 03:24:39.554" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170807 03:24:39.554" starttime="20170807 03:24:39.554"></status>
</kw>
<msg timestamp="20170807 03:24:39.555" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170807 03:24:39.555" starttime="20170807 03:24:38.722"></status>
</kw>
<msg timestamp="20170807 03:24:39.555" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170807 03:24:39.555" starttime="20170807 03:24:38.722"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:24:39.555" starttime="20170807 03:24:39.555"></status>
</kw>
<status status="PASS" endtime="20170807 03:24:39.556" starttime="20170807 03:24:33.147"></status>
</kw>
<status status="PASS" endtime="20170807 03:24:39.556" starttime="20170807 03:24:33.146"></status>
</kw>
<status status="PASS" endtime="20170807 03:24:39.556" starttime="20170807 03:24:32.657"></status>
</kw>
<status status="PASS" endtime="20170807 03:24:39.556" starttime="20170807 03:24:32.657"></status>
</kw>
<status status="PASS" endtime="20170807 03:24:39.556" starttime="20170807 03:24:32.656"></status>
</kw>
<kw name="Set Policy Setting" library="code_update_utils">
<doc>Set the given test policy</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20170807 03:24:39.557" level="INFO">${valueDict} = {u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170807 03:24:39.557" starttime="20170807 03:24:39.557"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170807 03:24:39.558" level="INFO">${base_uri} = /org/openbmc/settings/host0</msg>
<status status="PASS" endtime="20170807 03:24:39.558" starttime="20170807 03:24:39.558"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170807 03:24:39.561" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 03:24:39.562" starttime="20170807 03:24:39.561"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 03:24:39.562" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 03:24:39.562" starttime="20170807 03:24:39.562"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170807 03:24:39.563" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 03:24:39.563" starttime="20170807 03:24:39.563"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170807 03:24:39.564" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 03:24:39.564" starttime="20170807 03:24:39.563"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170807 03:24:39.905" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 03:24:39.905" starttime="20170807 03:24:39.565"></status>
</kw>
<msg timestamp="20170807 03:24:39.905" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 03:24:39.905" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 03:24:39.905" starttime="20170807 03:24:39.564"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170807 03:24:39.906" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 03:24:39.906" starttime="20170807 03:24:39.905"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 03:24:39.907" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 03:24:39.907" starttime="20170807 03:24:39.906"></status>
</kw>
<status status="PASS" endtime="20170807 03:24:39.907" starttime="20170807 03:24:39.560"></status>
</kw>
<status status="PASS" endtime="20170807 03:24:39.907" starttime="20170807 03:24:39.560"></status>
</kw>
<status status="PASS" endtime="20170807 03:24:39.907" starttime="20170807 03:24:39.559"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170807 03:24:39.908" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170807 03:24:39.908" starttime="20170807 03:24:39.907"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 03:24:39.908" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 03:24:39.908" starttime="20170807 03:24:39.908"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:24:39.909" starttime="20170807 03:24:39.909"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170807 03:24:39.910" level="INFO">${msg} = URI:https://9.3.86.161/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': u'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170807 03:24:39.910" starttime="20170807 03:24:39.910"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170807 03:24:39.911" level="INFO">URI:https://9.3.86.161/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': u'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170807 03:24:39.912" starttime="20170807 03:24:39.911"></status>
</kw>
<status status="PASS" endtime="20170807 03:24:39.912" starttime="20170807 03:24:39.911"></status>
</kw>
<status status="PASS" endtime="20170807 03:24:39.912" starttime="20170807 03:24:39.909"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170807 03:24:40.095" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, data={"data": "RESTORE_LAST_STATE"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170807 03:24:40.095" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 03:24:40.095" starttime="20170807 03:24:39.912"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170807 03:24:40.096" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 03:24:40.096" starttime="20170807 03:24:40.096"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170807 03:24:40.097" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 03:24:40.097" starttime="20170807 03:24:40.097"></status>
</kw>
<status status="PASS" endtime="20170807 03:24:40.098" starttime="20170807 03:24:40.097"></status>
</kw>
<status status="PASS" endtime="20170807 03:24:40.098" starttime="20170807 03:24:40.095"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170807 03:24:40.098" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 03:24:40.099" starttime="20170807 03:24:40.098"></status>
</kw>
<msg timestamp="20170807 03:24:40.099" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 03:24:40.099" starttime="20170807 03:24:39.558"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 03:24:40.099" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 03:24:40.099" starttime="20170807 03:24:40.099"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170807 03:24:40.100" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170807 03:24:40.100" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170807 03:24:40.100" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170807 03:24:40.100" starttime="20170807 03:24:40.100"></status>
</kw>
<status status="PASS" endtime="20170807 03:24:40.100" starttime="20170807 03:24:39.557"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170807 03:24:40.106" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 03:24:40.107" starttime="20170807 03:24:40.106"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 03:24:40.108" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 03:24:40.108" starttime="20170807 03:24:40.107"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170807 03:24:40.108" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 03:24:40.109" starttime="20170807 03:24:40.108"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170807 03:24:40.109" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 03:24:40.109" starttime="20170807 03:24:40.109"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170807 03:24:40.451" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 03:24:40.451" starttime="20170807 03:24:40.110"></status>
</kw>
<msg timestamp="20170807 03:24:40.451" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 03:24:40.451" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 03:24:40.451" starttime="20170807 03:24:40.109"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170807 03:24:40.452" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 03:24:40.452" starttime="20170807 03:24:40.451"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 03:24:40.452" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 03:24:40.453" starttime="20170807 03:24:40.452"></status>
</kw>
<status status="PASS" endtime="20170807 03:24:40.453" starttime="20170807 03:24:40.106"></status>
</kw>
<status status="PASS" endtime="20170807 03:24:40.453" starttime="20170807 03:24:40.105"></status>
</kw>
<status status="PASS" endtime="20170807 03:24:40.453" starttime="20170807 03:24:40.102"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170807 03:24:40.453" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170807 03:24:40.453" starttime="20170807 03:24:40.453"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:24:40.454" starttime="20170807 03:24:40.454"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170807 03:24:40.567" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, headers=None json=None</msg>
<msg timestamp="20170807 03:24:40.568" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 03:24:40.568" starttime="20170807 03:24:40.454"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:24:40.568" starttime="20170807 03:24:40.568"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170807 03:24:40.569" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 03:24:40.569" starttime="20170807 03:24:40.569"></status>
</kw>
<msg timestamp="20170807 03:24:40.569" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 03:24:40.569" starttime="20170807 03:24:40.101"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 03:24:40.570" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 03:24:40.570" starttime="20170807 03:24:40.569"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170807 03:24:40.571" level="INFO">To JSON using : content={
  "data": "RESTORE_LAST_STATE", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170807 03:24:40.571" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170807 03:24:40.571" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170807 03:24:40.571" starttime="20170807 03:24:40.570"></status>
</kw>
<msg timestamp="20170807 03:24:40.571" level="INFO">${currentPolicy} = RESTORE_LAST_STATE</msg>
<status status="PASS" endtime="20170807 03:24:40.571" starttime="20170807 03:24:40.101"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${currentPolicy}</arg>
<arg>${policy}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:24:40.572" starttime="20170807 03:24:40.571"></status>
</kw>
<status status="PASS" endtime="20170807 03:24:40.572" starttime="20170807 03:24:39.556"></status>
</kw>
<kw name="Prepare For Update" library="code_update_utils">
<doc>Switch to update mode in progress. This method calls</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170807 03:24:40.573" level="INFO">${data} = {u'data': []}</msg>
<status status="PASS" endtime="20170807 03:24:40.573" starttime="20170807 03:24:40.572"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${BMC_PREP_METHOD}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170807 03:24:40.576" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 03:24:40.576" starttime="20170807 03:24:40.576"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 03:24:40.577" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 03:24:40.577" starttime="20170807 03:24:40.577"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170807 03:24:40.578" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 03:24:40.578" starttime="20170807 03:24:40.577"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170807 03:24:40.578" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 03:24:40.578" starttime="20170807 03:24:40.578"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170807 03:24:40.759" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 03:24:40.759" starttime="20170807 03:24:40.579"></status>
</kw>
<msg timestamp="20170807 03:24:40.759" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 03:24:40.759" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 03:24:40.759" starttime="20170807 03:24:40.579"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170807 03:24:40.760" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 03:24:40.760" starttime="20170807 03:24:40.759"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 03:24:40.761" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 03:24:40.761" starttime="20170807 03:24:40.760"></status>
</kw>
<status status="PASS" endtime="20170807 03:24:40.761" starttime="20170807 03:24:40.575"></status>
</kw>
<status status="PASS" endtime="20170807 03:24:40.761" starttime="20170807 03:24:40.574"></status>
</kw>
<status status="PASS" endtime="20170807 03:24:40.761" starttime="20170807 03:24:40.574"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170807 03:24:40.762" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc/action/PrepareForUpdate</msg>
<status status="PASS" endtime="20170807 03:24:40.762" starttime="20170807 03:24:40.761"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 03:24:40.762" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 03:24:40.762" starttime="20170807 03:24:40.762"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:24:40.763" starttime="20170807 03:24:40.763"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:24:40.763" starttime="20170807 03:24:40.763"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170807 03:24:41.229" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc/action/PrepareForUpdate, data={"data": []}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20170807 03:24:41.229" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 03:24:41.229" starttime="20170807 03:24:40.764"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:24:41.229" starttime="20170807 03:24:41.229"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170807 03:24:41.230" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 03:24:41.230" starttime="20170807 03:24:41.230"></status>
</kw>
<msg timestamp="20170807 03:24:41.230" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 03:24:41.230" starttime="20170807 03:24:40.573"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 03:24:41.231" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 03:24:41.231" starttime="20170807 03:24:41.231"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10s</arg>
</arguments>
<msg timestamp="20170807 03:24:51.232" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20170807 03:24:51.232" starttime="20170807 03:24:41.231"></status>
</kw>
<status status="PASS" endtime="20170807 03:24:51.232" starttime="20170807 03:24:40.572"></status>
</kw>
<kw name="Check If BMC is Up" library="utils">
<doc>Wait for Host to be online. Checks every X seconds</doc>
<arguments>
<arg>20 min</arg>
<arg>10 sec</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${max_timeout}</arg>
<arg>${interval}</arg>
<arg>Verify Ping and REST Authentication</arg>
</arguments>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170807 03:24:51.235" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170807 03:24:51.235" starttime="20170807 03:24:51.235"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170807 03:24:51.241" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170807 03:24:54.277" level="INFO">${RC} = 0</msg>
<msg timestamp="20170807 03:24:54.277" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=3.37 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=24.8 ms
64 bytes from 9.3.86.161: icmp_seq=...</msg>
<status status="PASS" endtime="20170807 03:24:54.277" starttime="20170807 03:24:51.236"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170807 03:24:54.280" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=3.37 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=24.8 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=1.66 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=26.5 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3005ms
rtt min/avg/max/mdev = 1.662/14.120/26.572/11.633 ms</msg>
<status status="PASS" endtime="20170807 03:24:54.280" starttime="20170807 03:24:54.279"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:24:54.281" starttime="20170807 03:24:54.280"></status>
</kw>
<status status="PASS" endtime="20170807 03:24:54.281" starttime="20170807 03:24:51.234"></status>
</kw>
<msg timestamp="20170807 03:24:54.281" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170807 03:24:54.281" starttime="20170807 03:24:51.234"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170807 03:24:54.282" starttime="20170807 03:24:54.281"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170807 03:24:54.285" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 03:24:54.286" starttime="20170807 03:24:54.284"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 03:24:54.286" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 03:24:54.286" starttime="20170807 03:24:54.286"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170807 03:24:54.287" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 03:24:54.287" starttime="20170807 03:24:54.287"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170807 03:24:54.288" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 03:24:54.288" starttime="20170807 03:24:54.287"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170807 03:24:54.833" level="FAIL">ConnectionError: ('Connection aborted.', error(104, 'Connection reset by peer'))</msg>
<status status="FAIL" endtime="20170807 03:24:54.833" starttime="20170807 03:24:54.289"></status>
</kw>
<msg timestamp="20170807 03:24:54.833" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170807 03:24:54.833" level="INFO">${resp} = ConnectionError: ('Connection aborted.', error(104, 'Connection reset by peer'))</msg>
<status status="PASS" endtime="20170807 03:24:54.833" starttime="20170807 03:24:54.288"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170807 03:24:54.834" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170807 03:24:54.834" level="FAIL">ConnectionError: ('Connection aborted.', error(104, 'Connection reset by peer')): FAIL != PASS</msg>
<status status="FAIL" endtime="20170807 03:24:54.834" starttime="20170807 03:24:54.834"></status>
</kw>
<status status="FAIL" endtime="20170807 03:24:54.835" starttime="20170807 03:24:54.284"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170807 03:25:14.836" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 03:25:14.837" starttime="20170807 03:25:14.836"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 03:25:14.838" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 03:25:14.838" starttime="20170807 03:25:14.837"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170807 03:25:14.838" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 03:25:14.838" starttime="20170807 03:25:14.838"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170807 03:25:14.839" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 03:25:14.839" starttime="20170807 03:25:14.839"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170807 03:25:34.862" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff92500910&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=20.0)')': /login</msg>
<msg timestamp="20170807 03:25:55.084" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff92500390&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=20.0)')': /login</msg>
<msg timestamp="20170807 03:26:22.148" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="FAIL" endtime="20170807 03:26:22.149" starttime="20170807 03:25:14.840"></status>
</kw>
<msg timestamp="20170807 03:26:22.149" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170807 03:26:22.149" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="PASS" endtime="20170807 03:26:22.149" starttime="20170807 03:25:14.839"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170807 03:26:22.150" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170807 03:26:22.150" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170807 03:26:22.150" starttime="20170807 03:26:22.150"></status>
</kw>
<status status="FAIL" endtime="20170807 03:26:22.151" starttime="20170807 03:25:14.835"></status>
</kw>
<msg timestamp="20170807 03:26:22.151" level="FAIL">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170807 03:26:22.151" starttime="20170807 03:24:54.283"></status>
</kw>
<status status="FAIL" endtime="20170807 03:26:22.151" starttime="20170807 03:24:54.283"></status>
</kw>
<msg timestamp="20170807 03:26:22.151" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20170807 03:26:22.151" starttime="20170807 03:24:54.282"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20170807 03:26:22.153" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20170807 03:26:22.153" starttime="20170807 03:26:22.152"></status>
</kw>
<status status="FAIL" endtime="20170807 03:26:22.153" starttime="20170807 03:26:22.152"></status>
</kw>
<status status="FAIL" endtime="20170807 03:26:22.153" starttime="20170807 03:24:51.234"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170807 03:26:32.156" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170807 03:26:32.156" starttime="20170807 03:26:32.156"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170807 03:26:32.161" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170807 03:26:35.163" level="INFO">${RC} = 0</msg>
<msg timestamp="20170807 03:26:35.163" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.839 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.614 ms
64 bytes from 9.3.86.161: icmp_se...</msg>
<status status="PASS" endtime="20170807 03:26:35.163" starttime="20170807 03:26:32.156"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170807 03:26:35.167" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.839 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.614 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.597 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.603 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2998ms
rtt min/avg/max/mdev = 0.597/0.663/0.839/0.103 ms</msg>
<status status="PASS" endtime="20170807 03:26:35.167" starttime="20170807 03:26:35.166"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:26:35.168" starttime="20170807 03:26:35.168"></status>
</kw>
<status status="PASS" endtime="20170807 03:26:35.168" starttime="20170807 03:26:32.155"></status>
</kw>
<msg timestamp="20170807 03:26:35.168" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170807 03:26:35.168" starttime="20170807 03:26:32.155"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170807 03:26:35.169" starttime="20170807 03:26:35.169"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170807 03:26:35.173" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 03:26:35.174" starttime="20170807 03:26:35.172"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 03:26:35.174" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 03:26:35.174" starttime="20170807 03:26:35.174"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170807 03:26:35.175" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 03:26:35.175" starttime="20170807 03:26:35.175"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170807 03:26:35.176" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 03:26:35.176" starttime="20170807 03:26:35.175"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170807 03:26:55.202" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="FAIL" endtime="20170807 03:26:55.202" starttime="20170807 03:26:35.177"></status>
</kw>
<msg timestamp="20170807 03:26:55.203" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170807 03:26:55.203" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="PASS" endtime="20170807 03:26:55.203" starttime="20170807 03:26:35.176"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170807 03:26:55.204" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170807 03:26:55.204" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170807 03:26:55.204" starttime="20170807 03:26:55.203"></status>
</kw>
<status status="FAIL" endtime="20170807 03:26:55.204" starttime="20170807 03:26:35.172"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170807 03:27:15.207" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 03:27:15.208" starttime="20170807 03:27:15.206"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 03:27:15.208" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 03:27:15.208" starttime="20170807 03:27:15.208"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170807 03:27:15.209" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 03:27:15.209" starttime="20170807 03:27:15.209"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170807 03:27:15.210" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 03:27:15.210" starttime="20170807 03:27:15.209"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170807 03:27:15.402" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 03:27:15.402" starttime="20170807 03:27:15.211"></status>
</kw>
<msg timestamp="20170807 03:27:15.403" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 03:27:15.403" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 03:27:15.403" starttime="20170807 03:27:15.210"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170807 03:27:15.404" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 03:27:15.404" starttime="20170807 03:27:15.403"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 03:27:15.404" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 03:27:15.404" starttime="20170807 03:27:15.404"></status>
</kw>
<status status="PASS" endtime="20170807 03:27:15.405" starttime="20170807 03:27:15.205"></status>
</kw>
<status status="PASS" endtime="20170807 03:27:15.405" starttime="20170807 03:26:35.171"></status>
</kw>
<status status="PASS" endtime="20170807 03:27:15.405" starttime="20170807 03:26:35.170"></status>
</kw>
<msg timestamp="20170807 03:27:15.405" level="INFO">${l_rest} = True</msg>
<status status="PASS" endtime="20170807 03:27:15.405" starttime="20170807 03:26:35.170"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<status status="PASS" endtime="20170807 03:27:15.406" starttime="20170807 03:27:15.405"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170807 03:27:15.407" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170807 03:27:15.407" starttime="20170807 03:27:15.407"></status>
</kw>
<msg timestamp="20170807 03:27:15.407" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170807 03:27:15.407" starttime="20170807 03:27:15.406"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:27:15.409" starttime="20170807 03:27:15.408"></status>
</kw>
<status status="PASS" endtime="20170807 03:27:15.409" starttime="20170807 03:27:15.408"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170807 03:27:15.409" starttime="20170807 03:27:15.409"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170807 03:27:15.410" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170807 03:27:15.411" starttime="20170807 03:27:15.410"></status>
</kw>
<msg timestamp="20170807 03:27:15.411" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170807 03:27:15.411" starttime="20170807 03:27:15.410"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:27:15.413" starttime="20170807 03:27:15.412"></status>
</kw>
<status status="PASS" endtime="20170807 03:27:15.413" starttime="20170807 03:27:15.412"></status>
</kw>
<status status="PASS" endtime="20170807 03:27:15.413" starttime="20170807 03:27:15.411"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170807 03:27:15.414" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170807 03:27:17.292" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170807 03:27:17.292" starttime="20170807 03:27:15.413"></status>
</kw>
<status status="PASS" endtime="20170807 03:27:17.293" starttime="20170807 03:27:15.406"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>hostname</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${system}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170807 03:27:17.293" level="INFO">Executing command 'hostname'.</msg>
<msg timestamp="20170807 03:27:17.401" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170807 03:27:17.401" level="INFO">${system} = witherspoon</msg>
<msg timestamp="20170807 03:27:17.401" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170807 03:27:17.401" starttime="20170807 03:27:17.293"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170807 03:27:17.402" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170807 03:27:17.402" starttime="20170807 03:27:17.402"></status>
</kw>
<status status="PASS" endtime="20170807 03:27:17.402" starttime="20170807 03:26:32.154"></status>
</kw>
<status status="PASS" endtime="20170807 03:27:17.402" starttime="20170807 03:24:51.233"></status>
</kw>
<status status="PASS" endtime="20170807 03:27:17.402" starttime="20170807 03:24:51.233"></status>
</kw>
<kw name="Check Boot Count And Time">
<doc>Check for unexpected reboots.</doc>
<kw name="Set BMC Reset Reference Time" library="utils">
<doc>Set current boot time as a reference and increment</doc>
<kw name="Get BMC Boot Time" library="utils">
<doc>Get boot time from /proc/stat.</doc>
<assign>
<var>${cur_btime}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170807 03:27:17.405" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170807 03:27:17.405" starttime="20170807 03:27:17.405"></status>
</kw>
<msg timestamp="20170807 03:27:17.405" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170807 03:27:17.405" starttime="20170807 03:27:17.404"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:27:17.407" starttime="20170807 03:27:17.406"></status>
</kw>
<status status="PASS" endtime="20170807 03:27:17.407" starttime="20170807 03:27:17.406"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170807 03:27:17.407" starttime="20170807 03:27:17.407"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170807 03:27:17.408" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170807 03:27:17.409" starttime="20170807 03:27:17.408"></status>
</kw>
<msg timestamp="20170807 03:27:17.409" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170807 03:27:17.409" starttime="20170807 03:27:17.408"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:27:17.410" starttime="20170807 03:27:17.410"></status>
</kw>
<status status="PASS" endtime="20170807 03:27:17.411" starttime="20170807 03:27:17.410"></status>
</kw>
<status status="PASS" endtime="20170807 03:27:17.411" starttime="20170807 03:27:17.409"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170807 03:27:17.411" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170807 03:27:19.507" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170807 03:27:19.507" starttime="20170807 03:27:17.411"></status>
</kw>
<status status="PASS" endtime="20170807 03:27:19.507" starttime="20170807 03:27:17.404"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>egrep '^btime ' /proc/stat | cut -f 2 -d ' '</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170807 03:27:19.508" level="INFO">Executing command 'egrep '^btime ' /proc/stat | cut -f 2 -d ' ''.</msg>
<msg timestamp="20170807 03:27:19.585" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170807 03:27:19.585" level="INFO">${output} = 1502076324</msg>
<msg timestamp="20170807 03:27:19.585" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170807 03:27:19.585" starttime="20170807 03:27:19.508"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170807 03:27:19.586" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170807 03:27:19.586" starttime="20170807 03:27:19.586"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${btime}</var>
</assign>
<msg timestamp="20170807 03:27:19.587" level="INFO">${btime} = 1502076324</msg>
<status status="PASS" endtime="20170807 03:27:19.587" starttime="20170807 03:27:19.586"></status>
</kw>
<msg timestamp="20170807 03:27:19.587" level="INFO">${cur_btime} = 1502076324</msg>
<status status="PASS" endtime="20170807 03:27:19.587" starttime="20170807 03:27:17.403"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_TIME} == ${0} and ${BOOT_COUNT} == ${0}</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>ELSE IF</arg>
<arg>${cur_btime} &gt; ${BOOT_TIME}</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_COUNT}</arg>
<arg>${BOOT_COUNT + 1}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_COUNT}</arg>
<arg>${BOOT_COUNT + 1}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
</arguments>
<msg timestamp="20170807 03:27:19.589" level="INFO">${BOOT_TIME} = 1502076324</msg>
<status status="PASS" endtime="20170807 03:27:19.589" starttime="20170807 03:27:19.589"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${BOOT_COUNT}</arg>
<arg>${BOOT_COUNT + 1}</arg>
</arguments>
<msg timestamp="20170807 03:27:19.591" level="INFO">${BOOT_COUNT} = 1</msg>
<status status="PASS" endtime="20170807 03:27:19.591" starttime="20170807 03:27:19.590"></status>
</kw>
<status status="PASS" endtime="20170807 03:27:19.591" starttime="20170807 03:27:19.588"></status>
</kw>
<status status="PASS" endtime="20170807 03:27:19.591" starttime="20170807 03:27:19.587"></status>
</kw>
<status status="PASS" endtime="20170807 03:27:19.591" starttime="20170807 03:27:17.403"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Count: ${BOOT_COUNT}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:27:19.592" starttime="20170807 03:27:19.591"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Time: ${BOOT_TIME}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:27:19.592" starttime="20170807 03:27:19.592"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_COUNT} &gt; ${MAX_BOOT_COUNT}</arg>
<arg>Log</arg>
<arg>Phantom Reboot!!! Unexpected reboot detected</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20170807 03:27:19.593" starttime="20170807 03:27:19.593"></status>
</kw>
<status status="PASS" endtime="20170807 03:27:19.593" starttime="20170807 03:27:17.402"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Temp BMC URI Check</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Temp BMC URI Check">
<doc>Check for transient "BMC0" interface.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/state/BMC0/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170807 03:27:19.596" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 03:27:19.597" starttime="20170807 03:27:19.596"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 03:27:19.597" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 03:27:19.598" starttime="20170807 03:27:19.597"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170807 03:27:19.598" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 03:27:19.598" starttime="20170807 03:27:19.598"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170807 03:27:19.599" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 03:27:19.599" starttime="20170807 03:27:19.599"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170807 03:27:19.814" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 03:27:19.814" starttime="20170807 03:27:19.600"></status>
</kw>
<msg timestamp="20170807 03:27:19.814" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 03:27:19.814" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 03:27:19.814" starttime="20170807 03:27:19.600"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170807 03:27:19.815" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 03:27:19.815" starttime="20170807 03:27:19.815"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 03:27:19.816" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 03:27:19.816" starttime="20170807 03:27:19.816"></status>
</kw>
<status status="PASS" endtime="20170807 03:27:19.816" starttime="20170807 03:27:19.596"></status>
</kw>
<status status="PASS" endtime="20170807 03:27:19.817" starttime="20170807 03:27:19.595"></status>
</kw>
<status status="PASS" endtime="20170807 03:27:19.817" starttime="20170807 03:27:19.595"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170807 03:27:19.817" level="INFO">${base_uri} = /xyz/openbmc_project/state/BMC0/</msg>
<status status="PASS" endtime="20170807 03:27:19.817" starttime="20170807 03:27:19.817"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:27:19.818" starttime="20170807 03:27:19.818"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170807 03:27:19.862" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/BMC0/, headers=None json=None</msg>
<msg timestamp="20170807 03:27:19.862" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170807 03:27:19.862" starttime="20170807 03:27:19.818"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:27:19.863" starttime="20170807 03:27:19.863"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170807 03:27:19.863" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 03:27:19.864" starttime="20170807 03:27:19.863"></status>
</kw>
<msg timestamp="20170807 03:27:19.864" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170807 03:27:19.864" starttime="20170807 03:27:19.594"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 03:27:19.865" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170807 03:27:19.865" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170807 03:27:19.865" starttime="20170807 03:27:19.864"></status>
</kw>
<status status="FAIL" endtime="20170807 03:27:19.865" starttime="20170807 03:27:19.594"></status>
</kw>
<msg timestamp="20170807 03:27:19.865" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170807 03:27:19.865" starttime="20170807 03:27:19.593"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Wait For BMC Ready</arg>
<arg>ELSE</arg>
<arg>Wait For Temp BMC Ready</arg>
</arguments>
<kw name="Wait For BMC Ready" library="state_manager">
<doc>Check BMC state and wait for BMC Ready.</doc>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>BMC_READY</arg>
<arg>HOST_POWERED_OFF</arg>
</arguments>
<assign>
<var>@{states}</var>
</assign>
<msg timestamp="20170807 03:27:19.867" level="INFO">@{states} = [ BMC_READY | HOST_POWERED_OFF ]</msg>
<status status="PASS" endtime="20170807 03:27:19.867" starttime="20170807 03:27:19.867"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${OBMC_STATES_VERSION}' == '${0}'</arg>
<arg>Wait Until Keyword Succeeds</arg>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Verify BMC State</arg>
<arg>${states}</arg>
<arg>ELSE</arg>
<arg>Wait Until Keyword Succeeds</arg>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is BMC Ready</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is BMC Ready</arg>
</arguments>
<kw name="Is BMC Ready" library="state_manager">
<doc>Check if BMC state is Ready.</doc>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170807 03:27:19.872" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 03:27:19.873" starttime="20170807 03:27:19.872"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 03:27:19.873" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 03:27:19.873" starttime="20170807 03:27:19.873"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170807 03:27:19.874" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 03:27:19.874" starttime="20170807 03:27:19.874"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170807 03:27:19.875" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 03:27:19.875" starttime="20170807 03:27:19.874"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170807 03:27:20.051" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 03:27:20.052" starttime="20170807 03:27:19.876"></status>
</kw>
<msg timestamp="20170807 03:27:20.052" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 03:27:20.052" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 03:27:20.052" starttime="20170807 03:27:19.875"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170807 03:27:20.053" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 03:27:20.053" starttime="20170807 03:27:20.052"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 03:27:20.053" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 03:27:20.053" starttime="20170807 03:27:20.053"></status>
</kw>
<status status="PASS" endtime="20170807 03:27:20.054" starttime="20170807 03:27:19.871"></status>
</kw>
<status status="PASS" endtime="20170807 03:27:20.054" starttime="20170807 03:27:19.871"></status>
</kw>
<status status="PASS" endtime="20170807 03:27:20.054" starttime="20170807 03:27:19.870"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170807 03:27:20.054" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170807 03:27:20.055" starttime="20170807 03:27:20.054"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:27:20.055" starttime="20170807 03:27:20.055"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170807 03:27:20.133" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None json=None</msg>
<msg timestamp="20170807 03:27:20.134" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 03:27:20.134" starttime="20170807 03:27:20.055"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:27:20.134" starttime="20170807 03:27:20.134"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170807 03:27:20.135" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 03:27:20.135" starttime="20170807 03:27:20.135"></status>
</kw>
<msg timestamp="20170807 03:27:20.135" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 03:27:20.135" starttime="20170807 03:27:19.870"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 03:27:20.136" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 03:27:20.136" starttime="20170807 03:27:20.135"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170807 03:27:20.137" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170807 03:27:20.137" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170807 03:27:20.137" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170807 03:27:20.137" starttime="20170807 03:27:20.136"></status>
</kw>
<msg timestamp="20170807 03:27:20.137" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170807 03:27:20.137" starttime="20170807 03:27:19.869"></status>
</kw>
<msg timestamp="20170807 03:27:20.138" level="INFO">${bmc_state} = Ready</msg>
<status status="PASS" endtime="20170807 03:27:20.138" starttime="20170807 03:27:19.869"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${BMC_READY_STATE}</arg>
<arg>${bmc_state}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:27:20.138" starttime="20170807 03:27:20.138"></status>
</kw>
<status status="PASS" endtime="20170807 03:27:20.138" starttime="20170807 03:27:19.868"></status>
</kw>
<status status="PASS" endtime="20170807 03:27:20.138" starttime="20170807 03:27:19.868"></status>
</kw>
<status status="PASS" endtime="20170807 03:27:20.138" starttime="20170807 03:27:19.867"></status>
</kw>
<status status="PASS" endtime="20170807 03:27:20.139" starttime="20170807 03:27:19.866"></status>
</kw>
<status status="PASS" endtime="20170807 03:27:20.139" starttime="20170807 03:27:19.866"></status>
</kw>
<status status="PASS" endtime="20170807 03:27:20.139" starttime="20170807 03:24:28.864"></status>
</kw>
<status status="PASS" endtime="20170807 03:27:20.139" starttime="20170807 03:24:28.863"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Preserve BMC Network Setting</arg>
</arguments>
<kw name="Preserve BMC Network Setting" library="code_update_utils">
<doc>Preserve Network setting</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<assign>
<var>${policy}</var>
</assign>
<msg timestamp="20170807 03:27:20.147" level="INFO">${policy} = 1</msg>
<status status="PASS" endtime="20170807 03:27:20.147" starttime="20170807 03:27:20.146"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20170807 03:27:20.147" level="INFO">${value} = {u'data': 1}</msg>
<status status="PASS" endtime="20170807 03:27:20.147" starttime="20170807 03:27:20.147"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${BMC_UPD_ATTR}</arg>
<arg>preserve_network_settings</arg>
<arg>data=${value}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170807 03:27:20.148" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc</msg>
<status status="PASS" endtime="20170807 03:27:20.149" starttime="20170807 03:27:20.148"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170807 03:27:20.151" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 03:27:20.152" starttime="20170807 03:27:20.151"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 03:27:20.153" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 03:27:20.153" starttime="20170807 03:27:20.152"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170807 03:27:20.154" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 03:27:20.154" starttime="20170807 03:27:20.153"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170807 03:27:20.154" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 03:27:20.154" starttime="20170807 03:27:20.154"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170807 03:27:20.350" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 03:27:20.350" starttime="20170807 03:27:20.155"></status>
</kw>
<msg timestamp="20170807 03:27:20.350" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 03:27:20.350" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 03:27:20.350" starttime="20170807 03:27:20.155"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170807 03:27:20.351" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 03:27:20.351" starttime="20170807 03:27:20.351"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 03:27:20.352" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 03:27:20.352" starttime="20170807 03:27:20.351"></status>
</kw>
<status status="PASS" endtime="20170807 03:27:20.352" starttime="20170807 03:27:20.151"></status>
</kw>
<status status="PASS" endtime="20170807 03:27:20.352" starttime="20170807 03:27:20.150"></status>
</kw>
<status status="PASS" endtime="20170807 03:27:20.352" starttime="20170807 03:27:20.149"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170807 03:27:20.353" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc/attr/preserve_network_settings</msg>
<status status="PASS" endtime="20170807 03:27:20.353" starttime="20170807 03:27:20.353"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 03:27:20.354" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 03:27:20.354" starttime="20170807 03:27:20.353"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:27:20.354" starttime="20170807 03:27:20.354"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170807 03:27:20.356" level="INFO">${msg} = URI:https://9.3.86.161/org/openbmc/control/flash/bmc/attr/preserve_network_settings, method:Put, args:{u'data': {u'data': 1}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170807 03:27:20.356" starttime="20170807 03:27:20.355"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170807 03:27:20.357" level="INFO">URI:https://9.3.86.161/org/openbmc/control/flash/bmc/attr/preserve_network_settings, method:Put, args:{u'data': {u'data': 1}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170807 03:27:20.357" starttime="20170807 03:27:20.357"></status>
</kw>
<status status="PASS" endtime="20170807 03:27:20.357" starttime="20170807 03:27:20.356"></status>
</kw>
<status status="PASS" endtime="20170807 03:27:20.357" starttime="20170807 03:27:20.354"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170807 03:27:20.618" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc/attr/preserve_network_settings, data={"data": 1},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170807 03:27:20.619" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 03:27:20.619" starttime="20170807 03:27:20.358"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170807 03:27:20.620" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 03:27:20.620" starttime="20170807 03:27:20.620"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170807 03:27:20.621" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 03:27:20.621" starttime="20170807 03:27:20.621"></status>
</kw>
<status status="PASS" endtime="20170807 03:27:20.622" starttime="20170807 03:27:20.620"></status>
</kw>
<status status="PASS" endtime="20170807 03:27:20.622" starttime="20170807 03:27:20.619"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170807 03:27:20.622" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 03:27:20.622" starttime="20170807 03:27:20.622"></status>
</kw>
<msg timestamp="20170807 03:27:20.623" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 03:27:20.623" starttime="20170807 03:27:20.149"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 03:27:20.623" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 03:27:20.624" starttime="20170807 03:27:20.623"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170807 03:27:20.624" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170807 03:27:20.624" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170807 03:27:20.624" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170807 03:27:20.624" starttime="20170807 03:27:20.624"></status>
</kw>
<status status="PASS" endtime="20170807 03:27:20.625" starttime="20170807 03:27:20.147"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${BMC_UPD_ATTR}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170807 03:27:20.628" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 03:27:20.629" starttime="20170807 03:27:20.628"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 03:27:20.629" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 03:27:20.629" starttime="20170807 03:27:20.629"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170807 03:27:20.630" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 03:27:20.630" starttime="20170807 03:27:20.630"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170807 03:27:20.631" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 03:27:20.631" starttime="20170807 03:27:20.630"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170807 03:27:20.807" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 03:27:20.808" starttime="20170807 03:27:20.631"></status>
</kw>
<msg timestamp="20170807 03:27:20.808" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 03:27:20.808" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 03:27:20.808" starttime="20170807 03:27:20.631"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170807 03:27:20.809" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 03:27:20.809" starttime="20170807 03:27:20.808"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 03:27:20.809" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 03:27:20.810" starttime="20170807 03:27:20.809"></status>
</kw>
<status status="PASS" endtime="20170807 03:27:20.810" starttime="20170807 03:27:20.627"></status>
</kw>
<status status="PASS" endtime="20170807 03:27:20.810" starttime="20170807 03:27:20.627"></status>
</kw>
<status status="PASS" endtime="20170807 03:27:20.810" starttime="20170807 03:27:20.626"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170807 03:27:20.810" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc</msg>
<status status="PASS" endtime="20170807 03:27:20.810" starttime="20170807 03:27:20.810"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:27:20.811" starttime="20170807 03:27:20.811"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170807 03:27:20.954" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc, headers=None json=None</msg>
<msg timestamp="20170807 03:27:20.954" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 03:27:20.954" starttime="20170807 03:27:20.811"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:27:20.955" starttime="20170807 03:27:20.954"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170807 03:27:20.955" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 03:27:20.955" starttime="20170807 03:27:20.955"></status>
</kw>
<msg timestamp="20170807 03:27:20.956" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 03:27:20.956" starttime="20170807 03:27:20.625"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 03:27:20.956" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 03:27:20.956" starttime="20170807 03:27:20.956"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170807 03:27:20.957" level="INFO">To JSON using : content={
  "data": {
    "auto_apply": 0, 
    "clear_persistent_files": 0, 
    "filename": "", 
    "preserve_network_settings": 1, 
    "restore_application_defaults": 0, 
    "status": "Idle", 
    "update_kernel_and_apps": 0
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170807 03:27:20.957" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170807 03:27:20.957" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Idle', u'update_kernel_and_apps': 0, u'clear_persistent_files': 0, u'auto_apply': 0, u'filename': u'', u'preserve_network_settings': 1,...</msg>
<status status="PASS" endtime="20170807 03:27:20.957" starttime="20170807 03:27:20.957"></status>
</kw>
<msg timestamp="20170807 03:27:20.957" level="INFO">${data} = {u'status': u'Idle', u'update_kernel_and_apps': 0, u'clear_persistent_files': 0, u'auto_apply': 0, u'filename': u'', u'preserve_network_settings': 1, u'restore_application_defaults': 0}</msg>
<status status="PASS" endtime="20170807 03:27:20.957" starttime="20170807 03:27:20.625"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${data['preserve_network_settings']}</arg>
<arg>${1}</arg>
<arg>msg=0 indicates network is not preserved</arg>
</arguments>
<status status="PASS" endtime="20170807 03:27:20.958" starttime="20170807 03:27:20.958"></status>
</kw>
<status status="PASS" endtime="20170807 03:27:20.958" starttime="20170807 03:27:20.146"></status>
</kw>
<status status="PASS" endtime="20170807 03:27:20.958" starttime="20170807 03:27:20.139"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>SCP Tar Image File To BMC \ ${FILE_PATH}</arg>
</arguments>
<kw name="SCP Tar Image File to BMC" library="code_update_utils">
<doc>Copy BMC tar image to BMC.</doc>
<arguments>
<arg>/home/fspcibld/witherspoon-20170807031309.all.tar</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170807 03:27:20.975" starttime="20170807 03:27:20.967"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:27:21.611" starttime="20170807 03:27:20.976"></status>
</kw>
<status status="PASS" endtime="20170807 03:27:21.611" starttime="20170807 03:27:20.975"></status>
</kw>
<status status="PASS" endtime="20170807 03:27:21.612" starttime="20170807 03:27:20.966"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170807 03:27:21.614" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170807 03:27:21.614" starttime="20170807 03:27:21.613"></status>
</kw>
<msg timestamp="20170807 03:27:21.614" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170807 03:27:21.614" starttime="20170807 03:27:21.613"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:27:21.615" starttime="20170807 03:27:21.615"></status>
</kw>
<status status="PASS" endtime="20170807 03:27:21.615" starttime="20170807 03:27:21.614"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170807 03:27:21.616" starttime="20170807 03:27:21.615"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170807 03:27:21.617" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170807 03:27:21.617" starttime="20170807 03:27:21.617"></status>
</kw>
<msg timestamp="20170807 03:27:21.617" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170807 03:27:21.617" starttime="20170807 03:27:21.616"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:27:21.619" starttime="20170807 03:27:21.619"></status>
</kw>
<status status="PASS" endtime="20170807 03:27:21.619" starttime="20170807 03:27:21.618"></status>
</kw>
<status status="PASS" endtime="20170807 03:27:21.619" starttime="20170807 03:27:21.618"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170807 03:27:21.620" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170807 03:27:23.276" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170807 03:27:23.276" starttime="20170807 03:27:21.620"></status>
</kw>
<status status="PASS" endtime="20170807 03:27:23.277" starttime="20170807 03:27:21.612"></status>
</kw>
<kw name="Loop SCP Retry" library="code_update_utils">
<doc>Try transferring the file 4 times.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<kw type="for" name="${index} IN RANGE [ 0 | 4 ]">
<kw type="foritem" name="${index} = 0">
<kw name="Retry SCP" library="code_update_utils">
<doc>Delete the incomplete file and scp file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/tmp/flashimg</arg>
</arguments>
<assign>
<var>${targ_file_path}</var>
</assign>
<msg timestamp="20170807 03:27:23.279" level="INFO">${targ_file_path} = /tmp/flashimg</msg>
<status status="PASS" endtime="20170807 03:27:23.279" starttime="20170807 03:27:23.278"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm -f /tmp/flashimg</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170807 03:27:23.280" level="INFO">Executing command 'rm -f /tmp/flashimg'.</msg>
<msg timestamp="20170807 03:27:23.336" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170807 03:27:23.336" level="INFO">${stdout} = </msg>
<msg timestamp="20170807 03:27:23.337" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170807 03:27:23.337" starttime="20170807 03:27:23.279"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170807 03:27:23.337" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170807 03:27:23.337" starttime="20170807 03:27:23.337"></status>
</kw>
<status status="PASS" endtime="20170807 03:27:23.338" starttime="20170807 03:27:23.279"></status>
</kw>
<kw name="Put File" library="scp">
<doc>Uploads a file to the remote machine from the local machine.</doc>
<arguments>
<arg>${image_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:27:42.136" starttime="20170807 03:27:23.338"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>ls -lh ${targ_file_path}</arg>
</arguments>
<assign>
<var>${file_size}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170807 03:27:42.138" level="INFO">Executing command 'ls -lh /tmp/flashimg'.</msg>
<msg timestamp="20170807 03:27:42.194" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170807 03:27:42.195" level="INFO">${stdout} = -rw-r--r--    1 root     root       36.4M Aug  7 03:27 /tmp/flashimg</msg>
<msg timestamp="20170807 03:27:42.195" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170807 03:27:42.195" starttime="20170807 03:27:42.137"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170807 03:27:42.195" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170807 03:27:42.195" starttime="20170807 03:27:42.195"></status>
</kw>
<msg timestamp="20170807 03:27:42.196" level="INFO">${file_size} = -rw-r--r--    1 root     root       36.4M Aug  7 03:27 /tmp/flashimg</msg>
<status status="PASS" endtime="20170807 03:27:42.196" starttime="20170807 03:27:42.137"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<msg timestamp="20170807 03:27:42.197" level="FAIL">Incomplete file transfer.: '-rw-r--r--    1 root     root       36.4M Aug  7 03:27 /tmp/flashimg' does not contain '32.0M'</msg>
<status status="FAIL" endtime="20170807 03:27:42.197" starttime="20170807 03:27:42.196"></status>
</kw>
<msg timestamp="20170807 03:27:42.197" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170807 03:27:42.197" starttime="20170807 03:27:42.196"></status>
</kw>
<msg timestamp="20170807 03:27:42.197" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170807 03:27:42.197" starttime="20170807 03:27:23.278"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
</arguments>
<status status="PASS" endtime="20170807 03:27:42.198" starttime="20170807 03:27:42.198"></status>
</kw>
<status status="PASS" endtime="20170807 03:27:42.198" starttime="20170807 03:27:23.278"></status>
</kw>
<kw type="foritem" name="${index} = 1">
<kw name="Retry SCP" library="code_update_utils">
<doc>Delete the incomplete file and scp file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/tmp/flashimg</arg>
</arguments>
<assign>
<var>${targ_file_path}</var>
</assign>
<msg timestamp="20170807 03:27:42.199" level="INFO">${targ_file_path} = /tmp/flashimg</msg>
<status status="PASS" endtime="20170807 03:27:42.199" starttime="20170807 03:27:42.199"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm -f /tmp/flashimg</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170807 03:27:42.200" level="INFO">Executing command 'rm -f /tmp/flashimg'.</msg>
<msg timestamp="20170807 03:27:42.337" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170807 03:27:42.337" level="INFO">${stdout} = </msg>
<msg timestamp="20170807 03:27:42.337" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170807 03:27:42.338" starttime="20170807 03:27:42.200"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170807 03:27:42.338" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170807 03:27:42.338" starttime="20170807 03:27:42.338"></status>
</kw>
<status status="PASS" endtime="20170807 03:27:42.339" starttime="20170807 03:27:42.199"></status>
</kw>
<kw name="Put File" library="scp">
<doc>Uploads a file to the remote machine from the local machine.</doc>
<arguments>
<arg>${image_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:28:00.299" starttime="20170807 03:27:42.339"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>ls -lh ${targ_file_path}</arg>
</arguments>
<assign>
<var>${file_size}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170807 03:28:00.301" level="INFO">Executing command 'ls -lh /tmp/flashimg'.</msg>
<msg timestamp="20170807 03:28:00.368" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170807 03:28:00.368" level="INFO">${stdout} = -rw-r--r--    1 root     root       36.4M Aug  7 03:28 /tmp/flashimg</msg>
<msg timestamp="20170807 03:28:00.368" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170807 03:28:00.368" starttime="20170807 03:28:00.301"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170807 03:28:00.369" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170807 03:28:00.369" starttime="20170807 03:28:00.368"></status>
</kw>
<msg timestamp="20170807 03:28:00.369" level="INFO">${file_size} = -rw-r--r--    1 root     root       36.4M Aug  7 03:28 /tmp/flashimg</msg>
<status status="PASS" endtime="20170807 03:28:00.369" starttime="20170807 03:28:00.300"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<msg timestamp="20170807 03:28:00.370" level="FAIL">Incomplete file transfer.: '-rw-r--r--    1 root     root       36.4M Aug  7 03:28 /tmp/flashimg' does not contain '32.0M'</msg>
<status status="FAIL" endtime="20170807 03:28:00.370" starttime="20170807 03:28:00.370"></status>
</kw>
<msg timestamp="20170807 03:28:00.370" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170807 03:28:00.370" starttime="20170807 03:28:00.369"></status>
</kw>
<msg timestamp="20170807 03:28:00.371" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170807 03:28:00.371" starttime="20170807 03:27:42.198"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
</arguments>
<status status="PASS" endtime="20170807 03:28:00.371" starttime="20170807 03:28:00.371"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:00.371" starttime="20170807 03:27:42.198"></status>
</kw>
<kw type="foritem" name="${index} = 2">
<kw name="Retry SCP" library="code_update_utils">
<doc>Delete the incomplete file and scp file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/tmp/flashimg</arg>
</arguments>
<assign>
<var>${targ_file_path}</var>
</assign>
<msg timestamp="20170807 03:28:00.373" level="INFO">${targ_file_path} = /tmp/flashimg</msg>
<status status="PASS" endtime="20170807 03:28:00.373" starttime="20170807 03:28:00.372"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm -f /tmp/flashimg</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170807 03:28:00.374" level="INFO">Executing command 'rm -f /tmp/flashimg'.</msg>
<msg timestamp="20170807 03:28:00.470" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170807 03:28:00.470" level="INFO">${stdout} = </msg>
<msg timestamp="20170807 03:28:00.470" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170807 03:28:00.470" starttime="20170807 03:28:00.373"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170807 03:28:00.471" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170807 03:28:00.471" starttime="20170807 03:28:00.470"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:00.471" starttime="20170807 03:28:00.373"></status>
</kw>
<kw name="Put File" library="scp">
<doc>Uploads a file to the remote machine from the local machine.</doc>
<arguments>
<arg>${image_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:28:17.686" starttime="20170807 03:28:00.471"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>ls -lh ${targ_file_path}</arg>
</arguments>
<assign>
<var>${file_size}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170807 03:28:17.688" level="INFO">Executing command 'ls -lh /tmp/flashimg'.</msg>
<msg timestamp="20170807 03:28:17.744" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170807 03:28:17.744" level="INFO">${stdout} = -rw-r--r--    1 root     root       36.4M Aug  7 03:28 /tmp/flashimg</msg>
<msg timestamp="20170807 03:28:17.744" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170807 03:28:17.744" starttime="20170807 03:28:17.687"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170807 03:28:17.745" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170807 03:28:17.745" starttime="20170807 03:28:17.745"></status>
</kw>
<msg timestamp="20170807 03:28:17.745" level="INFO">${file_size} = -rw-r--r--    1 root     root       36.4M Aug  7 03:28 /tmp/flashimg</msg>
<status status="PASS" endtime="20170807 03:28:17.745" starttime="20170807 03:28:17.686"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<msg timestamp="20170807 03:28:17.746" level="FAIL">Incomplete file transfer.: '-rw-r--r--    1 root     root       36.4M Aug  7 03:28 /tmp/flashimg' does not contain '32.0M'</msg>
<status status="FAIL" endtime="20170807 03:28:17.747" starttime="20170807 03:28:17.746"></status>
</kw>
<msg timestamp="20170807 03:28:17.747" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170807 03:28:17.747" starttime="20170807 03:28:17.746"></status>
</kw>
<msg timestamp="20170807 03:28:17.747" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170807 03:28:17.747" starttime="20170807 03:28:00.372"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
</arguments>
<status status="PASS" endtime="20170807 03:28:17.748" starttime="20170807 03:28:17.747"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:17.748" starttime="20170807 03:28:00.372"></status>
</kw>
<kw type="foritem" name="${index} = 3">
<kw name="Retry SCP" library="code_update_utils">
<doc>Delete the incomplete file and scp file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/tmp/flashimg</arg>
</arguments>
<assign>
<var>${targ_file_path}</var>
</assign>
<msg timestamp="20170807 03:28:17.749" level="INFO">${targ_file_path} = /tmp/flashimg</msg>
<status status="PASS" endtime="20170807 03:28:17.749" starttime="20170807 03:28:17.749"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm -f /tmp/flashimg</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170807 03:28:17.750" level="INFO">Executing command 'rm -f /tmp/flashimg'.</msg>
<msg timestamp="20170807 03:28:17.886" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170807 03:28:17.887" level="INFO">${stdout} = </msg>
<msg timestamp="20170807 03:28:17.887" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170807 03:28:17.887" starttime="20170807 03:28:17.749"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170807 03:28:17.887" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170807 03:28:17.887" starttime="20170807 03:28:17.887"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:17.888" starttime="20170807 03:28:17.749"></status>
</kw>
<kw name="Put File" library="scp">
<doc>Uploads a file to the remote machine from the local machine.</doc>
<arguments>
<arg>${image_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:28:33.835" starttime="20170807 03:28:17.888"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>ls -lh ${targ_file_path}</arg>
</arguments>
<assign>
<var>${file_size}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170807 03:28:33.837" level="INFO">Executing command 'ls -lh /tmp/flashimg'.</msg>
<msg timestamp="20170807 03:28:33.893" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170807 03:28:33.894" level="INFO">${stdout} = -rw-r--r--    1 root     root       36.4M Aug  7 03:28 /tmp/flashimg</msg>
<msg timestamp="20170807 03:28:33.894" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170807 03:28:33.894" starttime="20170807 03:28:33.837"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170807 03:28:33.894" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170807 03:28:33.895" starttime="20170807 03:28:33.894"></status>
</kw>
<msg timestamp="20170807 03:28:33.895" level="INFO">${file_size} = -rw-r--r--    1 root     root       36.4M Aug  7 03:28 /tmp/flashimg</msg>
<status status="PASS" endtime="20170807 03:28:33.895" starttime="20170807 03:28:33.836"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<msg timestamp="20170807 03:28:33.896" level="FAIL">Incomplete file transfer.: '-rw-r--r--    1 root     root       36.4M Aug  7 03:28 /tmp/flashimg' does not contain '32.0M'</msg>
<status status="FAIL" endtime="20170807 03:28:33.896" starttime="20170807 03:28:33.896"></status>
</kw>
<msg timestamp="20170807 03:28:33.896" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170807 03:28:33.896" starttime="20170807 03:28:33.895"></status>
</kw>
<msg timestamp="20170807 03:28:33.897" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170807 03:28:33.897" starttime="20170807 03:28:17.748"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
</arguments>
<status status="PASS" endtime="20170807 03:28:33.897" starttime="20170807 03:28:33.897"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:33.897" starttime="20170807 03:28:17.748"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:33.897" starttime="20170807 03:27:23.277"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:33.898" starttime="20170807 03:27:23.277"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:33.898" starttime="20170807 03:27:20.966"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:33.898" starttime="20170807 03:27:20.959"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>Activate BMC Flash Image</arg>
</arguments>
<kw name="Activate BMC flash image" library="code_update_utils">
<doc>Activate and verify the update status</doc>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>/tmp/flashimg</arg>
</arguments>
<assign>
<var>@{img_path}</var>
</assign>
<msg timestamp="20170807 03:28:33.907" level="INFO">@{img_path} = [ /tmp/flashimg ]</msg>
<status status="PASS" endtime="20170807 03:28:33.907" starttime="20170807 03:28:33.907"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{img_path}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170807 03:28:33.908" level="INFO">${data} = {u'data': [u'/tmp/flashimg']}</msg>
<status status="PASS" endtime="20170807 03:28:33.908" starttime="20170807 03:28:33.907"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${BMC_UPD_METHOD}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170807 03:28:33.911" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 03:28:33.912" starttime="20170807 03:28:33.911"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 03:28:33.913" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 03:28:33.913" starttime="20170807 03:28:33.912"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170807 03:28:33.914" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 03:28:33.914" starttime="20170807 03:28:33.913"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170807 03:28:33.915" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 03:28:33.915" starttime="20170807 03:28:33.914"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170807 03:28:34.101" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 03:28:34.101" starttime="20170807 03:28:33.916"></status>
</kw>
<msg timestamp="20170807 03:28:34.102" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 03:28:34.102" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 03:28:34.102" starttime="20170807 03:28:33.915"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170807 03:28:34.102" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 03:28:34.103" starttime="20170807 03:28:34.102"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 03:28:34.103" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 03:28:34.103" starttime="20170807 03:28:34.103"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:34.103" starttime="20170807 03:28:33.910"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:34.104" starttime="20170807 03:28:33.909"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:34.104" starttime="20170807 03:28:33.909"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170807 03:28:34.104" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc/action/update</msg>
<status status="PASS" endtime="20170807 03:28:34.104" starttime="20170807 03:28:34.104"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 03:28:34.105" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 03:28:34.105" starttime="20170807 03:28:34.105"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:28:34.106" starttime="20170807 03:28:34.105"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:28:34.106" starttime="20170807 03:28:34.106"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170807 03:28:37.733" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc/action/update, data={"data": ["/tmp/flashimg"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20170807 03:28:37.733" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 03:28:37.733" starttime="20170807 03:28:34.107"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:28:37.734" starttime="20170807 03:28:37.734"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170807 03:28:37.735" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 03:28:37.735" starttime="20170807 03:28:37.734"></status>
</kw>
<msg timestamp="20170807 03:28:37.735" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 03:28:37.735" starttime="20170807 03:28:33.908"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 03:28:37.736" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 03:28:37.736" starttime="20170807 03:28:37.735"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${BMC_UPD_ATTR}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170807 03:28:37.739" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 03:28:37.739" starttime="20170807 03:28:37.739"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 03:28:37.740" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 03:28:37.740" starttime="20170807 03:28:37.740"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170807 03:28:37.741" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 03:28:37.741" starttime="20170807 03:28:37.740"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170807 03:28:37.741" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 03:28:37.741" starttime="20170807 03:28:37.741"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170807 03:28:37.921" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 03:28:37.921" starttime="20170807 03:28:37.742"></status>
</kw>
<msg timestamp="20170807 03:28:37.921" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 03:28:37.921" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 03:28:37.921" starttime="20170807 03:28:37.742"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170807 03:28:37.922" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 03:28:37.922" starttime="20170807 03:28:37.921"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 03:28:37.923" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 03:28:37.923" starttime="20170807 03:28:37.922"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:37.923" starttime="20170807 03:28:37.738"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:37.923" starttime="20170807 03:28:37.738"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:37.923" starttime="20170807 03:28:37.737"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170807 03:28:37.924" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc</msg>
<status status="PASS" endtime="20170807 03:28:37.924" starttime="20170807 03:28:37.924"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:28:37.925" starttime="20170807 03:28:37.925"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170807 03:28:38.025" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc, headers=None json=None</msg>
<msg timestamp="20170807 03:28:38.025" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 03:28:38.025" starttime="20170807 03:28:37.925"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:28:38.026" starttime="20170807 03:28:38.026"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170807 03:28:38.027" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 03:28:38.027" starttime="20170807 03:28:38.027"></status>
</kw>
<msg timestamp="20170807 03:28:38.027" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 03:28:38.027" starttime="20170807 03:28:37.736"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 03:28:38.028" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 03:28:38.028" starttime="20170807 03:28:38.027"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170807 03:28:38.028" level="INFO">To JSON using : content={
  "data": {
    "auto_apply": 0, 
    "clear_persistent_files": 0, 
    "filename": "/tmp/flashimg", 
    "preserve_network_settings": 1, 
    "restore_application_defaults": 0, 
    "status": "Verify error: update: --no-flash --ignore-mount --no-save-files --no-restore-files --no-clean-saved-files\nERROR: Image image-bmc too big for mtd0.\n", 
    "update_kernel_and_apps": 0
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170807 03:28:38.029" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170807 03:28:38.029" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Verify error: update: --no-flash --ignore-mount --no-save-files --no-restore-files --no-clean-saved-files\nERROR: Image image-bmc too b...</msg>
<status status="PASS" endtime="20170807 03:28:38.029" starttime="20170807 03:28:38.028"></status>
</kw>
<msg timestamp="20170807 03:28:38.029" level="INFO">${data} = {u'status': u'Verify error: update: --no-flash --ignore-mount --no-save-files --no-restore-files --no-clean-saved-files\nERROR: Image image-bmc too big for mtd0.\n', u'update_kernel_and_apps': 0, u'cl...</msg>
<status status="PASS" endtime="20170807 03:28:38.029" starttime="20170807 03:28:37.736"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${data["filename"]}</arg>
<arg>/tmp/flashimg</arg>
</arguments>
<status status="PASS" endtime="20170807 03:28:38.030" starttime="20170807 03:28:38.029"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${data['status']}</arg>
<arg>to apply</arg>
</arguments>
<msg timestamp="20170807 03:28:38.030" level="FAIL">'Verify error: update: --no-flash --ignore-mount --no-save-files --no-restore-files --no-clean-saved-files
ERROR: Image image-bmc too big for mtd0.
' does not contain 'to apply'</msg>
<status status="FAIL" endtime="20170807 03:28:38.031" starttime="20170807 03:28:38.030"></status>
</kw>
<status status="FAIL" endtime="20170807 03:28:38.031" starttime="20170807 03:28:33.906"></status>
</kw>
<msg timestamp="20170807 03:28:38.032" level="FAIL">'Verify error: update: --no-flash --ignore-mount --no-save-files --no-restore-files --no-clean-saved-files
ERROR: Image image-bmc too big for mtd0.
' does not contain 'to apply'</msg>
<status status="FAIL" endtime="20170807 03:28:38.032" starttime="20170807 03:28:33.898"></status>
</kw>
<kw type="teardown" name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>FFDC On Test Case Fail</arg>
</arguments>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170807 03:28:38.044" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 03:28:38.044" starttime="20170807 03:28:38.043"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 03:28:38.045" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 03:28:38.045" starttime="20170807 03:28:38.044"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170807 03:28:38.046" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 03:28:38.046" starttime="20170807 03:28:38.045"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170807 03:28:38.047" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 03:28:38.047" starttime="20170807 03:28:38.046"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170807 03:28:38.271" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 03:28:38.271" starttime="20170807 03:28:38.048"></status>
</kw>
<msg timestamp="20170807 03:28:38.271" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 03:28:38.271" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 03:28:38.271" starttime="20170807 03:28:38.047"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170807 03:28:38.272" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 03:28:38.272" starttime="20170807 03:28:38.272"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 03:28:38.273" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 03:28:38.273" starttime="20170807 03:28:38.272"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:38.273" starttime="20170807 03:28:38.043"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:38.273" starttime="20170807 03:28:38.042"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:38.273" starttime="20170807 03:28:38.042"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170807 03:28:38.274" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170807 03:28:38.274" starttime="20170807 03:28:38.273"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:28:38.274" starttime="20170807 03:28:38.274"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170807 03:28:38.359" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170807 03:28:38.359" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 03:28:38.359" starttime="20170807 03:28:38.275"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:28:38.360" starttime="20170807 03:28:38.360"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170807 03:28:38.361" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 03:28:38.361" starttime="20170807 03:28:38.361"></status>
</kw>
<msg timestamp="20170807 03:28:38.361" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 03:28:38.361" starttime="20170807 03:28:38.041"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 03:28:38.362" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 03:28:38.362" starttime="20170807 03:28:38.361"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170807 03:28:38.362" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170807 03:28:38.362" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170807 03:28:38.363" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170807 03:28:38.363" starttime="20170807 03:28:38.362"></status>
</kw>
<msg timestamp="20170807 03:28:38.363" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170807 03:28:38.363" starttime="20170807 03:28:38.040"></status>
</kw>
<msg timestamp="20170807 03:28:38.363" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170807 03:28:38.363" starttime="20170807 03:28:38.040"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170807 03:28:38.364" level="FAIL">Off != Quiesced</msg>
<status status="FAIL" endtime="20170807 03:28:38.364" starttime="20170807 03:28:38.364"></status>
</kw>
<msg timestamp="20170807 03:28:38.365" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170807 03:28:38.365" starttime="20170807 03:28:38.364"></status>
</kw>
<msg timestamp="20170807 03:28:38.365" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170807 03:28:38.365" starttime="20170807 03:28:38.040"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170807 03:28:38.377" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170807 03:28:38.377" starttime="20170807 03:28:38.377"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170807 03:28:38.388" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170807 03:28:41.395" level="INFO">${RC} = 0</msg>
<msg timestamp="20170807 03:28:41.395" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.822 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.607 ms
64 bytes from 9.3.86.161: icmp_se...</msg>
<status status="PASS" endtime="20170807 03:28:41.395" starttime="20170807 03:28:38.377"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170807 03:28:41.399" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.822 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.607 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.620 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.581 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.581/0.657/0.822/0.099 ms</msg>
<status status="PASS" endtime="20170807 03:28:41.399" starttime="20170807 03:28:41.398"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:28:41.400" starttime="20170807 03:28:41.399"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:41.400" starttime="20170807 03:28:38.376"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170807 03:28:41.423" level="INFO">${cur_time} = 2017-08-07 03:28:41:422364</msg>
<status status="PASS" endtime="20170807 03:28:41.423" starttime="20170807 03:28:41.422"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170807 03:28:41.423" level="INFO">${cur_time} = 20170807032841422364</msg>
<status status="PASS" endtime="20170807 03:28:41.423" starttime="20170807 03:28:41.423"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:41.423" starttime="20170807 03:28:41.421"></status>
</kw>
<msg timestamp="20170807 03:28:41.429" level="INFO">${FFDC_TIME} = 20170807032841422364</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170807 03:28:41.432" level="INFO">${suite_name} = UpdateBmc</msg>
<status status="PASS" endtime="20170807 03:28:41.432" starttime="20170807 03:28:41.431"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170807 03:28:41.433" level="INFO">${suite_name} = 20170807032841422364_UpdateBmc</msg>
<status status="PASS" endtime="20170807 03:28:41.433" starttime="20170807 03:28:41.432"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170807 03:28:41.434" level="INFO">${test_name} = InitiateCodeUpdateBMC</msg>
<status status="PASS" endtime="20170807 03:28:41.434" starttime="20170807 03:28:41.433"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170807 03:28:41.435" level="INFO">${test_name} = 20170807032841422364_InitiateCodeUpdateBMC</msg>
<status status="PASS" endtime="20170807 03:28:41.435" starttime="20170807 03:28:41.434"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:41.435" starttime="20170807 03:28:41.430"></status>
</kw>
<msg timestamp="20170807 03:28:41.443" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/</msg>
<msg timestamp="20170807 03:28:41.451" level="INFO">${FFDC_PREFIX} = 20170807032841422364_</msg>
<msg timestamp="20170807 03:28:41.471" level="INFO">${LOG_PREFIX} = /home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/</arg>
</arguments>
<msg timestamp="20170807 03:28:41.472" html="yes" level="INFO">Created directory '&lt;a href="file:///home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC"&gt;/home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 03:28:41.472" starttime="20170807 03:28:41.471"></status>
</kw>
<msg timestamp="20170807 03:28:41.477" level="INFO">${FFDC_FILE_PATH} = /home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 03:28:41.488" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt"&gt;/home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 03:28:41.488" starttime="20170807 03:28:41.488"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:41.488" starttime="20170807 03:28:41.487"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 03:28:41.489" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt"&gt;/home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 03:28:41.489" starttime="20170807 03:28:41.489"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:41.490" starttime="20170807 03:28:41.488"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 03:28:41.491" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt"&gt;/home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 03:28:41.491" starttime="20170807 03:28:41.490"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:41.491" starttime="20170807 03:28:41.490"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 03:28:41.492" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt"&gt;/home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 03:28:41.492" starttime="20170807 03:28:41.492"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:41.492" starttime="20170807 03:28:41.491"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 03:28:41.494" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt"&gt;/home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 03:28:41.494" starttime="20170807 03:28:41.493"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:41.494" starttime="20170807 03:28:41.493"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 03:28:41.495" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt"&gt;/home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 03:28:41.495" starttime="20170807 03:28:41.495"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:41.495" starttime="20170807 03:28:41.494"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 03:28:41.497" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt"&gt;/home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 03:28:41.497" starttime="20170807 03:28:41.496"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:41.497" starttime="20170807 03:28:41.496"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 03:28:41.498" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt"&gt;/home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 03:28:41.498" starttime="20170807 03:28:41.498"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:41.498" starttime="20170807 03:28:41.497"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 03:28:41.500" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt"&gt;/home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 03:28:41.500" starttime="20170807 03:28:41.499"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:41.500" starttime="20170807 03:28:41.499"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 03:28:41.502" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt"&gt;/home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 03:28:41.502" starttime="20170807 03:28:41.501"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:41.502" starttime="20170807 03:28:41.500"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 03:28:41.503" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt"&gt;/home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 03:28:41.503" starttime="20170807 03:28:41.503"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:41.503" starttime="20170807 03:28:41.502"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 03:28:41.504" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt"&gt;/home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 03:28:41.505" starttime="20170807 03:28:41.504"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:41.505" starttime="20170807 03:28:41.503"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 03:28:41.506" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt"&gt;/home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 03:28:41.506" starttime="20170807 03:28:41.506"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:41.507" starttime="20170807 03:28:41.505"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170807 03:28:41.524" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170807 03:28:41.525" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170807 03:28:42.264" level="INFO">Read output: root@witherspoon:~#</msg>
<msg timestamp="20170807 03:28:42.265" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170807 03:28:42.342" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170807 03:28:42.351" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170807 03:28:42.351" level="INFO">${stderr} = </msg>
<msg timestamp="20170807 03:28:42.351" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20170807 03:28:42.351" starttime="20170807 03:28:41.507"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170807 03:28:42.351" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170807 03:28:42.351" starttime="20170807 03:28:42.351"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170807 03:28:42.352" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170807 03:28:42.352" starttime="20170807 03:28:42.352"></status>
</kw>
<msg timestamp="20170807 03:28:42.352" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" endtime="20170807 03:28:42.352" starttime="20170807 03:28:41.507"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 03:28:42.354" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt"&gt;/home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 03:28:42.354" starttime="20170807 03:28:42.354"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:42.354" starttime="20170807 03:28:42.353"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:42.354" starttime="20170807 03:28:41.500"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 03:28:42.356" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt"&gt;/home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 03:28:42.356" starttime="20170807 03:28:42.355"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:42.356" starttime="20170807 03:28:42.355"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170807 03:28:42.357" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170807 03:28:42.357" starttime="20170807 03:28:42.356"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 03:28:42.359" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt"&gt;/home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 03:28:42.359" starttime="20170807 03:28:42.358"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:42.359" starttime="20170807 03:28:42.357"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 03:28:42.360" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt"&gt;/home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 03:28:42.360" starttime="20170807 03:28:42.360"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:42.360" starttime="20170807 03:28:42.359"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:42.361" starttime="20170807 03:28:42.357"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 03:28:42.362" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt"&gt;/home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 03:28:42.362" starttime="20170807 03:28:42.361"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:42.362" starttime="20170807 03:28:42.361"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 03:28:42.363" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt"&gt;/home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 03:28:42.363" starttime="20170807 03:28:42.363"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:42.363" starttime="20170807 03:28:42.362"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:42.363" starttime="20170807 03:28:42.361"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 03:28:42.365" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt"&gt;/home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 03:28:42.365" starttime="20170807 03:28:42.364"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:42.365" starttime="20170807 03:28:42.364"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 03:28:42.366" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt"&gt;/home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 03:28:42.366" starttime="20170807 03:28:42.366"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:42.367" starttime="20170807 03:28:42.365"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:42.367" starttime="20170807 03:28:42.363"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:42.367" starttime="20170807 03:28:42.357"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 03:28:42.368" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt"&gt;/home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 03:28:42.368" starttime="20170807 03:28:42.367"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:42.368" starttime="20170807 03:28:42.367"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:42.368" starttime="20170807 03:28:41.487"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170807 03:28:42.374" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20170807 03:28:42.374" starttime="20170807 03:28:42.374"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170807 03:28:42.375" level="INFO">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('Core Files', 'SCP Coredump Files') | ('BMC Specific Files', 'BMC FFDC Files') | ('SEL Log', 'Collect ...</msg>
<status status="PASS" endtime="20170807 03:28:42.375" starttime="20170807 03:28:42.375"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:28:42.377" starttime="20170807 03:28:42.376"></status>
</kw>
<msg timestamp="20170807 03:28:42.377" level="INFO">@{ffdc_function_list} = [ FFDC Generic Report | Get Request FFDC | Core Files | BMC Specific Files | SEL Log | OS FFDC ]</msg>
<status status="PASS" endtime="20170807 03:28:42.377" starttime="20170807 03:28:42.376"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:28:42.379" starttime="20170807 03:28:42.378"></status>
</kw>
<msg timestamp="20170807 03:28:42.379" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 03:28:42.379" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170807 03:28:42.379" starttime="20170807 03:28:42.378"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170807 03:28:42.380" starttime="20170807 03:28:42.379"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170807 03:28:42.394" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170807 03:28:42.394" starttime="20170807 03:28:42.394"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170807 03:28:42.396" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status status="PASS" endtime="20170807 03:28:42.396" starttime="20170807 03:28:42.395"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170807 03:28:42.401" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20170807 03:28:42.401" starttime="20170807 03:28:42.396"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 03:28:42.405" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt"&gt;/home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 03:28:42.406" starttime="20170807 03:28:42.405"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:42.406" starttime="20170807 03:28:42.404"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 03:28:42.407" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt"&gt;/home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 03:28:42.407" starttime="20170807 03:28:42.407"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:42.407" starttime="20170807 03:28:42.406"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 03:28:42.408" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt"&gt;/home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 03:28:42.408" starttime="20170807 03:28:42.408"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:42.408" starttime="20170807 03:28:42.407"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 03:28:42.410" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt"&gt;/home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 03:28:42.410" starttime="20170807 03:28:42.409"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:42.410" starttime="20170807 03:28:42.409"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:42.410" starttime="20170807 03:28:42.403"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:42.410" starttime="20170807 03:28:42.403"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170807 03:28:42.411" level="INFO">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status status="PASS" endtime="20170807 03:28:42.411" starttime="20170807 03:28:42.410"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170807 03:28:42.453" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170807 03:28:42.454" level="INFO">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg timestamp="20170807 03:28:43.759" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170807 03:28:43.760" starttime="20170807 03:28:42.430"></status>
</kw>
<msg timestamp="20170807 03:28:43.760" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 03:28:43.760" level="INFO">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState....</msg>
<status status="PASS" endtime="20170807 03:28:43.760" starttime="20170807 03:28:42.411"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170807 03:28:43.761" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170807 03:28:43.761" starttime="20170807 03:28:43.761"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170807 03:28:43.762" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170807 03:28:43.762" starttime="20170807 03:28:43.762"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 03:28:43.780" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt"&gt;/home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 03:28:43.780" starttime="20170807 03:28:43.779"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:43.780" starttime="20170807 03:28:43.778"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:43.780" starttime="20170807 03:28:43.763"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:43.780" starttime="20170807 03:28:42.402"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:43.780" starttime="20170807 03:28:42.402"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:43.780" starttime="20170807 03:28:42.401"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:43.780" starttime="20170807 03:28:42.395"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:43.780" starttime="20170807 03:28:42.395"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170807 03:28:43.781" level="INFO">@{cmd_list} = [ ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" endtime="20170807 03:28:43.781" starttime="20170807 03:28:43.781"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170807 03:28:43.782" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20170807 03:28:43.782" starttime="20170807 03:28:43.782"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 03:28:43.785" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt"&gt;/home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 03:28:43.785" starttime="20170807 03:28:43.785"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:43.786" starttime="20170807 03:28:43.784"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 03:28:43.787" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt"&gt;/home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 03:28:43.787" starttime="20170807 03:28:43.786"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:43.787" starttime="20170807 03:28:43.786"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 03:28:43.788" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt"&gt;/home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 03:28:43.788" starttime="20170807 03:28:43.788"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:43.788" starttime="20170807 03:28:43.787"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 03:28:43.789" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt"&gt;/home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 03:28:43.790" starttime="20170807 03:28:43.789"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:43.790" starttime="20170807 03:28:43.789"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:43.790" starttime="20170807 03:28:43.784"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:43.790" starttime="20170807 03:28:43.783"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170807 03:28:43.791" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status status="PASS" endtime="20170807 03:28:43.791" starttime="20170807 03:28:43.790"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170807 03:28:43.832" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170807 03:28:43.833" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170807 03:28:43.879" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170807 03:28:43.879" starttime="20170807 03:28:43.809"></status>
</kw>
<msg timestamp="20170807 03:28:43.879" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 03:28:43.880" level="INFO">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.8-139"\nVERSION_ID="v1.99.8-139-gb3dbb28"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC...</msg>
<status status="PASS" endtime="20170807 03:28:43.880" starttime="20170807 03:28:43.791"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170807 03:28:43.881" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.8-139"
VERSION_ID="v1.99.8-139-gb3dbb28"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Projec...</msg>
<status status="PASS" endtime="20170807 03:28:43.881" starttime="20170807 03:28:43.880"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170807 03:28:43.881" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170807 03:28:43.882" starttime="20170807 03:28:43.881"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 03:28:43.892" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt"&gt;/home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 03:28:43.892" starttime="20170807 03:28:43.892"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:43.892" starttime="20170807 03:28:43.891"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:43.893" starttime="20170807 03:28:43.882"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:43.893" starttime="20170807 03:28:43.783"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:43.893" starttime="20170807 03:28:43.782"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:43.893" starttime="20170807 03:28:43.782"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:43.893" starttime="20170807 03:28:43.781"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:43.893" starttime="20170807 03:28:43.780"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170807 03:28:43.894" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" endtime="20170807 03:28:43.894" starttime="20170807 03:28:43.894"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170807 03:28:43.895" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20170807 03:28:43.895" starttime="20170807 03:28:43.894"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 03:28:43.898" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt"&gt;/home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 03:28:43.898" starttime="20170807 03:28:43.898"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:43.898" starttime="20170807 03:28:43.897"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 03:28:43.900" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt"&gt;/home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 03:28:43.900" starttime="20170807 03:28:43.899"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:43.900" starttime="20170807 03:28:43.898"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 03:28:43.901" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt"&gt;/home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 03:28:43.901" starttime="20170807 03:28:43.901"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:43.901" starttime="20170807 03:28:43.900"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 03:28:43.902" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt"&gt;/home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 03:28:43.902" starttime="20170807 03:28:43.902"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:43.903" starttime="20170807 03:28:43.901"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:43.903" starttime="20170807 03:28:43.897"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:43.903" starttime="20170807 03:28:43.896"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170807 03:28:43.903" level="INFO">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status status="PASS" endtime="20170807 03:28:43.903" starttime="20170807 03:28:43.903"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170807 03:28:43.945" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170807 03:28:43.945" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170807 03:28:44.022" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170807 03:28:44.022" starttime="20170807 03:28:43.922"></status>
</kw>
<msg timestamp="20170807 03:28:44.023" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 03:28:44.023" level="INFO">${ret_values} = (u' 03:28:48 up 3 min,  load average: 1.72, 1.38, 0.59', u'', 0)</msg>
<status status="PASS" endtime="20170807 03:28:44.023" starttime="20170807 03:28:43.904"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170807 03:28:44.023" level="INFO">${stdout} =  03:28:48 up 3 min,  load average: 1.72, 1.38, 0.59</msg>
<status status="PASS" endtime="20170807 03:28:44.023" starttime="20170807 03:28:44.023"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170807 03:28:44.024" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170807 03:28:44.024" starttime="20170807 03:28:44.024"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 03:28:44.031" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt"&gt;/home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 03:28:44.031" starttime="20170807 03:28:44.031"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:44.032" starttime="20170807 03:28:44.030"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:44.032" starttime="20170807 03:28:44.024"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:44.032" starttime="20170807 03:28:43.895"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:44.032" starttime="20170807 03:28:43.895"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 03:28:44.035" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt"&gt;/home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 03:28:44.035" starttime="20170807 03:28:44.035"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:44.035" starttime="20170807 03:28:44.034"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 03:28:44.036" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt"&gt;/home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 03:28:44.036" starttime="20170807 03:28:44.036"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:44.037" starttime="20170807 03:28:44.035"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 03:28:44.038" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt"&gt;/home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 03:28:44.038" starttime="20170807 03:28:44.037"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:44.038" starttime="20170807 03:28:44.037"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 03:28:44.039" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt"&gt;/home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 03:28:44.039" starttime="20170807 03:28:44.039"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:44.039" starttime="20170807 03:28:44.038"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:44.039" starttime="20170807 03:28:44.033"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:44.039" starttime="20170807 03:28:44.033"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170807 03:28:44.040" level="INFO">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status status="PASS" endtime="20170807 03:28:44.040" starttime="20170807 03:28:44.040"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170807 03:28:44.082" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170807 03:28:44.082" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170807 03:28:44.159" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170807 03:28:44.159" starttime="20170807 03:28:44.058"></status>
</kw>
<msg timestamp="20170807 03:28:44.159" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 03:28:44.159" level="INFO">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\ndev                  devtmpfs      210.2M         0    210.2M   0% /dev\ntmpfs                tmpfs         211.1M    ...</msg>
<status status="PASS" endtime="20170807 03:28:44.159" starttime="20170807 03:28:44.040"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170807 03:28:44.160" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     74.0...</msg>
<status status="PASS" endtime="20170807 03:28:44.160" starttime="20170807 03:28:44.160"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170807 03:28:44.161" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170807 03:28:44.161" starttime="20170807 03:28:44.160"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 03:28:44.168" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt"&gt;/home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 03:28:44.168" starttime="20170807 03:28:44.167"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:44.168" starttime="20170807 03:28:44.166"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:44.168" starttime="20170807 03:28:44.161"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:44.168" starttime="20170807 03:28:44.032"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:44.168" starttime="20170807 03:28:44.032"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 03:28:44.171" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt"&gt;/home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 03:28:44.172" starttime="20170807 03:28:44.171"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:44.172" starttime="20170807 03:28:44.170"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 03:28:44.173" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt"&gt;/home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 03:28:44.173" starttime="20170807 03:28:44.173"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:44.173" starttime="20170807 03:28:44.172"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 03:28:44.174" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt"&gt;/home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 03:28:44.174" starttime="20170807 03:28:44.174"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:44.174" starttime="20170807 03:28:44.173"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 03:28:44.176" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt"&gt;/home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 03:28:44.176" starttime="20170807 03:28:44.175"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:44.176" starttime="20170807 03:28:44.175"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:44.176" starttime="20170807 03:28:44.170"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:44.176" starttime="20170807 03:28:44.169"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170807 03:28:44.177" level="INFO">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status status="PASS" endtime="20170807 03:28:44.177" starttime="20170807 03:28:44.176"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170807 03:28:44.219" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170807 03:28:44.219" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170807 03:28:44.276" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170807 03:28:44.276" starttime="20170807 03:28:44.195"></status>
</kw>
<msg timestamp="20170807 03:28:44.276" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 03:28:44.276" level="INFO">${ret_values} = (u'Linux witherspoon 4.10.17-03afe5775baf06c3037d62cc2a15628079af38c9 #1 Tue Aug 1 17:31:09 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status status="PASS" endtime="20170807 03:28:44.276" starttime="20170807 03:28:44.177"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170807 03:28:44.277" level="INFO">${stdout} = Linux witherspoon 4.10.17-03afe5775baf06c3037d62cc2a15628079af38c9 #1 Tue Aug 1 17:31:09 UTC 2017 armv6l GNU/Linux</msg>
<status status="PASS" endtime="20170807 03:28:44.277" starttime="20170807 03:28:44.277"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170807 03:28:44.278" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170807 03:28:44.278" starttime="20170807 03:28:44.277"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 03:28:44.285" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt"&gt;/home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 03:28:44.285" starttime="20170807 03:28:44.284"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:44.285" starttime="20170807 03:28:44.284"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:44.285" starttime="20170807 03:28:44.278"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:44.285" starttime="20170807 03:28:44.168"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:44.285" starttime="20170807 03:28:44.168"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:44.285" starttime="20170807 03:28:43.895"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:44.285" starttime="20170807 03:28:43.893"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:44.285" starttime="20170807 03:28:43.893"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:44.285" starttime="20170807 03:28:42.394"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:44.285" starttime="20170807 03:28:42.394"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:44.285" starttime="20170807 03:28:42.380"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:44.286" starttime="20170807 03:28:42.377"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:44.286" starttime="20170807 03:28:42.377"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:28:44.287" starttime="20170807 03:28:44.287"></status>
</kw>
<msg timestamp="20170807 03:28:44.288" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 03:28:44.288" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170807 03:28:44.288" starttime="20170807 03:28:44.287"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170807 03:28:44.288" starttime="20170807 03:28:44.288"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170807 03:28:44.303" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20170807 03:28:44.303" starttime="20170807 03:28:44.302"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170807 03:28:44.304" level="INFO">@{cmd_list} = [ ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate') | ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_led', '/o...</msg>
<status status="PASS" endtime="20170807 03:28:44.304" starttime="20170807 03:28:44.304"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170807 03:28:44.305" level="INFO">${logpath} = /home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_elog.txt</msg>
<status status="PASS" endtime="20170807 03:28:44.305" starttime="20170807 03:28:44.305"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170807 03:28:44.309" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 03:28:44.309" starttime="20170807 03:28:44.308"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 03:28:44.310" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 03:28:44.310" starttime="20170807 03:28:44.310"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170807 03:28:44.311" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 03:28:44.311" starttime="20170807 03:28:44.311"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170807 03:28:44.312" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 03:28:44.312" starttime="20170807 03:28:44.312"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170807 03:28:44.577" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 03:28:44.577" starttime="20170807 03:28:44.313"></status>
</kw>
<msg timestamp="20170807 03:28:44.577" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 03:28:44.577" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 03:28:44.577" starttime="20170807 03:28:44.312"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170807 03:28:44.578" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 03:28:44.578" starttime="20170807 03:28:44.577"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 03:28:44.578" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 03:28:44.579" starttime="20170807 03:28:44.578"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:44.579" starttime="20170807 03:28:44.307"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:44.579" starttime="20170807 03:28:44.307"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:44.579" starttime="20170807 03:28:44.306"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170807 03:28:44.579" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" endtime="20170807 03:28:44.579" starttime="20170807 03:28:44.579"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:28:44.580" starttime="20170807 03:28:44.580"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170807 03:28:44.722" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170807 03:28:44.722" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 03:28:44.722" starttime="20170807 03:28:44.581"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:28:44.723" starttime="20170807 03:28:44.723"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170807 03:28:44.723" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 03:28:44.724" starttime="20170807 03:28:44.723"></status>
</kw>
<msg timestamp="20170807 03:28:44.724" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 03:28:44.724" starttime="20170807 03:28:44.306"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 03:28:44.725" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 03:28:44.725" starttime="20170807 03:28:44.725"></status>
</kw>
<msg timestamp="20170807 03:28:44.725" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170807 03:28:44.725" starttime="20170807 03:28:44.724"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170807 03:28:44.726" starttime="20170807 03:28:44.726"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170807 03:28:44.727" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/1": {
      "AdditionalData": [], 
      "Id": 1, 
      "Message": "xyz.openbmc_project.Common.Error.InternalFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502076405804, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170807 03:28:44.727" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170807 03:28:44.727" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/logging/entry/1": {
            "AdditionalData": [],
            "Id": 1,
            "Message": "xyz.openbmc_project.Common.Error.InternalFailure",
    ...</msg>
<status status="PASS" endtime="20170807 03:28:44.727" starttime="20170807 03:28:44.726"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 03:28:44.729" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_elog.txt"&gt;/home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_elog.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 03:28:44.729" starttime="20170807 03:28:44.728"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:44.729" starttime="20170807 03:28:44.727"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:44.729" starttime="20170807 03:28:44.304"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170807 03:28:44.730" level="INFO">${logpath} = /home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_sensor_list.txt</msg>
<status status="PASS" endtime="20170807 03:28:44.730" starttime="20170807 03:28:44.729"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170807 03:28:44.733" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 03:28:44.733" starttime="20170807 03:28:44.733"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 03:28:44.734" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 03:28:44.734" starttime="20170807 03:28:44.733"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170807 03:28:44.734" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 03:28:44.735" starttime="20170807 03:28:44.734"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170807 03:28:44.735" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 03:28:44.735" starttime="20170807 03:28:44.735"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170807 03:28:44.914" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 03:28:44.914" starttime="20170807 03:28:44.736"></status>
</kw>
<msg timestamp="20170807 03:28:44.914" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 03:28:44.914" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 03:28:44.914" starttime="20170807 03:28:44.736"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170807 03:28:44.915" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 03:28:44.915" starttime="20170807 03:28:44.914"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 03:28:44.916" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 03:28:44.916" starttime="20170807 03:28:44.915"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:44.916" starttime="20170807 03:28:44.732"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:44.916" starttime="20170807 03:28:44.731"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:44.916" starttime="20170807 03:28:44.731"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170807 03:28:44.917" level="INFO">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status status="PASS" endtime="20170807 03:28:44.917" starttime="20170807 03:28:44.916"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:28:44.917" starttime="20170807 03:28:44.917"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170807 03:28:45.085" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170807 03:28:45.086" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 03:28:45.086" starttime="20170807 03:28:44.918"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:28:45.086" starttime="20170807 03:28:45.086"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170807 03:28:45.087" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 03:28:45.087" starttime="20170807 03:28:45.087"></status>
</kw>
<msg timestamp="20170807 03:28:45.087" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 03:28:45.087" starttime="20170807 03:28:44.730"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 03:28:45.089" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 03:28:45.089" starttime="20170807 03:28:45.088"></status>
</kw>
<msg timestamp="20170807 03:28:45.089" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170807 03:28:45.089" starttime="20170807 03:28:45.088"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170807 03:28:45.089" starttime="20170807 03:28:45.089"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170807 03:28:45.090" level="INFO">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 3
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170807 03:28:45.090" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170807 03:28:45.090" level="INFO">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 3
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status status="PASS" endtime="20170807 03:28:45.091" starttime="20170807 03:28:45.090"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 03:28:45.092" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_sensor_list.txt"&gt;/home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 03:28:45.092" starttime="20170807 03:28:45.091"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:45.092" starttime="20170807 03:28:45.091"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:45.092" starttime="20170807 03:28:44.729"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170807 03:28:45.093" level="INFO">${logpath} = /home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_inventory.txt</msg>
<status status="PASS" endtime="20170807 03:28:45.093" starttime="20170807 03:28:45.093"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170807 03:28:45.097" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 03:28:45.098" starttime="20170807 03:28:45.097"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 03:28:45.098" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 03:28:45.098" starttime="20170807 03:28:45.098"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170807 03:28:45.099" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 03:28:45.100" starttime="20170807 03:28:45.099"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170807 03:28:45.101" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 03:28:45.101" starttime="20170807 03:28:45.100"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170807 03:28:45.325" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 03:28:45.325" starttime="20170807 03:28:45.102"></status>
</kw>
<msg timestamp="20170807 03:28:45.325" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 03:28:45.325" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 03:28:45.325" starttime="20170807 03:28:45.101"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170807 03:28:45.326" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 03:28:45.326" starttime="20170807 03:28:45.325"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 03:28:45.327" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 03:28:45.327" starttime="20170807 03:28:45.326"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:45.327" starttime="20170807 03:28:45.096"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:45.327" starttime="20170807 03:28:45.095"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:45.327" starttime="20170807 03:28:45.094"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170807 03:28:45.328" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" endtime="20170807 03:28:45.328" starttime="20170807 03:28:45.328"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:28:45.329" starttime="20170807 03:28:45.328"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170807 03:28:45.466" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170807 03:28:45.466" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 03:28:45.466" starttime="20170807 03:28:45.329"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:28:45.467" starttime="20170807 03:28:45.466"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170807 03:28:45.467" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 03:28:45.467" starttime="20170807 03:28:45.467"></status>
</kw>
<msg timestamp="20170807 03:28:45.467" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 03:28:45.468" starttime="20170807 03:28:45.093"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 03:28:45.469" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 03:28:45.469" starttime="20170807 03:28:45.468"></status>
</kw>
<msg timestamp="20170807 03:28:45.469" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170807 03:28:45.469" starttime="20170807 03:28:45.468"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170807 03:28:45.470" starttime="20170807 03:28:45.470"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170807 03:28:45.471" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170807 03:28:45.471" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170807 03:28:45.471" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system/chassis": {
            "AirCooled": 1,
            "WaterCooled": 1
        },
        "/xyz/openbmc_project/inventory/system/chassis/po...</msg>
<status status="PASS" endtime="20170807 03:28:45.471" starttime="20170807 03:28:45.471"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 03:28:45.474" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_inventory.txt"&gt;/home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 03:28:45.474" starttime="20170807 03:28:45.473"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:45.474" starttime="20170807 03:28:45.472"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:45.474" starttime="20170807 03:28:45.092"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170807 03:28:45.475" level="INFO">${logpath} = /home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_led.txt</msg>
<status status="PASS" endtime="20170807 03:28:45.475" starttime="20170807 03:28:45.474"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170807 03:28:45.478" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 03:28:45.478" starttime="20170807 03:28:45.478"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 03:28:45.479" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 03:28:45.479" starttime="20170807 03:28:45.479"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170807 03:28:45.479" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 03:28:45.480" starttime="20170807 03:28:45.479"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170807 03:28:45.480" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 03:28:45.480" starttime="20170807 03:28:45.480"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170807 03:28:45.674" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 03:28:45.674" starttime="20170807 03:28:45.481"></status>
</kw>
<msg timestamp="20170807 03:28:45.674" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 03:28:45.674" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 03:28:45.674" starttime="20170807 03:28:45.481"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170807 03:28:45.675" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 03:28:45.675" starttime="20170807 03:28:45.675"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 03:28:45.676" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 03:28:45.676" starttime="20170807 03:28:45.676"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:45.676" starttime="20170807 03:28:45.477"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:45.676" starttime="20170807 03:28:45.477"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:45.676" starttime="20170807 03:28:45.476"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170807 03:28:45.677" level="INFO">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status status="PASS" endtime="20170807 03:28:45.677" starttime="20170807 03:28:45.677"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:28:45.678" starttime="20170807 03:28:45.677"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170807 03:28:45.732" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg timestamp="20170807 03:28:45.732" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170807 03:28:45.732" starttime="20170807 03:28:45.678"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:28:45.733" starttime="20170807 03:28:45.733"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170807 03:28:45.733" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 03:28:45.734" starttime="20170807 03:28:45.733"></status>
</kw>
<msg timestamp="20170807 03:28:45.734" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170807 03:28:45.734" starttime="20170807 03:28:45.475"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 03:28:45.735" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170807 03:28:45.735" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170807 03:28:45.735" starttime="20170807 03:28:45.735"></status>
</kw>
<msg timestamp="20170807 03:28:45.735" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170807 03:28:45.735" starttime="20170807 03:28:45.734"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170807 03:28:45.736" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170807 03:28:45.737" starttime="20170807 03:28:45.736"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:45.737" starttime="20170807 03:28:45.736"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:45.737" starttime="20170807 03:28:45.474"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170807 03:28:45.737" level="INFO">${logpath} = /home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_record_log.txt</msg>
<status status="PASS" endtime="20170807 03:28:45.737" starttime="20170807 03:28:45.737"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170807 03:28:45.740" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 03:28:45.741" starttime="20170807 03:28:45.740"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 03:28:45.741" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 03:28:45.741" starttime="20170807 03:28:45.741"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170807 03:28:45.742" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 03:28:45.742" starttime="20170807 03:28:45.742"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170807 03:28:45.743" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 03:28:45.743" starttime="20170807 03:28:45.742"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170807 03:28:45.927" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 03:28:45.927" starttime="20170807 03:28:45.743"></status>
</kw>
<msg timestamp="20170807 03:28:45.927" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 03:28:45.927" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 03:28:45.927" starttime="20170807 03:28:45.743"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170807 03:28:45.928" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 03:28:45.928" starttime="20170807 03:28:45.927"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 03:28:45.928" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 03:28:45.928" starttime="20170807 03:28:45.928"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:45.929" starttime="20170807 03:28:45.739"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:45.929" starttime="20170807 03:28:45.739"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:45.929" starttime="20170807 03:28:45.738"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170807 03:28:45.929" level="INFO">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status status="PASS" endtime="20170807 03:28:45.929" starttime="20170807 03:28:45.929"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:28:45.930" starttime="20170807 03:28:45.930"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170807 03:28:45.975" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170807 03:28:45.975" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170807 03:28:45.975" starttime="20170807 03:28:45.930"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:28:45.976" starttime="20170807 03:28:45.975"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170807 03:28:45.977" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 03:28:45.977" starttime="20170807 03:28:45.976"></status>
</kw>
<msg timestamp="20170807 03:28:45.977" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170807 03:28:45.977" starttime="20170807 03:28:45.738"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 03:28:45.978" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170807 03:28:45.978" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170807 03:28:45.978" starttime="20170807 03:28:45.978"></status>
</kw>
<msg timestamp="20170807 03:28:45.978" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170807 03:28:45.978" starttime="20170807 03:28:45.977"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170807 03:28:45.979" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170807 03:28:45.979" starttime="20170807 03:28:45.979"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:45.980" starttime="20170807 03:28:45.979"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:45.980" starttime="20170807 03:28:45.737"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:45.980" starttime="20170807 03:28:44.304"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:45.980" starttime="20170807 03:28:44.303"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:45.980" starttime="20170807 03:28:44.303"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:45.980" starttime="20170807 03:28:44.303"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:45.980" starttime="20170807 03:28:44.302"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:45.980" starttime="20170807 03:28:44.289"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:45.980" starttime="20170807 03:28:44.286"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:45.980" starttime="20170807 03:28:44.286"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:28:45.982" starttime="20170807 03:28:45.982"></status>
</kw>
<msg timestamp="20170807 03:28:45.982" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 03:28:45.982" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170807 03:28:45.982" starttime="20170807 03:28:45.981"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170807 03:28:45.983" starttime="20170807 03:28:45.983"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170807 03:28:46.017" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170807 03:28:46.017" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170807 03:28:46.065" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170807 03:28:46.076" level="INFO">${core_files} = None</msg>
<msg timestamp="20170807 03:28:46.076" level="INFO">${stderr} = None</msg>
<msg timestamp="20170807 03:28:46.076" level="INFO">${rc} = None</msg>
<msg timestamp="20170807 03:28:46.076" level="FAIL">#(UTC) 2017/08/07 03:28:46.074298 -    3.724091 - **ERROR** The prior SSH command returned a non-zero return code:
rc:                                               0x00000001
ls: /tmp/core_*: No such file or directory
: 1 != 0</msg>
<status status="FAIL" endtime="20170807 03:28:46.076" starttime="20170807 03:28:45.997"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170807 03:28:46.077" level="INFO">@{core_list} = [ ]</msg>
<msg timestamp="20170807 03:28:46.077" level="FAIL">AttributeError: 'NoneType' object has no attribute 'split'</msg>
<status status="FAIL" endtime="20170807 03:28:46.077" starttime="20170807 03:28:46.077"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170807 03:28:46.087" starttime="20170807 03:28:46.086"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:28:46.723" starttime="20170807 03:28:46.088"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:46.723" starttime="20170807 03:28:46.088"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:46.724" starttime="20170807 03:28:46.085"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:46.724" starttime="20170807 03:28:46.078"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status status="PASS" endtime="20170807 03:28:46.724" starttime="20170807 03:28:46.724"></status>
</kw>
<status status="FAIL" endtime="20170807 03:28:46.724" starttime="20170807 03:28:45.997"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:46.724" starttime="20170807 03:28:45.983"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:46.724" starttime="20170807 03:28:45.981"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:46.724" starttime="20170807 03:28:45.980"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:28:46.726" starttime="20170807 03:28:46.726"></status>
</kw>
<msg timestamp="20170807 03:28:46.727" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 03:28:46.727" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170807 03:28:46.727" starttime="20170807 03:28:46.726"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170807 03:28:46.727" starttime="20170807 03:28:46.727"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170807 03:28:46.742" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20170807 03:28:46.742" starttime="20170807 03:28:46.742"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170807 03:28:46.743" level="INFO">@{cmd_list} = [ ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_proc_list', 'top -n 1 -b') | ('BMC_dmesg', 'dmesg') | ('BMC_j...</msg>
<status status="PASS" endtime="20170807 03:28:46.743" starttime="20170807 03:28:46.743"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170807 03:28:46.744" level="INFO">${logpath} = /home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_proc_fd_active_list.txt</msg>
<status status="PASS" endtime="20170807 03:28:46.744" starttime="20170807 03:28:46.744"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:28:46.745" starttime="20170807 03:28:46.745"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170807 03:28:46.746" level="INFO">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status status="PASS" endtime="20170807 03:28:46.746" starttime="20170807 03:28:46.746"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170807 03:28:46.787" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170807 03:28:46.788" level="INFO">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg timestamp="20170807 03:28:47.249" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170807 03:28:47.249" starttime="20170807 03:28:46.764"></status>
</kw>
<msg timestamp="20170807 03:28:47.249" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 03:28:47.250" level="INFO">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Aug  7 03:28 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Aug  7 03:28 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status status="PASS" endtime="20170807 03:28:47.251" starttime="20170807 03:28:46.747"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170807 03:28:47.251" level="INFO">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Aug  7 03:28 0 -&gt; /dev/null
lrwx------    1 root     root            64 Aug  7 03:28 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status status="PASS" endtime="20170807 03:28:47.251" starttime="20170807 03:28:47.251"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170807 03:28:47.252" level="INFO">${stderr} = ls: /proc/1235/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status status="PASS" endtime="20170807 03:28:47.252" starttime="20170807 03:28:47.252"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 03:28:47.260" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_proc_fd_active_list.txt"&gt;/home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 03:28:47.260" starttime="20170807 03:28:47.259"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:47.260" starttime="20170807 03:28:47.258"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:47.260" starttime="20170807 03:28:47.253"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:47.261" starttime="20170807 03:28:46.744"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:47.261" starttime="20170807 03:28:46.743"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170807 03:28:47.262" level="INFO">${logpath} = /home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_procinfo.txt</msg>
<status status="PASS" endtime="20170807 03:28:47.262" starttime="20170807 03:28:47.261"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:28:47.263" starttime="20170807 03:28:47.263"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170807 03:28:47.264" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status status="PASS" endtime="20170807 03:28:47.264" starttime="20170807 03:28:47.264"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170807 03:28:47.306" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170807 03:28:47.306" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170807 03:28:47.354" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170807 03:28:47.354" starttime="20170807 03:28:47.282"></status>
</kw>
<msg timestamp="20170807 03:28:47.354" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 03:28:47.354" level="INFO">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status status="PASS" endtime="20170807 03:28:47.354" starttime="20170807 03:28:47.265"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170807 03:28:47.355" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status status="PASS" endtime="20170807 03:28:47.355" starttime="20170807 03:28:47.354"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170807 03:28:47.355" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170807 03:28:47.355" starttime="20170807 03:28:47.355"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 03:28:47.362" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_procinfo.txt"&gt;/home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 03:28:47.362" starttime="20170807 03:28:47.362"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:47.363" starttime="20170807 03:28:47.361"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:47.363" starttime="20170807 03:28:47.356"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:47.363" starttime="20170807 03:28:47.262"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:47.363" starttime="20170807 03:28:47.261"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170807 03:28:47.364" level="INFO">${logpath} = /home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_meminfo.txt</msg>
<status status="PASS" endtime="20170807 03:28:47.364" starttime="20170807 03:28:47.363"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:28:47.365" starttime="20170807 03:28:47.365"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170807 03:28:47.366" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status status="PASS" endtime="20170807 03:28:47.366" starttime="20170807 03:28:47.365"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170807 03:28:47.411" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170807 03:28:47.412" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170807 03:28:47.459" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170807 03:28:47.459" starttime="20170807 03:28:47.384"></status>
</kw>
<msg timestamp="20170807 03:28:47.460" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 03:28:47.460" level="INFO">${ret_values} = (u'MemTotal:         432268 kB\nMemFree:          183696 kB\nMemAvailable:     229144 kB\nBuffers:           11264 kB\nCached:           150180 kB\nSwapCached:            0 kB\nActive:           14449...</msg>
<status status="PASS" endtime="20170807 03:28:47.460" starttime="20170807 03:28:47.366"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170807 03:28:47.460" level="INFO">${stdout} = MemTotal:         432268 kB
MemFree:          183696 kB
MemAvailable:     229144 kB
Buffers:           11264 kB
Cached:           150180 kB
SwapCached:            0 kB
Active:           144492 kB
Inac...</msg>
<status status="PASS" endtime="20170807 03:28:47.460" starttime="20170807 03:28:47.460"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170807 03:28:47.461" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170807 03:28:47.461" starttime="20170807 03:28:47.461"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 03:28:47.471" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_meminfo.txt"&gt;/home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 03:28:47.471" starttime="20170807 03:28:47.470"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:47.471" starttime="20170807 03:28:47.469"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:47.471" starttime="20170807 03:28:47.461"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:47.471" starttime="20170807 03:28:47.364"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:47.471" starttime="20170807 03:28:47.363"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170807 03:28:47.472" level="INFO">${logpath} = /home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_proc_list.txt</msg>
<status status="PASS" endtime="20170807 03:28:47.472" starttime="20170807 03:28:47.472"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:28:47.474" starttime="20170807 03:28:47.473"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170807 03:28:47.474" level="INFO">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status status="PASS" endtime="20170807 03:28:47.474" starttime="20170807 03:28:47.474"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170807 03:28:47.517" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170807 03:28:47.518" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170807 03:28:47.868" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170807 03:28:47.868" starttime="20170807 03:28:47.493"></status>
</kw>
<msg timestamp="20170807 03:28:47.868" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 03:28:47.868" level="INFO">${ret_values} = (u'Mem: 248572K used, 183696K free, 113116K shrd, 11264K buff, 150184K cached\nCPU:   8% usr  16% sys   0% nic  75% idle   0% io   0% irq   0% sirq\nLoad average: 1.67 1.37 0.60 1/147 1238\n  PID  PPI...</msg>
<status status="PASS" endtime="20170807 03:28:47.868" starttime="20170807 03:28:47.475"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170807 03:28:47.869" level="INFO">${stdout} = Mem: 248572K used, 183696K free, 113116K shrd, 11264K buff, 150184K cached
CPU:   8% usr  16% sys   0% nic  75% idle   0% io   0% irq   0% sirq
Load average: 1.67 1.37 0.60 1/147 1238
  PID  PPID USER...</msg>
<status status="PASS" endtime="20170807 03:28:47.869" starttime="20170807 03:28:47.869"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170807 03:28:47.870" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170807 03:28:47.870" starttime="20170807 03:28:47.869"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 03:28:47.880" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_proc_list.txt"&gt;/home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 03:28:47.880" starttime="20170807 03:28:47.879"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:47.880" starttime="20170807 03:28:47.878"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:47.880" starttime="20170807 03:28:47.870"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:47.880" starttime="20170807 03:28:47.472"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:47.880" starttime="20170807 03:28:47.471"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170807 03:28:47.881" level="INFO">${logpath} = /home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_dmesg.txt</msg>
<status status="PASS" endtime="20170807 03:28:47.881" starttime="20170807 03:28:47.881"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:28:47.883" starttime="20170807 03:28:47.882"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170807 03:28:47.883" level="INFO">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status status="PASS" endtime="20170807 03:28:47.883" starttime="20170807 03:28:47.883"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170807 03:28:47.925" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170807 03:28:47.925" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170807 03:28:47.982" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170807 03:28:47.982" starttime="20170807 03:28:47.901"></status>
</kw>
<msg timestamp="20170807 03:28:47.982" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 03:28:47.982" level="INFO">${ret_values} = (u'[    0.000000] Booting Linux on physical CPU 0x0\n[    0.000000] Linux version 4.10.17-03afe5775baf06c3037d62cc2a15628079af38c9 (jenkins@hudson) (gcc version 6.2.0 (GCC) ) #1 Tue Aug 1 17:31:09 UTC...</msg>
<status status="PASS" endtime="20170807 03:28:47.982" starttime="20170807 03:28:47.884"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170807 03:28:47.983" level="INFO">${stdout} = [    0.000000] Booting Linux on physical CPU 0x0
[    0.000000] Linux version 4.10.17-03afe5775baf06c3037d62cc2a15628079af38c9 (jenkins@hudson) (gcc version 6.2.0 (GCC) ) #1 Tue Aug 1 17:31:09 UTC 201...</msg>
<status status="PASS" endtime="20170807 03:28:47.983" starttime="20170807 03:28:47.983"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170807 03:28:47.984" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170807 03:28:47.984" starttime="20170807 03:28:47.983"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 03:28:47.991" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_dmesg.txt"&gt;/home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 03:28:47.991" starttime="20170807 03:28:47.990"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:47.991" starttime="20170807 03:28:47.989"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:47.991" starttime="20170807 03:28:47.984"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:47.991" starttime="20170807 03:28:47.881"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:47.991" starttime="20170807 03:28:47.880"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170807 03:28:47.992" level="INFO">${logpath} = /home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_journalctl.txt</msg>
<status status="PASS" endtime="20170807 03:28:47.992" starttime="20170807 03:28:47.992"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:28:47.993" starttime="20170807 03:28:47.993"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170807 03:28:47.994" level="INFO">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status status="PASS" endtime="20170807 03:28:47.994" starttime="20170807 03:28:47.994"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170807 03:28:48.037" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170807 03:28:48.037" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170807 03:28:49.236" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170807 03:28:49.236" starttime="20170807 03:28:48.012"></status>
</kw>
<msg timestamp="20170807 03:28:49.236" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 03:28:49.237" level="INFO">${ret_values} = (u'-- Logs begin at Mon 2017-08-07 03:25:41 UTC, end at Mon 2017-08-07 03:28:51 UTC. --\nAug 07 03:25:41 witherspoon kernel: Booting Linux on physical CPU 0x0\nAug 07 03:25:41 witherspoon kernel: Linu...</msg>
<status status="PASS" endtime="20170807 03:28:49.237" starttime="20170807 03:28:47.994"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170807 03:28:49.238" level="INFO">${stdout} = -- Logs begin at Mon 2017-08-07 03:25:41 UTC, end at Mon 2017-08-07 03:28:51 UTC. --
Aug 07 03:25:41 witherspoon kernel: Booting Linux on physical CPU 0x0
Aug 07 03:25:41 witherspoon kernel: Linux ver...</msg>
<status status="PASS" endtime="20170807 03:28:49.239" starttime="20170807 03:28:49.238"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170807 03:28:49.239" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170807 03:28:49.239" starttime="20170807 03:28:49.239"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 03:28:49.247" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_journalctl.txt"&gt;/home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 03:28:49.247" starttime="20170807 03:28:49.246"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:49.247" starttime="20170807 03:28:49.245"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:49.247" starttime="20170807 03:28:49.239"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:49.247" starttime="20170807 03:28:47.992"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:49.247" starttime="20170807 03:28:47.991"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:49.247" starttime="20170807 03:28:46.743"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:49.247" starttime="20170807 03:28:46.742"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:49.247" starttime="20170807 03:28:46.742"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:49.247" starttime="20170807 03:28:46.742"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:49.247" starttime="20170807 03:28:46.741"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:49.247" starttime="20170807 03:28:46.728"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:49.248" starttime="20170807 03:28:46.725"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:49.248" starttime="20170807 03:28:46.725"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:28:49.250" starttime="20170807 03:28:49.249"></status>
</kw>
<msg timestamp="20170807 03:28:49.250" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 03:28:49.250" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170807 03:28:49.250" starttime="20170807 03:28:49.249"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170807 03:28:49.250" starttime="20170807 03:28:49.250"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170807 03:28:49.268" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 03:28:49.268" starttime="20170807 03:28:49.268"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 03:28:49.269" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 03:28:49.269" starttime="20170807 03:28:49.269"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170807 03:28:49.270" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 03:28:49.270" starttime="20170807 03:28:49.269"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170807 03:28:49.270" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 03:28:49.271" starttime="20170807 03:28:49.270"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170807 03:28:49.473" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 03:28:49.473" starttime="20170807 03:28:49.271"></status>
</kw>
<msg timestamp="20170807 03:28:49.473" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 03:28:49.474" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 03:28:49.474" starttime="20170807 03:28:49.271"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170807 03:28:49.475" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 03:28:49.475" starttime="20170807 03:28:49.475"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 03:28:49.476" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 03:28:49.476" starttime="20170807 03:28:49.476"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:49.476" starttime="20170807 03:28:49.267"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:49.476" starttime="20170807 03:28:49.266"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:49.476" starttime="20170807 03:28:49.266"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170807 03:28:49.477" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" endtime="20170807 03:28:49.477" starttime="20170807 03:28:49.477"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:28:49.478" starttime="20170807 03:28:49.477"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170807 03:28:49.596" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170807 03:28:49.597" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 03:28:49.597" starttime="20170807 03:28:49.478"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:28:49.598" starttime="20170807 03:28:49.597"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170807 03:28:49.598" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 03:28:49.598" starttime="20170807 03:28:49.598"></status>
</kw>
<msg timestamp="20170807 03:28:49.598" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 03:28:49.598" starttime="20170807 03:28:49.265"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 03:28:49.600" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 03:28:49.600" starttime="20170807 03:28:49.599"></status>
</kw>
<msg timestamp="20170807 03:28:49.600" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170807 03:28:49.600" starttime="20170807 03:28:49.599"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<status status="PASS" endtime="20170807 03:28:49.600" starttime="20170807 03:28:49.600"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170807 03:28:49.601" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/1": {
      "AdditionalData": [], 
      "Id": 1, 
      "Message": "xyz.openbmc_project.Common.Error.InternalFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502076405804, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170807 03:28:49.601" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170807 03:28:49.601" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'/xyz/openbmc_project/logging/entry/1': {u'Resolved': 0, u'AdditionalData': [], u'Severity': u'xyz.openbmc_project.Logging.Entry.Level.Error', u'Ti...</msg>
<status status="PASS" endtime="20170807 03:28:49.601" starttime="20170807 03:28:49.601"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${content['data']}</arg>
</arguments>
<assign>
<var>${esel_list}</var>
</assign>
<msg timestamp="20170807 03:28:49.602" level="INFO">${esel_list} = [u'/xyz/openbmc_project/logging/entry/1']</msg>
<status status="PASS" endtime="20170807 03:28:49.602" starttime="20170807 03:28:49.601"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>esel</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170807 03:28:49.602" level="INFO">${logpath} = /home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_esel</msg>
<status status="PASS" endtime="20170807 03:28:49.602" starttime="20170807 03:28:49.602"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${logpath}</arg>
</arguments>
<msg timestamp="20170807 03:28:49.603" html="yes" level="INFO">Created file '&lt;a href="file:///home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_esel"&gt;/home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/20170807032841422364_esel&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 03:28:49.603" starttime="20170807 03:28:49.603"></status>
</kw>
<kw type="for" name="${entry_path} IN [ @{esel_list} ]">
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/1">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" endtime="20170807 03:28:49.605" starttime="20170807 03:28:49.604"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170807 03:28:49.608" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 03:28:49.609" starttime="20170807 03:28:49.608"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 03:28:49.609" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 03:28:49.609" starttime="20170807 03:28:49.609"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170807 03:28:49.610" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 03:28:49.610" starttime="20170807 03:28:49.610"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170807 03:28:49.611" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 03:28:49.611" starttime="20170807 03:28:49.610"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170807 03:28:49.792" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 03:28:49.792" starttime="20170807 03:28:49.612"></status>
</kw>
<msg timestamp="20170807 03:28:49.792" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 03:28:49.792" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 03:28:49.792" starttime="20170807 03:28:49.611"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170807 03:28:49.793" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 03:28:49.793" starttime="20170807 03:28:49.792"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 03:28:49.794" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 03:28:49.794" starttime="20170807 03:28:49.793"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:49.794" starttime="20170807 03:28:49.607"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:49.794" starttime="20170807 03:28:49.607"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:49.794" starttime="20170807 03:28:49.606"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170807 03:28:49.795" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/1/attr/AdditionalData</msg>
<status status="PASS" endtime="20170807 03:28:49.795" starttime="20170807 03:28:49.794"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:28:49.795" starttime="20170807 03:28:49.795"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170807 03:28:49.877" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/1/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170807 03:28:49.877" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 03:28:49.877" starttime="20170807 03:28:49.796"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:28:49.878" starttime="20170807 03:28:49.878"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170807 03:28:49.878" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 03:28:49.878" starttime="20170807 03:28:49.878"></status>
</kw>
<msg timestamp="20170807 03:28:49.879" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 03:28:49.879" starttime="20170807 03:28:49.605"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 03:28:49.879" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 03:28:49.880" starttime="20170807 03:28:49.879"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170807 03:28:49.880" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170807 03:28:49.880" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170807 03:28:49.880" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': []}</msg>
<status status="PASS" endtime="20170807 03:28:49.880" starttime="20170807 03:28:49.880"></status>
</kw>
<msg timestamp="20170807 03:28:49.881" level="INFO">${esel_data} = []</msg>
<status status="PASS" endtime="20170807 03:28:49.881" starttime="20170807 03:28:49.605"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170807 03:28:49.881" level="INFO">Length is 0</msg>
<msg timestamp="20170807 03:28:49.881" level="INFO">${length} = 0</msg>
<status status="PASS" endtime="20170807 03:28:49.881" starttime="20170807 03:28:49.881"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170807 03:28:49.882" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170807 03:28:49.882" starttime="20170807 03:28:49.882"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:49.882" starttime="20170807 03:28:49.604"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:49.882" starttime="20170807 03:28:49.603"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>which eSEL.pl</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20170807 03:28:49.899" level="INFO">Running command 'which eSEL.pl 2&gt;&amp;1'.</msg>
<msg timestamp="20170807 03:28:49.913" level="INFO">${out} = </msg>
<status status="PASS" endtime="20170807 03:28:49.913" starttime="20170807 03:28:49.882"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<msg timestamp="20170807 03:28:49.938" level="FAIL">'' does not contain 'eSEL.pl'</msg>
<status status="FAIL" endtime="20170807 03:28:49.939" starttime="20170807 03:28:49.935"></status>
</kw>
<msg timestamp="20170807 03:28:49.939" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170807 03:28:49.939" starttime="20170807 03:28:49.931"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170807 03:28:49.941" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170807 03:28:49.941" starttime="20170807 03:28:49.939"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:49.942" starttime="20170807 03:28:49.264"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:49.942" starttime="20170807 03:28:49.251"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:49.942" starttime="20170807 03:28:49.248"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:49.942" starttime="20170807 03:28:49.248"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:28:49.949" starttime="20170807 03:28:49.949"></status>
</kw>
<msg timestamp="20170807 03:28:49.949" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 03:28:49.949" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170807 03:28:49.950" starttime="20170807 03:28:49.947"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170807 03:28:49.952" starttime="20170807 03:28:49.950"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170807 03:28:49.978" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170807 03:28:49.978" starttime="20170807 03:28:49.978"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:49.978" starttime="20170807 03:28:49.977"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:49.978" starttime="20170807 03:28:49.952"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:49.978" starttime="20170807 03:28:49.944"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:49.979" starttime="20170807 03:28:49.943"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:49.979" starttime="20170807 03:28:42.377"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:49.979" starttime="20170807 03:28:42.374"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:49.979" starttime="20170807 03:28:42.374"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:49.979" starttime="20170807 03:28:42.374"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170807 03:28:50.032" starttime="20170807 03:28:49.985"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:50.032" starttime="20170807 03:28:49.979"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:50.032" starttime="20170807 03:28:42.373"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:50.033" starttime="20170807 03:28:38.366"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:50.033" starttime="20170807 03:28:38.365"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" endtime="20170807 03:28:50.034" starttime="20170807 03:28:50.033"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170807 03:28:50.035" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status status="PASS" endtime="20170807 03:28:50.035" starttime="20170807 03:28:50.035"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170807 03:28:50.036" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170807032841422364_UpdateBmc/20170807032841422364_InitiateCodeUpdateBMC/</msg>
<status status="PASS" endtime="20170807 03:28:50.036" starttime="20170807 03:28:50.035"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20170807 03:28:50.036" starttime="20170807 03:28:50.036"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170807 03:28:50.037" starttime="20170807 03:28:50.037"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170807 03:28:50.038" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld/logs"&gt;/home/fspcibld/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20170807 03:28:50.038" starttime="20170807 03:28:50.037"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170807 03:28:50.040" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170807 03:28:50.040" starttime="20170807 03:28:50.039"></status>
</kw>
<msg timestamp="20170807 03:28:50.040" level="INFO">${exist} = True</msg>
<status status="PASS" endtime="20170807 03:28:50.040" starttime="20170807 03:28:50.039"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" endtime="20170807 03:28:50.041" starttime="20170807 03:28:50.040"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170807 03:28:50.041" starttime="20170807 03:28:50.041"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170807 03:28:50.043" level="INFO">${cur_time} = 2017-08-07 03:28:50:042341</msg>
<status status="PASS" endtime="20170807 03:28:50.043" starttime="20170807 03:28:50.042"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170807 03:28:50.044" level="INFO">${cur_time} = 20170807032850042341</msg>
<status status="PASS" endtime="20170807 03:28:50.044" starttime="20170807 03:28:50.044"></status>
</kw>
<msg timestamp="20170807 03:28:50.044" level="INFO">${cur_time} = 20170807032850042341</msg>
<status status="PASS" endtime="20170807 03:28:50.044" starttime="20170807 03:28:50.042"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170807 03:28:50.046" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 03:28:50.046" starttime="20170807 03:28:50.044"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:50.046" starttime="20170807 03:28:50.034"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:50.046" starttime="20170807 03:28:38.039"></status>
</kw>
<status status="PASS" endtime="20170807 03:28:50.046" starttime="20170807 03:28:38.033"></status>
</kw>
<doc>Initiate a code update on the BMC.</doc>
<tags>
<tag>Initiate_Code_Update_BMC</tag>
</tags>
<status status="FAIL" endtime="20170807 03:28:50.046" critical="yes" starttime="20170807 03:24:28.860">'Verify error: update: --no-flash --ignore-mount --no-save-files --no-restore-files --no-clean-saved-files
ERROR: Image image-bmc too big for mtd0.
' does not contain 'to apply'</status>
</test>
<doc>Trigger code update to a target BMC.
Execution Method :
python -m robot -v OPENBMC_HOST:&lt;hostname&gt;
-v FILE_PATH:&lt;path/*all.tar&gt; update_bmc.robot

Code update method BMC using REST
Update work flow sequence:
- User input BMC File existence check
- Ping Test and REST authentication
- Set Host Power host setting Policy to RESTORE_LAST_STATE
On reboot this policy would ensure the BMC comes
online and stays at HOST_POWERED_OFF state.
- Issue poweroff
- Prune archived journal logs
- Prepare for Update
- Wait for BMC to come online clean
- Wait for BMC_READY state
- Apply preserve BMC Network setting
- SCP image to BMC
- Activate the flash image
- Warm Reset BMC to activate code
- Wait for BMC to come online time out 30 minutes
- Version check post update
- Identify REST url post update</doc>
<status status="FAIL" endtime="20170807 03:28:50.048" starttime="20170807 03:24:27.971"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">Initiate_Code_Update_BMC</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Update Bmc" pass="0">Update Bmc</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20170807 03:25:34.862" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff92500910&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=20.0)')': /login</msg>
<msg timestamp="20170807 03:25:55.084" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff92500390&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=20.0)')': /login</msg>
</errors>
</robot>
