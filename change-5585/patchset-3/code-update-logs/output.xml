<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170809 22:58:16.095" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/code_update/update_bmc.robot" id="s1" name="Update Bmc">
<test id="s1-t1" name="Initiate Code Update BMC">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${LAST_KNOWN_GOOD_VERSION}' != '${EMPTY}'</arg>
<arg>Run Keyword And Return Status</arg>
<arg>Validate BMC Version</arg>
<arg>${LAST_KNOWN_GOOD_VERSION}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<msg timestamp="20170809 22:58:17.020" level="INFO">${status} = None</msg>
<status status="PASS" endtime="20170809 22:58:17.020" starttime="20170809 22:58:17.019"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>Pass Execution</arg>
<arg>The BMC already has the requested build loaded so no further action will be taken.</arg>
</arguments>
<status status="PASS" endtime="20170809 22:58:17.021" starttime="20170809 22:58:17.020"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${FORCE_UPDATE} == ${0}</arg>
<arg>Prepare BMC For Update</arg>
</arguments>
<kw name="Prepare BMC For Update">
<doc>Prerequisite operation before code update.</doc>
<kw name="Check Boot Count And Time">
<doc>Check for unexpected reboots.</doc>
<kw name="Set BMC Reset Reference Time" library="utils">
<doc>Set current boot time as a reference and increment</doc>
<kw name="Get BMC Boot Time" library="utils">
<doc>Get boot time from /proc/stat.</doc>
<assign>
<var>${cur_btime}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170809 22:58:17.025" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170809 22:58:17.025" starttime="20170809 22:58:17.024"></status>
</kw>
<msg timestamp="20170809 22:58:17.025" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170809 22:58:17.025" starttime="20170809 22:58:17.024"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:58:17.026" starttime="20170809 22:58:17.026"></status>
</kw>
<status status="PASS" endtime="20170809 22:58:17.026" starttime="20170809 22:58:17.025"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170809 22:58:17.027" starttime="20170809 22:58:17.026"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170809 22:58:17.028" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170809 22:58:17.028" starttime="20170809 22:58:17.028"></status>
</kw>
<msg timestamp="20170809 22:58:17.028" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170809 22:58:17.028" starttime="20170809 22:58:17.027"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:58:17.030" starttime="20170809 22:58:17.030"></status>
</kw>
<status status="PASS" endtime="20170809 22:58:17.030" starttime="20170809 22:58:17.029"></status>
</kw>
<status status="PASS" endtime="20170809 22:58:17.030" starttime="20170809 22:58:17.029"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170809 22:58:17.031" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170809 22:58:18.717" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170809 22:58:18.718" starttime="20170809 22:58:17.031"></status>
</kw>
<status status="PASS" endtime="20170809 22:58:18.718" starttime="20170809 22:58:17.023"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>egrep '^btime ' /proc/stat | cut -f 2 -d ' '</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 22:58:18.719" level="INFO">Executing command 'egrep '^btime ' /proc/stat | cut -f 2 -d ' ''.</msg>
<msg timestamp="20170809 22:58:18.805" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170809 22:58:18.806" level="INFO">${output} = 1501774967</msg>
<msg timestamp="20170809 22:58:18.806" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170809 22:58:18.806" starttime="20170809 22:58:18.718"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170809 22:58:18.807" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170809 22:58:18.807" starttime="20170809 22:58:18.806"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${btime}</var>
</assign>
<msg timestamp="20170809 22:58:18.807" level="INFO">${btime} = 1501774967</msg>
<status status="PASS" endtime="20170809 22:58:18.807" starttime="20170809 22:58:18.807"></status>
</kw>
<msg timestamp="20170809 22:58:18.808" level="INFO">${cur_btime} = 1501774967</msg>
<status status="PASS" endtime="20170809 22:58:18.808" starttime="20170809 22:58:17.022"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_TIME} == ${0} and ${BOOT_COUNT} == ${0}</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>ELSE IF</arg>
<arg>${cur_btime} &gt; ${BOOT_TIME}</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_COUNT}</arg>
<arg>${BOOT_COUNT + 1}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
</arguments>
<msg timestamp="20170809 22:58:18.809" level="INFO">${BOOT_TIME} = 1501774967</msg>
<status status="PASS" endtime="20170809 22:58:18.810" starttime="20170809 22:58:18.809"></status>
</kw>
<status status="PASS" endtime="20170809 22:58:18.810" starttime="20170809 22:58:18.808"></status>
</kw>
<status status="PASS" endtime="20170809 22:58:18.810" starttime="20170809 22:58:17.022"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Count: ${BOOT_COUNT}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:58:18.810" starttime="20170809 22:58:18.810"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Time: ${BOOT_TIME}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:58:18.811" starttime="20170809 22:58:18.811"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_COUNT} &gt; ${MAX_BOOT_COUNT}</arg>
<arg>Log</arg>
<arg>Phantom Reboot!!! Unexpected reboot detected</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20170809 22:58:18.812" starttime="20170809 22:58:18.811"></status>
</kw>
<status status="PASS" endtime="20170809 22:58:18.812" starttime="20170809 22:58:17.022"></status>
</kw>
<kw name="Prune Journal Log" library="utils">
<doc>Prune archived journal logs.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170809 22:58:18.815" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170809 22:58:18.815" starttime="20170809 22:58:18.815"></status>
</kw>
<msg timestamp="20170809 22:58:18.815" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170809 22:58:18.815" starttime="20170809 22:58:18.814"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:58:18.816" starttime="20170809 22:58:18.816"></status>
</kw>
<status status="PASS" endtime="20170809 22:58:18.816" starttime="20170809 22:58:18.816"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170809 22:58:18.817" starttime="20170809 22:58:18.817"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170809 22:58:18.818" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170809 22:58:18.818" starttime="20170809 22:58:18.818"></status>
</kw>
<msg timestamp="20170809 22:58:18.818" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170809 22:58:18.819" starttime="20170809 22:58:18.818"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:58:18.820" starttime="20170809 22:58:18.820"></status>
</kw>
<status status="PASS" endtime="20170809 22:58:18.820" starttime="20170809 22:58:18.820"></status>
</kw>
<status status="PASS" endtime="20170809 22:58:18.820" starttime="20170809 22:58:18.819"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170809 22:58:18.821" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170809 22:58:20.515" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170809 22:58:20.516" starttime="20170809 22:58:18.821"></status>
</kw>
<status status="PASS" endtime="20170809 22:58:20.516" starttime="20170809 22:58:18.813"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>journalctl --vacuum-size=${vacuum_size}</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170809 22:58:20.517" level="INFO">Executing command 'journalctl --vacuum-size=1M'.</msg>
<msg timestamp="20170809 22:58:20.594" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170809 22:58:20.595" level="INFO">${output} = </msg>
<msg timestamp="20170809 22:58:20.595" level="INFO">${stderr} = Vacuuming done, freed 0B of archived journals from /run/log/journal/98da6a547f8141998b98e23f5894fd04.</msg>
<msg timestamp="20170809 22:58:20.595" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20170809 22:58:20.595" starttime="20170809 22:58:20.516"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${stderr}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:58:20.596" starttime="20170809 22:58:20.595"></status>
</kw>
<status status="PASS" endtime="20170809 22:58:20.596" starttime="20170809 22:58:18.812"></status>
</kw>
<kw name="Power Off Request" library="state_manager">
<doc>Select appropriate poweroff keyword.</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${OBMC_STATES_VERSION}' == '${0}'</arg>
<arg>Initiate Power Off</arg>
<arg>ELSE</arg>
<arg>Initiate Host PowerOff</arg>
</arguments>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170809 22:58:20.599" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status status="PASS" endtime="20170809 22:58:20.599" starttime="20170809 22:58:20.598"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 22:58:20.600" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" endtime="20170809 22:58:20.600" starttime="20170809 22:58:20.600"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 22:58:20.603" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 22:58:20.604" starttime="20170809 22:58:20.603"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 22:58:20.604" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 22:58:20.604" starttime="20170809 22:58:20.604"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 22:58:20.605" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 22:58:20.605" starttime="20170809 22:58:20.605"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 22:58:20.606" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 22:58:20.606" starttime="20170809 22:58:20.605"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 22:58:20.798" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 22:58:20.798" starttime="20170809 22:58:20.607"></status>
</kw>
<msg timestamp="20170809 22:58:20.798" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 22:58:20.798" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 22:58:20.798" starttime="20170809 22:58:20.606"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 22:58:20.799" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:58:20.799" starttime="20170809 22:58:20.799"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 22:58:20.800" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:58:20.800" starttime="20170809 22:58:20.800"></status>
</kw>
<status status="PASS" endtime="20170809 22:58:20.800" starttime="20170809 22:58:20.602"></status>
</kw>
<status status="PASS" endtime="20170809 22:58:20.800" starttime="20170809 22:58:20.602"></status>
</kw>
<status status="PASS" endtime="20170809 22:58:20.800" starttime="20170809 22:58:20.601"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 22:58:20.801" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" endtime="20170809 22:58:20.801" starttime="20170809 22:58:20.801"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 22:58:20.802" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 22:58:20.802" starttime="20170809 22:58:20.801"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:58:20.802" starttime="20170809 22:58:20.802"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 22:58:20.804" level="INFO">${msg} = URI:https://9.41.166.169/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Ty...</msg>
<status status="PASS" endtime="20170809 22:58:20.804" starttime="20170809 22:58:20.803"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 22:58:20.805" level="INFO">URI:https://9.41.166.169/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170809 22:58:20.805" starttime="20170809 22:58:20.805"></status>
</kw>
<status status="PASS" endtime="20170809 22:58:20.806" starttime="20170809 22:58:20.804"></status>
</kw>
<status status="PASS" endtime="20170809 22:58:20.808" starttime="20170809 22:58:20.802"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 22:58:21.084" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170809 22:58:21.084" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 22:58:21.085" starttime="20170809 22:58:20.808"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 22:58:21.086" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170809 22:58:21.086" starttime="20170809 22:58:21.085"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 22:58:21.087" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170809 22:58:21.087" starttime="20170809 22:58:21.087"></status>
</kw>
<status status="PASS" endtime="20170809 22:58:21.088" starttime="20170809 22:58:21.086"></status>
</kw>
<status status="PASS" endtime="20170809 22:58:21.088" starttime="20170809 22:58:21.085"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 22:58:21.089" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170809 22:58:21.089" starttime="20170809 22:58:21.089"></status>
</kw>
<msg timestamp="20170809 22:58:21.090" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 22:58:21.090" starttime="20170809 22:58:20.600"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 22:58:21.091" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:58:21.091" starttime="20170809 22:58:21.090"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170809 22:58:21.092" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 22:58:21.092" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 22:58:21.092" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170809 22:58:21.092" starttime="20170809 22:58:21.091"></status>
</kw>
<status status="PASS" endtime="20170809 22:58:21.092" starttime="20170809 22:58:20.599"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" endtime="20170809 22:58:21.093" starttime="20170809 22:58:21.093"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 22:58:21.101" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 22:58:21.101" starttime="20170809 22:58:21.100"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 22:58:21.102" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 22:58:21.103" starttime="20170809 22:58:21.102"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 22:58:21.103" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 22:58:21.103" starttime="20170809 22:58:21.103"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 22:58:21.104" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 22:58:21.104" starttime="20170809 22:58:21.103"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 22:58:21.676" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 22:58:21.676" starttime="20170809 22:58:21.105"></status>
</kw>
<msg timestamp="20170809 22:58:21.676" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 22:58:21.676" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 22:58:21.676" starttime="20170809 22:58:21.104"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 22:58:21.677" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:58:21.677" starttime="20170809 22:58:21.677"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 22:58:21.678" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:58:21.678" starttime="20170809 22:58:21.677"></status>
</kw>
<status status="PASS" endtime="20170809 22:58:21.678" starttime="20170809 22:58:21.099"></status>
</kw>
<status status="PASS" endtime="20170809 22:58:21.678" starttime="20170809 22:58:21.099"></status>
</kw>
<status status="PASS" endtime="20170809 22:58:21.678" starttime="20170809 22:58:21.098"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 22:58:21.679" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170809 22:58:21.679" starttime="20170809 22:58:21.679"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:58:21.680" starttime="20170809 22:58:21.679"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 22:58:21.872" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 22:58:21.872" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 22:58:21.872" starttime="20170809 22:58:21.680"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:58:21.873" starttime="20170809 22:58:21.873"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 22:58:21.874" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170809 22:58:21.874" starttime="20170809 22:58:21.873"></status>
</kw>
<msg timestamp="20170809 22:58:21.874" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 22:58:21.874" starttime="20170809 22:58:21.097"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 22:58:21.875" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:58:21.875" starttime="20170809 22:58:21.874"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 22:58:21.875" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 22:58:21.875" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 22:58:21.875" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status status="PASS" endtime="20170809 22:58:21.875" starttime="20170809 22:58:21.875"></status>
</kw>
<msg timestamp="20170809 22:58:21.876" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170809 22:58:21.876" starttime="20170809 22:58:21.096"></status>
</kw>
<msg timestamp="20170809 22:58:21.876" level="INFO">${power_state} = Off</msg>
<status status="PASS" endtime="20170809 22:58:21.876" starttime="20170809 22:58:21.095"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:58:21.877" starttime="20170809 22:58:21.876"></status>
</kw>
<status status="PASS" endtime="20170809 22:58:21.877" starttime="20170809 22:58:21.095"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 22:58:21.881" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 22:58:21.881" starttime="20170809 22:58:21.880"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 22:58:21.882" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 22:58:21.882" starttime="20170809 22:58:21.882"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 22:58:21.883" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 22:58:21.883" starttime="20170809 22:58:21.882"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 22:58:21.884" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 22:58:21.884" starttime="20170809 22:58:21.883"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 22:58:22.343" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 22:58:22.343" starttime="20170809 22:58:21.885"></status>
</kw>
<msg timestamp="20170809 22:58:22.343" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 22:58:22.343" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 22:58:22.343" starttime="20170809 22:58:21.884"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 22:58:22.344" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:58:22.344" starttime="20170809 22:58:22.344"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 22:58:22.345" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:58:22.345" starttime="20170809 22:58:22.345"></status>
</kw>
<status status="PASS" endtime="20170809 22:58:22.345" starttime="20170809 22:58:21.880"></status>
</kw>
<status status="PASS" endtime="20170809 22:58:22.345" starttime="20170809 22:58:21.879"></status>
</kw>
<status status="PASS" endtime="20170809 22:58:22.345" starttime="20170809 22:58:21.879"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 22:58:22.346" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170809 22:58:22.346" starttime="20170809 22:58:22.346"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:58:22.347" starttime="20170809 22:58:22.346"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 22:58:22.457" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 22:58:22.458" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 22:58:22.458" starttime="20170809 22:58:22.347"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:58:22.458" starttime="20170809 22:58:22.458"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 22:58:22.459" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170809 22:58:22.459" starttime="20170809 22:58:22.459"></status>
</kw>
<msg timestamp="20170809 22:58:22.459" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 22:58:22.459" starttime="20170809 22:58:21.878"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 22:58:22.460" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:58:22.460" starttime="20170809 22:58:22.459"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 22:58:22.460" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 22:58:22.461" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 22:58:22.461" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170809 22:58:22.461" starttime="20170809 22:58:22.460"></status>
</kw>
<msg timestamp="20170809 22:58:22.461" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170809 22:58:22.461" starttime="20170809 22:58:21.877"></status>
</kw>
<msg timestamp="20170809 22:58:22.461" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170809 22:58:22.461" starttime="20170809 22:58:21.877"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:58:22.462" starttime="20170809 22:58:22.462"></status>
</kw>
<status status="PASS" endtime="20170809 22:58:22.462" starttime="20170809 22:58:21.094"></status>
</kw>
<status status="PASS" endtime="20170809 22:58:22.462" starttime="20170809 22:58:21.094"></status>
</kw>
<status status="PASS" endtime="20170809 22:58:22.462" starttime="20170809 22:58:20.598"></status>
</kw>
<status status="PASS" endtime="20170809 22:58:22.462" starttime="20170809 22:58:20.597"></status>
</kw>
<status status="PASS" endtime="20170809 22:58:22.462" starttime="20170809 22:58:20.596"></status>
</kw>
<kw name="Set Policy Setting" library="code_update_utils">
<doc>Set the given test policy</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20170809 22:58:22.463" level="INFO">${valueDict} = {u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170809 22:58:22.464" starttime="20170809 22:58:22.463"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 22:58:22.465" level="INFO">${base_uri} = /org/openbmc/settings/host0</msg>
<status status="PASS" endtime="20170809 22:58:22.465" starttime="20170809 22:58:22.464"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 22:58:22.468" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 22:58:22.468" starttime="20170809 22:58:22.467"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 22:58:22.469" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 22:58:22.469" starttime="20170809 22:58:22.469"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 22:58:22.470" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 22:58:22.470" starttime="20170809 22:58:22.469"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 22:58:22.470" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 22:58:22.470" starttime="20170809 22:58:22.470"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 22:58:22.669" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 22:58:22.669" starttime="20170809 22:58:22.471"></status>
</kw>
<msg timestamp="20170809 22:58:22.669" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 22:58:22.669" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 22:58:22.670" starttime="20170809 22:58:22.471"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 22:58:22.670" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:58:22.670" starttime="20170809 22:58:22.670"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 22:58:22.671" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:58:22.671" starttime="20170809 22:58:22.671"></status>
</kw>
<status status="PASS" endtime="20170809 22:58:22.671" starttime="20170809 22:58:22.467"></status>
</kw>
<status status="PASS" endtime="20170809 22:58:22.671" starttime="20170809 22:58:22.466"></status>
</kw>
<status status="PASS" endtime="20170809 22:58:22.671" starttime="20170809 22:58:22.466"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 22:58:22.672" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170809 22:58:22.672" starttime="20170809 22:58:22.672"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 22:58:22.673" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 22:58:22.673" starttime="20170809 22:58:22.672"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:58:22.674" starttime="20170809 22:58:22.673"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 22:58:22.675" level="INFO">${msg} = URI:https://9.41.166.169/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': u'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170809 22:58:22.675" starttime="20170809 22:58:22.674"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 22:58:22.676" level="INFO">URI:https://9.41.166.169/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': u'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170809 22:58:22.676" starttime="20170809 22:58:22.676"></status>
</kw>
<status status="PASS" endtime="20170809 22:58:22.676" starttime="20170809 22:58:22.675"></status>
</kw>
<status status="PASS" endtime="20170809 22:58:22.676" starttime="20170809 22:58:22.674"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 22:58:22.861" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, data={"data": "RESTORE_LAST_STATE"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170809 22:58:22.861" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 22:58:22.861" starttime="20170809 22:58:22.677"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 22:58:22.863" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170809 22:58:22.863" starttime="20170809 22:58:22.862"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 22:58:22.864" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170809 22:58:22.864" starttime="20170809 22:58:22.864"></status>
</kw>
<status status="PASS" endtime="20170809 22:58:22.864" starttime="20170809 22:58:22.863"></status>
</kw>
<status status="PASS" endtime="20170809 22:58:22.864" starttime="20170809 22:58:22.862"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 22:58:22.866" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170809 22:58:22.866" starttime="20170809 22:58:22.866"></status>
</kw>
<msg timestamp="20170809 22:58:22.866" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 22:58:22.866" starttime="20170809 22:58:22.465"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 22:58:22.867" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:58:22.867" starttime="20170809 22:58:22.867"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170809 22:58:22.868" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 22:58:22.868" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 22:58:22.868" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170809 22:58:22.868" starttime="20170809 22:58:22.868"></status>
</kw>
<status status="PASS" endtime="20170809 22:58:22.868" starttime="20170809 22:58:22.464"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 22:58:22.875" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 22:58:22.875" starttime="20170809 22:58:22.874"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 22:58:22.876" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 22:58:22.876" starttime="20170809 22:58:22.875"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 22:58:22.876" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 22:58:22.877" starttime="20170809 22:58:22.876"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 22:58:22.877" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 22:58:22.877" starttime="20170809 22:58:22.877"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 22:58:23.111" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 22:58:23.111" starttime="20170809 22:58:22.878"></status>
</kw>
<msg timestamp="20170809 22:58:23.111" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 22:58:23.111" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 22:58:23.111" starttime="20170809 22:58:22.878"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 22:58:23.112" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:58:23.112" starttime="20170809 22:58:23.111"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 22:58:23.113" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:58:23.113" starttime="20170809 22:58:23.112"></status>
</kw>
<status status="PASS" endtime="20170809 22:58:23.113" starttime="20170809 22:58:22.874"></status>
</kw>
<status status="PASS" endtime="20170809 22:58:23.113" starttime="20170809 22:58:22.873"></status>
</kw>
<status status="PASS" endtime="20170809 22:58:23.113" starttime="20170809 22:58:22.870"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 22:58:23.114" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170809 22:58:23.114" starttime="20170809 22:58:23.114"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:58:23.115" starttime="20170809 22:58:23.115"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 22:58:23.202" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, headers=None json=None</msg>
<msg timestamp="20170809 22:58:23.202" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 22:58:23.202" starttime="20170809 22:58:23.115"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:58:23.203" starttime="20170809 22:58:23.203"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 22:58:23.203" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170809 22:58:23.204" starttime="20170809 22:58:23.203"></status>
</kw>
<msg timestamp="20170809 22:58:23.204" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 22:58:23.204" starttime="20170809 22:58:22.869"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 22:58:23.204" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:58:23.205" starttime="20170809 22:58:23.204"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 22:58:23.205" level="INFO">To JSON using : content={
  "data": "RESTORE_LAST_STATE", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 22:58:23.205" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 22:58:23.205" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170809 22:58:23.205" starttime="20170809 22:58:23.205"></status>
</kw>
<msg timestamp="20170809 22:58:23.206" level="INFO">${currentPolicy} = RESTORE_LAST_STATE</msg>
<status status="PASS" endtime="20170809 22:58:23.206" starttime="20170809 22:58:22.869"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${currentPolicy}</arg>
<arg>${policy}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:58:23.207" starttime="20170809 22:58:23.206"></status>
</kw>
<status status="PASS" endtime="20170809 22:58:23.207" starttime="20170809 22:58:22.463"></status>
</kw>
<kw name="Prepare For Update" library="code_update_utils">
<doc>Switch to update mode in progress. This method calls</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 22:58:23.208" level="INFO">${data} = {u'data': []}</msg>
<status status="PASS" endtime="20170809 22:58:23.208" starttime="20170809 22:58:23.208"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${BMC_PREP_METHOD}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 22:58:23.213" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 22:58:23.213" starttime="20170809 22:58:23.212"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 22:58:23.214" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 22:58:23.214" starttime="20170809 22:58:23.213"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 22:58:23.214" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 22:58:23.214" starttime="20170809 22:58:23.214"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 22:58:23.215" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 22:58:23.215" starttime="20170809 22:58:23.215"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 22:58:23.459" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 22:58:23.459" starttime="20170809 22:58:23.216"></status>
</kw>
<msg timestamp="20170809 22:58:23.459" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 22:58:23.459" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 22:58:23.459" starttime="20170809 22:58:23.215"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 22:58:23.460" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:58:23.460" starttime="20170809 22:58:23.459"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 22:58:23.460" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:58:23.460" starttime="20170809 22:58:23.460"></status>
</kw>
<status status="PASS" endtime="20170809 22:58:23.461" starttime="20170809 22:58:23.211"></status>
</kw>
<status status="PASS" endtime="20170809 22:58:23.461" starttime="20170809 22:58:23.211"></status>
</kw>
<status status="PASS" endtime="20170809 22:58:23.461" starttime="20170809 22:58:23.210"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 22:58:23.461" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc/action/PrepareForUpdate</msg>
<status status="PASS" endtime="20170809 22:58:23.461" starttime="20170809 22:58:23.461"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 22:58:23.462" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 22:58:23.462" starttime="20170809 22:58:23.462"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:58:23.463" starttime="20170809 22:58:23.462"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:58:23.463" starttime="20170809 22:58:23.463"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 22:58:23.875" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc/action/PrepareForUpdate, data={"data": []}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20170809 22:58:23.876" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 22:58:23.876" starttime="20170809 22:58:23.464"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:58:23.876" starttime="20170809 22:58:23.876"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 22:58:23.877" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170809 22:58:23.877" starttime="20170809 22:58:23.877"></status>
</kw>
<msg timestamp="20170809 22:58:23.877" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 22:58:23.877" starttime="20170809 22:58:23.209"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 22:58:23.878" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 22:58:23.878" starttime="20170809 22:58:23.877"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10s</arg>
</arguments>
<msg timestamp="20170809 22:58:33.879" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20170809 22:58:33.879" starttime="20170809 22:58:23.878"></status>
</kw>
<status status="PASS" endtime="20170809 22:58:33.879" starttime="20170809 22:58:23.207"></status>
</kw>
<kw name="Check If BMC is Up" library="utils">
<doc>Wait for Host to be online. Checks every X seconds</doc>
<arguments>
<arg>20 min</arg>
<arg>10 sec</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${max_timeout}</arg>
<arg>${interval}</arg>
<arg>Verify Ping and REST Authentication</arg>
</arguments>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170809 22:58:33.882" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170809 22:58:33.882" starttime="20170809 22:58:33.882"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170809 22:58:33.887" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170809 22:58:36.892" level="INFO">${RC} = 0</msg>
<msg timestamp="20170809 22:58:36.892" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=0.711 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=6.12 ms
64 bytes from 9.41.166.169...</msg>
<status status="PASS" endtime="20170809 22:58:36.892" starttime="20170809 22:58:33.883"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170809 22:58:36.895" level="INFO">RC: 0
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=0.711 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=6.12 ms
64 bytes from 9.41.166.169: icmp_seq=3 ttl=63 time=0.563 ms
64 bytes from 9.41.166.169: icmp_seq=4 ttl=63 time=1.27 ms

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.563/2.166/6.120/2.298 ms</msg>
<status status="PASS" endtime="20170809 22:58:36.895" starttime="20170809 22:58:36.894"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:58:36.896" starttime="20170809 22:58:36.895"></status>
</kw>
<status status="PASS" endtime="20170809 22:58:36.896" starttime="20170809 22:58:33.882"></status>
</kw>
<msg timestamp="20170809 22:58:36.896" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170809 22:58:36.896" starttime="20170809 22:58:33.881"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170809 22:58:36.897" starttime="20170809 22:58:36.896"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 22:58:36.900" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 22:58:36.901" starttime="20170809 22:58:36.899"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 22:58:36.901" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 22:58:36.901" starttime="20170809 22:58:36.901"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 22:58:36.902" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 22:58:36.902" starttime="20170809 22:58:36.902"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 22:58:36.903" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 22:58:36.903" starttime="20170809 22:58:36.902"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 22:58:36.906" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff7c5ead50&gt;: Failed to establish a new connection: [Errno 111] Connection refused',)': /login</msg>
<msg timestamp="20170809 22:58:37.108" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff7c5eae50&gt;: Failed to establish a new connection: [Errno 111] Connection refused',)': /login</msg>
<msg timestamp="20170809 22:58:37.510" level="WARN">Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff7c5eab10&gt;: Failed to establish a new connection: [Errno 111] Connection refused',)': /login</msg>
<msg timestamp="20170809 22:58:37.513" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.41.166.169', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff7c5ea790&gt;: Failed to establish a new connection: [Errno 111] Connection refused',))</msg>
<status status="FAIL" endtime="20170809 22:58:37.513" starttime="20170809 22:58:36.903"></status>
</kw>
<msg timestamp="20170809 22:58:37.514" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170809 22:58:37.514" level="INFO">${resp} = ConnectionError: HTTPSConnectionPool(host='9.41.166.169', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff7c...</msg>
<status status="PASS" endtime="20170809 22:58:37.514" starttime="20170809 22:58:36.903"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 22:58:37.514" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170809 22:58:37.515" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.41.166.169', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff7c5ea790&gt;: Failed to establish a new connection: [Errno 111] Connection refused',)): FAIL != PASS</msg>
<status status="FAIL" endtime="20170809 22:58:37.515" starttime="20170809 22:58:37.514"></status>
</kw>
<status status="FAIL" endtime="20170809 22:58:37.515" starttime="20170809 22:58:36.899"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 22:58:57.517" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 22:58:57.517" starttime="20170809 22:58:57.517"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 22:58:57.518" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 22:58:57.518" starttime="20170809 22:58:57.518"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 22:58:57.519" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 22:58:57.519" starttime="20170809 22:58:57.518"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 22:58:57.519" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 22:58:57.520" starttime="20170809 22:58:57.519"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 22:59:15.553" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff7c57fd10&gt;: Failed to establish a new connection: [Errno 113] No route to host',)': /login</msg>
<msg timestamp="20170809 22:59:18.753" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff7c57f150&gt;: Failed to establish a new connection: [Errno 113] No route to host',)': /login</msg>
<msg timestamp="20170809 22:59:21.953" level="WARN">Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff7c57f790&gt;: Failed to establish a new connection: [Errno 113] No route to host',)': /login</msg>
<msg timestamp="20170809 22:59:24.553" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.41.166.169', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff7c58aa10&gt;: Failed to establish a new connection: [Errno 113] No route to host',))</msg>
<status status="FAIL" endtime="20170809 22:59:24.553" starttime="20170809 22:58:57.520"></status>
</kw>
<msg timestamp="20170809 22:59:24.553" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170809 22:59:24.553" level="INFO">${resp} = ConnectionError: HTTPSConnectionPool(host='9.41.166.169', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff7c...</msg>
<status status="PASS" endtime="20170809 22:59:24.553" starttime="20170809 22:58:57.520"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 22:59:24.554" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170809 22:59:24.554" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.41.166.169', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff7c58aa10&gt;: Failed to establish a new connection: [Errno 113] No route to host',)): FAIL != PASS</msg>
<status status="FAIL" endtime="20170809 22:59:24.554" starttime="20170809 22:59:24.554"></status>
</kw>
<status status="FAIL" endtime="20170809 22:59:24.555" starttime="20170809 22:58:57.516"></status>
</kw>
<msg timestamp="20170809 22:59:24.555" level="FAIL">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ConnectionError: HTTPSConnectionPool(host='9.41.166.169', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff7c58aa10&gt;: Failed to establish a new connection: [Errno 113] No route to host',)): FAIL != PASS</msg>
<status status="FAIL" endtime="20170809 22:59:24.555" starttime="20170809 22:58:36.898"></status>
</kw>
<status status="FAIL" endtime="20170809 22:59:24.555" starttime="20170809 22:58:36.897"></status>
</kw>
<msg timestamp="20170809 22:59:24.555" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20170809 22:59:24.555" starttime="20170809 22:58:36.897"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20170809 22:59:24.556" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20170809 22:59:24.556" starttime="20170809 22:59:24.556"></status>
</kw>
<status status="FAIL" endtime="20170809 22:59:24.556" starttime="20170809 22:59:24.555"></status>
</kw>
<status status="FAIL" endtime="20170809 22:59:24.557" starttime="20170809 22:58:33.881"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170809 22:59:34.559" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170809 22:59:34.559" starttime="20170809 22:59:34.559"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170809 22:59:34.563" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170809 22:59:40.587" level="INFO">${RC} = 1</msg>
<msg timestamp="20170809 22:59:40.587" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
From 9.41.165.94 icmp_seq=1 Destination Host Unreachable
From 9.41.165.94 icmp_seq=2 Destination Host Unreachable
From 9.41.165.94 icmp_seq=3 Des...</msg>
<status status="PASS" endtime="20170809 22:59:40.587" starttime="20170809 22:59:34.559"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170809 22:59:40.606" level="INFO">RC: 1
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
From 9.41.165.94 icmp_seq=1 Destination Host Unreachable
From 9.41.165.94 icmp_seq=2 Destination Host Unreachable
From 9.41.165.94 icmp_seq=3 Destination Host Unreachable
From 9.41.165.94 icmp_seq=4 Destination Host Unreachable

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, +4 errors, 100% packet loss, time 3016ms
pipe 3</msg>
<status status="PASS" endtime="20170809 22:59:40.606" starttime="20170809 22:59:40.602"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20170809 22:59:40.607" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20170809 22:59:40.608" starttime="20170809 22:59:40.607"></status>
</kw>
<status status="FAIL" endtime="20170809 22:59:40.608" starttime="20170809 22:59:34.558"></status>
</kw>
<msg timestamp="20170809 22:59:40.608" level="INFO">${l_ping} = False</msg>
<status status="PASS" endtime="20170809 22:59:40.608" starttime="20170809 22:59:34.558"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=Ping Failed</arg>
</arguments>
<msg timestamp="20170809 22:59:40.610" level="FAIL">Ping Failed</msg>
<status status="FAIL" endtime="20170809 22:59:40.610" starttime="20170809 22:59:40.609"></status>
</kw>
<status status="FAIL" endtime="20170809 22:59:40.610" starttime="20170809 22:59:40.609"></status>
</kw>
<status status="FAIL" endtime="20170809 22:59:40.610" starttime="20170809 22:59:34.557"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170809 22:59:50.613" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170809 22:59:50.613" starttime="20170809 22:59:50.612"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170809 22:59:50.616" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170809 22:59:53.626" level="INFO">${RC} = 0</msg>
<msg timestamp="20170809 22:59:53.626" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=999 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.556 ms
64 bytes from 9.41.166.169:...</msg>
<status status="PASS" endtime="20170809 22:59:53.626" starttime="20170809 22:59:50.613"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170809 22:59:53.632" level="INFO">RC: 0
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=999 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.556 ms
64 bytes from 9.41.166.169: icmp_seq=3 ttl=63 time=1.23 ms
64 bytes from 9.41.166.169: icmp_seq=4 ttl=63 time=0.510 ms

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.510/250.403/999.307/432.380 ms</msg>
<status status="PASS" endtime="20170809 22:59:53.633" starttime="20170809 22:59:53.632"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170809 22:59:53.633" starttime="20170809 22:59:53.633"></status>
</kw>
<status status="PASS" endtime="20170809 22:59:53.633" starttime="20170809 22:59:50.612"></status>
</kw>
<msg timestamp="20170809 22:59:53.634" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170809 22:59:53.634" starttime="20170809 22:59:50.611"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170809 22:59:53.635" starttime="20170809 22:59:53.634"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 22:59:53.638" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 22:59:53.640" starttime="20170809 22:59:53.637"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 22:59:53.640" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 22:59:53.640" starttime="20170809 22:59:53.640"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 22:59:53.641" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 22:59:53.641" starttime="20170809 22:59:53.641"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 22:59:53.642" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 22:59:53.642" starttime="20170809 22:59:53.641"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 23:00:13.649" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="FAIL" endtime="20170809 23:00:13.649" starttime="20170809 22:59:53.643"></status>
</kw>
<msg timestamp="20170809 23:00:13.650" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170809 23:00:13.650" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="PASS" endtime="20170809 23:00:13.650" starttime="20170809 22:59:53.642"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 23:00:13.651" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170809 23:00:13.651" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170809 23:00:13.651" starttime="20170809 23:00:13.650"></status>
</kw>
<status status="FAIL" endtime="20170809 23:00:13.651" starttime="20170809 22:59:53.637"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 23:00:33.653" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 23:00:33.653" starttime="20170809 23:00:33.653"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 23:00:33.654" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 23:00:33.654" starttime="20170809 23:00:33.654"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 23:00:33.655" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 23:00:33.655" starttime="20170809 23:00:33.654"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 23:00:33.655" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 23:00:33.655" starttime="20170809 23:00:33.655"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 23:00:52.593" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 23:00:52.593" starttime="20170809 23:00:33.656"></status>
</kw>
<msg timestamp="20170809 23:00:52.593" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 23:00:52.593" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 23:00:52.593" starttime="20170809 23:00:33.656"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 23:00:52.594" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 23:00:52.594" starttime="20170809 23:00:52.594"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 23:00:52.595" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 23:00:52.595" starttime="20170809 23:00:52.594"></status>
</kw>
<status status="PASS" endtime="20170809 23:00:52.595" starttime="20170809 23:00:33.652"></status>
</kw>
<status status="PASS" endtime="20170809 23:00:52.595" starttime="20170809 22:59:53.636"></status>
</kw>
<status status="PASS" endtime="20170809 23:00:52.595" starttime="20170809 22:59:53.635"></status>
</kw>
<msg timestamp="20170809 23:00:52.595" level="INFO">${l_rest} = True</msg>
<status status="PASS" endtime="20170809 23:00:52.595" starttime="20170809 22:59:53.635"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<status status="PASS" endtime="20170809 23:00:52.596" starttime="20170809 23:00:52.595"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170809 23:00:52.597" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170809 23:00:52.598" starttime="20170809 23:00:52.597"></status>
</kw>
<msg timestamp="20170809 23:00:52.598" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170809 23:00:52.598" starttime="20170809 23:00:52.597"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170809 23:00:52.599" starttime="20170809 23:00:52.599"></status>
</kw>
<status status="PASS" endtime="20170809 23:00:52.599" starttime="20170809 23:00:52.598"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170809 23:00:52.600" starttime="20170809 23:00:52.599"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170809 23:00:52.601" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170809 23:00:52.601" starttime="20170809 23:00:52.601"></status>
</kw>
<msg timestamp="20170809 23:00:52.601" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170809 23:00:52.601" starttime="20170809 23:00:52.600"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170809 23:00:52.604" starttime="20170809 23:00:52.603"></status>
</kw>
<status status="PASS" endtime="20170809 23:00:52.604" starttime="20170809 23:00:52.602"></status>
</kw>
<status status="PASS" endtime="20170809 23:00:52.604" starttime="20170809 23:00:52.601"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170809 23:00:52.605" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170809 23:00:55.341" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170809 23:00:55.341" starttime="20170809 23:00:52.605"></status>
</kw>
<status status="PASS" endtime="20170809 23:00:55.341" starttime="20170809 23:00:52.596"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>hostname</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${system}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 23:00:55.342" level="INFO">Executing command 'hostname'.</msg>
<msg timestamp="20170809 23:00:55.581" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170809 23:00:55.581" level="INFO">${system} = witherspoon</msg>
<msg timestamp="20170809 23:00:55.581" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170809 23:00:55.581" starttime="20170809 23:00:55.341"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170809 23:00:55.582" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170809 23:00:55.582" starttime="20170809 23:00:55.581"></status>
</kw>
<status status="PASS" endtime="20170809 23:00:55.582" starttime="20170809 22:59:50.610"></status>
</kw>
<status status="PASS" endtime="20170809 23:00:55.582" starttime="20170809 22:58:33.880"></status>
</kw>
<status status="PASS" endtime="20170809 23:00:55.582" starttime="20170809 22:58:33.880"></status>
</kw>
<kw name="Check Boot Count And Time">
<doc>Check for unexpected reboots.</doc>
<kw name="Set BMC Reset Reference Time" library="utils">
<doc>Set current boot time as a reference and increment</doc>
<kw name="Get BMC Boot Time" library="utils">
<doc>Get boot time from /proc/stat.</doc>
<assign>
<var>${cur_btime}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170809 23:00:55.585" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170809 23:00:55.585" starttime="20170809 23:00:55.584"></status>
</kw>
<msg timestamp="20170809 23:00:55.585" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170809 23:00:55.585" starttime="20170809 23:00:55.584"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170809 23:00:55.586" starttime="20170809 23:00:55.586"></status>
</kw>
<status status="PASS" endtime="20170809 23:00:55.586" starttime="20170809 23:00:55.585"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170809 23:00:55.587" starttime="20170809 23:00:55.587"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170809 23:00:55.588" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170809 23:00:55.588" starttime="20170809 23:00:55.588"></status>
</kw>
<msg timestamp="20170809 23:00:55.588" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170809 23:00:55.588" starttime="20170809 23:00:55.587"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170809 23:00:55.590" starttime="20170809 23:00:55.590"></status>
</kw>
<status status="PASS" endtime="20170809 23:00:55.590" starttime="20170809 23:00:55.590"></status>
</kw>
<status status="PASS" endtime="20170809 23:00:55.590" starttime="20170809 23:00:55.589"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170809 23:00:55.591" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170809 23:00:57.741" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170809 23:00:57.741" starttime="20170809 23:00:55.591"></status>
</kw>
<status status="PASS" endtime="20170809 23:00:57.741" starttime="20170809 23:00:55.583"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>egrep '^btime ' /proc/stat | cut -f 2 -d ' '</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 23:00:57.742" level="INFO">Executing command 'egrep '^btime ' /proc/stat | cut -f 2 -d ' ''.</msg>
<msg timestamp="20170809 23:00:57.863" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170809 23:00:57.863" level="INFO">${output} = 1501774961</msg>
<msg timestamp="20170809 23:00:57.863" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170809 23:00:57.863" starttime="20170809 23:00:57.742"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170809 23:00:57.863" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170809 23:00:57.864" starttime="20170809 23:00:57.863"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${btime}</var>
</assign>
<msg timestamp="20170809 23:00:57.864" level="INFO">${btime} = 1501774961</msg>
<status status="PASS" endtime="20170809 23:00:57.864" starttime="20170809 23:00:57.864"></status>
</kw>
<msg timestamp="20170809 23:00:57.864" level="INFO">${cur_btime} = 1501774961</msg>
<status status="PASS" endtime="20170809 23:00:57.864" starttime="20170809 23:00:55.583"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_TIME} == ${0} and ${BOOT_COUNT} == ${0}</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>ELSE IF</arg>
<arg>${cur_btime} &gt; ${BOOT_TIME}</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_COUNT}</arg>
<arg>${BOOT_COUNT + 1}</arg>
</arguments>
<status status="PASS" endtime="20170809 23:00:57.866" starttime="20170809 23:00:57.865"></status>
</kw>
<status status="PASS" endtime="20170809 23:00:57.866" starttime="20170809 23:00:55.583"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Count: ${BOOT_COUNT}</arg>
</arguments>
<status status="PASS" endtime="20170809 23:00:57.866" starttime="20170809 23:00:57.866"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Time: ${BOOT_TIME}</arg>
</arguments>
<status status="PASS" endtime="20170809 23:00:57.867" starttime="20170809 23:00:57.867"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_COUNT} &gt; ${MAX_BOOT_COUNT}</arg>
<arg>Log</arg>
<arg>Phantom Reboot!!! Unexpected reboot detected</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20170809 23:00:57.867" starttime="20170809 23:00:57.867"></status>
</kw>
<status status="PASS" endtime="20170809 23:00:57.868" starttime="20170809 23:00:55.582"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Temp BMC URI Check</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Temp BMC URI Check">
<doc>Check for transient "BMC0" interface.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/state/BMC0/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 23:00:57.871" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 23:00:57.872" starttime="20170809 23:00:57.871"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 23:00:57.873" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 23:00:57.873" starttime="20170809 23:00:57.872"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 23:00:57.873" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 23:00:57.873" starttime="20170809 23:00:57.873"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 23:00:57.874" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 23:00:57.874" starttime="20170809 23:00:57.874"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 23:00:58.368" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 23:00:58.368" starttime="20170809 23:00:57.875"></status>
</kw>
<msg timestamp="20170809 23:00:58.368" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 23:00:58.368" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 23:00:58.368" starttime="20170809 23:00:57.874"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 23:00:58.369" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 23:00:58.369" starttime="20170809 23:00:58.368"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 23:00:58.370" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 23:00:58.370" starttime="20170809 23:00:58.369"></status>
</kw>
<status status="PASS" endtime="20170809 23:00:58.370" starttime="20170809 23:00:57.870"></status>
</kw>
<status status="PASS" endtime="20170809 23:00:58.370" starttime="20170809 23:00:57.870"></status>
</kw>
<status status="PASS" endtime="20170809 23:00:58.370" starttime="20170809 23:00:57.869"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 23:00:58.371" level="INFO">${base_uri} = /xyz/openbmc_project/state/BMC0/</msg>
<status status="PASS" endtime="20170809 23:00:58.371" starttime="20170809 23:00:58.370"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170809 23:00:58.371" starttime="20170809 23:00:58.371"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 23:00:58.946" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/BMC0/, headers=None json=None</msg>
<msg timestamp="20170809 23:00:58.946" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170809 23:00:58.946" starttime="20170809 23:00:58.371"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170809 23:00:58.947" starttime="20170809 23:00:58.946"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 23:00:58.947" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170809 23:00:58.947" starttime="20170809 23:00:58.947"></status>
</kw>
<msg timestamp="20170809 23:00:58.948" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170809 23:00:58.948" starttime="20170809 23:00:57.868"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 23:00:58.948" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170809 23:00:58.948" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170809 23:00:58.949" starttime="20170809 23:00:58.948"></status>
</kw>
<status status="FAIL" endtime="20170809 23:00:58.949" starttime="20170809 23:00:57.868"></status>
</kw>
<msg timestamp="20170809 23:00:58.949" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170809 23:00:58.949" starttime="20170809 23:00:57.868"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Wait For BMC Ready</arg>
<arg>ELSE</arg>
<arg>Wait For Temp BMC Ready</arg>
</arguments>
<kw name="Wait For BMC Ready" library="state_manager">
<doc>Check BMC state and wait for BMC Ready.</doc>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>BMC_READY</arg>
<arg>HOST_POWERED_OFF</arg>
</arguments>
<assign>
<var>@{states}</var>
</assign>
<msg timestamp="20170809 23:00:58.951" level="INFO">@{states} = [ BMC_READY | HOST_POWERED_OFF ]</msg>
<status status="PASS" endtime="20170809 23:00:58.951" starttime="20170809 23:00:58.950"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${OBMC_STATES_VERSION}' == '${0}'</arg>
<arg>Wait Until Keyword Succeeds</arg>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Verify BMC State</arg>
<arg>${states}</arg>
<arg>ELSE</arg>
<arg>Wait Until Keyword Succeeds</arg>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is BMC Ready</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is BMC Ready</arg>
</arguments>
<kw name="Is BMC Ready" library="state_manager">
<doc>Check if BMC state is Ready.</doc>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 23:00:58.957" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 23:00:58.957" starttime="20170809 23:00:58.956"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 23:00:58.958" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 23:00:58.958" starttime="20170809 23:00:58.957"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 23:00:58.958" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 23:00:58.958" starttime="20170809 23:00:58.958"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 23:00:58.959" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 23:00:58.959" starttime="20170809 23:00:58.959"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 23:01:00.002" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 23:01:00.002" starttime="20170809 23:00:58.960"></status>
</kw>
<msg timestamp="20170809 23:01:00.002" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 23:01:00.002" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 23:01:00.002" starttime="20170809 23:00:58.960"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 23:01:00.003" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 23:01:00.003" starttime="20170809 23:01:00.002"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 23:01:00.003" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 23:01:00.004" starttime="20170809 23:01:00.003"></status>
</kw>
<status status="PASS" endtime="20170809 23:01:00.004" starttime="20170809 23:00:58.956"></status>
</kw>
<status status="PASS" endtime="20170809 23:01:00.004" starttime="20170809 23:00:58.955"></status>
</kw>
<status status="PASS" endtime="20170809 23:01:00.004" starttime="20170809 23:00:58.954"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 23:01:00.004" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170809 23:01:00.005" starttime="20170809 23:01:00.004"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170809 23:01:00.005" starttime="20170809 23:01:00.005"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 23:01:01.182" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None json=None</msg>
<msg timestamp="20170809 23:01:01.182" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 23:01:01.182" starttime="20170809 23:01:00.006"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170809 23:01:01.183" starttime="20170809 23:01:01.183"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 23:01:01.184" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170809 23:01:01.184" starttime="20170809 23:01:01.184"></status>
</kw>
<msg timestamp="20170809 23:01:01.184" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 23:01:01.184" starttime="20170809 23:00:58.954"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 23:01:01.185" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 23:01:01.185" starttime="20170809 23:01:01.185"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 23:01:01.186" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.NotReady", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 23:01:01.186" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 23:01:01.186" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.NotReady'}</msg>
<status status="PASS" endtime="20170809 23:01:01.187" starttime="20170809 23:01:01.186"></status>
</kw>
<msg timestamp="20170809 23:01:01.187" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.NotReady</msg>
<status status="PASS" endtime="20170809 23:01:01.187" starttime="20170809 23:00:58.953"></status>
</kw>
<msg timestamp="20170809 23:01:01.187" level="INFO">${bmc_state} = NotReady</msg>
<status status="PASS" endtime="20170809 23:01:01.187" starttime="20170809 23:00:58.952"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${BMC_READY_STATE}</arg>
<arg>${bmc_state}</arg>
</arguments>
<msg timestamp="20170809 23:01:01.188" level="FAIL">Ready != NotReady</msg>
<status status="FAIL" endtime="20170809 23:01:01.188" starttime="20170809 23:01:01.187"></status>
</kw>
<status status="FAIL" endtime="20170809 23:01:01.188" starttime="20170809 23:00:58.952"></status>
</kw>
<kw name="Is BMC Ready" library="state_manager">
<doc>Check if BMC state is Ready.</doc>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 23:01:11.193" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 23:01:11.194" starttime="20170809 23:01:11.193"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 23:01:11.195" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 23:01:11.195" starttime="20170809 23:01:11.194"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 23:01:11.196" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 23:01:11.196" starttime="20170809 23:01:11.195"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 23:01:11.197" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 23:01:11.197" starttime="20170809 23:01:11.196"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 23:01:11.375" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 23:01:11.375" starttime="20170809 23:01:11.198"></status>
</kw>
<msg timestamp="20170809 23:01:11.375" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 23:01:11.375" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 23:01:11.375" starttime="20170809 23:01:11.197"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 23:01:11.376" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 23:01:11.376" starttime="20170809 23:01:11.375"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 23:01:11.377" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 23:01:11.377" starttime="20170809 23:01:11.376"></status>
</kw>
<status status="PASS" endtime="20170809 23:01:11.377" starttime="20170809 23:01:11.192"></status>
</kw>
<status status="PASS" endtime="20170809 23:01:11.377" starttime="20170809 23:01:11.192"></status>
</kw>
<status status="PASS" endtime="20170809 23:01:11.377" starttime="20170809 23:01:11.191"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 23:01:11.378" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170809 23:01:11.378" starttime="20170809 23:01:11.377"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170809 23:01:11.378" starttime="20170809 23:01:11.378"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 23:01:12.458" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None json=None</msg>
<msg timestamp="20170809 23:01:12.458" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 23:01:12.458" starttime="20170809 23:01:11.379"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170809 23:01:12.459" starttime="20170809 23:01:12.459"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 23:01:12.460" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170809 23:01:12.460" starttime="20170809 23:01:12.459"></status>
</kw>
<msg timestamp="20170809 23:01:12.460" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 23:01:12.460" starttime="20170809 23:01:11.190"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 23:01:12.461" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 23:01:12.461" starttime="20170809 23:01:12.460"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 23:01:12.461" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 23:01:12.461" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 23:01:12.461" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170809 23:01:12.461" starttime="20170809 23:01:12.461"></status>
</kw>
<msg timestamp="20170809 23:01:12.462" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170809 23:01:12.462" starttime="20170809 23:01:11.190"></status>
</kw>
<msg timestamp="20170809 23:01:12.462" level="INFO">${bmc_state} = Ready</msg>
<status status="PASS" endtime="20170809 23:01:12.462" starttime="20170809 23:01:11.189"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${BMC_READY_STATE}</arg>
<arg>${bmc_state}</arg>
</arguments>
<status status="PASS" endtime="20170809 23:01:12.463" starttime="20170809 23:01:12.462"></status>
</kw>
<status status="PASS" endtime="20170809 23:01:12.463" starttime="20170809 23:01:11.189"></status>
</kw>
<status status="PASS" endtime="20170809 23:01:12.463" starttime="20170809 23:00:58.952"></status>
</kw>
<status status="PASS" endtime="20170809 23:01:12.463" starttime="20170809 23:00:58.951"></status>
</kw>
<status status="PASS" endtime="20170809 23:01:12.463" starttime="20170809 23:00:58.950"></status>
</kw>
<status status="PASS" endtime="20170809 23:01:12.463" starttime="20170809 23:00:58.949"></status>
</kw>
<status status="PASS" endtime="20170809 23:01:12.463" starttime="20170809 22:58:17.021"></status>
</kw>
<status status="PASS" endtime="20170809 23:01:12.463" starttime="20170809 22:58:17.021"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Preserve BMC Network Setting</arg>
</arguments>
<kw name="Preserve BMC Network Setting" library="code_update_utils">
<doc>Preserve Network setting</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<assign>
<var>${policy}</var>
</assign>
<msg timestamp="20170809 23:01:12.471" level="INFO">${policy} = 1</msg>
<status status="PASS" endtime="20170809 23:01:12.471" starttime="20170809 23:01:12.471"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20170809 23:01:12.472" level="INFO">${value} = {u'data': 1}</msg>
<status status="PASS" endtime="20170809 23:01:12.472" starttime="20170809 23:01:12.471"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${BMC_UPD_ATTR}</arg>
<arg>preserve_network_settings</arg>
<arg>data=${value}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 23:01:12.473" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc</msg>
<status status="PASS" endtime="20170809 23:01:12.473" starttime="20170809 23:01:12.473"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 23:01:12.476" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 23:01:12.476" starttime="20170809 23:01:12.475"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 23:01:12.477" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 23:01:12.477" starttime="20170809 23:01:12.477"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 23:01:12.478" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 23:01:12.478" starttime="20170809 23:01:12.477"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 23:01:12.478" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 23:01:12.478" starttime="20170809 23:01:12.478"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 23:01:12.672" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 23:01:12.672" starttime="20170809 23:01:12.479"></status>
</kw>
<msg timestamp="20170809 23:01:12.672" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 23:01:12.672" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 23:01:12.673" starttime="20170809 23:01:12.479"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 23:01:12.673" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 23:01:12.673" starttime="20170809 23:01:12.673"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 23:01:12.674" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 23:01:12.674" starttime="20170809 23:01:12.674"></status>
</kw>
<status status="PASS" endtime="20170809 23:01:12.674" starttime="20170809 23:01:12.475"></status>
</kw>
<status status="PASS" endtime="20170809 23:01:12.674" starttime="20170809 23:01:12.474"></status>
</kw>
<status status="PASS" endtime="20170809 23:01:12.674" starttime="20170809 23:01:12.474"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 23:01:12.675" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc/attr/preserve_network_settings</msg>
<status status="PASS" endtime="20170809 23:01:12.675" starttime="20170809 23:01:12.675"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 23:01:12.675" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 23:01:12.676" starttime="20170809 23:01:12.675"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170809 23:01:12.676" starttime="20170809 23:01:12.676"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 23:01:12.678" level="INFO">${msg} = URI:https://9.41.166.169/org/openbmc/control/flash/bmc/attr/preserve_network_settings, method:Put, args:{u'data': {u'data': 1}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170809 23:01:12.678" starttime="20170809 23:01:12.677"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 23:01:12.679" level="INFO">URI:https://9.41.166.169/org/openbmc/control/flash/bmc/attr/preserve_network_settings, method:Put, args:{u'data': {u'data': 1}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170809 23:01:12.679" starttime="20170809 23:01:12.678"></status>
</kw>
<status status="PASS" endtime="20170809 23:01:12.679" starttime="20170809 23:01:12.678"></status>
</kw>
<status status="PASS" endtime="20170809 23:01:12.679" starttime="20170809 23:01:12.676"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 23:01:13.007" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc/attr/preserve_network_settings, data={"data": 1},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170809 23:01:13.008" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 23:01:13.008" starttime="20170809 23:01:12.680"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 23:01:13.009" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170809 23:01:13.009" starttime="20170809 23:01:13.009"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 23:01:13.010" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170809 23:01:13.010" starttime="20170809 23:01:13.010"></status>
</kw>
<status status="PASS" endtime="20170809 23:01:13.010" starttime="20170809 23:01:13.009"></status>
</kw>
<status status="PASS" endtime="20170809 23:01:13.011" starttime="20170809 23:01:13.008"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 23:01:13.011" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170809 23:01:13.011" starttime="20170809 23:01:13.011"></status>
</kw>
<msg timestamp="20170809 23:01:13.011" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 23:01:13.011" starttime="20170809 23:01:12.473"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 23:01:13.012" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 23:01:13.012" starttime="20170809 23:01:13.012"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170809 23:01:13.013" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 23:01:13.013" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 23:01:13.013" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170809 23:01:13.013" starttime="20170809 23:01:13.012"></status>
</kw>
<status status="PASS" endtime="20170809 23:01:13.013" starttime="20170809 23:01:12.472"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${BMC_UPD_ATTR}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 23:01:13.020" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 23:01:13.020" starttime="20170809 23:01:13.019"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 23:01:13.021" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 23:01:13.021" starttime="20170809 23:01:13.020"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 23:01:13.021" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 23:01:13.021" starttime="20170809 23:01:13.021"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 23:01:13.022" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 23:01:13.022" starttime="20170809 23:01:13.022"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 23:01:13.221" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 23:01:13.221" starttime="20170809 23:01:13.023"></status>
</kw>
<msg timestamp="20170809 23:01:13.221" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 23:01:13.221" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 23:01:13.221" starttime="20170809 23:01:13.022"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 23:01:13.222" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 23:01:13.222" starttime="20170809 23:01:13.221"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 23:01:13.222" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 23:01:13.223" starttime="20170809 23:01:13.222"></status>
</kw>
<status status="PASS" endtime="20170809 23:01:13.223" starttime="20170809 23:01:13.019"></status>
</kw>
<status status="PASS" endtime="20170809 23:01:13.223" starttime="20170809 23:01:13.018"></status>
</kw>
<status status="PASS" endtime="20170809 23:01:13.223" starttime="20170809 23:01:13.014"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 23:01:13.223" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc</msg>
<status status="PASS" endtime="20170809 23:01:13.223" starttime="20170809 23:01:13.223"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170809 23:01:13.224" starttime="20170809 23:01:13.224"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 23:01:13.324" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc, headers=None json=None</msg>
<msg timestamp="20170809 23:01:13.325" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 23:01:13.325" starttime="20170809 23:01:13.224"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170809 23:01:13.325" starttime="20170809 23:01:13.325"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 23:01:13.326" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170809 23:01:13.326" starttime="20170809 23:01:13.326"></status>
</kw>
<msg timestamp="20170809 23:01:13.326" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 23:01:13.326" starttime="20170809 23:01:13.014"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 23:01:13.327" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 23:01:13.327" starttime="20170809 23:01:13.326"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 23:01:13.327" level="INFO">To JSON using : content={
  "data": {
    "auto_apply": 0, 
    "clear_persistent_files": 0, 
    "filename": "", 
    "preserve_network_settings": 1, 
    "restore_application_defaults": 0, 
    "status": "Idle", 
    "update_kernel_and_apps": 0
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 23:01:13.328" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 23:01:13.328" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Idle', u'update_kernel_and_apps': 0, u'clear_persistent_files': 0, u'auto_apply': 0, u'filename': u'', u'preserve_network_settings': 1,...</msg>
<status status="PASS" endtime="20170809 23:01:13.328" starttime="20170809 23:01:13.327"></status>
</kw>
<msg timestamp="20170809 23:01:13.328" level="INFO">${data} = {u'status': u'Idle', u'update_kernel_and_apps': 0, u'clear_persistent_files': 0, u'auto_apply': 0, u'filename': u'', u'preserve_network_settings': 1, u'restore_application_defaults': 0}</msg>
<status status="PASS" endtime="20170809 23:01:13.328" starttime="20170809 23:01:13.013"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${data['preserve_network_settings']}</arg>
<arg>${1}</arg>
<arg>msg=0 indicates network is not preserved</arg>
</arguments>
<status status="PASS" endtime="20170809 23:01:13.329" starttime="20170809 23:01:13.328"></status>
</kw>
<status status="PASS" endtime="20170809 23:01:13.329" starttime="20170809 23:01:12.470"></status>
</kw>
<status status="PASS" endtime="20170809 23:01:13.329" starttime="20170809 23:01:12.464"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>SCP Tar Image File To BMC \ ${FILE_PATH}</arg>
</arguments>
<kw name="SCP Tar Image File to BMC" library="code_update_utils">
<doc>Copy BMC tar image to BMC.</doc>
<arguments>
<arg>/home/fspcibld/witherspoon-20170809224002.all.tar</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170809 23:01:13.347" starttime="20170809 23:01:13.337"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170809 23:01:14.022" starttime="20170809 23:01:13.348"></status>
</kw>
<status status="PASS" endtime="20170809 23:01:14.022" starttime="20170809 23:01:13.347"></status>
</kw>
<status status="PASS" endtime="20170809 23:01:14.022" starttime="20170809 23:01:13.336"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170809 23:01:14.024" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170809 23:01:14.024" starttime="20170809 23:01:14.023"></status>
</kw>
<msg timestamp="20170809 23:01:14.024" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170809 23:01:14.024" starttime="20170809 23:01:14.023"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170809 23:01:14.025" starttime="20170809 23:01:14.025"></status>
</kw>
<status status="PASS" endtime="20170809 23:01:14.025" starttime="20170809 23:01:14.024"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170809 23:01:14.026" starttime="20170809 23:01:14.026"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170809 23:01:14.027" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170809 23:01:14.027" starttime="20170809 23:01:14.027"></status>
</kw>
<msg timestamp="20170809 23:01:14.027" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170809 23:01:14.027" starttime="20170809 23:01:14.026"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170809 23:01:14.029" starttime="20170809 23:01:14.029"></status>
</kw>
<status status="PASS" endtime="20170809 23:01:14.029" starttime="20170809 23:01:14.028"></status>
</kw>
<status status="PASS" endtime="20170809 23:01:14.029" starttime="20170809 23:01:14.028"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170809 23:01:14.030" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170809 23:01:15.807" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170809 23:01:15.807" starttime="20170809 23:01:14.030"></status>
</kw>
<status status="PASS" endtime="20170809 23:01:15.807" starttime="20170809 23:01:14.022"></status>
</kw>
<kw name="Loop SCP Retry" library="code_update_utils">
<doc>Try transferring the file 4 times.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<kw type="for" name="${index} IN RANGE [ 0 | 4 ]">
<kw type="foritem" name="${index} = 0">
<kw name="Retry SCP" library="code_update_utils">
<doc>Delete the incomplete file and scp file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/tmp/flashimg</arg>
</arguments>
<assign>
<var>${targ_file_path}</var>
</assign>
<msg timestamp="20170809 23:01:15.809" level="INFO">${targ_file_path} = /tmp/flashimg</msg>
<status status="PASS" endtime="20170809 23:01:15.809" starttime="20170809 23:01:15.809"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm -f /tmp/flashimg</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 23:01:15.810" level="INFO">Executing command 'rm -f /tmp/flashimg'.</msg>
<msg timestamp="20170809 23:01:15.856" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170809 23:01:15.856" level="INFO">${stdout} = </msg>
<msg timestamp="20170809 23:01:15.856" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170809 23:01:15.856" starttime="20170809 23:01:15.810"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170809 23:01:15.857" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170809 23:01:15.857" starttime="20170809 23:01:15.857"></status>
</kw>
<status status="PASS" endtime="20170809 23:01:15.857" starttime="20170809 23:01:15.809"></status>
</kw>
<kw name="Put File" library="scp">
<doc>Uploads a file to the remote machine from the local machine.</doc>
<arguments>
<arg>${image_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status status="PASS" endtime="20170809 23:01:32.857" starttime="20170809 23:01:15.857"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>ls -lh ${targ_file_path}</arg>
</arguments>
<assign>
<var>${file_size}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 23:01:32.859" level="INFO">Executing command 'ls -lh /tmp/flashimg'.</msg>
<msg timestamp="20170809 23:01:32.915" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170809 23:01:32.915" level="INFO">${stdout} = -rw-r--r--    1 root     root       36.4M Aug  3 15:45 /tmp/flashimg</msg>
<msg timestamp="20170809 23:01:32.915" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170809 23:01:32.915" starttime="20170809 23:01:32.858"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170809 23:01:32.916" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170809 23:01:32.916" starttime="20170809 23:01:32.916"></status>
</kw>
<msg timestamp="20170809 23:01:32.916" level="INFO">${file_size} = -rw-r--r--    1 root     root       36.4M Aug  3 15:45 /tmp/flashimg</msg>
<status status="PASS" endtime="20170809 23:01:32.916" starttime="20170809 23:01:32.857"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<msg timestamp="20170809 23:01:32.917" level="FAIL">Incomplete file transfer.: '-rw-r--r--    1 root     root       36.4M Aug  3 15:45 /tmp/flashimg' does not contain '32.0M'</msg>
<status status="FAIL" endtime="20170809 23:01:32.918" starttime="20170809 23:01:32.917"></status>
</kw>
<msg timestamp="20170809 23:01:32.918" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170809 23:01:32.918" starttime="20170809 23:01:32.917"></status>
</kw>
<msg timestamp="20170809 23:01:32.918" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170809 23:01:32.918" starttime="20170809 23:01:15.808"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
</arguments>
<status status="PASS" endtime="20170809 23:01:32.919" starttime="20170809 23:01:32.918"></status>
</kw>
<status status="PASS" endtime="20170809 23:01:32.919" starttime="20170809 23:01:15.808"></status>
</kw>
<kw type="foritem" name="${index} = 1">
<kw name="Retry SCP" library="code_update_utils">
<doc>Delete the incomplete file and scp file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/tmp/flashimg</arg>
</arguments>
<assign>
<var>${targ_file_path}</var>
</assign>
<msg timestamp="20170809 23:01:32.920" level="INFO">${targ_file_path} = /tmp/flashimg</msg>
<status status="PASS" endtime="20170809 23:01:32.920" starttime="20170809 23:01:32.919"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm -f /tmp/flashimg</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 23:01:32.921" level="INFO">Executing command 'rm -f /tmp/flashimg'.</msg>
<msg timestamp="20170809 23:01:33.025" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170809 23:01:33.025" level="INFO">${stdout} = </msg>
<msg timestamp="20170809 23:01:33.026" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170809 23:01:33.026" starttime="20170809 23:01:32.920"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170809 23:01:33.026" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170809 23:01:33.026" starttime="20170809 23:01:33.026"></status>
</kw>
<status status="PASS" endtime="20170809 23:01:33.026" starttime="20170809 23:01:32.920"></status>
</kw>
<kw name="Put File" library="scp">
<doc>Uploads a file to the remote machine from the local machine.</doc>
<arguments>
<arg>${image_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status status="PASS" endtime="20170809 23:01:49.753" starttime="20170809 23:01:33.027"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>ls -lh ${targ_file_path}</arg>
</arguments>
<assign>
<var>${file_size}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 23:01:49.755" level="INFO">Executing command 'ls -lh /tmp/flashimg'.</msg>
<msg timestamp="20170809 23:01:49.816" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170809 23:01:49.816" level="INFO">${stdout} = -rw-r--r--    1 root     root       36.4M Aug  3 15:45 /tmp/flashimg</msg>
<msg timestamp="20170809 23:01:49.816" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170809 23:01:49.816" starttime="20170809 23:01:49.755"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170809 23:01:49.817" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170809 23:01:49.817" starttime="20170809 23:01:49.816"></status>
</kw>
<msg timestamp="20170809 23:01:49.817" level="INFO">${file_size} = -rw-r--r--    1 root     root       36.4M Aug  3 15:45 /tmp/flashimg</msg>
<status status="PASS" endtime="20170809 23:01:49.817" starttime="20170809 23:01:49.754"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<msg timestamp="20170809 23:01:49.818" level="FAIL">Incomplete file transfer.: '-rw-r--r--    1 root     root       36.4M Aug  3 15:45 /tmp/flashimg' does not contain '32.0M'</msg>
<status status="FAIL" endtime="20170809 23:01:49.818" starttime="20170809 23:01:49.818"></status>
</kw>
<msg timestamp="20170809 23:01:49.818" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170809 23:01:49.818" starttime="20170809 23:01:49.817"></status>
</kw>
<msg timestamp="20170809 23:01:49.818" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170809 23:01:49.818" starttime="20170809 23:01:32.919"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
</arguments>
<status status="PASS" endtime="20170809 23:01:49.819" starttime="20170809 23:01:49.819"></status>
</kw>
<status status="PASS" endtime="20170809 23:01:49.819" starttime="20170809 23:01:32.919"></status>
</kw>
<kw type="foritem" name="${index} = 2">
<kw name="Retry SCP" library="code_update_utils">
<doc>Delete the incomplete file and scp file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/tmp/flashimg</arg>
</arguments>
<assign>
<var>${targ_file_path}</var>
</assign>
<msg timestamp="20170809 23:01:49.820" level="INFO">${targ_file_path} = /tmp/flashimg</msg>
<status status="PASS" endtime="20170809 23:01:49.820" starttime="20170809 23:01:49.820"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm -f /tmp/flashimg</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 23:01:49.821" level="INFO">Executing command 'rm -f /tmp/flashimg'.</msg>
<msg timestamp="20170809 23:01:49.958" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170809 23:01:49.958" level="INFO">${stdout} = </msg>
<msg timestamp="20170809 23:01:49.958" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170809 23:01:49.958" starttime="20170809 23:01:49.821"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170809 23:01:49.959" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170809 23:01:49.959" starttime="20170809 23:01:49.959"></status>
</kw>
<status status="PASS" endtime="20170809 23:01:49.959" starttime="20170809 23:01:49.821"></status>
</kw>
<kw name="Put File" library="scp">
<doc>Uploads a file to the remote machine from the local machine.</doc>
<arguments>
<arg>${image_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status status="PASS" endtime="20170809 23:02:06.891" starttime="20170809 23:01:49.959"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>ls -lh ${targ_file_path}</arg>
</arguments>
<assign>
<var>${file_size}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 23:02:06.893" level="INFO">Executing command 'ls -lh /tmp/flashimg'.</msg>
<msg timestamp="20170809 23:02:06.959" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170809 23:02:06.959" level="INFO">${stdout} = -rw-r--r--    1 root     root       36.4M Aug  3 15:45 /tmp/flashimg</msg>
<msg timestamp="20170809 23:02:06.959" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170809 23:02:06.959" starttime="20170809 23:02:06.892"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170809 23:02:06.960" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170809 23:02:06.960" starttime="20170809 23:02:06.960"></status>
</kw>
<msg timestamp="20170809 23:02:06.960" level="INFO">${file_size} = -rw-r--r--    1 root     root       36.4M Aug  3 15:45 /tmp/flashimg</msg>
<status status="PASS" endtime="20170809 23:02:06.960" starttime="20170809 23:02:06.891"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<msg timestamp="20170809 23:02:06.962" level="FAIL">Incomplete file transfer.: '-rw-r--r--    1 root     root       36.4M Aug  3 15:45 /tmp/flashimg' does not contain '32.0M'</msg>
<status status="FAIL" endtime="20170809 23:02:06.962" starttime="20170809 23:02:06.961"></status>
</kw>
<msg timestamp="20170809 23:02:06.962" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170809 23:02:06.962" starttime="20170809 23:02:06.961"></status>
</kw>
<msg timestamp="20170809 23:02:06.962" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170809 23:02:06.963" starttime="20170809 23:01:49.820"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
</arguments>
<status status="PASS" endtime="20170809 23:02:06.963" starttime="20170809 23:02:06.963"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:06.963" starttime="20170809 23:01:49.819"></status>
</kw>
<kw type="foritem" name="${index} = 3">
<kw name="Retry SCP" library="code_update_utils">
<doc>Delete the incomplete file and scp file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/tmp/flashimg</arg>
</arguments>
<assign>
<var>${targ_file_path}</var>
</assign>
<msg timestamp="20170809 23:02:06.964" level="INFO">${targ_file_path} = /tmp/flashimg</msg>
<status status="PASS" endtime="20170809 23:02:06.964" starttime="20170809 23:02:06.964"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm -f /tmp/flashimg</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 23:02:06.965" level="INFO">Executing command 'rm -f /tmp/flashimg'.</msg>
<msg timestamp="20170809 23:02:07.054" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170809 23:02:07.054" level="INFO">${stdout} = </msg>
<msg timestamp="20170809 23:02:07.054" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170809 23:02:07.054" starttime="20170809 23:02:06.965"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170809 23:02:07.055" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170809 23:02:07.055" starttime="20170809 23:02:07.055"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:07.055" starttime="20170809 23:02:06.965"></status>
</kw>
<kw name="Put File" library="scp">
<doc>Uploads a file to the remote machine from the local machine.</doc>
<arguments>
<arg>${image_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status status="PASS" endtime="20170809 23:02:23.908" starttime="20170809 23:02:07.055"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>ls -lh ${targ_file_path}</arg>
</arguments>
<assign>
<var>${file_size}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 23:02:23.911" level="INFO">Executing command 'ls -lh /tmp/flashimg'.</msg>
<msg timestamp="20170809 23:02:23.968" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170809 23:02:23.968" level="INFO">${stdout} = -rw-r--r--    1 root     root       36.4M Aug  3 15:46 /tmp/flashimg</msg>
<msg timestamp="20170809 23:02:23.968" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170809 23:02:23.968" starttime="20170809 23:02:23.911"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170809 23:02:23.969" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170809 23:02:23.969" starttime="20170809 23:02:23.968"></status>
</kw>
<msg timestamp="20170809 23:02:23.969" level="INFO">${file_size} = -rw-r--r--    1 root     root       36.4M Aug  3 15:46 /tmp/flashimg</msg>
<status status="PASS" endtime="20170809 23:02:23.969" starttime="20170809 23:02:23.909"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<msg timestamp="20170809 23:02:23.971" level="FAIL">Incomplete file transfer.: '-rw-r--r--    1 root     root       36.4M Aug  3 15:46 /tmp/flashimg' does not contain '32.0M'</msg>
<status status="FAIL" endtime="20170809 23:02:23.971" starttime="20170809 23:02:23.970"></status>
</kw>
<msg timestamp="20170809 23:02:23.971" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170809 23:02:23.971" starttime="20170809 23:02:23.970"></status>
</kw>
<msg timestamp="20170809 23:02:23.971" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170809 23:02:23.971" starttime="20170809 23:02:06.964"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
</arguments>
<status status="PASS" endtime="20170809 23:02:23.972" starttime="20170809 23:02:23.971"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:23.972" starttime="20170809 23:02:06.963"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:23.972" starttime="20170809 23:01:15.808"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:23.972" starttime="20170809 23:01:15.807"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:23.972" starttime="20170809 23:01:13.336"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:23.972" starttime="20170809 23:01:13.329"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>Activate BMC Flash Image</arg>
</arguments>
<kw name="Activate BMC flash image" library="code_update_utils">
<doc>Activate and verify the update status</doc>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>/tmp/flashimg</arg>
</arguments>
<assign>
<var>@{img_path}</var>
</assign>
<msg timestamp="20170809 23:02:23.981" level="INFO">@{img_path} = [ /tmp/flashimg ]</msg>
<status status="PASS" endtime="20170809 23:02:23.981" starttime="20170809 23:02:23.980"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{img_path}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 23:02:23.982" level="INFO">${data} = {u'data': [u'/tmp/flashimg']}</msg>
<status status="PASS" endtime="20170809 23:02:23.982" starttime="20170809 23:02:23.982"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${BMC_UPD_METHOD}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 23:02:23.987" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 23:02:23.988" starttime="20170809 23:02:23.987"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 23:02:23.989" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 23:02:23.989" starttime="20170809 23:02:23.988"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 23:02:23.989" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 23:02:23.989" starttime="20170809 23:02:23.989"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 23:02:23.990" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 23:02:23.990" starttime="20170809 23:02:23.990"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 23:02:24.173" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 23:02:24.173" starttime="20170809 23:02:23.991"></status>
</kw>
<msg timestamp="20170809 23:02:24.173" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 23:02:24.173" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 23:02:24.173" starttime="20170809 23:02:23.991"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 23:02:24.174" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 23:02:24.174" starttime="20170809 23:02:24.174"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 23:02:24.175" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 23:02:24.175" starttime="20170809 23:02:24.174"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:24.175" starttime="20170809 23:02:23.985"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:24.175" starttime="20170809 23:02:23.984"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:24.175" starttime="20170809 23:02:23.983"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 23:02:24.176" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc/action/update</msg>
<status status="PASS" endtime="20170809 23:02:24.176" starttime="20170809 23:02:24.175"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 23:02:24.177" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 23:02:24.177" starttime="20170809 23:02:24.176"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170809 23:02:24.177" starttime="20170809 23:02:24.177"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170809 23:02:24.178" starttime="20170809 23:02:24.177"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 23:02:27.991" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc/action/update, data={"data": ["/tmp/flashimg"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20170809 23:02:27.991" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 23:02:27.991" starttime="20170809 23:02:24.178"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170809 23:02:27.992" starttime="20170809 23:02:27.992"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 23:02:27.993" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170809 23:02:27.993" starttime="20170809 23:02:27.992"></status>
</kw>
<msg timestamp="20170809 23:02:27.993" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 23:02:27.993" starttime="20170809 23:02:23.983"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 23:02:27.994" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 23:02:27.994" starttime="20170809 23:02:27.994"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${BMC_UPD_ATTR}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 23:02:27.998" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 23:02:27.999" starttime="20170809 23:02:27.998"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 23:02:27.999" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 23:02:27.999" starttime="20170809 23:02:27.999"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 23:02:28.000" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 23:02:28.000" starttime="20170809 23:02:27.999"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 23:02:28.001" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 23:02:28.001" starttime="20170809 23:02:28.001"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 23:02:28.204" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 23:02:28.204" starttime="20170809 23:02:28.002"></status>
</kw>
<msg timestamp="20170809 23:02:28.204" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 23:02:28.204" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 23:02:28.204" starttime="20170809 23:02:28.001"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 23:02:28.205" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 23:02:28.205" starttime="20170809 23:02:28.205"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 23:02:28.206" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 23:02:28.206" starttime="20170809 23:02:28.205"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:28.206" starttime="20170809 23:02:27.997"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:28.206" starttime="20170809 23:02:27.997"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:28.206" starttime="20170809 23:02:27.996"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 23:02:28.207" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc</msg>
<status status="PASS" endtime="20170809 23:02:28.207" starttime="20170809 23:02:28.207"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170809 23:02:28.208" starttime="20170809 23:02:28.207"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 23:02:28.353" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc, headers=None json=None</msg>
<msg timestamp="20170809 23:02:28.353" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 23:02:28.353" starttime="20170809 23:02:28.208"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170809 23:02:28.354" starttime="20170809 23:02:28.354"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 23:02:28.355" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170809 23:02:28.355" starttime="20170809 23:02:28.355"></status>
</kw>
<msg timestamp="20170809 23:02:28.355" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 23:02:28.355" starttime="20170809 23:02:27.995"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 23:02:28.356" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 23:02:28.356" starttime="20170809 23:02:28.355"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 23:02:28.356" level="INFO">To JSON using : content={
  "data": {
    "auto_apply": 0, 
    "clear_persistent_files": 0, 
    "filename": "/tmp/flashimg", 
    "preserve_network_settings": 1, 
    "restore_application_defaults": 0, 
    "status": "Verify error: update: --no-flash --ignore-mount --no-save-files --no-restore-files --no-clean-saved-files\nERROR: Image image-bmc too big for mtd0.\n", 
    "update_kernel_and_apps": 0
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 23:02:28.356" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 23:02:28.357" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Verify error: update: --no-flash --ignore-mount --no-save-files --no-restore-files --no-clean-saved-files\nERROR: Image image-bmc too b...</msg>
<status status="PASS" endtime="20170809 23:02:28.357" starttime="20170809 23:02:28.356"></status>
</kw>
<msg timestamp="20170809 23:02:28.357" level="INFO">${data} = {u'status': u'Verify error: update: --no-flash --ignore-mount --no-save-files --no-restore-files --no-clean-saved-files\nERROR: Image image-bmc too big for mtd0.\n', u'update_kernel_and_apps': 0, u'cl...</msg>
<status status="PASS" endtime="20170809 23:02:28.357" starttime="20170809 23:02:27.994"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${data["filename"]}</arg>
<arg>/tmp/flashimg</arg>
</arguments>
<status status="PASS" endtime="20170809 23:02:28.358" starttime="20170809 23:02:28.357"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${data['status']}</arg>
<arg>to apply</arg>
</arguments>
<msg timestamp="20170809 23:02:28.358" level="FAIL">'Verify error: update: --no-flash --ignore-mount --no-save-files --no-restore-files --no-clean-saved-files
ERROR: Image image-bmc too big for mtd0.
' does not contain 'to apply'</msg>
<status status="FAIL" endtime="20170809 23:02:28.358" starttime="20170809 23:02:28.358"></status>
</kw>
<status status="FAIL" endtime="20170809 23:02:28.359" starttime="20170809 23:02:23.980"></status>
</kw>
<msg timestamp="20170809 23:02:28.361" level="FAIL">'Verify error: update: --no-flash --ignore-mount --no-save-files --no-restore-files --no-clean-saved-files
ERROR: Image image-bmc too big for mtd0.
' does not contain 'to apply'</msg>
<status status="FAIL" endtime="20170809 23:02:28.361" starttime="20170809 23:02:23.973"></status>
</kw>
<kw type="teardown" name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>FFDC On Test Case Fail</arg>
</arguments>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 23:02:28.374" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 23:02:28.374" starttime="20170809 23:02:28.373"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 23:02:28.375" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 23:02:28.375" starttime="20170809 23:02:28.375"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 23:02:28.376" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 23:02:28.376" starttime="20170809 23:02:28.376"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 23:02:28.377" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 23:02:28.377" starttime="20170809 23:02:28.377"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 23:02:28.555" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 23:02:28.555" starttime="20170809 23:02:28.378"></status>
</kw>
<msg timestamp="20170809 23:02:28.555" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 23:02:28.555" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 23:02:28.555" starttime="20170809 23:02:28.378"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 23:02:28.556" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 23:02:28.556" starttime="20170809 23:02:28.555"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 23:02:28.556" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 23:02:28.557" starttime="20170809 23:02:28.556"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:28.557" starttime="20170809 23:02:28.373"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:28.557" starttime="20170809 23:02:28.372"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:28.557" starttime="20170809 23:02:28.372"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 23:02:28.557" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170809 23:02:28.558" starttime="20170809 23:02:28.557"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170809 23:02:28.558" starttime="20170809 23:02:28.558"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 23:02:28.649" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 23:02:28.649" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 23:02:28.650" starttime="20170809 23:02:28.559"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170809 23:02:28.650" starttime="20170809 23:02:28.650"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 23:02:28.651" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170809 23:02:28.651" starttime="20170809 23:02:28.651"></status>
</kw>
<msg timestamp="20170809 23:02:28.651" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 23:02:28.651" starttime="20170809 23:02:28.371"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 23:02:28.652" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 23:02:28.652" starttime="20170809 23:02:28.651"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 23:02:28.653" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 23:02:28.653" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 23:02:28.653" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170809 23:02:28.653" starttime="20170809 23:02:28.652"></status>
</kw>
<msg timestamp="20170809 23:02:28.653" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170809 23:02:28.653" starttime="20170809 23:02:28.370"></status>
</kw>
<msg timestamp="20170809 23:02:28.653" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170809 23:02:28.653" starttime="20170809 23:02:28.370"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170809 23:02:28.655" level="FAIL">Off != Quiesced</msg>
<status status="FAIL" endtime="20170809 23:02:28.655" starttime="20170809 23:02:28.654"></status>
</kw>
<msg timestamp="20170809 23:02:28.655" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170809 23:02:28.655" starttime="20170809 23:02:28.654"></status>
</kw>
<msg timestamp="20170809 23:02:28.655" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170809 23:02:28.655" starttime="20170809 23:02:28.370"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.41.166.169</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170809 23:02:28.666" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170809 23:02:28.667" starttime="20170809 23:02:28.666"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170809 23:02:28.673" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170809 23:02:31.675" level="INFO">${RC} = 0</msg>
<msg timestamp="20170809 23:02:31.675" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=0.761 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.545 ms
64 bytes from 9.41.166.16...</msg>
<status status="PASS" endtime="20170809 23:02:31.675" starttime="20170809 23:02:28.667"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170809 23:02:31.679" level="INFO">RC: 0
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=0.761 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.545 ms
64 bytes from 9.41.166.169: icmp_seq=3 ttl=63 time=0.589 ms
64 bytes from 9.41.166.169: icmp_seq=4 ttl=63 time=1.25 ms

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2997ms
rtt min/avg/max/mdev = 0.545/0.788/1.259/0.284 ms</msg>
<status status="PASS" endtime="20170809 23:02:31.679" starttime="20170809 23:02:31.678"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170809 23:02:31.680" starttime="20170809 23:02:31.679"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:31.680" starttime="20170809 23:02:28.666"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170809 23:02:31.716" level="INFO">${cur_time} = 2017-08-09 23:02:31:714848</msg>
<status status="PASS" endtime="20170809 23:02:31.716" starttime="20170809 23:02:31.715"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170809 23:02:31.717" level="INFO">${cur_time} = 20170809230231714848</msg>
<status status="PASS" endtime="20170809 23:02:31.717" starttime="20170809 23:02:31.716"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:31.717" starttime="20170809 23:02:31.714"></status>
</kw>
<msg timestamp="20170809 23:02:31.723" level="INFO">${FFDC_TIME} = 20170809230231714848</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170809 23:02:31.725" level="INFO">${suite_name} = UpdateBmc</msg>
<status status="PASS" endtime="20170809 23:02:31.725" starttime="20170809 23:02:31.725"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170809 23:02:31.726" level="INFO">${suite_name} = 20170809230231714848_UpdateBmc</msg>
<status status="PASS" endtime="20170809 23:02:31.726" starttime="20170809 23:02:31.725"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170809 23:02:31.726" level="INFO">${test_name} = InitiateCodeUpdateBMC</msg>
<status status="PASS" endtime="20170809 23:02:31.726" starttime="20170809 23:02:31.726"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170809 23:02:31.727" level="INFO">${test_name} = 20170809230231714848_InitiateCodeUpdateBMC</msg>
<status status="PASS" endtime="20170809 23:02:31.727" starttime="20170809 23:02:31.727"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:31.727" starttime="20170809 23:02:31.724"></status>
</kw>
<msg timestamp="20170809 23:02:31.732" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/</msg>
<msg timestamp="20170809 23:02:31.737" level="INFO">${FFDC_PREFIX} = 20170809230231714848_</msg>
<msg timestamp="20170809 23:02:31.758" level="INFO">${LOG_PREFIX} = /home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/</arg>
</arguments>
<msg timestamp="20170809 23:02:31.760" html="yes" level="INFO">Created directory '&lt;a href="file:///home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC"&gt;/home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 23:02:31.760" starttime="20170809 23:02:31.759"></status>
</kw>
<msg timestamp="20170809 23:02:31.765" level="INFO">${FFDC_FILE_PATH} = /home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 23:02:31.776" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt"&gt;/home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 23:02:31.776" starttime="20170809 23:02:31.775"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:31.776" starttime="20170809 23:02:31.774"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 23:02:31.777" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt"&gt;/home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 23:02:31.777" starttime="20170809 23:02:31.777"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:31.777" starttime="20170809 23:02:31.776"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 23:02:31.778" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt"&gt;/home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 23:02:31.778" starttime="20170809 23:02:31.778"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:31.779" starttime="20170809 23:02:31.777"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 23:02:31.780" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt"&gt;/home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 23:02:31.780" starttime="20170809 23:02:31.780"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:31.780" starttime="20170809 23:02:31.779"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 23:02:31.781" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt"&gt;/home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 23:02:31.781" starttime="20170809 23:02:31.781"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:31.782" starttime="20170809 23:02:31.780"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 23:02:31.783" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt"&gt;/home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 23:02:31.783" starttime="20170809 23:02:31.782"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:31.783" starttime="20170809 23:02:31.782"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 23:02:31.785" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt"&gt;/home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 23:02:31.785" starttime="20170809 23:02:31.784"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:31.785" starttime="20170809 23:02:31.783"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 23:02:31.786" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt"&gt;/home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 23:02:31.786" starttime="20170809 23:02:31.786"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:31.786" starttime="20170809 23:02:31.785"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 23:02:31.787" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt"&gt;/home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 23:02:31.787" starttime="20170809 23:02:31.787"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:31.787" starttime="20170809 23:02:31.786"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 23:02:31.789" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt"&gt;/home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 23:02:31.789" starttime="20170809 23:02:31.789"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:31.789" starttime="20170809 23:02:31.788"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 23:02:31.790" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt"&gt;/home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 23:02:31.790" starttime="20170809 23:02:31.790"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:31.791" starttime="20170809 23:02:31.789"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 23:02:31.792" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt"&gt;/home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 23:02:31.792" starttime="20170809 23:02:31.791"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:31.792" starttime="20170809 23:02:31.791"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 23:02:31.793" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt"&gt;/home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 23:02:31.793" starttime="20170809 23:02:31.793"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:31.793" starttime="20170809 23:02:31.792"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170809 23:02:31.812" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170809 23:02:31.813" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170809 23:02:32.616" level="INFO">Read output: root@witherspoon:~#</msg>
<msg timestamp="20170809 23:02:32.617" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170809 23:02:32.693" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170809 23:02:32.702" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170809 23:02:32.703" level="INFO">${stderr} = </msg>
<msg timestamp="20170809 23:02:32.703" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20170809 23:02:32.703" starttime="20170809 23:02:31.794"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170809 23:02:32.703" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170809 23:02:32.703" starttime="20170809 23:02:32.703"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170809 23:02:32.704" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170809 23:02:32.704" starttime="20170809 23:02:32.704"></status>
</kw>
<msg timestamp="20170809 23:02:32.704" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" endtime="20170809 23:02:32.704" starttime="20170809 23:02:31.793"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 23:02:32.705" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt"&gt;/home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 23:02:32.706" starttime="20170809 23:02:32.705"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:32.706" starttime="20170809 23:02:32.704"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:32.706" starttime="20170809 23:02:31.788"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 23:02:32.707" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt"&gt;/home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 23:02:32.707" starttime="20170809 23:02:32.707"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:32.707" starttime="20170809 23:02:32.706"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170809 23:02:32.708" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170809 23:02:32.708" starttime="20170809 23:02:32.707"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 23:02:32.709" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt"&gt;/home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 23:02:32.709" starttime="20170809 23:02:32.709"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:32.710" starttime="20170809 23:02:32.708"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 23:02:32.711" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt"&gt;/home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 23:02:32.711" starttime="20170809 23:02:32.710"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:32.711" starttime="20170809 23:02:32.710"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:32.711" starttime="20170809 23:02:32.708"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 23:02:32.712" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt"&gt;/home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 23:02:32.712" starttime="20170809 23:02:32.712"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:32.713" starttime="20170809 23:02:32.711"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 23:02:32.714" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt"&gt;/home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 23:02:32.714" starttime="20170809 23:02:32.713"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:32.714" starttime="20170809 23:02:32.713"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:32.714" starttime="20170809 23:02:32.711"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 23:02:32.716" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt"&gt;/home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 23:02:32.716" starttime="20170809 23:02:32.715"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:32.716" starttime="20170809 23:02:32.714"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 23:02:32.718" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt"&gt;/home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 23:02:32.718" starttime="20170809 23:02:32.717"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:32.718" starttime="20170809 23:02:32.716"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:32.718" starttime="20170809 23:02:32.714"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:32.718" starttime="20170809 23:02:32.708"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 23:02:32.719" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt"&gt;/home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 23:02:32.719" starttime="20170809 23:02:32.719"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:32.719" starttime="20170809 23:02:32.718"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:32.720" starttime="20170809 23:02:31.774"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170809 23:02:32.725" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20170809 23:02:32.725" starttime="20170809 23:02:32.725"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170809 23:02:32.727" level="INFO">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('Core Files', 'SCP Coredump Files') | ('BMC Specific Files', 'BMC FFDC Files') | ('SEL Log', 'Collect ...</msg>
<status status="PASS" endtime="20170809 23:02:32.727" starttime="20170809 23:02:32.727"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20170809 23:02:32.729" starttime="20170809 23:02:32.729"></status>
</kw>
<msg timestamp="20170809 23:02:32.729" level="INFO">@{ffdc_function_list} = [ FFDC Generic Report | Get Request FFDC | Core Files | BMC Specific Files | SEL Log | OS FFDC ]</msg>
<status status="PASS" endtime="20170809 23:02:32.729" starttime="20170809 23:02:32.728"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170809 23:02:32.732" starttime="20170809 23:02:32.732"></status>
</kw>
<msg timestamp="20170809 23:02:32.733" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 23:02:32.733" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170809 23:02:32.733" starttime="20170809 23:02:32.731"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170809 23:02:32.734" starttime="20170809 23:02:32.733"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170809 23:02:32.748" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170809 23:02:32.749" starttime="20170809 23:02:32.748"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170809 23:02:32.750" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status status="PASS" endtime="20170809 23:02:32.750" starttime="20170809 23:02:32.750"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170809 23:02:32.759" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20170809 23:02:32.759" starttime="20170809 23:02:32.751"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 23:02:32.763" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt"&gt;/home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 23:02:32.763" starttime="20170809 23:02:32.763"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:32.763" starttime="20170809 23:02:32.762"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 23:02:32.765" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt"&gt;/home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 23:02:32.765" starttime="20170809 23:02:32.764"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:32.765" starttime="20170809 23:02:32.764"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 23:02:32.766" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt"&gt;/home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 23:02:32.766" starttime="20170809 23:02:32.766"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:32.766" starttime="20170809 23:02:32.765"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 23:02:32.767" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt"&gt;/home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 23:02:32.767" starttime="20170809 23:02:32.767"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:32.768" starttime="20170809 23:02:32.766"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:32.768" starttime="20170809 23:02:32.762"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:32.768" starttime="20170809 23:02:32.761"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 23:02:32.769" level="INFO">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status status="PASS" endtime="20170809 23:02:32.769" starttime="20170809 23:02:32.768"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170809 23:02:32.811" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170809 23:02:32.811" level="INFO">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg timestamp="20170809 23:02:34.148" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170809 23:02:34.148" starttime="20170809 23:02:32.787"></status>
</kw>
<msg timestamp="20170809 23:02:34.148" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 23:02:34.148" level="INFO">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState....</msg>
<status status="PASS" endtime="20170809 23:02:34.148" starttime="20170809 23:02:32.769"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170809 23:02:34.149" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170809 23:02:34.149" starttime="20170809 23:02:34.149"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 23:02:34.150" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170809 23:02:34.150" starttime="20170809 23:02:34.150"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 23:02:34.162" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt"&gt;/home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 23:02:34.162" starttime="20170809 23:02:34.161"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:34.162" starttime="20170809 23:02:34.160"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:34.162" starttime="20170809 23:02:34.151"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:34.162" starttime="20170809 23:02:32.760"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:34.162" starttime="20170809 23:02:32.760"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:34.162" starttime="20170809 23:02:32.759"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:34.162" starttime="20170809 23:02:32.749"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:34.163" starttime="20170809 23:02:32.749"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170809 23:02:34.164" level="INFO">@{cmd_list} = [ ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" endtime="20170809 23:02:34.164" starttime="20170809 23:02:34.164"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170809 23:02:34.165" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20170809 23:02:34.165" starttime="20170809 23:02:34.165"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 23:02:34.168" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt"&gt;/home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 23:02:34.169" starttime="20170809 23:02:34.168"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:34.169" starttime="20170809 23:02:34.167"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 23:02:34.170" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt"&gt;/home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 23:02:34.170" starttime="20170809 23:02:34.170"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:34.170" starttime="20170809 23:02:34.169"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 23:02:34.171" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt"&gt;/home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 23:02:34.171" starttime="20170809 23:02:34.171"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:34.171" starttime="20170809 23:02:34.170"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 23:02:34.173" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt"&gt;/home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 23:02:34.173" starttime="20170809 23:02:34.172"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:34.173" starttime="20170809 23:02:34.172"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:34.173" starttime="20170809 23:02:34.167"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:34.173" starttime="20170809 23:02:34.167"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 23:02:34.174" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status status="PASS" endtime="20170809 23:02:34.174" starttime="20170809 23:02:34.173"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170809 23:02:34.215" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170809 23:02:34.216" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170809 23:02:34.262" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170809 23:02:34.262" starttime="20170809 23:02:34.192"></status>
</kw>
<msg timestamp="20170809 23:02:34.262" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 23:02:34.262" level="INFO">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.8-201"\nVERSION_ID="v1.99.8-201-gb983102"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC...</msg>
<status status="PASS" endtime="20170809 23:02:34.262" starttime="20170809 23:02:34.174"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170809 23:02:34.263" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.8-201"
VERSION_ID="v1.99.8-201-gb983102"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Projec...</msg>
<status status="PASS" endtime="20170809 23:02:34.263" starttime="20170809 23:02:34.263"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 23:02:34.264" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170809 23:02:34.264" starttime="20170809 23:02:34.263"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 23:02:34.271" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt"&gt;/home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 23:02:34.271" starttime="20170809 23:02:34.271"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:34.271" starttime="20170809 23:02:34.270"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:34.271" starttime="20170809 23:02:34.264"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:34.271" starttime="20170809 23:02:34.166"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:34.271" starttime="20170809 23:02:34.165"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:34.271" starttime="20170809 23:02:34.165"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:34.271" starttime="20170809 23:02:34.163"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:34.271" starttime="20170809 23:02:34.163"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170809 23:02:34.273" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" endtime="20170809 23:02:34.273" starttime="20170809 23:02:34.272"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170809 23:02:34.273" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20170809 23:02:34.273" starttime="20170809 23:02:34.273"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 23:02:34.277" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt"&gt;/home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 23:02:34.277" starttime="20170809 23:02:34.276"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:34.277" starttime="20170809 23:02:34.276"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 23:02:34.278" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt"&gt;/home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 23:02:34.278" starttime="20170809 23:02:34.278"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:34.278" starttime="20170809 23:02:34.277"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 23:02:34.279" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt"&gt;/home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 23:02:34.279" starttime="20170809 23:02:34.279"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:34.280" starttime="20170809 23:02:34.278"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 23:02:34.281" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt"&gt;/home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 23:02:34.281" starttime="20170809 23:02:34.280"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:34.281" starttime="20170809 23:02:34.280"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:34.281" starttime="20170809 23:02:34.275"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:34.281" starttime="20170809 23:02:34.275"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 23:02:34.282" level="INFO">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status status="PASS" endtime="20170809 23:02:34.282" starttime="20170809 23:02:34.281"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170809 23:02:34.324" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170809 23:02:34.325" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170809 23:02:34.403" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170809 23:02:34.403" starttime="20170809 23:02:34.301"></status>
</kw>
<msg timestamp="20170809 23:02:34.404" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 23:02:34.404" level="INFO">${ret_values} = (u' 15:46:10 up 3 min,  load average: 2.04, 1.88, 0.82', u'', 0)</msg>
<status status="PASS" endtime="20170809 23:02:34.404" starttime="20170809 23:02:34.282"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170809 23:02:34.404" level="INFO">${stdout} =  15:46:10 up 3 min,  load average: 2.04, 1.88, 0.82</msg>
<status status="PASS" endtime="20170809 23:02:34.404" starttime="20170809 23:02:34.404"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 23:02:34.405" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170809 23:02:34.405" starttime="20170809 23:02:34.405"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 23:02:34.412" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt"&gt;/home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 23:02:34.413" starttime="20170809 23:02:34.412"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:34.413" starttime="20170809 23:02:34.411"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:34.413" starttime="20170809 23:02:34.405"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:34.413" starttime="20170809 23:02:34.274"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:34.413" starttime="20170809 23:02:34.274"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 23:02:34.416" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt"&gt;/home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 23:02:34.416" starttime="20170809 23:02:34.416"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:34.416" starttime="20170809 23:02:34.415"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 23:02:34.418" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt"&gt;/home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 23:02:34.418" starttime="20170809 23:02:34.417"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:34.418" starttime="20170809 23:02:34.416"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 23:02:34.420" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt"&gt;/home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 23:02:34.420" starttime="20170809 23:02:34.419"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:34.420" starttime="20170809 23:02:34.418"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 23:02:34.421" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt"&gt;/home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 23:02:34.421" starttime="20170809 23:02:34.421"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:34.421" starttime="20170809 23:02:34.420"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:34.421" starttime="20170809 23:02:34.414"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:34.421" starttime="20170809 23:02:34.414"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 23:02:34.422" level="INFO">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status status="PASS" endtime="20170809 23:02:34.422" starttime="20170809 23:02:34.422"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170809 23:02:34.463" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170809 23:02:34.464" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170809 23:02:34.572" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170809 23:02:34.572" starttime="20170809 23:02:34.440"></status>
</kw>
<msg timestamp="20170809 23:02:34.572" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 23:02:34.572" level="INFO">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\ndev                  devtmpfs      210.2M         0    210.2M   0% /dev\ntmpfs                tmpfs         211.1M    ...</msg>
<status status="PASS" endtime="20170809 23:02:34.572" starttime="20170809 23:02:34.422"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170809 23:02:34.573" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     74.0...</msg>
<status status="PASS" endtime="20170809 23:02:34.573" starttime="20170809 23:02:34.573"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 23:02:34.574" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170809 23:02:34.574" starttime="20170809 23:02:34.573"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 23:02:34.580" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt"&gt;/home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 23:02:34.580" starttime="20170809 23:02:34.580"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:34.580" starttime="20170809 23:02:34.579"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:34.581" starttime="20170809 23:02:34.574"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:34.581" starttime="20170809 23:02:34.413"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:34.581" starttime="20170809 23:02:34.413"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 23:02:34.584" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt"&gt;/home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 23:02:34.584" starttime="20170809 23:02:34.584"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:34.584" starttime="20170809 23:02:34.583"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 23:02:34.585" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt"&gt;/home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 23:02:34.586" starttime="20170809 23:02:34.585"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:34.586" starttime="20170809 23:02:34.584"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 23:02:34.587" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt"&gt;/home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 23:02:34.587" starttime="20170809 23:02:34.586"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:34.587" starttime="20170809 23:02:34.586"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 23:02:34.588" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt"&gt;/home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 23:02:34.588" starttime="20170809 23:02:34.588"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:34.588" starttime="20170809 23:02:34.587"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:34.588" starttime="20170809 23:02:34.583"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:34.589" starttime="20170809 23:02:34.582"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 23:02:34.589" level="INFO">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status status="PASS" endtime="20170809 23:02:34.589" starttime="20170809 23:02:34.589"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170809 23:02:34.631" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170809 23:02:34.632" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170809 23:02:34.783" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170809 23:02:34.783" starttime="20170809 23:02:34.608"></status>
</kw>
<msg timestamp="20170809 23:02:34.783" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 23:02:34.784" level="INFO">${ret_values} = (u'Linux witherspoon 4.10.17-baeb50beb784ac5993d2bfb5d06d909971b60506 #1 Tue Aug 8 21:19:50 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status status="PASS" endtime="20170809 23:02:34.784" starttime="20170809 23:02:34.590"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170809 23:02:34.784" level="INFO">${stdout} = Linux witherspoon 4.10.17-baeb50beb784ac5993d2bfb5d06d909971b60506 #1 Tue Aug 8 21:19:50 UTC 2017 armv6l GNU/Linux</msg>
<status status="PASS" endtime="20170809 23:02:34.784" starttime="20170809 23:02:34.784"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 23:02:34.785" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170809 23:02:34.785" starttime="20170809 23:02:34.785"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 23:02:34.792" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt"&gt;/home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 23:02:34.792" starttime="20170809 23:02:34.791"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:34.792" starttime="20170809 23:02:34.791"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:34.792" starttime="20170809 23:02:34.785"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:34.792" starttime="20170809 23:02:34.581"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:34.792" starttime="20170809 23:02:34.581"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:34.792" starttime="20170809 23:02:34.273"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:34.792" starttime="20170809 23:02:34.272"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:34.793" starttime="20170809 23:02:34.272"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:34.793" starttime="20170809 23:02:32.749"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:34.793" starttime="20170809 23:02:32.748"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:34.793" starttime="20170809 23:02:32.734"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:34.793" starttime="20170809 23:02:32.730"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:34.793" starttime="20170809 23:02:32.730"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170809 23:02:34.796" starttime="20170809 23:02:34.795"></status>
</kw>
<msg timestamp="20170809 23:02:34.796" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 23:02:34.796" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170809 23:02:34.796" starttime="20170809 23:02:34.795"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170809 23:02:34.797" starttime="20170809 23:02:34.797"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170809 23:02:34.812" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20170809 23:02:34.812" starttime="20170809 23:02:34.812"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170809 23:02:34.814" level="INFO">@{cmd_list} = [ ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate') | ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_led', '/o...</msg>
<status status="PASS" endtime="20170809 23:02:34.814" starttime="20170809 23:02:34.813"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170809 23:02:34.815" level="INFO">${logpath} = /home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_elog.txt</msg>
<status status="PASS" endtime="20170809 23:02:34.815" starttime="20170809 23:02:34.814"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 23:02:34.818" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 23:02:34.818" starttime="20170809 23:02:34.817"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 23:02:34.819" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 23:02:34.819" starttime="20170809 23:02:34.819"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 23:02:34.820" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 23:02:34.820" starttime="20170809 23:02:34.820"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 23:02:34.821" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 23:02:34.821" starttime="20170809 23:02:34.820"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 23:02:35.001" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 23:02:35.001" starttime="20170809 23:02:34.822"></status>
</kw>
<msg timestamp="20170809 23:02:35.001" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 23:02:35.001" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 23:02:35.001" starttime="20170809 23:02:34.821"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 23:02:35.002" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 23:02:35.002" starttime="20170809 23:02:35.001"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 23:02:35.002" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 23:02:35.002" starttime="20170809 23:02:35.002"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:35.002" starttime="20170809 23:02:34.816"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:35.003" starttime="20170809 23:02:34.816"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:35.003" starttime="20170809 23:02:34.815"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 23:02:35.003" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" endtime="20170809 23:02:35.003" starttime="20170809 23:02:35.003"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170809 23:02:35.004" starttime="20170809 23:02:35.004"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 23:02:35.129" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170809 23:02:35.130" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 23:02:35.130" starttime="20170809 23:02:35.004"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170809 23:02:35.130" starttime="20170809 23:02:35.130"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 23:02:35.131" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170809 23:02:35.131" starttime="20170809 23:02:35.131"></status>
</kw>
<msg timestamp="20170809 23:02:35.131" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 23:02:35.131" starttime="20170809 23:02:34.815"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 23:02:35.133" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 23:02:35.133" starttime="20170809 23:02:35.132"></status>
</kw>
<msg timestamp="20170809 23:02:35.133" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170809 23:02:35.133" starttime="20170809 23:02:35.132"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170809 23:02:35.133" starttime="20170809 23:02:35.133"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170809 23:02:35.134" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/1": {
      "AdditionalData": [], 
      "Id": 1, 
      "Message": "xyz.openbmc_project.Common.Error.InternalFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775046420, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 23:02:35.134" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170809 23:02:35.134" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/logging/entry/1": {
            "AdditionalData": [],
            "Id": 1,
            "Message": "xyz.openbmc_project.Common.Error.InternalFailure",
    ...</msg>
<status status="PASS" endtime="20170809 23:02:35.134" starttime="20170809 23:02:35.134"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 23:02:35.136" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_elog.txt"&gt;/home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_elog.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 23:02:35.136" starttime="20170809 23:02:35.135"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:35.136" starttime="20170809 23:02:35.135"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:35.136" starttime="20170809 23:02:34.814"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170809 23:02:35.137" level="INFO">${logpath} = /home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_sensor_list.txt</msg>
<status status="PASS" endtime="20170809 23:02:35.137" starttime="20170809 23:02:35.136"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 23:02:35.141" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 23:02:35.141" starttime="20170809 23:02:35.140"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 23:02:35.142" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 23:02:35.142" starttime="20170809 23:02:35.142"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 23:02:35.143" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 23:02:35.143" starttime="20170809 23:02:35.142"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 23:02:35.144" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 23:02:35.144" starttime="20170809 23:02:35.143"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 23:02:35.321" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 23:02:35.321" starttime="20170809 23:02:35.145"></status>
</kw>
<msg timestamp="20170809 23:02:35.321" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 23:02:35.321" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 23:02:35.321" starttime="20170809 23:02:35.144"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 23:02:35.322" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 23:02:35.322" starttime="20170809 23:02:35.322"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 23:02:35.323" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 23:02:35.324" starttime="20170809 23:02:35.323"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:35.324" starttime="20170809 23:02:35.139"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:35.324" starttime="20170809 23:02:35.139"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:35.324" starttime="20170809 23:02:35.138"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 23:02:35.325" level="INFO">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status status="PASS" endtime="20170809 23:02:35.325" starttime="20170809 23:02:35.324"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170809 23:02:35.326" starttime="20170809 23:02:35.325"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 23:02:35.511" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170809 23:02:35.511" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 23:02:35.511" starttime="20170809 23:02:35.326"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170809 23:02:35.511" starttime="20170809 23:02:35.511"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 23:02:35.512" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170809 23:02:35.512" starttime="20170809 23:02:35.512"></status>
</kw>
<msg timestamp="20170809 23:02:35.512" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 23:02:35.512" starttime="20170809 23:02:35.137"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 23:02:35.513" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 23:02:35.514" starttime="20170809 23:02:35.513"></status>
</kw>
<msg timestamp="20170809 23:02:35.514" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170809 23:02:35.514" starttime="20170809 23:02:35.513"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170809 23:02:35.514" starttime="20170809 23:02:35.514"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170809 23:02:35.515" level="INFO">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 3
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 23:02:35.515" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170809 23:02:35.515" level="INFO">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 3
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status status="PASS" endtime="20170809 23:02:35.515" starttime="20170809 23:02:35.515"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 23:02:35.517" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_sensor_list.txt"&gt;/home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 23:02:35.517" starttime="20170809 23:02:35.516"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:35.517" starttime="20170809 23:02:35.516"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:35.517" starttime="20170809 23:02:35.136"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170809 23:02:35.518" level="INFO">${logpath} = /home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_inventory.txt</msg>
<status status="PASS" endtime="20170809 23:02:35.518" starttime="20170809 23:02:35.517"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 23:02:35.521" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 23:02:35.522" starttime="20170809 23:02:35.521"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 23:02:35.522" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 23:02:35.522" starttime="20170809 23:02:35.522"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 23:02:35.523" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 23:02:35.523" starttime="20170809 23:02:35.522"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 23:02:35.524" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 23:02:35.524" starttime="20170809 23:02:35.523"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 23:02:35.757" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 23:02:35.758" starttime="20170809 23:02:35.524"></status>
</kw>
<msg timestamp="20170809 23:02:35.758" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 23:02:35.758" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 23:02:35.758" starttime="20170809 23:02:35.524"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 23:02:35.758" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 23:02:35.759" starttime="20170809 23:02:35.758"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 23:02:35.759" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 23:02:35.760" starttime="20170809 23:02:35.759"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:35.760" starttime="20170809 23:02:35.520"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:35.760" starttime="20170809 23:02:35.520"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:35.760" starttime="20170809 23:02:35.519"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 23:02:35.761" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" endtime="20170809 23:02:35.761" starttime="20170809 23:02:35.760"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170809 23:02:35.761" starttime="20170809 23:02:35.761"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 23:02:35.977" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170809 23:02:35.977" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 23:02:35.977" starttime="20170809 23:02:35.761"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170809 23:02:35.978" starttime="20170809 23:02:35.977"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 23:02:35.978" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170809 23:02:35.978" starttime="20170809 23:02:35.978"></status>
</kw>
<msg timestamp="20170809 23:02:35.978" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 23:02:35.979" starttime="20170809 23:02:35.518"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 23:02:35.980" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 23:02:35.980" starttime="20170809 23:02:35.979"></status>
</kw>
<msg timestamp="20170809 23:02:35.980" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170809 23:02:35.980" starttime="20170809 23:02:35.979"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170809 23:02:35.981" starttime="20170809 23:02:35.980"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170809 23:02:35.981" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 23:02:35.981" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170809 23:02:35.981" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system/chassis": {
            "AirCooled": 1,
            "WaterCooled": 1
        },
        "/xyz/openbmc_project/inventory/system/chassis/mo...</msg>
<status status="PASS" endtime="20170809 23:02:35.982" starttime="20170809 23:02:35.981"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 23:02:35.983" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_inventory.txt"&gt;/home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 23:02:35.983" starttime="20170809 23:02:35.982"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:35.983" starttime="20170809 23:02:35.982"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:35.983" starttime="20170809 23:02:35.517"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170809 23:02:35.984" level="INFO">${logpath} = /home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_led.txt</msg>
<status status="PASS" endtime="20170809 23:02:35.984" starttime="20170809 23:02:35.984"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 23:02:35.988" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 23:02:35.989" starttime="20170809 23:02:35.988"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 23:02:35.989" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 23:02:35.989" starttime="20170809 23:02:35.989"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 23:02:35.990" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 23:02:35.990" starttime="20170809 23:02:35.990"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 23:02:35.991" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 23:02:35.991" starttime="20170809 23:02:35.990"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 23:02:36.183" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 23:02:36.183" starttime="20170809 23:02:35.992"></status>
</kw>
<msg timestamp="20170809 23:02:36.184" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 23:02:36.184" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 23:02:36.184" starttime="20170809 23:02:35.991"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 23:02:36.184" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 23:02:36.184" starttime="20170809 23:02:36.184"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 23:02:36.185" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 23:02:36.185" starttime="20170809 23:02:36.185"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:36.185" starttime="20170809 23:02:35.987"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:36.185" starttime="20170809 23:02:35.986"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:36.185" starttime="20170809 23:02:35.985"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 23:02:36.186" level="INFO">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status status="PASS" endtime="20170809 23:02:36.186" starttime="20170809 23:02:36.186"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170809 23:02:36.187" starttime="20170809 23:02:36.186"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 23:02:36.229" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg timestamp="20170809 23:02:36.229" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170809 23:02:36.229" starttime="20170809 23:02:36.187"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170809 23:02:36.230" starttime="20170809 23:02:36.230"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 23:02:36.231" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170809 23:02:36.231" starttime="20170809 23:02:36.230"></status>
</kw>
<msg timestamp="20170809 23:02:36.231" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170809 23:02:36.231" starttime="20170809 23:02:35.985"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 23:02:36.232" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170809 23:02:36.232" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170809 23:02:36.232" starttime="20170809 23:02:36.232"></status>
</kw>
<msg timestamp="20170809 23:02:36.232" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170809 23:02:36.232" starttime="20170809 23:02:36.231"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170809 23:02:36.233" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170809 23:02:36.234" starttime="20170809 23:02:36.233"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:36.234" starttime="20170809 23:02:36.233"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:36.234" starttime="20170809 23:02:35.983"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170809 23:02:36.235" level="INFO">${logpath} = /home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_record_log.txt</msg>
<status status="PASS" endtime="20170809 23:02:36.235" starttime="20170809 23:02:36.234"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 23:02:36.237" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 23:02:36.238" starttime="20170809 23:02:36.237"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 23:02:36.238" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 23:02:36.238" starttime="20170809 23:02:36.238"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 23:02:36.239" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 23:02:36.239" starttime="20170809 23:02:36.239"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 23:02:36.240" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 23:02:36.240" starttime="20170809 23:02:36.239"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 23:02:36.416" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 23:02:36.416" starttime="20170809 23:02:36.241"></status>
</kw>
<msg timestamp="20170809 23:02:36.417" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 23:02:36.417" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 23:02:36.417" starttime="20170809 23:02:36.240"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 23:02:36.417" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 23:02:36.417" starttime="20170809 23:02:36.417"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 23:02:36.418" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 23:02:36.418" starttime="20170809 23:02:36.418"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:36.418" starttime="20170809 23:02:36.237"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:36.418" starttime="20170809 23:02:36.236"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:36.418" starttime="20170809 23:02:36.235"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 23:02:36.420" level="INFO">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status status="PASS" endtime="20170809 23:02:36.420" starttime="20170809 23:02:36.419"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170809 23:02:36.421" starttime="20170809 23:02:36.420"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 23:02:36.465" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170809 23:02:36.465" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170809 23:02:36.465" starttime="20170809 23:02:36.421"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170809 23:02:36.465" starttime="20170809 23:02:36.465"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 23:02:36.466" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170809 23:02:36.466" starttime="20170809 23:02:36.466"></status>
</kw>
<msg timestamp="20170809 23:02:36.466" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170809 23:02:36.466" starttime="20170809 23:02:36.235"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 23:02:36.467" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170809 23:02:36.468" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170809 23:02:36.468" starttime="20170809 23:02:36.467"></status>
</kw>
<msg timestamp="20170809 23:02:36.468" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170809 23:02:36.468" starttime="20170809 23:02:36.467"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170809 23:02:36.469" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170809 23:02:36.469" starttime="20170809 23:02:36.469"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:36.469" starttime="20170809 23:02:36.468"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:36.469" starttime="20170809 23:02:36.234"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:36.469" starttime="20170809 23:02:34.814"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:36.469" starttime="20170809 23:02:34.812"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:36.469" starttime="20170809 23:02:34.812"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:36.469" starttime="20170809 23:02:34.812"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:36.469" starttime="20170809 23:02:34.811"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:36.469" starttime="20170809 23:02:34.797"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:36.470" starttime="20170809 23:02:34.794"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:36.470" starttime="20170809 23:02:34.793"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170809 23:02:36.472" starttime="20170809 23:02:36.472"></status>
</kw>
<msg timestamp="20170809 23:02:36.472" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 23:02:36.472" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170809 23:02:36.472" starttime="20170809 23:02:36.471"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170809 23:02:36.473" starttime="20170809 23:02:36.473"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170809 23:02:36.507" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170809 23:02:36.507" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170809 23:02:36.574" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170809 23:02:36.584" level="INFO">${core_files} = None</msg>
<msg timestamp="20170809 23:02:36.584" level="INFO">${stderr} = None</msg>
<msg timestamp="20170809 23:02:36.584" level="INFO">${rc} = None</msg>
<msg timestamp="20170809 23:02:36.584" level="FAIL">#(UTC) 2017/08/09 23:02:36.583617 -    3.881472 - **ERROR** The prior SSH command returned a non-zero return code:
rc:                                               0x00000001
ls: /tmp/core_*: No such file or directory
: 1 != 0</msg>
<status status="FAIL" endtime="20170809 23:02:36.585" starttime="20170809 23:02:36.487"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170809 23:02:36.585" level="INFO">@{core_list} = [ ]</msg>
<msg timestamp="20170809 23:02:36.585" level="FAIL">AttributeError: 'NoneType' object has no attribute 'split'</msg>
<status status="FAIL" endtime="20170809 23:02:36.585" starttime="20170809 23:02:36.585"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170809 23:02:36.595" starttime="20170809 23:02:36.594"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170809 23:02:37.332" starttime="20170809 23:02:36.596"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:37.332" starttime="20170809 23:02:36.596"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:37.332" starttime="20170809 23:02:36.594"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:37.332" starttime="20170809 23:02:36.586"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status status="PASS" endtime="20170809 23:02:37.332" starttime="20170809 23:02:37.332"></status>
</kw>
<status status="FAIL" endtime="20170809 23:02:37.332" starttime="20170809 23:02:36.487"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:37.332" starttime="20170809 23:02:36.473"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:37.333" starttime="20170809 23:02:36.470"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:37.333" starttime="20170809 23:02:36.470"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170809 23:02:37.335" starttime="20170809 23:02:37.334"></status>
</kw>
<msg timestamp="20170809 23:02:37.335" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 23:02:37.335" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170809 23:02:37.335" starttime="20170809 23:02:37.334"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170809 23:02:37.335" starttime="20170809 23:02:37.335"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170809 23:02:37.350" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20170809 23:02:37.351" starttime="20170809 23:02:37.350"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170809 23:02:37.352" level="INFO">@{cmd_list} = [ ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_proc_list', 'top -n 1 -b') | ('BMC_dmesg', 'dmesg') | ('BMC_j...</msg>
<status status="PASS" endtime="20170809 23:02:37.352" starttime="20170809 23:02:37.352"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170809 23:02:37.354" level="INFO">${logpath} = /home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_proc_fd_active_list.txt</msg>
<status status="PASS" endtime="20170809 23:02:37.354" starttime="20170809 23:02:37.353"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170809 23:02:37.356" starttime="20170809 23:02:37.355"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 23:02:37.357" level="INFO">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status status="PASS" endtime="20170809 23:02:37.357" starttime="20170809 23:02:37.356"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170809 23:02:37.399" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170809 23:02:37.399" level="INFO">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg timestamp="20170809 23:02:37.950" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170809 23:02:37.950" starttime="20170809 23:02:37.376"></status>
</kw>
<msg timestamp="20170809 23:02:37.951" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 23:02:37.952" level="INFO">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Aug  3 15:46 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Aug  3 15:46 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status status="PASS" endtime="20170809 23:02:37.952" starttime="20170809 23:02:37.358"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170809 23:02:37.953" level="INFO">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Aug  3 15:46 0 -&gt; /dev/null
lrwx------    1 root     root            64 Aug  3 15:46 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status status="PASS" endtime="20170809 23:02:37.953" starttime="20170809 23:02:37.952"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 23:02:37.953" level="INFO">${stderr} = ls: /proc/1312/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status status="PASS" endtime="20170809 23:02:37.953" starttime="20170809 23:02:37.953"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 23:02:37.965" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_proc_fd_active_list.txt"&gt;/home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 23:02:37.965" starttime="20170809 23:02:37.964"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:37.965" starttime="20170809 23:02:37.963"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:37.965" starttime="20170809 23:02:37.954"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:37.966" starttime="20170809 23:02:37.354"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:37.966" starttime="20170809 23:02:37.353"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170809 23:02:37.966" level="INFO">${logpath} = /home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_procinfo.txt</msg>
<status status="PASS" endtime="20170809 23:02:37.966" starttime="20170809 23:02:37.966"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170809 23:02:37.968" starttime="20170809 23:02:37.968"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 23:02:37.969" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status status="PASS" endtime="20170809 23:02:37.969" starttime="20170809 23:02:37.968"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170809 23:02:38.012" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170809 23:02:38.012" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170809 23:02:38.071" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170809 23:02:38.071" starttime="20170809 23:02:37.987"></status>
</kw>
<msg timestamp="20170809 23:02:38.072" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 23:02:38.072" level="INFO">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status status="PASS" endtime="20170809 23:02:38.072" starttime="20170809 23:02:37.969"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170809 23:02:38.072" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status status="PASS" endtime="20170809 23:02:38.072" starttime="20170809 23:02:38.072"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 23:02:38.073" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170809 23:02:38.073" starttime="20170809 23:02:38.073"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 23:02:38.080" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_procinfo.txt"&gt;/home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 23:02:38.080" starttime="20170809 23:02:38.079"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:38.080" starttime="20170809 23:02:38.079"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:38.080" starttime="20170809 23:02:38.073"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:38.080" starttime="20170809 23:02:37.967"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:38.080" starttime="20170809 23:02:37.966"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170809 23:02:38.081" level="INFO">${logpath} = /home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_meminfo.txt</msg>
<status status="PASS" endtime="20170809 23:02:38.081" starttime="20170809 23:02:38.081"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170809 23:02:38.082" starttime="20170809 23:02:38.082"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 23:02:38.083" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status status="PASS" endtime="20170809 23:02:38.083" starttime="20170809 23:02:38.083"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170809 23:02:38.126" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170809 23:02:38.127" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170809 23:02:38.183" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170809 23:02:38.183" starttime="20170809 23:02:38.102"></status>
</kw>
<msg timestamp="20170809 23:02:38.183" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 23:02:38.183" level="INFO">${ret_values} = (u'MemTotal:         432260 kB\nMemFree:          177984 kB\nMemAvailable:     225672 kB\nBuffers:           11580 kB\nCached:           151692 kB\nSwapCached:            0 kB\nActive:           14626...</msg>
<status status="PASS" endtime="20170809 23:02:38.183" starttime="20170809 23:02:38.084"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170809 23:02:38.184" level="INFO">${stdout} = MemTotal:         432260 kB
MemFree:          177984 kB
MemAvailable:     225672 kB
Buffers:           11580 kB
Cached:           151692 kB
SwapCached:            0 kB
Active:           146264 kB
Inac...</msg>
<status status="PASS" endtime="20170809 23:02:38.184" starttime="20170809 23:02:38.184"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 23:02:38.184" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170809 23:02:38.185" starttime="20170809 23:02:38.184"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 23:02:38.192" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_meminfo.txt"&gt;/home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 23:02:38.192" starttime="20170809 23:02:38.191"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:38.192" starttime="20170809 23:02:38.191"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:38.192" starttime="20170809 23:02:38.185"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:38.192" starttime="20170809 23:02:38.081"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:38.192" starttime="20170809 23:02:38.080"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170809 23:02:38.193" level="INFO">${logpath} = /home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_proc_list.txt</msg>
<status status="PASS" endtime="20170809 23:02:38.193" starttime="20170809 23:02:38.193"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170809 23:02:38.194" starttime="20170809 23:02:38.194"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 23:02:38.195" level="INFO">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status status="PASS" endtime="20170809 23:02:38.195" starttime="20170809 23:02:38.195"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170809 23:02:38.237" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170809 23:02:38.238" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170809 23:02:38.557" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170809 23:02:38.557" starttime="20170809 23:02:38.214"></status>
</kw>
<msg timestamp="20170809 23:02:38.557" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 23:02:38.557" level="INFO">${ret_values} = (u'Mem: 254276K used, 177984K free, 113168K shrd, 11580K buff, 151696K cached\nCPU:   0% usr  21% sys   0% nic  78% idle   0% io   0% irq   0% sirq\nLoad average: 2.04 1.89 0.83 1/159 1315\n  PID  PPI...</msg>
<status status="PASS" endtime="20170809 23:02:38.557" starttime="20170809 23:02:38.195"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170809 23:02:38.558" level="INFO">${stdout} = Mem: 254276K used, 177984K free, 113168K shrd, 11580K buff, 151696K cached
CPU:   0% usr  21% sys   0% nic  78% idle   0% io   0% irq   0% sirq
Load average: 2.04 1.89 0.83 1/159 1315
  PID  PPID USER...</msg>
<status status="PASS" endtime="20170809 23:02:38.558" starttime="20170809 23:02:38.558"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 23:02:38.559" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170809 23:02:38.559" starttime="20170809 23:02:38.559"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 23:02:38.566" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_proc_list.txt"&gt;/home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 23:02:38.566" starttime="20170809 23:02:38.566"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:38.566" starttime="20170809 23:02:38.565"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:38.566" starttime="20170809 23:02:38.559"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:38.567" starttime="20170809 23:02:38.193"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:38.567" starttime="20170809 23:02:38.192"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170809 23:02:38.567" level="INFO">${logpath} = /home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_dmesg.txt</msg>
<status status="PASS" endtime="20170809 23:02:38.567" starttime="20170809 23:02:38.567"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170809 23:02:38.569" starttime="20170809 23:02:38.569"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 23:02:38.570" level="INFO">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status status="PASS" endtime="20170809 23:02:38.570" starttime="20170809 23:02:38.569"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170809 23:02:38.611" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170809 23:02:38.612" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170809 23:02:38.681" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170809 23:02:38.681" starttime="20170809 23:02:38.588"></status>
</kw>
<msg timestamp="20170809 23:02:38.681" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 23:02:38.681" level="INFO">${ret_values} = (u'[    0.000000] Booting Linux on physical CPU 0x0\n[    0.000000] Linux version 4.10.17-baeb50beb784ac5993d2bfb5d06d909971b60506 (jenkins@openbmc-builder1) (gcc version 6.2.0 (GCC) ) #1 Tue Aug 8 21...</msg>
<status status="PASS" endtime="20170809 23:02:38.681" starttime="20170809 23:02:38.570"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170809 23:02:38.682" level="INFO">${stdout} = [    0.000000] Booting Linux on physical CPU 0x0
[    0.000000] Linux version 4.10.17-baeb50beb784ac5993d2bfb5d06d909971b60506 (jenkins@openbmc-builder1) (gcc version 6.2.0 (GCC) ) #1 Tue Aug 8 21:19:...</msg>
<status status="PASS" endtime="20170809 23:02:38.682" starttime="20170809 23:02:38.682"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 23:02:38.683" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170809 23:02:38.683" starttime="20170809 23:02:38.682"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 23:02:38.690" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_dmesg.txt"&gt;/home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 23:02:38.690" starttime="20170809 23:02:38.689"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:38.690" starttime="20170809 23:02:38.688"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:38.690" starttime="20170809 23:02:38.683"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:38.690" starttime="20170809 23:02:38.568"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:38.690" starttime="20170809 23:02:38.567"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170809 23:02:38.691" level="INFO">${logpath} = /home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_journalctl.txt</msg>
<status status="PASS" endtime="20170809 23:02:38.691" starttime="20170809 23:02:38.691"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170809 23:02:38.692" starttime="20170809 23:02:38.692"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 23:02:38.693" level="INFO">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status status="PASS" endtime="20170809 23:02:38.693" starttime="20170809 23:02:38.693"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170809 23:02:38.735" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170809 23:02:38.736" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170809 23:02:39.671" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170809 23:02:39.672" starttime="20170809 23:02:38.711"></status>
</kw>
<msg timestamp="20170809 23:02:39.672" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 23:02:39.673" level="INFO">${ret_values} = (u'-- Logs begin at Thu 2017-08-03 15:42:59 UTC, end at Thu 2017-08-03 15:46:13 UTC. --\nAug 03 15:42:59 witherspoon kernel: Booting Linux on physical CPU 0x0\nAug 03 15:42:59 witherspoon kernel: Linu...</msg>
<status status="PASS" endtime="20170809 23:02:39.673" starttime="20170809 23:02:38.694"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170809 23:02:39.674" level="INFO">${stdout} = -- Logs begin at Thu 2017-08-03 15:42:59 UTC, end at Thu 2017-08-03 15:46:13 UTC. --
Aug 03 15:42:59 witherspoon kernel: Booting Linux on physical CPU 0x0
Aug 03 15:42:59 witherspoon kernel: Linux ver...</msg>
<status status="PASS" endtime="20170809 23:02:39.675" starttime="20170809 23:02:39.674"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 23:02:39.675" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170809 23:02:39.675" starttime="20170809 23:02:39.675"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 23:02:39.683" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_journalctl.txt"&gt;/home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 23:02:39.683" starttime="20170809 23:02:39.682"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:39.683" starttime="20170809 23:02:39.681"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:39.683" starttime="20170809 23:02:39.675"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:39.683" starttime="20170809 23:02:38.691"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:39.683" starttime="20170809 23:02:38.690"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:39.683" starttime="20170809 23:02:37.353"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:39.684" starttime="20170809 23:02:37.351"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:39.684" starttime="20170809 23:02:37.351"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:39.684" starttime="20170809 23:02:37.351"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:39.684" starttime="20170809 23:02:37.349"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:39.684" starttime="20170809 23:02:37.336"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:39.684" starttime="20170809 23:02:37.333"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:39.684" starttime="20170809 23:02:37.333"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170809 23:02:39.686" starttime="20170809 23:02:39.686"></status>
</kw>
<msg timestamp="20170809 23:02:39.686" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 23:02:39.686" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170809 23:02:39.686" starttime="20170809 23:02:39.685"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170809 23:02:39.687" starttime="20170809 23:02:39.686"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 23:02:39.704" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 23:02:39.704" starttime="20170809 23:02:39.703"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 23:02:39.705" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 23:02:39.705" starttime="20170809 23:02:39.705"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 23:02:39.706" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 23:02:39.706" starttime="20170809 23:02:39.706"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 23:02:39.707" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 23:02:39.707" starttime="20170809 23:02:39.707"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 23:02:39.919" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 23:02:39.919" starttime="20170809 23:02:39.708"></status>
</kw>
<msg timestamp="20170809 23:02:39.919" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 23:02:39.919" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 23:02:39.919" starttime="20170809 23:02:39.708"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 23:02:39.920" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 23:02:39.920" starttime="20170809 23:02:39.919"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 23:02:39.921" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 23:02:39.921" starttime="20170809 23:02:39.921"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:39.921" starttime="20170809 23:02:39.703"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:39.921" starttime="20170809 23:02:39.702"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:39.921" starttime="20170809 23:02:39.702"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 23:02:39.922" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" endtime="20170809 23:02:39.922" starttime="20170809 23:02:39.922"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170809 23:02:39.923" starttime="20170809 23:02:39.922"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 23:02:40.054" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170809 23:02:40.055" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 23:02:40.055" starttime="20170809 23:02:39.923"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170809 23:02:40.055" starttime="20170809 23:02:40.055"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 23:02:40.056" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170809 23:02:40.056" starttime="20170809 23:02:40.056"></status>
</kw>
<msg timestamp="20170809 23:02:40.056" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 23:02:40.056" starttime="20170809 23:02:39.701"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 23:02:40.057" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 23:02:40.057" starttime="20170809 23:02:40.057"></status>
</kw>
<msg timestamp="20170809 23:02:40.057" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170809 23:02:40.058" starttime="20170809 23:02:40.057"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<status status="PASS" endtime="20170809 23:02:40.058" starttime="20170809 23:02:40.058"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 23:02:40.059" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/1": {
      "AdditionalData": [], 
      "Id": 1, 
      "Message": "xyz.openbmc_project.Common.Error.InternalFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775046420, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 23:02:40.059" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 23:02:40.059" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'/xyz/openbmc_project/logging/entry/1': {u'Resolved': 0, u'AdditionalData': [], u'Severity': u'xyz.openbmc_project.Logging.Entry.Level.Error', u'Ti...</msg>
<status status="PASS" endtime="20170809 23:02:40.059" starttime="20170809 23:02:40.059"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${content['data']}</arg>
</arguments>
<assign>
<var>${esel_list}</var>
</assign>
<msg timestamp="20170809 23:02:40.060" level="INFO">${esel_list} = [u'/xyz/openbmc_project/logging/entry/1']</msg>
<status status="PASS" endtime="20170809 23:02:40.060" starttime="20170809 23:02:40.059"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>esel</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170809 23:02:40.060" level="INFO">${logpath} = /home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_esel</msg>
<status status="PASS" endtime="20170809 23:02:40.060" starttime="20170809 23:02:40.060"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${logpath}</arg>
</arguments>
<msg timestamp="20170809 23:02:40.061" html="yes" level="INFO">Created file '&lt;a href="file:///home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_esel"&gt;/home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/20170809230231714848_esel&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 23:02:40.061" starttime="20170809 23:02:40.061"></status>
</kw>
<kw type="for" name="${entry_path} IN [ @{esel_list} ]">
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/1">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" endtime="20170809 23:02:40.062" starttime="20170809 23:02:40.062"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 23:02:40.066" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 23:02:40.067" starttime="20170809 23:02:40.066"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 23:02:40.067" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 23:02:40.067" starttime="20170809 23:02:40.067"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 23:02:40.068" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 23:02:40.068" starttime="20170809 23:02:40.068"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 23:02:40.069" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 23:02:40.069" starttime="20170809 23:02:40.069"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 23:02:40.262" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 23:02:40.262" starttime="20170809 23:02:40.070"></status>
</kw>
<msg timestamp="20170809 23:02:40.262" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 23:02:40.262" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 23:02:40.262" starttime="20170809 23:02:40.070"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 23:02:40.263" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 23:02:40.263" starttime="20170809 23:02:40.263"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 23:02:40.264" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 23:02:40.264" starttime="20170809 23:02:40.263"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:40.264" starttime="20170809 23:02:40.065"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:40.264" starttime="20170809 23:02:40.065"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:40.264" starttime="20170809 23:02:40.064"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 23:02:40.265" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/1/attr/AdditionalData</msg>
<status status="PASS" endtime="20170809 23:02:40.265" starttime="20170809 23:02:40.264"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170809 23:02:40.265" starttime="20170809 23:02:40.265"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 23:02:40.367" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/1/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170809 23:02:40.367" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 23:02:40.367" starttime="20170809 23:02:40.266"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170809 23:02:40.368" starttime="20170809 23:02:40.367"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 23:02:40.368" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170809 23:02:40.368" starttime="20170809 23:02:40.368"></status>
</kw>
<msg timestamp="20170809 23:02:40.368" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 23:02:40.368" starttime="20170809 23:02:40.063"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 23:02:40.369" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 23:02:40.369" starttime="20170809 23:02:40.369"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 23:02:40.370" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 23:02:40.370" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 23:02:40.370" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': []}</msg>
<status status="PASS" endtime="20170809 23:02:40.370" starttime="20170809 23:02:40.369"></status>
</kw>
<msg timestamp="20170809 23:02:40.370" level="INFO">${esel_data} = []</msg>
<status status="PASS" endtime="20170809 23:02:40.370" starttime="20170809 23:02:40.063"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170809 23:02:40.371" level="INFO">Length is 0</msg>
<msg timestamp="20170809 23:02:40.371" level="INFO">${length} = 0</msg>
<status status="PASS" endtime="20170809 23:02:40.371" starttime="20170809 23:02:40.371"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170809 23:02:40.372" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170809 23:02:40.372" starttime="20170809 23:02:40.371"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:40.372" starttime="20170809 23:02:40.061"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:40.372" starttime="20170809 23:02:40.061"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>which eSEL.pl</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20170809 23:02:40.389" level="INFO">Running command 'which eSEL.pl 2&gt;&amp;1'.</msg>
<msg timestamp="20170809 23:02:40.403" level="INFO">${out} = </msg>
<status status="PASS" endtime="20170809 23:02:40.403" starttime="20170809 23:02:40.373"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<msg timestamp="20170809 23:02:40.433" level="FAIL">'' does not contain 'eSEL.pl'</msg>
<status status="FAIL" endtime="20170809 23:02:40.433" starttime="20170809 23:02:40.428"></status>
</kw>
<msg timestamp="20170809 23:02:40.433" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170809 23:02:40.433" starttime="20170809 23:02:40.421"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170809 23:02:40.434" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170809 23:02:40.436" starttime="20170809 23:02:40.433"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:40.436" starttime="20170809 23:02:39.701"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:40.436" starttime="20170809 23:02:39.687"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:40.437" starttime="20170809 23:02:39.684"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:40.437" starttime="20170809 23:02:39.684"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170809 23:02:40.442" starttime="20170809 23:02:40.442"></status>
</kw>
<msg timestamp="20170809 23:02:40.443" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 23:02:40.443" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170809 23:02:40.443" starttime="20170809 23:02:40.441"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170809 23:02:40.444" starttime="20170809 23:02:40.443"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170809 23:02:40.468" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170809 23:02:40.469" starttime="20170809 23:02:40.468"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:40.469" starttime="20170809 23:02:40.464"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:40.469" starttime="20170809 23:02:40.444"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:40.469" starttime="20170809 23:02:40.438"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:40.469" starttime="20170809 23:02:40.438"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:40.469" starttime="20170809 23:02:32.730"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:40.469" starttime="20170809 23:02:32.726"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:40.469" starttime="20170809 23:02:32.726"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:40.469" starttime="20170809 23:02:32.726"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170809 23:02:40.511" starttime="20170809 23:02:40.476"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:40.511" starttime="20170809 23:02:40.470"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:40.512" starttime="20170809 23:02:32.724"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:40.512" starttime="20170809 23:02:28.656"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:40.512" starttime="20170809 23:02:28.655"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" endtime="20170809 23:02:40.513" starttime="20170809 23:02:40.513"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170809 23:02:40.514" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status status="PASS" endtime="20170809 23:02:40.514" starttime="20170809 23:02:40.514"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170809 23:02:40.515" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170809230231714848_UpdateBmc/20170809230231714848_InitiateCodeUpdateBMC/</msg>
<status status="PASS" endtime="20170809 23:02:40.515" starttime="20170809 23:02:40.514"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20170809 23:02:40.516" starttime="20170809 23:02:40.515"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170809 23:02:40.517" starttime="20170809 23:02:40.517"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170809 23:02:40.518" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld/logs"&gt;/home/fspcibld/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20170809 23:02:40.518" starttime="20170809 23:02:40.517"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170809 23:02:40.519" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170809 23:02:40.519" starttime="20170809 23:02:40.518"></status>
</kw>
<msg timestamp="20170809 23:02:40.519" level="INFO">${exist} = True</msg>
<status status="PASS" endtime="20170809 23:02:40.519" starttime="20170809 23:02:40.518"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" endtime="20170809 23:02:40.520" starttime="20170809 23:02:40.519"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170809 23:02:40.521" starttime="20170809 23:02:40.520"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170809 23:02:40.522" level="INFO">${cur_time} = 2017-08-09 23:02:40:521622</msg>
<status status="PASS" endtime="20170809 23:02:40.522" starttime="20170809 23:02:40.521"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170809 23:02:40.522" level="INFO">${cur_time} = 20170809230240521622</msg>
<status status="PASS" endtime="20170809 23:02:40.523" starttime="20170809 23:02:40.522"></status>
</kw>
<msg timestamp="20170809 23:02:40.523" level="INFO">${cur_time} = 20170809230240521622</msg>
<status status="PASS" endtime="20170809 23:02:40.523" starttime="20170809 23:02:40.521"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170809 23:02:40.524" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 23:02:40.525" starttime="20170809 23:02:40.523"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:40.525" starttime="20170809 23:02:40.513"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:40.525" starttime="20170809 23:02:28.369"></status>
</kw>
<status status="PASS" endtime="20170809 23:02:40.525" starttime="20170809 23:02:28.363"></status>
</kw>
<doc>Initiate a code update on the BMC.</doc>
<tags>
<tag>Initiate_Code_Update_BMC</tag>
</tags>
<status status="FAIL" endtime="20170809 23:02:40.526" critical="yes" starttime="20170809 22:58:17.018">'Verify error: update: --no-flash --ignore-mount --no-save-files --no-restore-files --no-clean-saved-files
ERROR: Image image-bmc too big for mtd0.
' does not contain 'to apply'</status>
</test>
<doc>Trigger code update to a target BMC.
Execution Method :
python -m robot -v OPENBMC_HOST:&lt;hostname&gt;
-v FILE_PATH:&lt;path/*all.tar&gt; update_bmc.robot

Code update method BMC using REST
Update work flow sequence:
- User input BMC File existence check
- Ping Test and REST authentication
- Set Host Power host setting Policy to RESTORE_LAST_STATE
On reboot this policy would ensure the BMC comes
online and stays at HOST_POWERED_OFF state.
- Issue poweroff
- Prune archived journal logs
- Prepare for Update
- Wait for BMC to come online clean
- Wait for BMC_READY state
- Apply preserve BMC Network setting
- SCP image to BMC
- Activate the flash image
- Warm Reset BMC to activate code
- Wait for BMC to come online time out 30 minutes
- Version check post update
- Identify REST url post update</doc>
<status status="FAIL" endtime="20170809 23:02:40.527" starttime="20170809 22:58:16.097"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">Initiate_Code_Update_BMC</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Update Bmc" pass="0">Update Bmc</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20170809 22:58:36.906" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff7c5ead50&gt;: Failed to establish a new connection: [Errno 111] Connection refused',)': /login</msg>
<msg timestamp="20170809 22:58:37.108" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff7c5eae50&gt;: Failed to establish a new connection: [Errno 111] Connection refused',)': /login</msg>
<msg timestamp="20170809 22:58:37.510" level="WARN">Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff7c5eab10&gt;: Failed to establish a new connection: [Errno 111] Connection refused',)': /login</msg>
<msg timestamp="20170809 22:59:15.553" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff7c57fd10&gt;: Failed to establish a new connection: [Errno 113] No route to host',)': /login</msg>
<msg timestamp="20170809 22:59:18.753" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff7c57f150&gt;: Failed to establish a new connection: [Errno 113] No route to host',)': /login</msg>
<msg timestamp="20170809 22:59:21.953" level="WARN">Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff7c57f790&gt;: Failed to establish a new connection: [Errno 113] No route to host',)': /login</msg>
</errors>
</robot>
